{"task_id": "JavaScript/0", "prompt": "/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const difference = lastElement - firstElement;\n  const threshold = Math.abs(threshold);\n  return difference < threshold;\n};\n\n/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_close = false;\n  let current_group_open_brace = false;\n  let current_group_close_brace = false;\n  let current_group_open_brace_or_close = false;\n  let current_group_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open_brace_or_close_or_open = false;\n  let current_group_open_brace_or_close_or_open_brace_or_close_or_open_brace_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu rn string.length <= 1? string : string.substr(0, string.length / 2) + string.substr(string.length / 2, string.length) + string.substr(0, string.length / 2);\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  retu r", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ra", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let xx = x;\n  let yy = y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;\n  let yy = y * y;\n  let xy = x * y;\n  let xx = x * x;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  if (sum > n) {\n    return -1;\n  }\n  let avg = sum / count;\n  let binary = \"\";\n  while (avg > 1) {\n    binary = binary + \"1\";\n    avg = Math.floor(avg / 2);\n  }\n  while (avg < 1) {\n    binary = binary + \"0\";\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n};\n\n/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  if (sum > n) {\n    return -1;\n  }\n  let avg = sum / count;\n  let binary = \"\";\n  while (avg > 1) {\n    binary = binary + \"1\";\n    avg = Math.floor(avg / 2);\n  }\n  while (avg < 1) {\n    binary = binary + \"0\";\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n};\n\n/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  if (sum > n) {\n    return -1;\n  }\n  let avg = sum / count;\n  let binary = \"\";\n  while (avg > 1) {\n    binary = binary + \"1\";\n    avg = Math.floor(avg / 2);\n  }\n  while (avg < 1) {\n    binary = binary + \"0\";\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n};\n\n/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  if (sum > n) {\n    return -1;\n  }\n  let avg = sum / count;\n  let binary = \"\";\n  while (avg > 1) {\n    binary = binary + \"1\";\n    avg = Math.floor(avg / 2);\n  }\n  while (avg < 1) {\n    binary = binary + \"0\";\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n};\n\n/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  if (sum > n) {\n    return -1;\n  }\n  let avg = sum / count;\n  let binary = \"\";\n  while (avg > 1) {\n    binary = binary + \"1\";\n    avg = Math.floor(avg / 2);\n  }\n  while (avg < 1) {\n    binary = binary + \"0\";\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n};\n\n/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  if (sum > n) {\n    return -1;\n  }\n  let avg = sum / count;\n  let binary = \"\";\n  while (avg > 1) {\n    binary = binary + \"1\";\n    avg = Math.floor(avg / 2);\n  }\n  while (avg < 1) {\n    binary = binary + \"0\";\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n};\n\n/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};\n\n/*Given a list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = [];\n  x.forEach((el) => {\n    if (el % 2 === 0) {\n      ans.push(el);\n    }\n  });\n  return ans;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray , and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\" ,  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength2 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength3 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength4 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength5 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength6 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength7 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength8 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => \"Five\")\n       .replace(/^./, () => \"Six\")\n       .replace(/^./, () => \"Seven\")\n       .replace(/^./, () => \"Eight\")\n       .replace(/^./, () => \"Nine\")\n    );\n  }\n  return result;\n};\n\nconst byLength9 = arr => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(\n      reversed[i]\n       .toString()\n       .replace(/^./, () => \"One\")\n       .replace(/^./, () => \"Two\")\n       .replace(/^./, () => \"Three\")\n       .replace(/^./, () => \"Four\")\n       .replace(/^./, () => ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function g that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the g actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function h that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the h actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function i that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the i actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function j that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the j actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function k that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the k actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function l that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the l actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function m that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the m actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function n that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the n actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function o that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the o actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));\n  }\n  return res;\n};\n\n/* Implement the function p that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the p actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(factorial(i));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1 , n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array(n).fill(0).map(() => 0);\n  const oddPalindromes = Array(n).fill(0).map(() => 0);\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0;\n    if (isEven) {\n      evenPalindromes[i - 1]++;\n      evenCount++;\n    } else {\n      oddPalindromes[i - 1]++;\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array(n).fill(0).map(() => 0);\n  const oddPalindromes = Array(n).fill(0).map(() => 0);\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0;\n    if (isEven) {\n      evenPalindromes[i - 1]++;\n      evenCount++;\n    } else {\n      oddPalindromes[i - 1]++;\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array(n).fill(0).map(() => 0);\n  const oddPalindromes = Array(n).fill(0).map(() => 0);\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0;\n    if (isEven) {\n      evenPalindromes[i - 1]++;\n      evenCount++;\n    } else {\n      oddPalindromes[i - 1]++;\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array(n).fill(0).map(() => 0);\n  const oddPalindromes = Array(n).fill(0).map(() => 0);\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0;\n    if (isEven) {\n      evenPalindromes[i - 1]++;\n      evenCount++;\n    } else {\n      oddPalindromes[i - 1]++;\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array(n).fill(0).map(() => 0);\n  const oddPalindromes = Array(n).fill(0).map(() => 0);\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0;\n    if (isEven) {\n      evenPalindromes[i - 1]++;\n      evenCount++;\n    } else {\n      oddPalindromes[i - 1]++;\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[ 2 ], ..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[ 2 ],..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  if (n === 0) return true;\n  if (n === 1) return false;\n  let i = n - 1;\n  while (i >= 0) {\n    if (arr[i] > arr[i + 1]) {\n      arr[i] = arr[i + 1];\n      arr[i + 1] = 0;\n      i--;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if a given string is a palindrome and false otherwise.\n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palindrome is a string that reads the same backward as forward.\n  \n  A palin", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index i is replaced by the character at index i+1 of\n  the original string. For example, if s = 'abc' and c = 'd', the result\n  would be 'abd'. Assume that the original string is null terminated.\n  >>> stringReplace('abc', 'c', 'd')\n  'abd'\n  */\nconst stringReplace = (s, c, d) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    res += s.charAt(i);\n    res += d.charAt(i);\n  }\n  return res;\n};\n\n/* Given a string and a character c, return a new string where the\n  character at index ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\" .\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNumbers = false;\n  let evenNumbersCount = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNumbers = true;\n      evenNumbersCount++;\n    }\n  }\n  if (evenNumbersCount === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n// TESTS\nconst tests = [\n  [\"exchange([1,2,3,4,5],[2,3,4,5,6])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,5,3,4,6])\", \"NO\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange([1,2,3,4,5],[1,2,3,4,5])\", \"YES\"],\n  [\"exchange", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, you have to delete all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, you have to delete all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, you have to delete all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, you have to delete all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, you have to delete all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, you have to delete all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let result = '';\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n    } else {\n      check = true;\n    }\n  }\n  if (check === true) {\n    return (result, true);\n  } else {\n    return (result, false);\n  }\n};\n\n/*Task\n You are given two strings s and c, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        count++;\n      }\n    }\n    oddCountArr.push(count);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consist t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consist t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consist t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consist t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consist t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(count);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consist t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    evenCountArr.push(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n};\n// console.log(maxFill(grid, capacity));\nmodule.exports = {\n    maxFill,\n};\n\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar maxFill = function(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n};\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value. This helps future readers to learn from your answer and apply it to their own code. SO is not a coding service, but a resource for knowledge. Also, high quality, complete answers are more likely to be upvoted. These features, along with the requirement that all posts are self-contained, are some of the strengths of SO as a platform, that differentiates it from forums. You can edit to add additional info &/or to supplement your explanations with source documentation.\n<|/ c |>\n<| a |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n}\n</code>\n<|/ a tags=javascript,algorithm dscore=0 |>\n<| a |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n}\n</code>\n<|/ a dscore=0 tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n        if (bucket.every((v) => v === capacity)) {\n            count += 1;\n        }\n    });\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxFill(grid, capacity) {\n    let count = 0;\n    const buckets = grid.map((row, i) => {\n        const bucket = new Array(capacity).fill(0);\n        row.forEach((_, j) => {\n            bucket[j] += 1;\n        });\n        return bucket;\n    });\n    buckets.forEach((bucket, index) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.filter((x) => x > 0);\n  const dec = ones.length;\n  const rt = arr.filter((x) => x < 0);\n  const res = [];\n  let i = 0;\n  while (i < dec) {\n    if (ones[i] === 1) {\n      res.push(rt[i]);\n      i++;\n    } else {\n      res.push(ones[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all numbers in an array.\n It mustbe implemented like this :\n  >>> findDivisibleByAll([1, 2, 3, 4, 5]) == [1, 5]\n  >>> findDivisibleByAll([-2, -3, -4, -5, -6]) == [-2, -3]\n  >>> findDivisibleByAll([1, 0, 2, 3, 4]) == []\n  */\nconst findDivisibleByAll = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % arr.length === 0) res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  In this Kata, you have to find all numbers that are divisible by all number", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;\n};\n\n/*\n  Given a string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      list.push(s.slice(0, i));\n    }\n  }\n  return list;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCount2 = vowelsCount - 1;\n  let vowelsCount3 = vowelsCount - 2;\n  let vowelsCount4 = vowelsCount - 3;\n  let vowelsCount5 = vowelsCount - 4;\n  let vowelsCount6 = vowelsCount - 5;\n  let vowelsCount7 = vowelsCount - 6;\n  let vowelsCount8 = vowelsCount - 7;\n  let vowelsCount9 = vowelsCount - 8;\n  let vowelsCount10 = vowelsCount - 9;\n  let vowelsCount11 = vowelsCount - 10;\n  let vowelsCount12 = vowelsCount - 11;\n  let vowelsCount13 = vowelsCount - 12;\n  let vowelsCount14 = vowelsCount - 13;\n  let vowelsCount15 = vowelsCount - 14;\n  let vowelsCount16 = vowelsCount - 15;\n  let vowelsCount17 = vowelsCount - 16;\n  let vowelsCount18 = vowelsCount - 17;\n  let vowelsCount19 = vowelsCount - 18;\n  let vowelsCount20 = vowelsCount - 19;\n  let vowelsCount21 = vowelsCount - 20;\n  let vowelsCount22 = vowelsCount - 21;\n  let vowelsCount23 = vowelsCount - 22;\n  let vowelsCount24 = vowelsCount - 23;\n  let vowelsCount25 = vowelsCount - 24;\n  let vowelsCount26 = vowelsCount - 25;\n  let vowelsCount27 = vowelsCount - 26;\n  let vowelsCount28 = vowelsCount - 27;\n  let vowelsCount29 = vowelsCount - 28;\n  let vowelsCount30 = vowelsCount - 29;\n  let vowelsCount31 = vowelsCount - 30;\n  let vowelsCount32 = vowelsCount - 31;\n  let vowelsCount33 = vowelsCount - 32;\n  let vowelsCount34 = vowelsCount - 33;\n  let vowelsCount35 = vowelsCount - 34;\n  let vowelsCount36 = vowelsCount - 35;\n  let vowelsCount37 = vowelsCount - 36;\n  let vowelsCount38 = vowelsCount - 37;\n  let vowelsCount39 = vowelsCount - 38;\n  let vowelsCount40 = vowelsCount - 39;\n  let vowelsCount41 = vowelsCount - 40;\n  let vowelsCount42 = vowelsCount - 41;\n  let vowelsCount43 = vowelsCount - 42;\n  let vowelsCount44 = vowelsCount - 43;\n  let vowelsCount45 = vowelsCount - 44;\n  let vowelsCount46 = vowelsCount - 45;\n  let vowelsCount47 = vowelsCount - 46;\n  let vowelsCount48 = vowelsCount - 47;\n  let vowelsCount49 = vowelsCount - 48;\n  let vowelsCount50 = vowelsCount - 49;\n  let vowelsCount51 = vowelsCount - 50;\n  let vowelsCount52 = vowelsCount - 51;\n  let vowelsCount53 = vowelsCount - 52;\n  let vowelsCount54 = vowelsCount - 53;\n  let vowelsCount55 = vowelsCount - 54;\n  let vowelsCount56 = vowelsCount - 55;\n  let vowelsCount57 = vowelsCount - 56;\n  let vowelsCount58 = vowelsCount - 57;\n  let vowelsCount59 = vowelsCount - 58;\n  let vowelsCount60 = vowelsCount - 59;\n  let vowelsCount61 = vowelsCount - 60;\n  let vowelsCount62 = vowelsCount - 61;\n  let vowelsCount63 = vowelsCount - 62;\n  let vowelsCount64 = vowelsCount - 63;\n  let vowelsCount65 = vowelsCount - 64;\n  let vowelsCount66 = vowelsCount - 65;\n  let vowelsCount67 = vowelsCount - 66;\n  let vowelsCount68 = vowelsCount - 67;\n  let vowelsCount69 = vowelsCount - 68;\n  let vowelsCount70 = vowelsCount - 69;\n  let vowelsCount71 = vowelsCount - 70;\n  let vowelsCount72 = vowelsCount - 71;\n  let vowelsCount73 = vowelsCount - 72;\n  let vowelsCount74 = vowelsCount - 73;\n  let vowelsCount75 = vowelsCount - 74;\n  let vowelsCount76 = vowelsCount - 75;\n  let vowelsCount77 = vowelsCount - 76;\n  let vowelsCount78 = vowelsCount - 77;\n  let vowelsCount79 = vowelsCount - 78;\n  let vowelsCount80 = vowelsCount - 79;\n  let vowelsCount81 = vowelsCount - 80;\n  let vowelsCount82 = vowelsCount - 81;\n  let vowelsCount83 = vowelsCount - 82;\n  let vowelsCount84 = vowelsCount - 83;\n  let vowelsCount85 = vowelsCount - 84;\n  let vowelsCount86 = vowelsCount - 85;\n  let vowelsCount87 = vowelsCount - 86;\n  let vowelsCount88 = vowelsCount - 87;\n  let vowelsCount89 = vowelsCount - 88;\n  let vowelsCount90 = vowelsCount - 89;\n  let vowelsCount91 = vowelsCount - 90;\n  let vowelsCount92 = vowelsCount - 91;\n  let vowelsCount93 = vowelsCount - 92;\n  let vowelsCount94 = vowelsCount - 93;\n  let vowelsCount95 = vowelsCount - 94;\n  let vowelsCount96 = vowelsCount - 95;\n  let vowelsCount97 = vowelsCount - 96;\n  let vowelsCount98 = vowelsCount - 97;\n  let vowelsCount99 = vowelsCount - 98;\n  let vowelsCount100 = vowelsCount - 99;\n  let vowelsCount101 = vowelsCount - 100;\n  let vowelsCount102 = vowelsCount - 101;\n  let vowelsCount103 = vowelsCount - 102;\n  let vowelsCount104 = vowelsCount - 103;\n  let vowelsCount105 = vowelsCount - 104;\n  let vowelsCount106 = vowelsCount - 105;\n  let vowelsCount107 = vowelsCount ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string s  consist of open\n parenth eses ' (' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both string s  consist of open\n parenth eses'(' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      let top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T. Write a function that will return\n true if and only if you can make T from S by removing some characters from S.\n For example, given S = '(()())' and T = '()', the function should return true.\n Given S = '(()())' and T = '(', the function should return false.\n Given S = '(()())' and T = '(()', the function should return false.\n Given S = '(()())' and T = '(()())', the function should return true.\n Given S = '(()())' and T = '(()())(', the function should return false.\n Given S = '(()())' and T = '()(', the function should return false.\n Given S = '(()())' and T = '()()', the function should return true.\n Given S = '(()())' and T = '()()()', the function should return false.\n Given S = '(()())' and T = '()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()()', the function should return false.\n Given S = '(()())' and T = '()()()()()()()()()()()()()()()()()()()()', the function should return true.\n Given S = '(()())' and T = '()()()()()()()()()()()()", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.reduce((longest, str) => {\n    return str.length > longest.length? str : longest\n  }, '')\n}\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     }\n//   })\n//   return longest\n// }\n\n// const longest = (strings) => {\n//   let longest = ''\n//   strings.forEach((str) => {\n//     if (str.length > longest.length) {\n//       longest = str\n//     ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => a - b)\n  }\n  return li\n}\n\nexport { maximum, maximum2, maximum3 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum2 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - a)\n  }\n  return li\n}\n\nexport { maximum2, maximum3 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum3 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - a)\n  }\n  return li\n}\n\nexport { maximum3, maximum4 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum4 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - a)\n  }\n  return li\n}\n\nexport { maximum4, maximum5 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum5 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - a)\n  }\n  return li\n}\n\nexport { maximum5, maximum6 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum6 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - a)\n  }\n  return li\n}\n\nexport { maximum6, maximum7 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum7 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - a)\n  }\n  return li\n}\n\nexport { maximum7, maximum8 }\n\n/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum8 = (arr, k) => {\n  let li = []\n  for (let i = 0; i < k; i++) {\n    li[i] = Math.max(...arr)\n    arr.sort((a, b) => b - ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been incremented by 1.\n\n  Examples\n  increment([]) ==> []\n  increment([1]) ==> [1]\n  increment([1,2]) ==> [2,3]\n  increment([1,2,3]) ==> [2,3,4]\n  increment([1,2,3,4]) ==> [3,4,5]\n  increment([1,2,3,4,5]) ==> [4,5,6]\n  increment([1,2,3,4,5,6]) ==> [5,6,7]\n  increment([1,2,3,4,5,6,7,8]) ==> [6,7,8,9]\n  */\nconst increment = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] + 1);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been decremented by 1.\n\n  Examples\n  decrement([]) ==> []\n  decrement([1]) ==> [1]\n  decrement([1,2]) ==> [1,2]\n  decrement([1,2,3]) ==> [1,2,3]\n  decrement([1,2,3,4]) ==> [1,2,3,4]\n  decrement([1,2,3,4,5]) ==> [1,2,3,4,5]\n  decrement([1,2,3,4,5,6]) ==> [1,2,3,4,5,6]\n  decrement([1,2,3,4,5,6,7,8]) ==> [1,2,3,4,5,6,7,8]\n  */\nconst decrement = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] - 1);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been multiplied by 2.\n\n  Examples\n  multiply([]) ==> []\n  multiply([1]) ==> [1]\n  multiply([1,2]) ==> [1,2]\n  multiply([1,2,3]) ==> [1,2,3]\n  multiply([1,2,3,4]) ==> [1,2,3,4]\n  multiply([1,2,3,4,5]) ==> [1,2,3,4,5]\n  multiply([1,2,3,4,5,6]) ==> [1,2,3,4,5,6]\n  multiply([1,2,3,4,5,6,7,8]) ==> [1,2,3,4,5,6,7,8]\n  */\nconst multiply = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] * 2);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been divided by 2.\n\n  Examples\n  divide([]) ==> []\n  divide([1]) ==> [1]\n  divide([1,2]) ==> [1,2]\n  divide([1,2,3]) ==> [1,2,3]\n  divide([1,2,3,4]) ==> [1,2,3,4]\n  divide([1,2,3,4,5]) ==> [1,2,3,4,5]\n  divide([1,2,3,4,5,6]) ==> [1,2,3,4,5,6]\n  divide([1,2,3,4,5,6,7,8]) ==> [1,2,3,4,5,6,7,8]\n  */\nconst divide = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] / 2);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been added with 3.\n\n  Examples\n  add([]) ==> []\n  add([1]) ==> [1]\n  add([1,2]) ==> [2,3]\n  add([1,2,3]) ==> [3,4,5]\n  add([1,2,3,4]) ==> [4,5,6]\n  add([1,2,3,4,5]) ==> [5,6,7]\n  add([1,2,3,4,5,6]) ==> [6,7,8]\n  add([1,2,3,4,5,6,7,8]) ==> [7,8,9]\n  */\nconst add = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] + 3);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been subtracted with 3.\n\n  Examples\n  subtract([]) ==> []\n  subtract([1]) ==> [1]\n  subtract([1,2]) ==> [1,2]\n  subtract([1,2,3]) ==> [1,2,3]\n  subtract([1,2,3,4]) ==> [1,2,3,4]\n  subtract([1,2,3,4,5]) ==> [1,2,3,4,5]\n  subtract([1,2,3,4,5,6]) ==> [1,2,3,4,5,6]\n  subtract([1,2,3,4,5,6,7,8]) ==> [1,2,3,4,5,6,7,8]\n  */\nconst subtract = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] - 3);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been multiplied by 3.\n\n  Examples\n  multiply([]) ==> []\n  multiply([1]) ==> [1]\n  multiply([1,2]) ==> [1,2]\n  multiply([1,2,3]) ==> [1,2,3]\n  multiply([1,2,3,4]) ==> [1,2,3,4]\n  multiply([1,2,3,4,5]) ==> [1,2,3,4,5]\n  multiply([1,2,3,4,5,6]) ==> [1,2,3,4,5,6]\n  multiply([1,2,3,4,5,6,7,8]) ==> [1,2,3,4,5,6,7,8]\n  */\nconst multiply = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] * 3);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been divided by 3.\n\n  Examples\n  divide([]) ==> []\n  divide([1]) ==> [1]\n  divide([1,2]) ==> [1,2]\n  divide([1,2,3]) ==> [1,2,3]\n  divide([1,2,3,4]) ==> [1,2,3,4]\n  divide([1,2,3,4,5]) ==> [1,2,3,4,5]\n  divide([1,2,3,4,5,6]) ==> [1,2,3,4,5,6]\n  divide([1,2,3,4,5,6,7,8]) ==> [1,2,3,4,5,6,7,8]\n  */\nconst divide = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i] / 3);\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array where each element has been added with 4.\n\n  Examples\n  add([]) ==> []\n  add([1]) ==> [1]\n  add([1,2]) ==> [2,3]\n  add([1,2,3]) ==> [3,4,5]\n  add([1,2,3,4]) ==> [4,5,6]\n  add([1,2,3,4,5]) ==> [5,6,7]\n  add([1,2,3,4,5,6]) ==> [6,7,8]\n  add([1,2,3,4,5,6,7,8]) ==> [7,8,9]\n  */\nconst add = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newAr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 2\n      Output: 18 # sum of 111 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 1\n      Output: 11 # sum of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 0\n      Output: 11 # sum of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = -1\n      Output: 11 # sum of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = -2\n      Output: 11 # sum of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = -3\n      Output: 11 # sum of 111 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sumof the  elements witha t most two dig its from the", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238 = [];\n  let arr239 = [];\n  let arr240 = [];\n  let arr241 = [];\n  let arr242 = [];\n  let arr243 = [];\n  let arr244 = [];\n  let arr245 = [];\n  let arr246 = [];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2 .\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2.\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.split('/');\n  const [day, month, year] = date.split('-');\n  const [day, month, year] = date.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1, ... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma2 = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma3 = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma4 = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma5 = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsComma6 = (txt) => {\n  const words = txt.split(\" \");\n  const noWhites = txt.split(\"\").filter((char) => char!== \" \").join(\"\");\n  const noCommas = noWhites.split(\",\").join(\"\");\n  return words.filter((word) => word!== noCommas);\n};\n\n/* Given a string of words, return a list of wordss split on whitespace and commas, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedReverse = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedReversed = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedReversedd = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedReverseddd = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedReversedddd = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i > 0; i--) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedReverseeeee = (lst) => {\n  let sorted = true;\n  for (let i = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return false\n  }\n  if (interval1[1] < interval2[0]) {\n    return false\n  }\n  if (interval1[0] === interval2[0]) {\n    return true\n  }\n  if (interval1[1] === interval2[1]) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return false\n  }\n  if (interval1[1] < interval2[0]) {\n    return false\n  }\n  if (interval1[0] === interval2[0]) {\n    return true\n  }\n  if (interval1[1] === interval2[1]) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return false\n  }\n  if (interval1[1] < interval2[0]) {\n    return false\n  }\n  if (interval1[0] === interval2[0]) {\n    return true\n  }\n  if (interval1[1] === interval2[1]) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return false\n  }\n  if (interval1[1] < interval2[0]) {\n    return false\n  }\n  if (interval1[0] === interval2[0]) {\n    return true\n  }\n  if (interval1[1] === interval2[1]) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return false\n  }\n  if (interval1[1] < interval2[0]) {\n    return false\n  }\n  if (interval1[0] === interval2[0]) {\n    return true\n  }\n  if (interval1[1] === interval2[1]) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B) , lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B), lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(m).fill(false);\n  const path = new Array(k).fill(0);\n  path[0] = 1;\n  visited[0] = true;\n  let minPath = [];\n  for (let i = 1; i < k; i++) {\n    const curr = path[i];\n    const next = [];\n    for (let j = 0; j < m; j++) {\n      if (visited[j]) {\n        next.push(j);\n      }\n    }\n    if (next.length === 0) {\n      minPath.push(curr);\n    } else {\n      visited[next[0]] = true;\n      path[i] = curr + (next.length - 1);\n      minPath = minPath.concat(next);\n    }\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B), lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath2 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(m).fill(false);\n  const path = new Array(k).fill(0);\n  path[0] = 1;\n  visited[0] = true;\n  let minPath = [];\n  for (let i = 1; i < k; i++) {\n    const curr = path[i];\n    const next = [];\n    for (let j = 0; j < m; j++) {\n      if (visited[j]) {\n        next.push(j);\n      }\n    }\n    if (next.length === 0) {\n      minPath.push(curr);\n    } else {\n      visited[next[0]] = true;\n      path[i] = curr + (next.length - 1);\n      minPath = minPath.concat(next);\n    }\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B), lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath3 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(m).fill(false);\n  const path = new Array(k).fill(0);\n  path[0] = 1;\n  visited[0] = true;\n  let minPath = [];\n  for (let i = 1; i < k; i++) {\n    const curr = path[i];\n    const next = [];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Checks if the given string is a valid UUID.\n *\n * @param {string} uuid The string to validate.\n * @returns {boolean} `true` if the string is a valid UUID, `false` otherwise.\n */\nconst isValidUuid = uuid => {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(uuid);\n};\n\n/**\n * Generates a UUID.\n *\n * @returns {string} A generated UUID.\n */\nconst generateUuid = () => {\n  const result = ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n    (\n      c ^\n      (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n    ).toString(16)\n  );\n\n  return result\n   .replace(/^0+/, \"\")\n   .toUpperCase();\n};\n\n/**\n * Converts a UUID to an ArrayBuffer.\n *\n * @param {string} uuid The UUID to convert.\n * @returns {ArrayBuffer} The UUID converted to an ArrayBuffer.\n */\nconst uuidToArrayBuffer = uuid => {\n  const bytes = new Uint8Array(16);\n  crypto.getRandomValues(bytes);\n\n  return bytes.buffer;\n};\n\n/**\n * Converts an ArrayBuffer to an UUID.\n *\n * @param {ArrayBuffer} arrayBuffer The ArrayBuffer to convert.\n * @returns {string} The UUID converted from an ArrayBuffer.\n */\nconst arrayBufferToUuid = arrayBuffer => {\n  const bytes = new Uint8Array(arrayBuffer);\n  const byteArray = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    byteArray[i] = bytes[i];\n  }\n\n  return bytes\n   .toString(16)\n   .toUpperCase();\n};\n\n/**\n * Converts a UUID to an hex encoded string.\n *\n * @param {string} uuid The UUID to convert.\n * @returns {string} The UUID converted to a hex encoded string.\n */\nconst uuidToHexString = uuid => {\n  const bytes = new Uint8Array(16);\n  crypto.getRandomValues(bytes);\n\n  return bytes\n   .toString(16)\n   .padStart(8, \"0\")\n   .toUpperCase();\n};\n\n/**\n * Converts a hex encoded string to a UUID.\n *\n * @param {string} hex The hex encoded string to convert.\n * @returns {string} The UUID converted from a hex encoded string.\n */\nconst hexStringToUuid = hex => {\n  if (!isValidUuid(hex)) {\n    throw new Error(\"Invalid UUID format\");\n  }\n\n  const bytes = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = parseInt(hex.substr(i * 2, 2), 16);\n  }\n\n  return bytes\n   .toString(16)\n   .padStart(8, \"0\")\n   .toUpperCase();\n};\n\n/**\n * Converts a UUID to a MongoDB ObjectId.\n *\n * @param {string} uuid The UUID to convert.\n * @returns {object} The MongoDB ObjectId.\n */\nconst uuidToObjectId = uuid => {\n  if (!isValidUuid(uuid)) {\n    throw new Error(\"Invalid UUID format\");\n  }\n\n  return new ObjectID(uuid);\n};\n\n/**\n * Converts a MongoDB ObjectId to a UUID.\n *\n * @param {object} objectId The MongoDB ObjectId to convert.\n * @returns {object} The UUID generated from the ObjectId.\n */\nconst objectIdToUuid = objectId => {\n  if (!(objectId instanceof ObjectID)) {\n    throw new Error(\"Invalid UUID format\");\n  }\n\n  return objectId.toHexString();\n};\n\n/**\n * Checks if a value is a valid bson UUID.\n *\n * @param {object} uuid The value to check.\n * @returns {boolean} `true` if the value is a valid bson UUID, `false` otherwise.\n */\nconst isValidUuid$1 = uuid => {\n  return typeof uuid === \"string\" && uuid.length === 12 && isValidUuid(uuid);\n};\n\n/**\n * Checks if a given value is a valid bson ObjectId.\n *\n * @param {object} objectId The value to check.\n * @returns {boolean} `true` if the value is a valid bson ObjectId, `false` otherwise.\n */\nconst isValidObjectId = objectId => {\n  if (!objectId || typeof objectId!== \"object\") {\n    return false;\n  }\n\n  if (objectId instanceof ObjectID || objectId instanceof DB_ObjectID) {\n    return true;\n  }\n\n  const objectIdString = objectId.toString();\n  const objectIdNumber = parseInt(objectIdString, 10);\n\n  if (isNaN(objectIdNumber)) {\n    return false;\n  }\n\n  if (parseInt(objectIdString, 10) === objectIdNumber) {\n    if (objectIdNumber >= BSON_INT32_MIN && objectIdNumber <= BSON_INT32_MAX) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if a given value is a valid bson Decimal128.\n *\n * @param {object} decimal128 The value to check.\n * @returns {boolean} `true` if the value is a valid bson Decimal128, `false` otherwise.\n */\nconst isValidDecimal128 = decimal128 => {\n  if (!decimal128 || typeof decimal128!== \"object\") {\n    return false;\n  }\n\n  if (decimal128 instanceof Decimal128 || decimal128 instanceof C_Decimal128) {\n    return true;\n  }\n\n  if (decimal128[\"toNumber\"] && typeof decimal128[\"toNumber\"] === \"function\") {\n    if (decimal128[\"toNumber\"]() instanceof BigNumber) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if a given value is a valid bson BigDecimal.\n *\n * @param {object} bigDecimal The value to check.\n * @returns {boolean} `true` if the value is a valid bson BigDecimal, `false` otherwise.\n */\nconst isValidBigDecimal = bigDecimal => {\n  if (!bigDecimal || typeof bigDecimal!== \"object\") {\n    return false;\n  }\n\n  if (bigDecimal instanceof BigDecimal || bigDecimal instanceof C_Decimal128) {\n    return true;\n  }\n\n  if (bigDecimal[\"toNumber\"] && typeof bigDecimal[\"toNumber\"] === \"function\") {\n    if (bigDecimal[\"toNumber\"]() instanceof BigNumber) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if a given value is a valid bson Int.\n *\n * @param {object} int The value to check.\n * @returns {boolean} `true` if the value is a valid bson Int, `false` otherwise.\n */\nconst isValidInt = int => {\n  if (!int || typeof int!== \"object\") {\n    return false;\n  }\n\n  if (int instanceof Int || int instanceof C_Int) {\n    return true;\n  }\n\n  if (int[\"toNumber\"] && typeof int[\"toNumber\"] === \"function\") {\n    if (int[\"toNumber\"]() instanceof BigNumber) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if a given value is a valid bson Double.\n *\n * @param {object} double The value to check.\n * @returns {boolean} `true` if the value is a valid bson Double, `false` otherwise.\n */\nconst isValidDouble = double => {\n  if (!double || typeof double!== \"object\") {\n    return false;\n  }\n\n  if (double instanceof Double || double instanceof C_Double) {\n    return true;\n  }\n\n  if (double[\"toNumber\"] && typeof double[\"toNumber\"] === \"function\") {\n    if (double[\"toNumber\"]() instanceof BigNumber) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if a given value is a valid ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  if (n % 2 === 0) {\n    arr.push(a);\n    arr.push(b);\n    arr.push(c);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(a);\n      arr.push(b);\n      arr.push(c);\n      a = b;\n      b = c;\n      c = a + b;\n    }\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Spiral sequence.\n  S piral se qu ence is defined by the re currence:\n  spiral(1) = 1\n  spiral(n) = 2  + n / 2, if n is even.\n  spiral(n) =  spiral(n - 1 )  + spiral(n - 2) + spiral(n + 1), if n isodd.\n  For example:\n  spiral(2) = 1 + (2 / 2) = 2\n  spiral(4) = 3\n  spiral(3) = spiral(2) + spiral(1) + spiral(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 3, 2, 8]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  if (n % 2 === 0) {\n    arr.push(a);\n    arr.push(b);\n    arr.push(c);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(a);\n      arr.push(b);\n      arr.push(c);\n      a = b;\n      b = c;\n      c = a + b;\n    }\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral2 sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Spiral2 sequence.\n  S piral2 se qu ence is defined by the re currence:\n  spiral2(1) = 1\n  spiral2(n) = 2  + n / 2, if n is even.\n  spiral2(n) =  spiral2(n - 1 )  + spiral2(n - 2) + spiral2(n + 1), if n isodd.\n  For example:\n  spiral2(2) = 1 + (2 / 2) = 2\n  spiral2(4) = 3\n  spiral2(3) = spiral2(2) + spiral2(1) + spiral2(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral2 sequence.\n  Examples:\n  spiral2(3) = [1, 3, 2, 8]\n  */\nconst spiral2 = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  if (n % 2 === 0) {\n    arr.push(a);\n    arr.push(b);\n    arr.push(c);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(a);\n      arr.push(b);\n      arr.push(c);\n      a = b;\n      b = c;\n      c = a + b;\n    }\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral3 sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Spiral3 sequence.\n  S piral3 se qu ence is defined by the re currence:\n  spiral3(1) = 1\n  spiral3(n) = 2  + n / 2, if n is even.\n  spiral3(n) =  spiral3(n - 1 )  + spiral3(n - 2) + spiral3(n + 1), if n isodd.\n  For example:\n  spiral3(2) = 1 + (2 / 2) = 2\n  spiral3(4) = 3\n  spiral3(3) = spiral3(2) + spiral3(1) + spiral3(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral3 sequence.\n  Examples:\n  spiral3(3) = [1, 3, 2, 8]\n  */\nconst spiral3 = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  if (n % 2 === 0) {\n    arr.push(a);\n    arr.push(b);\n    arr.push(c);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(a);\n      arr.push(b);\n      arr.push(c);\n      a = b;\n      b = c;\n      c = a + b;\n    }\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral4 sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Spiral4 sequence.\n  S piral4 se qu ence is defined by the re currence:\n  spiral4(1) = 1\n  spiral4(n) = 2  + n / 2, if n is even.\n  spiral4(n) =  spiral4(n - 1 )  + spiral4(n - 2) + spiral4(n + 1), if n isodd.\n  For example:\n  spiral4(4) = 3\n  spiral4(3) = spiral4(2) + spiral4(1) + spiral4(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral4 sequence.\n  Examples:\n  spiral4(3) = [1, 3, 2, 8]\n  */\nconst spiral4 = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  if (n % 2 === 0) {\n    arr.push(a);\n    arr.push(b);\n    arr.push(c);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(a);\n      arr.push(b);\n      arr.push(c);\n      a = b;\n      b = c;\n      c = a + b;\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 10\n  */\nconst evenDigits = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      sum += n;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst oddDigits = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 2!== 0) {\n      sum += n;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange2 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange3 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange4 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange5 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange6 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange7 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange8 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange9 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange10 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 0\n  digits(235) == 5\n  */\nconst digitRange11 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n >= 10) {\n      sum += n % 10;\n    }\n    n /= 10;\n    i++;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits in the range [1..n].\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 0\n  digits(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[] ' ) ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n  const arr =  string.split('')\n  const len = arr.length\n  const arr2 = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t ,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t';\n};\n\n/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array will contain only unique values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = true\n  canArrange([1,2,3]) = false\n  */\nconst canArrange = (arr) => {\n  let isPresent = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i]) {\n      isPresent = true;\n    }\n  }\n  return isPresent;\n};\n\n/*Create a function which returns true if an element is present in the\n  given array. The given array ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the smallest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the smallest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the smallest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the smallest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be .or ,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a > b) {\n    return 1\n  }\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a < b) {\n    return -1\n  }\n  return 1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a > b) {\n    return 1\n  }\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a < b) {\n    return -1\n  }\n  return 1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a > b) {\n    return 1\n  }\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a < b) {\n    return -1\n  }\n  return 1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a > b) {\n    return 1\n  }\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return 0\n  }\n  if (a < b) {\n    return -1\n  }\n  return 1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e prime numbers\n  Example\n  isEqualToSumPrime(4) == false\n  isEqualToSumPrime(6) == false\n  isEqualToSumPrime(8) == true\n  */\nconst isEqualToSumPrime = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0 && sum > 1;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == false\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0 && sum > 1;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == false\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1) ! * (n -2)! * ... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1)! * (n -2)! *... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial2 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial3 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial4 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial5 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial6 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial7 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial8 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial9 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial10 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial11 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial12 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial13 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial14 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial15 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial16 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial17 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial18 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial19 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial20 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial21 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial22 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n*/\nconst factorial23 = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number\n  Input: n\n  Output: factorial of n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentPrefix) {\n      continue;\n    }\n    currentPrefix = char;\n    prefixes.push(currentPrefix);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest g est of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === currentSuffix) {\n      continue;\n    }\n    currentSuffix = char;\n    suffixes.unshift(currentSuffix);\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest g est of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/* Return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all spaces and replace all spaces with -\n  fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\" Example 2\") == \"Example-2\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representi n g a file's name, and retur ns\n  ' Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt', ' exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.replace(/\\s+/g, '');\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name;\n  if (file_name) {\n    return file_name;\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.replace(/\\s+/g, '');\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name;\n  if (file_name) {\n    return file_name;\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.replace(/\\s+/g, '');\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name;\n  if (file_name) {\n    return file_name;\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.replace(/\\s+/g, '');\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name;\n  if (file_name) {\n    return file_name;\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.replace(/\\s+/g, '');\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name;\n  if (file_name) {\n    return file_name;\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1, -5, 2, -1, -5]));</code>\n<|/ a |>\n<| c |>\nThank you for your answer. Can you please explain me how you came up with this solution?\n<|/ c |>\n<| c |>\nI used the modulo operator to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then I used the modulo operator again to check if a number is divisible by 3 or 4 and then ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i].length;\n    if (num === 1) {\n      primes.push(num);\n    }\n  }\n  const newArr = [];\n  for (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[i]!== primes[j]) {\n        newArr.push(arr[i]);\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i].length;\n    if (num === 1) {\n      primes.push(num);\n    }\n  }\n  const newArr = [];\n  for (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[i]!== primes[j]) {\n        newArr.push(arr[i]);\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i].length;\n    if (num === 1) {\n      primes.push(num);\n    }\n  }\n  const newArr = [];\n  for (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[i]!== primes[j]) {\n        newArr.push(arr[i]);\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i].length;\n    if (num === 1) {\n      primes.push(num);\n    }\n  }\n  const newArr = [];\n  for (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[i]!== primes[j]) {\n        newArr.push(arr[i]);\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i].length;\n    if (num === 1) {\n      primes.push(num);\n    }\n  }\n  const newArr = [];\n  for (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[i]!== primes[j]) {\n        newArr.push(arr[i]);\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i].length;\n    if (num === 1) {\n      primes.push(num);\n    }\n  }\n  const newArr = [];\n  for (let i = 0; i < primes.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[i]!== primes[j]) {\n        newArr.push(arr[i]);\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { \n  \n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplify y = (x, n) => { ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  while (index < nums.length) {\n    sum += nums[index];\n    result.push(nums[index]);\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  return result;\n};\n\n/*\n  Write a function ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenCount++;\n      if (nums[i] % 2 === 1) {\n        firstOddCount++;\n      }\n    } else {\n      oddCount++;\n      if (nums[i] % 2 === 1) {\n        lastOddCount++;\n      }\n    }\n  }\n  if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return evenCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return oddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return firstOddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return lastOddCount;\n  } else {\n    return evenCount;\n  }\n};\n\n/*Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 or 5 but not both.\n  For example:\n  divisibleBy3And5([15, -73, 14, -15]) => [15, -73] \n  divisibleBy3And5([33, -2, -3, 45, 21, 109]) => [21, 45, 109]\n  */\nconst divisibleBy3And5 = (nums) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenCount++;\n      if (nums[i] % 2 === 1) {\n        firstOddCount++;\n      }\n    } else {\n      oddCount++;\n      if (nums[i] % 2 === 1) {\n        lastOddCount++;\n      }\n    }\n  }\n  if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return evenCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return oddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return firstOddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return lastOddCount;\n  } else {\n    return evenCount;\n  }\n};\n\n/*Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 or 5 but not both.\n  For example:\n  divisibleBy3And5([15, -73, 14, -15]) => [15, -73] \n  divisibleBy3And5([33, -2, -3, 45, 21, 109]) => [21, 45, 109]\n  */\nconst divisibleBy3And5 = (nums) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenCount++;\n      if (nums[i] % 2 === 1) {\n        firstOddCount++;\n      }\n    } else {\n      oddCount++;\n      if (nums[i] % 2 === 1) {\n        lastOddCount++;\n      }\n    }\n  }\n  if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return evenCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return oddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return firstOddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return lastOddCount;\n  } else {\n    return evenCount;\n  }\n};\n\n/*Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 or 5 but not both.\n  For example:\n  divisibleBy3And5([15, -73, 14, -15]) => [15, -73] \n  divisibleBy3And5([33, -2, -3, 45, 21, 109]) => [21, 45, 109]\n  */\nconst divisibleBy3And5 = (nums) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenCount++;\n      if (nums[i] % 2 === 1) {\n        firstOddCount++;\n      }\n    } else {\n      oddCount++;\n      if (nums[i] % 2 === 1) {\n        lastOddCount++;\n      }\n    }\n  }\n  if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return evenCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return oddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return firstOddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return lastOddCount;\n  } else {\n    return evenCount;\n  }\n};\n\n/*Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 or 5 but not both.\n  For example:\n  divisibleBy3And5([15, -73, 14, -15]) => [15, -73] \n  divisibleBy3And5([33, -2, -3, 45, 21, 109]) => [21, 45, 109]\n  */\nconst divisibleBy3And5 = (nums) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenCount++;\n      if (nums[i] % 2 === 1) {\n        firstOddCount++;\n      }\n    } else {\n      oddCount++;\n      if (nums[i] % 2 === 1) {\n        lastOddCount++;\n      }\n    }\n  }\n  if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return evenCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return oddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return firstOddCount;\n  } else if (evenCount === nums.length && oddCount === nums.length - 1) {\n    return lastOddCount;\n  } else {\n    return evenCount;\n  }\n};\n\n/*Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 or 5 but not both.\n  For example:\n  divisibleBy3And5([15, -73, 14, -15]) => [15, -73] \n  divisibleBy3And5([33, -2, -3, 45, 21, 109]) => [21, 45, 109]\n  */\nconst divisibleBy3And5 = (nums) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      evenCount++;\n      if (nums[i] % 2 === 1) {\n        firstOddCount++;\n      }\n    } else {\n      oddCount++;\n      if (nums[i] % 2 === 1) {\n        lastOddCount++;\n      }\n    }\n  }\n  if (evenCount === nums.length && odd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = i; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3) {\n          a[i] = a[j];\n          a[j] = a[k];\n          a[k] = i;\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given an integer array nums consisting of n numbers. \n  You have to find the number of triplets (a, b, c) where \n  a^2 + b^2 = c^2 \n  and a, b, c are positive integers.\n\n  Example :\n      Input: nums = [1,2,3]\n      Output: 3\n      Explanation: \n      a^2 + b^2 = c^2 = 9\n      a = 1, b = 2, c = 3\n      a^2 + b^2 = 9^2 = 27\n      a = 1, b = 2, c = 9\n      a^2 + b^2 = 27^2 = 927\n      a = 1, b = 9, c = 27\n      a^2 + b^2 = 927^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^2 + b^2 = 827^2 = 827\n      a = 1, b = 9, c = 827\n      a^", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury , the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury, the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const [planet1a, planet2a] = planet1.split(' ');\n  const [planet1b, planet2b] = planet2.split(' ');\n  const [planet1c, planet2c] = planet1.split(' ');\n  const [planet1d, planet2d] = planet2.split(' ');\n  const [planet1e, planet2e] = planet1.split(' ');\n  const [planet1f, planet2f] = planet2.split(' ');\n  const [planet1g, planet2g] = planet1.split(' ');\n  const [planet1h, planet2h] = planet2.split(' ');\n  const [planet1i, planet2i] = planet1.split(' ');\n  const [planet1j, planet2j] = planet2.split(' ');\n  const [planet1k, planet2k] = planet1.split(' ');\n  const [planet1l, planet2l] = planet2.split(' ');\n  const [planet1m, planet2m] = planet1.split(' ');\n  const [planet1n, planet2n] = planet2.split(' ');\n  const [planet1o, planet2o] = planet1.split(' ');\n  const [planet1p, planet2p] = planet2.split(' ');\n  const [planet1q, planet2q] = planet1.split(' ');\n  const [planet1r, planet2r] = planet2.split(' ');\n  const [planet1s, planet2s] = planet1.split(' ');\n  const [planet1t, planet2t] = planet2.split(' ');\n  const [planet1u, planet2u] = planet1.split(' ');\n  const [planet1v, planet2v] = planet2.split(' ');\n  const [planet1w, planet2w] = planet1.split(' ');\n  const [planet1x, planet2x] = planet2.split(' ');\n  const [planet1y, planet2y] = planet1.split(' ');\n  const [planet1z, planet2z] = planet2.split(' ');\n  const [planet1a, planet2a] = planet1.split(' ');\n  const [planet1b, planet2b] = planet2.split(' ');\n  const [planet1c, planet2c] = planet1.split(' ');\n  const [planet1d, planet2d] = planet2.split(' ');\n  const [planet1e, planet2e] = planet1.split(' ');\n  const [planet1f, planet2f] = planet2.split(' ');\n  const [planet1g, planet2g] = planet1.split(' ');\n  const [planet1h, planet2h] = planet2.split(' ');\n  const [planet1i, planet2i] = planet1.split(' ');\n  const [planet1j, planet2j] = planet2.split(' ');\n  const [planet1k, planet2k] = planet1.split(' ');\n  const [planet1l, planet2l] = planet2.split(' ');\n  const [planet1m, planet2m] = planet1.split(' ');\n  const [planet1n, planet2n] = planet2.split(' ');\n  const [planet1o, planet2o] = planet1.split(' ');\n  const [planet1p, planet2p] = planet2.split(' ');\n  const [planet1q, planet2q] = planet1.split(' ');\n  const [planet1r, planet2r] = planet2.split(' ');\n  const [planet1s, planet2s] = planet1.split(' ');\n  const [planet1t, planet2t] = planet2.split(' ');\n  const [planet1u, planet2u] = planet1.split(' ');\n  const [planet1v, planet2v] = planet2.split(' ');\n  const [planet1w, planet2w] = planet1.split(' ');\n  const [planet1x, planet2x] = planet2.split(' ');\n  const [planet1y, planet2y] = planet1.split(' ');\n  const [planet1z, planet2z] = planet2.split(' ');\n  const [planet1a, planet2a] = planet1.split(' ');\n  const [planet1b, planet2b] = planet2.split(' ');\n  const [planet1c, planet2c] = planet1.split(' ');\n  const [planet1d, planet2d] = planet2.split(' ');\n  const [planet1e, planet2e] = planet1.split(' ');\n  const [planet1f, planet2f] = planet2.split(' ');\n  const [planet1g, planet2g] = planet1.split(' ');\n  const [planet1h, planet2h] = planet2.split(' ');\n  const [planet1i, planet2i] = planet1.split(' ');\n  const [planet1j, planet2j] = planet2.split(' ');\n  const [planet1k, planet2k] = planet1.split(' ');\n  const [planet1l, planet2l] = planet2.split(' ');\n  const [planet1m, planet2m] = planet1.split(' ');\n  const [planet1n, planet2n] = planet2.split(' ');\n  const [planet1o, planet2o] = planet1.split(' ');\n  const [planet1p, planet2p] = planet2.split(' ');\n  const [planet1q, planet2q] = planet1.split(' ');\n  const [planet1r, planet2r] = planet2.split(' ');\n  const [planet1s, planet2s] = planet1.split(' ');\n  const [planet1t, planet2t] = planet2.split(' ');\n  const [planet1u, planet2u] = planet1.split(' ');\n  const [planet1v, planet2v] = plan", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let sortedListLength = 0;\n  lst.forEach((word) => {\n    sortedList.push(word);\n    sortedListLength += word.length;\n  });\n  sortedList.sort((a, b) => {\n    return a.length - b.length;\n  });\n  return sortedList;\n};\n\n/*Write a function that accepts a string and returns a string with all the letters capitalized.\n  You may assume that the string has only letters.\n  For example:\n  assert capitalize(\"hello\") => \"Hello\"\n  assert capitalize(\"aBcDe\") => \"AbcDe\"\n  assert capitalize(\"aBcDeF\") => \"AbcDeF\"\n  assert capitalize(\"aBcDeFg\") => \"AbcDeFg\"\n  assert capitalize(\"aBcDeFgHi\") => \"AbcDeFgHi\"\n  assert capitalize(\"aBcDeFgHiJk\") => \"AbcDeFgHiJk\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!?!?!\") => \"AbcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!?!\"\n  assert capitalize(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ123!?!?!?!?!?!?!?!?!?!?!?!?!\") => \"AbcDeFgHiJkL", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const sumOfSquares = t.reduce((sum, num) => {\n    return sum + Math.pow(num, 2);\n  }, 0);\n  return sumOfSquares - (t.length * sumOfSquares);\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const product = t.reduce((prod, num) => {\n    return prod * num;\n  }, 1);\n  return product;\n};\n\n/* Given a list of numbers, return the sum of all the numbers in the list\n t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const sumOfEven = t.reduce((sum, num) => {\n    return sum + num % 2 === 0;\n  }, 0);\n  return sumOfEven;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const productOfEven = t.reduce((prod, num) => {\n    return prod * num % 2 === 0;\n  }, 1);\n  return productOfEven;\n};\n\n/* Given a list of numbers, return the sum of all the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const sumOfOdd = t.reduce((sum, num) => {\n    return sum + num % 2 === 1;\n  }, 0);\n  return sumOfOdd;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const productOfOdd = t.reduce((prod, num) => {\n    return prod * num % 2 === 1;\n  }, 1);\n  return productOfOdd;\n};\n\n/* Given a list of numbers, return the sum of all the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const sumOfEven = t.reduce((sum, num) => {\n    return sum + num % 2 === 0;\n  }, 0);\n  return sumOfEven;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const productOfEven = t.reduce((prod, num) => {\n    return prod * num % 2 === 0;\n  }, 1);\n  return productOfEven;\n};\n\n/* Given a list of numbers, return the sum of all the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const sumOfOdd = t.reduce((sum, num) => {\n    return sum + num % 2 === 1;\n  }, 0);\n  return sumOfOdd;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n  const productOfOdd = t.reduce((prod, num) => {\n    return prod * num % 2 === 1;\n  }, 1);\n  return productOfOdd;\n};\n\n/* Given a list of numbers, return the sum of all the numbers in the list\n t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known .  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g .\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length , where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not , the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known.  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g.\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length, where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not, the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs;\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== 0);\n};\n\n// another\n\nconst compare = (game, guess) => {\n  const scores = [...game].sort((a, b) => a - b);\n  const guesses = [...guess].sort((a, b) => a - b);\n  const diffs = guesses.map((g, i) => Math.abs(g - scores[i]));\n  return diffs.filter(d => d!== ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM .  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_sm = extension_upper.substr(0, 1);\n    const extension_lower_sm = extension_lower.substr(0, 1);\n    const extension_upper_cap = extension_upper.substr(0, 2);\n    const extension_lower_cap = extension_lower.substr(0, 2);\n    const extension_strength = extension_upper_cap - extension_lower_sm;\n    const extension_strength_lower = extension_lower_cap - extension_upper_sm;\n    if (extension_strength > strongest.length) {\n      strongest = extension;\n    }\n    if (extension_strength_lower > strongest.length) {\n      strongest = extension;\n    }\n  }\n  return strongest;\n};\n\n/*You will be given the nameof a class (a string)a nd a list of extensions. The\n e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_sm = extension_upper.substr(0, 1);\n    const extension_lower_sm = extension_lower.substr(0, 1);\n    const extension_upper_cap = extension_upper.substr(0, 2);\n    const extension_lower_cap = extension_lower.substr(0, 2);\n    const extension_strength = extension_upper_cap - extension_lower_sm;\n    const extension_strength_lower = extension_lower_cap - extension_upper_sm;\n    if (extension_strength > strongest.length) {\n      strongest = extension;\n    }\n    if (extension_strength_lower > strongest.length) {\n      strongest = extension;\n    }\n  }\n  return strongest;\n};\n\n/*You will be given the nameof a class (a string)a nd a list of extensions. The\n e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_sm = extension_upper.substr(0, 1);\n    const extension_lower_sm = extension_lower.substr(0, 1);\n    const extension_upper_cap = extension_upper.substr(0, 2);\n    const extension_lower_cap = extension_lower.substr(0, 2);\n    const extension_strength = extension_upper_cap - extension_lower_sm;\n    const extension_strength_lower = extension_lower_cap - extension_upper_sm;\n    if (extension_strength > strongest.length) {\n      strongest = extension;\n    }\n    if (extension_strength_lower > strongest.length) {\n      strongest = extension;\n    }\n  }\n  return strongest;\n};\n\n/*You will be given the nameof a class (a string)a nd a list of extensions. The\n e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cycpatternCheck = (a, b) => { \n  const pattern = a.split(\"\").filter(c => c === b[0]).join(\"\");\n  return a.split(\"\").filter(c => c === b[0]).join(\"\") === pattern;\n};\n\n/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a new string that has all the characters in that string but the first and last.\n\n   Example:\n      removeFirstAndLast(\"hello\") ==> \"ell\"\n      removeFirstAndLast(\"hello\") ==> \"e\"\n      removeFirstAndLast(\"hello\") ==> \"hel\"\n      removeFirstAndLast(\"hello\") ==> \"hell\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"hello\") ==> \"hello\"\n      removeFirstAndLast(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let romanNum = 0;\n  let romanNumStr = '';\n  let romanNumStrLen = 0;\n  let romanNumStrLenMinusOne = 0;\n  let romanNumStrLenMinusTwo = 0;\n  let romanNumStrLenMinusThree = 0;\n  let romanNumStrLenMinusFour = 0;\n  let romanNumStrLenMinusFive = 0;\n  let romanNumStrLenMinusSix = 0;\n  let romanNumStrLenMinusSeven = 0;\n  let romanNumStrLenMinusEight = 0;\n  let romanNumStrLenMinusNine = 0;\n  let romanNumStrLenMinusTen = 0;\n  let romanNumStrLenMinusEleven = 0;\n  let romanNumStrLenMinusTwelve = 0;\n  let romanNumStrLenMinusThirteen = 0;\n  let romanNumStrLenMinusFourteen = 0;\n  let romanNumStrLenMinusFifteen = 0;\n  let romanNumStrLenMinusSixteen = 0;\n  let romanNumStrLenMinusSeventeen = 0;\n  let romanNumStrLenMinusEighteen = 0;\n  let romanNumStrLenMinusNineteen = 0;\n  let romanNumStrLenMinusTwenty = 0;\n  let romanNumStrLenMinusThirty = 0;\n  let romanNumStrLenMinusForty = 0;\n  let romanNumStrLenMinusFifty = 0;\n  let romanNumStrLenMinusSixty = 0;\n  let romanNumStrLenMinusSeventy = 0;\n  let romanNumStrLenMinusEighty = 0;\n  let romanNumStrLenMinusNinety = 0;\n  let romanNumStrLenMinusTwentyFive = 0;\n  let romanNumStrLenMinusThirtyFive = 0;\n  let romanNumStrLenMinusFortyFive = 0;\n  let romanNumStrLenMinusFiftyFive = 0;\n  let romanNumStrLenMinusSixtyFive = 0;\n  let romanNumStrLenMinusSeventyFive = 0;\n  let romanNumStrLenMinusEightyFive = 0;\n  let romanNumStrLenMinusNinetyFive = 0;\n  let romanNumStrLenMinusTwentySeven = 0;\n  let romanNumStrLenMinusThirtySeven = 0;\n  let romanNumStrLenMinusFortySeven = 0;\n  let romanNumStrLenMinusFiftySeven = 0;\n  let romanNumStrLenMinusSixtySeven = 0;\n  let romanNumStrLenMinusSeventySeven = 0;\n  let romanNumStrLenMinusEightySeven = 0;\n  let romanNumStrLenMinusNinetySeven = 0;\n  let romanNumStrLenMinusTwentyOne = 0;\n  let romanNumStrLenMinusThirtyOne = 0;\n  let romanNumStrLenMinusFortyOne = 0;\n  let romanNumStrLenMinusFiftyOne = 0;\n  let romanNumStrLenMinusSixtyOne = 0;\n  let romanNumStrLenMinusSeventyOne = 0;\n  let romanNumStrLenMinusEightyOne = 0;\n  let romanNumStrLenMinusNinetyOne = 0;\n  let romanNumStrLenMinusTwentyTwo = 0;\n  let romanNumStrLenMinusThirtyTwo = 0;\n  let romanNumStrLenMinusFortyTwo = 0;\n  let romanNumStrLenMinusFiftyTwo = 0;\n  let romanNumStrLenMinusSixtyTwo = 0;\n  let romanNumStrLenMinusSeventyTwo = 0;\n  let romanNumStrLenMinusEightyTwo = 0;\n  let romanNumStrLenMinusNinetyTwo = 0;\n  let romanNumStrLenMinusTwentyThree = 0;\n  let romanNumStrLenMinusThirtyThree = 0;\n  let romanNumStrLenMinusFortyThree = 0;\n  let romanNumStrLenMinusFiftyThree = 0;\n  let romanNumStrLenMinusSixtyThree = 0;\n  let romanNumStrLenMinusSeventyThree = 0;\n  let romanNumStrLenMinusEightyThree = 0;\n  let romanNumStrLenMinusNinetyThree = 0;\n  let romanNumStrLenMinusTwentyFour = 0;\n  let romanNumStrLenMinusThirtyFour = 0;\n  let romanNumStrLenMinusFortyFour = 0;\n  let romanNumStrLenMinusFiftyFour = 0;\n  let romanNumStrLenMinusSixtyFour = 0;\n  let romanNumStrLenMinusSeventyFour = 0;\n  let romanNumStrLenMinusEightyFour = 0;\n  let romanNumStrLenMinusNinetyFour = 0;\n  let romanNumStrLenMinusTwentyFive = 0;\n  let romanNumStrLenMinusThirtyFive = 0;\n  let romanNumStrLenMinusFortyFive = 0;\n  let romanNumStrLenMinusFiftyFive = 0;\n  let romanNumStrLenMinusSixtyFive = 0;\n  let romanNumStrLenMinusSeventyFive = 0;\n  let romanNumStrLenMinusEightyFive = 0;\n  let romanNumStrLenMinusNinetyFive = 0;\n  let romanNumStrLenMinusTwentySix = 0;\n  let romanNumStrLenMinusThirtySix = 0;\n  let romanNumStrLenMinusFortySix = 0;\n  let romanNumStrLenMinusFiftySix = 0;\n  let romanNumStrLenMinusSixtySix = 0;\n  let romanNumStrLenMinusSeventySix = 0;\n  let romanNumStrLenMinusEightySix = 0;\n  let romanNumStrLenMinusNinetySix = 0;\n  let romanNumStrLenMinusTwentySeven = 0;\n  let romanNumStrLenMinusThirtySeven = 0;\n  let romanNumStrLenMinusFortySeven = 0;\n  let romanNumStrLenMinusFiftySeven = 0;\n  let romanNumStrLenMinusSixtySeven = 0;\n  let romanNumStrLenMinusSeventySeven = 0;\n  let romanNumStrLenMinusEightySeven = 0;\n  let romanNumStrLenMinusNinetySeven = 0;\n  let romanNumStrLenMinusTwentyEight = 0;\n  let romanNumStrLenMinusThirtyEight = 0;\n  let romanNumStrLenMinusFortyEight = 0;\n  let romanNumStrLenMin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a right angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \" , \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\" ,\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) === words[j].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts , but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  while (needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      arr.push(carrots);\n      needs = 0;\n    } else {\n      needs = needs - carrots;\n      carrots = 0;\n    }\n  }\n  return arr;\n};\n\n/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  while (needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      arr.push(carrots);\n      needs = 0;\n    } else {\n      needs = needs - carrots;\n      carrots = 0;\n    }\n  }\n  return arr;\n};\n\n/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  while (needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      arr.push(carrots);\n      needs = 0;\n    } else {\n      needs = needs - carrots;\n      carrots = 0;\n    }\n  }\n  return arr;\n};\n\n/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  while (needs > 0) {\n    if (carrots >= needs) {\n      carrots -= needs;\n      arr.push(carrots);\n      needs = 0;\n    } else {\n      needs = needs - carrots;\n      carrots = 0;\n    }\n  }\n  return arr;\n};\n\n/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;\n    }\n  }\n  return distinctChars;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  const charsCount = chars.length;\n  let distinctChars = 0;\n  for (let i = 0; i < charsCount; i++) {\n    if (chars.indexOf(chars[i]) === i) {\n      distinctChars++;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((e, i) => {\n    if (operator[i] === '+') {\n      result += e;\n    } else if (operator[i] === '-') {\n      result -= e;\n    } else if (operator[i] === '*') {\n      result *= e;\n    } else if (operator[i] === '/') {\n      result /= e;\n    } else if (operator[i] === '**') {\n      result **= e;\n    }\n  });\n  return result;\n};\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((e, i) => {\n    if (operator[i] === '+') {\n      result += e;\n    } else if (operator[i] === '-') {\n      result -= e;\n    } else if (operator[i] === '*') {\n      result *= e;\n    } else if (operator[i] === '/') {\n      result /= e;\n    } else if (operator[i] === '**') {\n      result **= e;\n    }\n  });\n  return result;\n};\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((e, i) => {\n    if (operator[i] === '+') {\n      result += e;\n    } else if (operator[i] === '-') {\n      result -= e;\n    } else if (operator[i] === '*') {\n      result *= e;\n    } else if (operator[i] === '/') {\n      result /= e;\n    } else if (operator[i] === '**') {\n      result **= e;\n    }\n  });\n  return result;\n};\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((e, i) => {\n    if (operator[i] === '+') {\n      result += e;\n    } else if (operator[i] === '-') {\n      result -= e;\n    } else if (operator[i] === '*') {\n      result *= e;\n    } else if (operator[i] === '/') {\n      result /= e;\n    } else if (operator[i] === '**') {\n      result **= e;\n    }\n  });\n  return result;\n};\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((e, i) => {\n    if (operator[i] === '+') {\n      result += e;\n    } else if (operator[i] === '-') {\n      result -= e;\n    } else if (operator[i] === '*') {\n      result *= e;\n    } else if (operator[i] === '/') {\n      result /= e;\n    } else if (operator[i] === '**') {\n      result **= e;\n    }\n  });\n  return result;\n};\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is .\n  Ifthe string contains no letters , reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is.\n  Ifthe string contains no letters, reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let r = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      r += s.charAt(i).toLowerCase();\n    } else {\n      r += s.charAt(i);\n    }\n  }\n  return r;\n};\n\n/*You are given a string s.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If s is a palin word, return false.\n If s is a palindrome, return true.\n If ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest();\n};\n\n/*\n  Given a string 'text', return its sha1 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha1('Hello world') == '8daf96f396d9a9418b17a2c4ac4c4dfa9'\n  */\nconst stringToSha1 = (text) => {\n  const sha1 = new Sha1();\n  sha1.update(text);\n  return sha1.digest();\n};\n\n/*\n  Given a string 'text', return its sha256 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = new Sha256();\n  sha256.update(text);\n  return sha256.digest();\n};\n\n/*\n  Given a string 'text', return its sha512 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  Given a string 'text', return its hmac equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToHmac('Hello world','secret') == 'b0b9a8b7d6b4ccc8c716f50f86cd9aea'\n  */\nconst stringToHmac = (text, key) => {\n  const hmac = new Hmac();\n  hmac.update(text);\n  hmac.update(key);\n  return hmac.digest();\n};\n\n/*\n  Given a string 'text', return its hmac equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToHmac('Hello world','secret') == 'b0b9a8b7d6b4ccc8c716f50f86cd9aea'\n  */\nconst stringToHmac = (text, key) => {\n  const hmac = new Hmac();\n  hmac.update(text);\n  hmac.update(key);\n  return hmac.digest();\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest();\n};\n\n/*\n  Given a string 'text', return its sha1 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha1('Hello world') == '8daf96f396d9a9418b17a2c4ac4c4dfa9'\n  */\nconst stringToSha1 = (text) => {\n  const sha1 = new Sha1();\n  sha1.update(text);\n  return sha1.digest();\n};\n\n/*\n  Given a string 'text', return its sha256 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = new Sha256();\n  sha256.update(text);\n  return sha256.digest();\n};\n\n/*\n  Given a string 'text', return its sha512 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  const sha512 = new Sha512();\n  sha512.update(text);\n  return sha512.digest();\n};\n\n/*\n  Given a string 'text', return its hmac equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToHmac('Hello world','secret') == 'b0b9a8b7d6b4ccc8c716f50f86cd9aea'\n  */\nconst stringToHmac = (text, key) => {\n  const hmac = new Hmac();\n  hmac.update(text);\n  hmac.update(key);\n  return hmac.digest();\n};\n\n/*\n  Given a string 'text', return its hmac equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToHmac('Hello world','secret') == 'b0b9a8b7d6b4ccc8c716f50f86cd9aea'\n  */\nconst stringToHmac = (text, key) => {\n  const hmac = new Hmac();\n  hmac.update(text);\n  hmac.update(key);\n  return hmac.digest();\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest();\n};\n\n/*\n  Given a string 'text', return its sha1 hash equiv.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToSha1('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r .\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in the number\n  in ascending order.\n\n  For example:\n  countDigits(12) => 3\n  countDigits(13) => 2\n  countDigits(14) => 1\n  countDigits(100) => 0\n  countDigits(1000) => 1\n  countDigits(1001) => 1\n  countDigits(10001) => 2\n  countDigits(10010) => 2\n  countDigits(100100) => 3\n  countDigits(1001000) => 4\n  countDigits(10010000) => 5\n  countDigits(100100000) => 5\n  countDigits(1001000000) => 6\n  countDigits(10010000000) => 6\n  countDigits(100100000000) => 7\n  countDigits(1001000000000) => 7\n  countDigits(10010000000000) => 8\n  countDigits(100100000000000) => 8\n  countDigits(1001000000000000) => 9\n  countDigits(10010000000000000) => 9\n  countDigits(100100000000000000) => 10\n  countDigits(1001000000000000000) => 10\n  countDigits(10010000000000000000) => 10\n  countDigits(100100000000000000000) => 10\n  countDigits(1001000000000000000000) => 10\n  countDigits(10010000000000000000000) => 10\n  countDigits(100100000000000000000000) => 10\n  countDigits(1001000000000000000000000) => 10\n  countDigits(10010000000000000000000000) => 10\n  countDigits(100100000000000000000000000) => 10\n  countDigits(1001000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(1001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(10010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  countDigits(100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 10\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last .\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_list) => {\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_list) => {\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_list) => {\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_list) => {\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic6 = (music_list) => {\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic7 = (music_list) => {\n  const music_list2 = music_list.map(music => {\n    if (music === 'o') return 4;\n    if (music === 'o|') return 2;\n    if (music === '.|') return 1;\n    return music_list.indexOf(music);\n  });\n  return music_list2;\n};\n\n/* Input to this function is a list of integers representing musical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s .\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringArray = string.split('');\n  const substringArray = substring.split('');\n  let count = 0;\n  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] === substringArray[0]) {\n      count++;\n      stringArray.splice(i, 1);\n      substringArray.shift();\n    }\n  }\n  return count;\n};\n\n/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero' ,  'one', 'two',  'three', 'f our','five', 'six', 'seven', 'eight' and ' nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ')\n  const sortedNumbers = numberArray.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(1);\n  return Number(decimalPart);\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toFixed(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.map((number) => {\n    const index = sortedNumbers.indexOf(number);\n    if (index === sortedNumbers.length - 1) {\n      return sortedNumbers[index];\n    }\n    return sortedNumbers[index + 1];\n  });\n  return closestElements;\n};\n\n/**\n * Given an array of numbers, find the smallest number in the array\n * that is a multiple of the given number. Return null if no such number\n * exists.\n * \n * >>> findMultiple([10, 20, 30, 40])\n * 10\n * >>> findMultiple([10, 20, 30, 40])\n * 20\n * >>> findMultiple([10, 20, 30, 40])\n * 30\n * >>> findMultiple([10, 20, 30, 40])\n * 40\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([10, 20, 30, 40])\n * null\n * >>> findMultiple([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (ofat least two elements) ,  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min) / range;\n  }\n  return newNumbers;\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range that is\n * proportional to the original number\n * >>> getProportion(0.5, 1, 2)\n  0.5\n */\nconst getProportion = (number, min, max) => {\n  return (number - min) / (max - min);\n};\n\n/**\n * Given a number and a range, return a number in the range ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && value % 1!== 0);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => value && typeof value === 'object');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => value instanceof Array);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterArrays(['a', 3.14, 5])\n  []\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStringArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => typeof item ==='string'));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterStringArrays(['a', 3.14, 5])\n  []\n  >>> filterStringArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNumberArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => typeof item === 'number'));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterNumberArrays(['a', 3.14, 5])\n  []\n  >>> filterNumberArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterIntegerArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => typeof item === 'number' && item % 1!== 0));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegerArrays(['a', 3.14, 5])\n  []\n  >>> filterIntegerArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFloatArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => typeof item === 'number' && item % 1!== 0));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterFloatArrays(['a', 3.14, 5])\n  []\n  >>> filterFloatArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleanArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => typeof item === 'boolean'));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterBooleanArrays(['a', 3.14, 5])\n  []\n  >>> filterBooleanArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNoneArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => item === null));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterNoneArrays(['a', 3.14, 5])\n  []\n  >>> filterNoneArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => item && typeof item === 'object'));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterObjectArrays(['a', 3.14, 5])\n  []\n  >>> filterObjectArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterArrayArrays = (values) => {\n  return values.filter(value => value instanceof Array && value.every(item => item instanceof Array));\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterArrayArrays(['a', 3.14, 5])\n  []\n  >>> filterArrayArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStringObjects = (values) => {\n  return values.filter(value => value instanceof Object && value.constructor === Object && value.constructor === Object);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterStringObjects(['a', 3.14, 5])\n  []\n  >>> filterStringObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNumberObjects = (values) => {\n  return values.filter(value => value instanceof Object && value.constructor === Object && value.constructor === Object);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterNumberObjects(['a', 3.14, 5])\n  []\n  >>> filterNumberObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterIntegerObjects = (values) => {\n  return values.filter(value => value instanceof Object && value.constructor === Object && value.constructor === Object);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegerObjects(['a', 3.14, 5])\n  []\n  >>> filterIntegerObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFloatObjects = (values) => {\n  return values.filter(value => value instanceof Object && value.constructor === Object && value.constructor === Object);\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterFloatObjects(['a', 3.14, 5])\n  []\n  >>> filterFloatObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleanObjects = (values) => {\n  return values.filter(value => value instanceof Object && value.constructor === Object && value.constructor ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i)\n  }\n  return length\n}\n\n/* Return index of first occurrence of substring in string\n  >>> strfind('abc', 'a')\n  0\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'c')\n  2\n  */\nconst strfind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of last occurrence of substring in string\n  >>> strrfind('abc', 'a')\n  3\n  >>> strrfind('abc', 'b')\n  -1\n  >>> strrfind('abc', 'c')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  let index = -1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string ignoring case\n  >>> strcasefind('abc', 'a')\n  0\n  >>> strcasefind('abc', 'b')\n  1\n  >>> strcasefind('abc', 'c')\n  2\n  */\nconst strcasefind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of last occurrence of substring in string ignoring case\n  >>> strcaserfind('abc', 'a')\n  3\n  >>> strcaserfind('abc', 'b')\n  -1\n  >>> strcaserfind('abc', 'c')\n  -1\n  */\nconst strcaserfind = (string, substring) => {\n  let index = -1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string ignoring case\n  >>> strcaseinfind('abc', 'a')\n  0\n  >>> strcaseinfind('abc', 'b')\n  1\n  >>> strcaseinfind('abc', 'c')\n  2\n  */\nconst strcaseinfind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of last occurrence of substring in string ignoring case\n  >>> strcaseinrfind('abc', 'a')\n  3\n  >>> strcaseinrfind('abc', 'b')\n  -1\n  >>> strcaseinrfind('abc', 'c')\n  -1\n  */\nconst strcaseinrfind = (string, substring) => {\n  let index = -1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string ignoring case\n  >>> strcaseininfind('abc', 'a')\n  0\n  >>> strcaseininfind('abc', 'b')\n  1\n  >>> strcaseininfind('abc', 'c')\n  2\n  */\nconst strcaseininfind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of last occurrence of substring in string ignoring case\n  >>> strcaseininrfind('abc', 'a')\n  3\n  >>> strcaseininrfind('abc', 'b')\n  -1\n  >>> strcaseininrfind('abc', 'c')\n  -1\n  */\nconst strcaseininrfind = (string, substring) => {\n  let index = -1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string ignoring case\n  >>> strcaseinininfind('abc', 'a')\n  0\n  >>> strcaseinininfind('abc', 'b')\n  1\n  >>> strcaseinininfind('abc', 'c')\n  2\n  */\nconst strcaseinininfind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of last occurrence of substring in string ignoring case\n  >>> strcaseinininrfind('abc', 'a')\n  3\n  >>> strcaseinininrfind('abc', 'b')\n  -1\n  >>> strcaseinininrfind('abc', 'c')\n  -1\n  */\nconst strcaseinininrfind = (string, substring) => {\n  let index = -1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string ignoring case\n  >>> strcaseininininfind('abc', 'a')\n  0\n  >>> strcaseininininfind('abc', 'b')\n  1\n  >>> strcaseininininfind('abc', 'c')\n  2\n  */\nconst strcaseininininfind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of last occurrence of substring in string ignoring case\n  >>> strcaseininininrfind('abc', 'a')\n  3\n  >>> strcaseininininrfind('abc', 'b')\n  -1\n  >>> strcaseininininrfind('abc', 'c')\n  -1\n  */\nconst strcaseininininrfind = (string, substring) => {\n  let index = -1\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n/* Return index of first occurrence of substring in string ignoring case\n  >>> strcaseinininininfind('abc', 'a')\n  0\n  >>> strcaseinininininfind('abc', 'b')\n  1\n  >>> strcaseinininininfind('abc', 'c')\n  2\n  */\nconst strcaseininininininfind = (string, substring) => {\n  let index = -1\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i).toLowerCase() === substring.charCodeAt(0).toLowerCase()) {\n      index = i\n      break\n    }\n  }\n  return index\n}\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 === 0) {\n      m /= 2;\n    } else {\n      m = (3 * m) + 1;\n    }\n    r++;\n  }\n  return r;\n};\n\n/* Given a number n, find the smallest number t such that t divides n evenly, smalle r than  n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let r = 1;\n  let m = n;\n  while (m > 1) {\n    if (m % 2 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf2(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf2 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf3(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf3 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf4(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf4 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf5(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf5 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf6(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf6 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf7(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf7 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf8(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf8 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf9(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorsOf9 = (n) => {\n  const factors = [];\n  const factorsOfN = factorsOf10(n);\n  for (let i = 0; i < factorsOfN.length; i++) {\n    factors.push(factorsOfN[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be list", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      newArray.push(numbers[i]);\n      counter = 1;\n    }\n  }\n  return newArray;\n};\n\n/* Froma list of integers, removeall elements ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.toUpperCase() === char? char.toLowerCase() : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* Given a string, remove all spaces.\n  >>> removeSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/ /g, '');\n};\n\n/* Given a string, remove all punctuation.\n  >>> removePunctuation('Hello World!')\n  'HelloWorld'\n  */\nconst removePunctuation = (string) => {\n  return string.replace(/[!,.?]/g, '');\n};\n\n/* Given a string, remove all numbers.\n  >>> removeNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNumbers = (string) => {\n  return string.replace(/[0-9]/g, '');\n};\n\n/* Given a string, remove all special characters.\n  >>> removeSpecialChars('Hello World!')\n  'HelloWorld'\n  */\nconst removeSpecialChars = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, remove all whitespace.\n  >>> removeWhiteSpace('Hello World!')\n  'HelloWorld'\n  */\nconst removeWhiteSpace = (string) => {\n  return string.replace(/\\s/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters.\n  >>> removeNonAlphanumeric('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces.\n  >>> removeNonAlphanumericAndSpaces('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndSpaces = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.\n  >>> removeNonAlphanumericAndNumbers('Hello World!')\n  'HelloWorld'\n  */\nconst removeNonAlphanumericAndNumbers = (string) => {\n  return string.replace(/[^a-zA-Z0-9 0-9]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and numbers.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove('a', 'abracadabra')\n  'bra'\n  >>> remove('a', 'abracadabra', 2)\n  'racadabra'\n  >>> remove('a', 'abracadabra', 2, 3)\n  'adabra'\n  >>> remove('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst remove = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra')\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = string.length;\n  return string.substring(0, start) + string.substring(end).replace(substring, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> removeAll('a', 'abracadabra', 2, 3)\n  'abracadabra'\n  >>> removeAll('a', 'abracadabra', 2, -1)\n  'abracadabra'\n  */\nconst removeAll = (substring, string, start, end) => {\n  if (start === undefined) start = 0;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for those that start with a given prefix.\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd']\n  >>> filterByPrefixAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefixAll(['abc', 'bcd', 'c", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* Your task is to implement a function that calculates the total deposit amount of a bankaccount in a\n  given period of time. Your function should take as argument a bankaccount object and a period of time in\n  seconds as integers and return the total deposit amount in the period of time. Your function should return\n  a negative number if the bankaccount is overdrawn and a positive number if the bankaccount is underdrawn.\n  >>> bankAccount({balance: 100}, 10)\n  0\n  >>> bankAccount({balance: 100}, 20)\n  -50\n  >>> bankAccount({balance: 100}, 30)\n  -50\n  >>> bankAccount({balance: 100}, 40)\n  -50\n  >>> bankAccount({balance: 100}, 50)\n  -50\n  >>> bankAccount({balance: 100}, 60)\n  -50\n  >>> bankAccount({balance: 100}, 70)\n  -50\n  >>> bankAccount({balance: 100}, 80)\n  -50\n  >>> bankAccount({balance: 100}, 90)\n  -50\n  >>> bankAccount({balance: 100}, 100)\n  -50\n  >>> bankAccount({balance: 100}, 110)\n  -50\n  >>> bankAccount({balance: 100}, 120)\n  -50\n  >>> bankAccount({balance: 100}, 130)\n  -50\n  >>> bankAccount({balance: 100}, 140)\n  -50\n  >>> bankAccount({balance: 100}, 150)\n  -50\n  >>> bankAccount({balance: 100}, 160)\n  -50\n  >>> bankAccount({balance: 100}, 170)\n  -50\n  >>> bankAccount({balance: 100}, 180)\n  -50\n  >>> bankAccount({balance: 100}, 190)\n  -50\n  >>> bankAccount({balance: 100}, 200)\n  -50\n  >>> bankAccount({balance: 100}, 210)\n  -50\n  >>> bankAccount({balance: 100}, 220)\n  -50\n  >>> bankAccount({balance: 100}, 230)\n  -50\n  >>> bankAccount({balance: 100}, 240)\n  -50\n  >>> bankAccount({balance: 100}, 250)\n  -50\n  >>> bankAccount({balance: 100}, 260)\n  -50\n  >>> bankAccount({balance: 100}, 270)\n  -50\n  >>> bankAccount({balance: 100}, 280)\n  -50\n  >>> bankAccount({balance: 100}, 290)\n  -50\n  >>> bankAccount({balance: 100}, 300)\n  -50\n  >>> bankAccount({balance: 100}, 310)\n  -50\n  >>> bankAccount({balance: 100}, 320)\n  -50\n  >>> bankAccount({balance: 100}, 330)\n  -50\n  >>> bankAccount({balance: 100}, 340)\n  -50\n  >>> bankAccount({balance: 100}, 350)\n  -50\n  >>> bankAccount({balance: 100}, 360)\n  -50\n  >>> bankAccount({balance: 100}, 370)\n  -50\n  >>> bankAccount({balance: 100}, 380)\n  -50\n  >>> bankAccount({balance: 100}, 390)\n  -50\n  >>> bankAccount({balance: 100}, 400)\n  -50\n  >>> bankAccount({balance: 100}, 410)\n  -50\n  >>> bankAccount({balance: 100}, 420)\n  -50\n  >>> bankAccount({balance: 100}, 430)\n  -50\n  >>> bankAccount({balance: 100}, 440)\n  -50\n  >>> bankAccount({balance: 100}, 450)\n  -50\n  >>> bankAccount({balance: 100}, 460)\n  -50\n  >>> bankAccount({balance: 100}, 470)\n  -50\n  >>> bankAccount({balance: 100}, 480)\n  -50\n  >>> bankAccount({balance: 100}, 490)\n  -50\n  >>> bankAccount({balance: 100}, 500)\n  -50\n  >>> bankAccount({balance: 100}, 510)\n  -50\n  >>> bankAccount({balance: 100}, 520)\n  -50\n  >>> bankAccount({balance: 100}, 530)\n  -50\n  >>> bankAccount({balance: 100}, 540)\n  -50\n  >>> bankAccount({balance: 100}, 550)\n  -50\n  >>> bankAccount({balance: 100}, 560)\n  -50\n  >>> bankAccount({balance: 100}, 570)\n  -50\n  >>> bankAccount({balance: 100}, 580)\n  -50\n  >>> bankAccount({balance: 100}, 590)\n  -50\n  >>> bankAccount({balance: 100}, 600)\n  -50\n  >>> bankAccount({balance: 100}, 610)\n  -50\n  >>> bankAccount({balance: 100}, 620)\n  -50\n  >>> bankAccount({balance: 100}, 630)\n  -50\n  >>> bankAccount({balance: 100}, 640)\n  -50\n  >>> bankAccount({balance: 100}, 650)\n  -50\n  >>> bankAccount({balance: 100}, 660)\n  -50\n  >>> bankAccount({balance: 100}, 670)\n  -50\n  >>> bankAccount({balance: 100}, 680)\n  -50\n  >>> bankAccount({balance: 100}, 690)\n  -50\n  >>> bankAccount({balance: 100}, 700)\n  -50\n  >>> bankAccount({balance: 100}, 710)\n  -50\n  >>> bankAccount({balance: 100}, 720)\n  -50\n  >>> bankAccount({balance: 100}, 730)\n  -50\n  >>> bankAccount({balance: 100}, 740)\n  -50\n  >>> bankAccount({balance: 100}, 750)\n  -50\n  >>> bankAccount({balance: 100}, 760)\n  -50\n  >>> bankAccount({balance: 100}, 770)\n  -50\n  >>> bankAccount({balance: 100}, 780)\n  -50\n  >>> bankAccount({balance: 100}, 790)\n  -50\n  >>> bankAccount({balance: 100}, 800)\n  -50\n  >>> bankAccount({balance: 100}, 810)\n  -50\n  >>> bankAccount({balance: 100}, 820)\n  -50\n  >>> bankAccount({balance: 100}, 830)\n  -50\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [3, 6]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, 9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter((n) => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [5, 6]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 9, 123, 1]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter((n) => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [7, 6]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [7, 9, 123, 1]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter((n) => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [11, 6]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [11, 9, 123, 1]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter((n) => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [13, 6]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [13, 9, 123, 1]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter((n) => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [17, 6]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [17, 9, 123, 1]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter((n) => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [19, 6]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [19, 9, 123, 1]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter((n) => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [21, 6]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [21, 9, 123, 1]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter((n) => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [23, 6]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [23, 9, 123, 1]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter((n) => n % 23 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [27, 6]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [27, 9, 123, 1]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter((n) => n % 27 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [29, 6]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [29, 9, 123, 1]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter((n) => n % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [31, 6]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [31, 9, 123, 1]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter((n) => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> getDivisibleBy33([-1, 2, -4, 5, 6])\n  [33, 6]\n  >>> getDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [33, 9, 123, 1]\n  */\nconst getDivisibleBy33 = (l) => {\n  return l.filter((n) => n % 33 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [35, 6]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [35, 9, 123, 1]\n  */\nconst getDivisibleBy35 = (l) => {\n  return l.filter((n) => n % 35 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> getDivisibleBy37([-1, 2, -4, 5, 6])\n  [37, 6]\n  >>> getDivisibleBy37([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [37, 9, 123, 1]\n  */\nconst getDivisibleBy37 = (l) => {\n  return l.filter((n) => n % 37 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 39.\n  >>> getDivisibleBy39([-1, 2, -4, 5, 6])\n  [39, 6]\n  >>> getDivisibleBy39([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [39, 9, 123, 1]\n  */\nconst getDivisibleBy39 = (l) => {\n  return l.filter((n) => n % 39 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 41.\n  >>> getDivisibleBy41([-1, 2, -4, 5, 6])\n  [41, 6]\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11!== 0) return false;\n  if (n % 13!== 0) return true;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return true;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return true;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return true;\n  if (n % 41 === 0) return false;\n  if (n % 47 === 0) return true;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return true;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return true;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return true;\n  if (n % 81 === 0) return false;\n  if (n % 87 === 0) return true;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return true;\n  if (n % 103 === 0) return false;\n  if (n % 111 === 0) return true;\n  if (n % 129!== 0) return false;\n  if (n % 131!== 0) return true;\n  if (n % 143 === 0) return false;\n  if (n % 151 === 0) return true;\n  if (n % 163 === 0) return false;\n  if (n % 171 === 0) return true;\n  if (n % 183 === 0) return false;\n  if (n % 191 === 0) return true;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return true;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return true;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return true;\n  if (n % 253 === 0) return false;\n  if (n % 261 === 0) return true;\n  if (n % 273 === 0) return false;\n  if (n % 281 === 0) return true;\n  if (n % 293 === 0) return false;\n  if (n % 301 === 0) return true;\n  if (n % 303 === 0) return false;\n  if (n % 309!== 0) return true;\n  if (n % 311!== 0) return false;\n  if (n % 313 === 0) return true;\n  if (n % 315 === 0) return false;\n  if (n % 317 === 0) return true;\n  if (n % 323 === 0) return false;\n  if (n % 329 === 0) return true;\n  if (n % 331 === 0) return false;\n  if (n % 343 === 0) return true;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return true;\n  if (n % 361 === 0) return false;\n  if (n % 363 === 0) return true;\n  if (n % 369 === 0) return false;\n  if (n % 373 === 0) return true;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return true;\n  if (n % 389 === 0) return false;\n  if (n % 391 === 0) return true;\n  if (n % 395 === 0) return false;\n  if (n % 401 === 0) return true;\n  if (n % 403 === 0) return false;\n  if (n % 409!== 0) return true;\n  if (n % 411!== 0) return false;\n  if (n % 419 === 0) return true;\n  if (n % 423 === 0) return false;\n  if (n % 429 === 0) return true;\n  if (n % 433 === 0) return false;\n  if (n % 441 === 0) return true;\n  if (n % 445 === 0) return false;\n  if (n % 451 === 0) return true;\n  if (n % 455 === 0) return false;\n  if (n % 461 === 0) return true;\n  if (n % 467 === 0) return false;\n  if (n % 473 === 0) return true;\n  if (n % 479 === 0) return false;\n  if (n % 481 === 0) return true;\n  if (n % 485 === 0) return false;\n  if (n % 491 === 0) return true;\n  if (n % 495 === 0) return false;\n  if (n % 501 === 0) return true;\n  if (n % 505 === 0) return false;\n  if (n % 511 === 0) return true;\n  if (n % 521 === 0) return false;\n  if (n % 527 === 0) return true;\n  if (n % 529 === 0) return false;\n  if (n % 533 === 0) return true;\n  if (n % 539 === 0) return false;\n  if (n % 543 === 0) return true;\n  if (n % 547 === 0) return false;\n  if (n % 551 === 0) return true;\n  if (n % 555 === 0) return false;\n  if (n % 561 === 0) return true;\n  if (n % 567 === 0) return false;\n  if (n % 569 === 0) return true;\n  if (n % 573 === 0) return false;\n  if (n % 577 === 0) return true;\n  if (n % 580 === 0) return false;\n  if (n % 583 === 0) return true;\n  if (n % 589 === 0) return false;\n  if (n % 591 === 0) return true;\n  if (n % 595 === 0) return false;\n  if (n % 601 === 0) return true;\n  if (n % 607 === 0) return false;\n  if (n % 609 === 0) return true;\n  if (n % 613 === 0) return false;\n  if (n % 617 === 0) return true;\n  if (n % 619 === 0) return false;\n  if (n % 623 === 0) return true;\n  if (n % 629 === 0) return false;\n  if (n % 631 === 0) return true;\n  if (n % 641 === 0) return false;\n  if (n % 645 === 0) return true;\n  if (n % 649 === 0) return false;\n  if (n % 651 === 0) return true;\n  if (n % 653 === 0) return false;\n  if (n % 659 === 0) return true;\n  if (n % 661 === 0) return false;\n  if (n % 665 === 0) return true;\n  if (n % 671 === 0) return false;\n  if (n % 673 === 0) return true;\n  if (n % 679 === 0) return false;\n  if (n % 683 === 0) return true;\n  if (n % 689 === 0) return false;\n  if (n % 691 === 0) return true;\n  if (n % 701 === 0) return false;\n  if (n % 709!== 0) return true;\n  if (n % 711!== 0) return false;\n  if (n % 721 === 0) return true;\n  if (n % 729!== 0) return false;\n  if (n % 731 === 0) return true;\n  if (n % 743 === 0) return false;\n  if (n % 749 === 0) return true;\n  if (n % 751 === 0) return false;\n  if (n % 753 === 0) return true;\n  if (n % 761 === 0) return false;\n  if (n % 767 === 0) return true;\n  if (n % 773 === 0) return false;\n  if (n % 780 === 0) return true;\n  if (n % 783 === 0) return false;\n  if (n % 789 === 0) return true;\n  if (n % 791 === 0) return false;\n  if (n % 795 === 0) return true;\n  if (n % 801 === 0) return false;\n  if (n % 803 === 0) return true;\n  if (n % 809!== 0) return false;\n  if (n % 811!== 0) return true;\n  if (n % 821 === 0) return false;\n  if (n % 827!== 0) return true;\n  if (n % 829!== 0) return false;\n  if (n % 831 === 0) return true;\n  if (n % 839 === 0) return false;\n  if (n % 841 === 0) return true;\n  if (n % 847!== 0) return false;\n  if (n % 851 === 0) return true;\n  if (n % 853 ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 + ....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l .\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n = 0;\n let m = xs.length;\n let res = [];\n let x = 0;\n let y = 0;\n let z = 0;\n let n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      if (l[i] % l[j] === 0) {\n        sorted.push(l[i]);\n        sorted.push(l[j]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max;\n  let maxIndex;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min;\n  let minIndex;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are greater than the given value.\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst sumElementsGreaterThan = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given value.\n  >>> sumElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst sumElementsLessThan = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list that are greater than the given value.\n  >>> productElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsGreaterThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst productElementsGreaterThan = (l, value) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > value) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are less than the given value.\n  >>> productElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsLessThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  0\n  */\nconst productElementsLessThan = (l, value) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < value) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are equal to the given value.\n  >>> sumElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  */\nconst sumElementsEqual = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list that are equal to the given value.\n  >>> productElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  */\nconst productElementsEqual = (l, value) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given value.\n  >>> sumElementsGreaterOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsGreaterOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  */\nconst sumElementsGreaterOrEqualThan = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given value.\n  >>> sumElementsLessOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsLessOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsLessOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  */\nconst sumElementsLessOrEqualThan = (l, value) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= value) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list that are greater than or equal to the given value.\n  >>> productElementsGreaterOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsGreaterOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> productElementsGreaterOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  */\nconst productElementsGreaterOrEqualThan = (l, value) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= value) {\n      product *= l[i];\n    }\n  }\n  return product;\n};\n\n/*Return product of all elements in the list that are less than or equal to the given value.\n  >>> productElementsLessOrEqualThan([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> productElementsLessOrEqualThan([5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 5, 6, 3]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2 .push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n const groups = encode_cyclic(s);\n const groups2 = decode_cyclic(groups);\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst encode_cyclic = (s ) => {\n const groups = s.split('');\n const groups2 = [];\n for(let i = 0; i < groups.length; i++) {\n  if (groups[i].length == 3)\n   groups2.push(groups[i].slice(1) +groups[i]);\n  else\n   groups2.push(groups[i]);\n }\n return groups2;\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime .\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - numbers[i]);\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of inputnumbers, calculate Mea n  Mean Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triples takes a list of integers as an input.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1])\n  false\n  */\nconst triples = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result , th ey  continuemoving\n  in  their traje ctoryasif they did not collide .\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result, th ey  continuemoving\n  in  their traje ctoryasif they did not collide.\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n  const carRaceCol lisi ons = [];\n  let carRaceCol lisi onsTemp = [];\n  let carRaceCol lisi onsTemp2 = [];\n  let carRaceCol lisi onsTemp3 = [];\n  let carRaceCol lisi onsTemp4 = [];\n  let carRaceCol lisi onsTemp5 = [];\n  let carRaceCol lisi onsTemp6 = [];\n  let carRaceCol lisi onsTemp7 = [];\n  let carRaceCol lisi onsTemp8 = [];\n  let carRaceCol lisi onsTemp9 = [];\n  let carRaceCol lisi onsTemp10 = [];\n  let carRaceCol lisi onsTemp11 = [];\n  let carRaceCol lisi onsTemp12 = [];\n  let carRaceCol lisi onsTemp13 = [];\n  let carRaceCol lisi onsTemp14 = [];\n  let carRaceCol lisi onsTemp15 = [];\n  let carRaceCol lisi onsTemp16 = [];\n  let carRaceCol lisi onsTemp17 = [];\n  let carRaceCol lisi onsTemp18 = [];\n  let carRaceCol lisi onsTemp19 = [];\n  let carRaceCol lisi onsTemp20 = [];\n  let carRaceCol lisi onsTemp21 = [];\n  let carRaceCol lisi onsTemp22 = [];\n  let carRaceCol lisi onsTemp23 = [];\n  let carRaceCol lisi onsTemp24 = [];\n  let carRaceCol lisi onsTemp25 = [];\n  let carRaceCol lisi onsTemp26 = [];\n  let carRaceCol lisi onsTemp27 = [];\n  let carRaceCol lisi onsTemp28 = [];\n  let carRaceCol lisi onsTemp29 = [];\n  let carRaceCol lisi onsTemp30 = [];\n  let carRaceCol lisi onsTemp31 = [];\n  let carRaceCol lisi onsTemp32 = [];\n  let carRaceCol lisi onsTemp33 = [];\n  let carRaceCol lisi onsTemp34 = [];\n  let carRaceCol lisi onsTemp35 = [];\n  let carRaceCol lisi onsTemp36 = [];\n  let carRaceCol lisi onsTemp37 = [];\n  let carRaceCol lisi onsTemp38 = [];\n  let carRaceCol lisi onsTemp39 = [];\n  let carRaceCol lisi onsTemp40 = [];\n  let carRaceCol lisi onsTemp41 = [];\n  let carRaceCol lisi onsTemp42 = [];\n  let carRaceCol lisi onsTemp43 = [];\n  let carRaceCol lisi onsTemp44 = [];\n  let carRaceCol lisi onsTemp45 = [];\n  let carRaceCol lisi onsTemp46 = [];\n  let carRaceCol lisi onsTemp47 = [];\n  let carRaceCol lisi onsTemp48 = [];\n  let carRaceCol lisi onsTemp49 = [];\n  let carRaceCol lisi onsTemp50 = [];\n  let carRaceCol lisi onsTemp51 = [];\n  let carRaceCol lisi onsTemp52 = [];\n  let carRaceCol lisi onsTemp53 = [];\n  let carRaceCol lisi onsTemp54 = [];\n  let carRaceCol lisi onsTemp55 = [];\n  let carRaceCol lisi onsTemp56 = [];\n  let carRaceCol lisi onsTemp57 = [];\n  let carRaceCol lisi onsTemp58 = [];\n  let carRaceCol lisi onsTemp59 = [];\n  let carRaceCol lisi onsTemp60 = [];\n  let carRaceCol lisi onsTemp61 = [];\n  let carRaceCol lisi onsTemp62 = [];\n  let carRaceCol lisi onsTemp63 = [];\n  let carRaceCol lisi onsTemp64 = [];\n  let carRaceCol lisi onsTemp65 = [];\n  let carRaceCol lisi onsTemp66 = [];\n  let carRaceCol lisi onsTemp67 = [];\n  let carRaceCol lisi onsTemp68 = [];\n  let carRaceCol lisi onsTemp69 = [];\n  let carRaceCol lisi onsTemp70 = [];\n  let carRaceCol lisi onsTemp71 = [];\n  let carRaceCol lisi onsTemp72 = [];\n  let carRaceCol lisi onsTemp73 = [];\n  let carRaceCol lisi onsTemp74 = [];\n  let carRaceCol lisi onsTemp75 = [];\n  let carRaceCol lisi onsTemp76 = [];\n  let carRaceCol lisi onsTemp77 = [];\n  let carRaceCol lisi onsTemp78 = [];\n  let carRaceCol lisi onsTemp79 = [];\n  let carRaceCol lisi onsTemp80 = [];\n  let carRaceCol lisi onsTemp81 = [];\n  let carRaceCol lisi onsTemp82 = [];\n  let carRaceCol lisi onsTemp83 = [];\n  let carRaceCol lisi onsTemp84 = [];\n  let carRaceCol lisi onsTemp85 = [];\n  let carRaceCol lisi onsTemp86 = [];\n  let carRaceCol lisi onsTemp87 = [];\n  let carRaceCol lisi onsTemp88 = [];\n  let carRaceCol lisi onsTemp89 = [];\n  let carRaceCol lisi onsTemp90 = [];\n  let carRaceCol lisi onsTemp91 = [];\n  let carRaceCol lisi onsTemp92 = [];\n  let carRaceCol lisi onsTemp93 = [];\n  let carRaceCol lisi onsTemp94 = [];\n  let carRaceCol lisi onsTemp95 = [];\n  let carRaceCol lisi onsTemp96 = [];\n  let carRaceCol lisi onsTemp97 = [];\n  let carRaceCol lisi onsTemp98 = [];\n  let carRaceCol lisi onsTemp99 = [];\n  let carRaceCol lisi onsTemp100 = [];\n  let carRaceCol lisi ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] - i);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 10, 20, 20, 30, 30, 90, 90, 120, 122]\n  */\nconst multList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * i);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst divList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] / i);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfDivList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 / i);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfMultList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfMultList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 / i);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfIncrList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfIncrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfIncrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 + 0.5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDecrList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfDecrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 - 0.5);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfMultList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfMultList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 + 0.5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfIncrList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfIncrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfIncrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 + 0.5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDecrList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfDecrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 - 0.5);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfMultList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfMultList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 + 0.5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfIncrList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfIncrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfIncrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 + 0.5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDecrList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfDecrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 - 0.5);\n    i--;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfMultList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfMultList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 4, 4, 3, 9, 0, 122]\n  */\nconst halfMultList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] * 0.5 + 0.5);\n    i++;\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfIn", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = ''\n  let rem = x\n  while (x > 0) {\n    res = base ** rem\n    rem = x % base\n    x = x ** base\n  }\n  return res\n}\n\n/*\n Return the sum of the digits of num.\n >>> sumDigits(123)\n 6\n >>> sumDigits(12321)\n 6\n >>> sumDigits(0)\n 0\n >>> sumDigits(-1)\n -1\n >>> sumDigits(-123)\n 6\n >>> sumDigits(-12321)\n 6\n >>> sumDigits(-12321)\n 6\n >>> sumDigits(12321)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6\n >>> sumDigits(123)\n 6", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/45", "prompt": "/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter(5, 3)\n  7.5\n  */\nconst trianglePerimeter = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter2(5, 3)\n  7.5\n  */\nconst trianglePerimeter2 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea3(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter3(5, 3)\n  7.5\n  */\nconst trianglePerimeter3 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea4(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter4(5, 3)\n  7.5\n  */\nconst trianglePerimeter4 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea5(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter5(5, 3)\n  7.5\n  */\nconst trianglePerimeter5 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea6(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter6(5, 3)\n  7.5\n  */\nconst trianglePerimeter6 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea7(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter7(5, 3)\n  7.5\n  */\nconst trianglePerimeter7 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea8(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter8(5, 3)\n  7.5\n  */\nconst trianglePerimeter8 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea9(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter9(5, 3)\n  7.5\n  */\nconst trianglePerimeter9 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea10(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter10(5, 3)\n  7.5\n  */\nconst trianglePerimeter10 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea11(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter11(5, 3)\n  7.5\n  */\nconst trianglePerimeter11 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea12(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter12(5, 3)\n  7.5\n  */\nconst trianglePerimeter12 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea13(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter13(5, 3)\n  7.5\n  */\nconst trianglePerimeter13 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea14(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter14(5, 3)\n  7.5\n  */\nconst trianglePerimeter14 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea15(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter15(5, 3)\n  7.5\n  */\nconst trianglePerimeter15 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea16(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter16(5, 3)\n  7.5\n  */\nconst trianglePerimeter16 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea17(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter17(5, 3)\n  7.5\n  */\nconst trianglePerimeter17 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea18(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter18(5, 3)\n  7.5\n  */\nconst trianglePerimeter18 = (a, h) => {\n  return a + a + h\n}\n\n/*Given a triangle, return its area.\n  >>> triangleArea19(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given a triangle, return its perimeter.\n  >>> trianglePerimeter19(5, 3)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  if (n === 4) return 1;\n  if (n === 5) return 2;\n  if (n === 6) return 3;\n  if (n === 7) return 4;\n  if (n === 8) return 5;\n  if (n === 9) return 6;\n  if (n === 10) return 7;\n  if (n === 11) return 8;\n  if (n === 12) return 9;\n  if (n === 13) return 10;\n  if (n === 14) return 11;\n  if (n === 15) return 12;\n  if (n === 16) return 13;\n  if (n === 17) return 14;\n  if (n === 18) return 15;\n  if (n === 19) return 16;\n  if (n === 20) return 17;\n  if (n === 21) return 18;\n  if (n === 22) return 19;\n  if (n === 23) return 20;\n  if (n === 24) return 21;\n  if (n === 25) return 22;\n  if (n === 26) return 23;\n  if (n === 27) return 24;\n  if (n === 28) return 25;\n  if (n === 29) return 26;\n  if (n === 30) return 27;\n  if (n === 31) return 28;\n  if (n === 32) return 29;\n  if (n === 33) return 30;\n  if (n === 34) return 31;\n  if (n === 35) return 32;\n  if (n === 36) return 33;\n  if (n === 37) return 34;\n  if (n === 38) return 35;\n  if (n === 39) return 36;\n  if (n === 40) return 37;\n  if (n === 41) return 38;\n  if (n === 42) return 39;\n  if (n === 43) return 40;\n  if (n === 44) return 41;\n  if (n === 45) return 42;\n  if (n === 46) return 43;\n  if (n === 47) return 44;\n  if (n === 48) return 45;\n  if (n === 49) return 46;\n  if (n === 50) return 47;\n  if (n === 51) return 48;\n  if (n === 52) return 49;\n  if (n === 53) return 50;\n  if (n === 54) return 51;\n  if (n === 55) return 52;\n  if (n === 56) return 53;\n  if (n === 57) return 54;\n  if (n === 58) return 55;\n  if (n === 59) return 56;\n  if (n === 60) return 57;\n  if (n === 61) return 58;\n  if (n === 62) return 59;\n  if (n === 63) return 60;\n  if (n === 64) return 61;\n  if (n === 65) return 62;\n  if (n === 66) return 63;\n  if (n === 67) return 64;\n  if (n === 68) return 65;\n  if (n === 69) return 66;\n  if (n === 70) return 67;\n  if (n === 71) return 68;\n  if (n === 72) return 69;\n  if (n === 73) return 70;\n  if (n === 74) return 71;\n  if (n === 75) return 72;\n  if (n === 76) return 73;\n  if (n === 77) return 74;\n  if (n === 78) return 75;\n  if (n === 79) return 76;\n  if (n === 80) return 77;\n  if (n === 81) return 78;\n  if (n === 82) return 79;\n  if (n === 83) return 80;\n  if (n === 84) return 81;\n  if (n === 85) return 82;\n  if (n === 86) return 83;\n  if (n === 87) return 84;\n  if (n === 88) return 85;\n  if (n === 89) return 86;\n  if (n === 90) return 87;\n  if (n === 91) return 88;\n  if (n === 92) return 89;\n  if (n === 93) return 90;\n  if (n === 94) return 91;\n  if (n === 95) return 92;\n  if (n === 96) return 93;\n  if (n === 97) return 94;\n  if (n === 98) return 95;\n  if (n === 99) return 96;\n  if (n === 100) return 97;\n  if (n === 101) return 98;\n  if (n === 102) return 99;\n  if (n === 103) return 100;\n  if (n === 104) return 101;\n  if (n === 105) return 102;\n  if (n === 106) return 103;\n  if (n === 107) return 104;\n  if (n === 108) return 105;\n  if (n === 109) return 106;\n  if (n === 110) return 107;\n  if (n === 111) return 108;\n  if (n === 112) return 109;\n  if (n === 113) return 110;\n  if (n === 114) return 111;\n  if (n === 115) return 112;\n  if (n === 116) return 113;\n  if (n === 117) return 114;\n  if (n === 118) return 115;\n  if (n === 119) return 116;\n  if (n === 120) return 117;\n  if (n === 121) return 118;\n  if (n === 122) return 119;\n  if (n === 123) return 120;\n  if (n === 124) return 121;\n  if (n === 125) return 122;\n  if (n === 126) return 123;\n  if (n === 127) return 124;\n  if (n === 128) return 125;\n  if (n === 129) return 126;\n  if (n === 130) return 127;\n  if (n === 131) return 128;\n  if (n === 132) return 129;\n  if (n === 133) return 130;\n  if (n === 134) return 131;\n  if (n === 135) return 132;\n  if (n === 136) return 133;\n  if (n === 137) return 134;\n  if (n === 138) return 135;\n  if (n === 139) return 136;\n  if (n === 140) return 137;\n  if (n === 141) return 138;\n  if (n === 142) return 139;\n  if (n === 143) return 140;\n  if (n === 144) return 141;\n  if (n === 145) return 142;\n  if (n === 146) return 143;\n  if (n === 147) return 144;\n  if (n === 148) return 145;\n  if (n === 149) return 146;\n  if (n === 150) return 147;\n  if (n === 151) return 148;\n  if (n === 152) return 149;\n  if (n === 153) return 150;\n  if (n === 154) return 151;\n  if (n === 155) return 152;\n  if (n === 156) return 153;\n  if (n === 157) return 154;\n  if (n === 158) return 155;\n  if (n === 159) return 156;\n  if (n === 160) return 157;\n  if (n === 161) return 158;\n  if (n === 162) return 159;\n  if (n === 163) return 160;\n  if (n === 164) return 161;\n  if (n === 165) return 162;\n  if (n === 166) return 163;\n  if (n === 167) return 164;\n  if (n === 168) return 165;\n  if (n === 169) return 166;\n  if (n === 170) return 167;\n  if (n === 171) return 168;\n  if (n === 172) return 169;\n  if (n === 173) return 170;\n  if (n === 174) return 171;\n  if (n === 175) return 172;\n  if (n === 176) return 173;\n  if (n === 177) return 174;\n  if (n === 178) return 175;\n  if (n === 179) return 176;\n  if (n === 180) return 177;\n  if (n === 181) return 178;\n  if (n === 182) return 179;\n  if (n === 183) return 180;\n  if (n === 184) return 181;\n  if (n === 185) return 182;\n  if (n === 186) return 183;\n  if (n === 187) return 184;\n  if (n === 188) return 185;\n  if (n === 189) return 186;\n  if (n === 190) return 187;\n  if (n === 191) return 188;\n  if (n === 192) return 189;\n  if (n === 193) return 190;\n  if (n === 194) return 191;\n  if (n === 195) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort();\n  if (l.length % 2 === 0) {\n    return l[(l.length / 2) - 1];\n  } else {\n    return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n  }\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    let count = 0;\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] === l[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxCountIndex = i;\n    }\n  }\n  modes.push(l[maxCountIndex]);\n  return modes;\n};\n\n/*Return mode of elements in thelist l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> isPalindromeWithSpaces('aba')\n  true\n  >>> isPalindromeWithSpaces('aaaaa')\n  true\n  >>> isPalindromeWithSpaces('zbcd')\n  false\n  */\nconst isPalindromeWithSpaces = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .reverse()\n   .toLowerCase();\n  return text === reversed.replace(/\\s/g, \"\");\n};\n\n/*\n  Checks if given string is a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n;\n  }\n  return n % p;\n};\n\n/*\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  12\n  >>> modpow(3, 5, 7)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a new list with every element from input list except the last.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the last element removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @returns {Array} - new list with every element except the last one\n *\n * @example\n * const result = dropLast([1, 2, 3]);\n * console.log(result);\n * > [1, 2]\n */\nconst dropLast = list => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  return list.slice(0, list.length - 1);\n};\n\n/**\n * Returns a new list with every element from input list except the first.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the first element removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @returns {Array} - new list with every element except the first one\n *\n * @example\n * const result = dropFirst([1, 2, 3]);\n * console.log(result);\n * > [3]\n */\nconst dropFirst = list => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  return list.slice(1);\n};\n\n/**\n * Returns a new list with every element from input list except the element at index.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the element at index removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @param {Number} index - index of element to remove\n * @returns {Array} - new list with every element except the element at index\n *\n * @example\n * const result = drop([1, 2, 3], 1);\n * console.log(result);\n * > [2]\n */\nconst drop = (list, index) => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  return list.slice(0, index).concat(list.slice(index + 1));\n};\n\n/**\n * Returns a new list with every element from input list except the element at index.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the element at index removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @param {Number} index - index of element to remove\n * @returns {Array} - new list with every element except the element at index\n *\n * @example\n * const result = dropRight([1, 2, 3], 1);\n * console.log(result);\n * > [3]\n */\nconst dropRight = (list, index) => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  return list.slice(0, index).concat(list.slice(index + 1));\n};\n\n/**\n * Returns a new list with every element from input list except the element at index.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the element at index removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @param {Number} index - index of element to remove\n * @returns {Array} - new list with every element except the element at index\n *\n * @example\n * const result = dropRight([1, 2, 3], 1);\n * console.log(result);\n * > [3]\n */\nconst dropRightUntil = (list, index) => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  return list.slice(0, index).concat(list.slice(index + 1));\n};\n\n/**\n * Returns a new list with every element from input list except the element at index.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the element at index removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @param {Number} index - index of element to remove\n * @returns {Array} - new list with every element except the element at index\n *\n * @example\n * const result = dropRightUntil([1, 2, 3], 1);\n * console.log(result);\n * > [3]\n */\nconst dropRightUntil = (list, index) => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  return list.slice(0, index).concat(list.slice(index + 1));\n};\n\n/**\n * Returns a new list with every element from input list except the element at index.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the element at index removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @param {Number} index - index of element to remove\n * @returns {Array} - new list with every element except the element at index\n *\n * @example\n * const result = dropWhile([1, 2, 3], (val) => val < 3);\n * console.log(result);\n * > [1, 2]\n */\nconst dropWhile = (list, predicate) => {\n  if (list.length === 0) return [];\n  if (list.length === 1) return list[0];\n  const result = [];\n  let i = 0;\n  while (i < list.length) {\n    if (!predicate(list[i])) {\n      result.push(list[i]);\n    } else {\n      break;\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/**\n * Returns a new list with every element from input list except the element at index.\n * If input list is empty return an empty list.\n * If input list has one element return that element.\n * If input list has two or more elements return a new list with the first element removed\n * and the new list with the element at index removed.\n * If input list has one or zero elements return an empty list.\n *\n * Time complexity: `O(n)`\n *\n * @param {Array} list - input list\n * @param {Number} index - index of element to remove\n * @returns {Array} - new list with every element except the element at index\n *\n * @example\n * const result = dropWhile([1, 2, 3], (val) => val < 3);\n * console.log(result);\n * > [1, 2]\n */\nconst dropWhile = (list, predicate) => {\n  if (list.length === 0) return [];\n  if (list.length === 1) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftS=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftS = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftE=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftE = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftI=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftI = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftO=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftO = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftU=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftU = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftR=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftR = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftT=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftT = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftY=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hiftY = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShiftI#  (s)=> {  re turn s.split (\"\").m ap(ch => String.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeStopWords is a function thattakes string and returns string without stop words.\n  >>> removeStopWords('')\n  ''\n  >>> removeStopWords(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeStopWords('abcdef')\n  'abcdef'\n  >>> removeStopWords('aaaaa')\n  ''\n  >>> removeStopWords('aaBAA')\n  'aaBAA'\n  >>> removeStopWords('zbcd')\n  'zbcd'\n  */\nconst removeStopWords = (text) => {\n  return text.replace(/\\b[a-z]+\\b/g, '');\n};\n\n/*\n  removeNumbers is a function thattakes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/\\d+/g, '');\n};\n\n/*\n  removePunctuations is a function thattakes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[!,.?;:]/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function thattakes string and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removePunctuations is a function thattakes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[!,.?;:]/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function thattakes string and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removePunctuations is a function thattakes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[!,.?;:]/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function thattakes string and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removePunctuations is a function thattakes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[!,.?;:]/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function thattakes string and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removePunctuations is a function thattakes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'aaBAA'\n  >>> removePunctuations('zbcd')\n  '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are above w  threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are between w  threshold t.\n  >>> betweenThreshold([1, 2, 4, 10], 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst betweenThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are equal to w  threshold t.\n  >>> equalThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are less than w  threshold t.\n  >>> lessThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> lessThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are greater than w  threshold t.\n  >>> greaterThanThreshold([1, 2, 4, 10], 100)\n  false\n  >>> greaterThanThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are less than or equal to w  threshold t.\n  >>> lessThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are greater than or equal to w  threshold t.\n  >>> greaterThanOrEqualThreshold([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqualThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are in w  threshold t.\n  >>> inThreshold([1, 2, 4, 10], 100)\n  true\n  >>> inThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst inThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are not in w  threshold t.\n  >>> notInThreshold([1, 2, 4, 10], 100)\n  false\n  >>> notInThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst notInThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are in range [a, b]  threshold t.\n  >>> inRange([10, 20, 30, 40], 10)\n  true\n  >>> inRange([10, 20, 30, 40], 20)\n  true\n  >>> inRange([10, 20, 30, 40], 30)\n  true\n  >>> inRange([10, 20, 30, 40], 40)\n  true\n  >>> inRange([10, 20, 30, 40], 50)\n  false\n  >>> inRange([10, 20, 30, 40], 100)\n  false\n  >>> inRange([10, 20, 30, 40], 5)\n  true\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are not in range [a, b]  threshold t.\n  >>> notInRange([10, 20, 30, 40], 10)\n  false\n  >>> notInRange([10, 20, 30, 40], 20)\n  false\n  >>> notInRange([10, 20, 30, 40], 30)\n  false\n  >>> notInRange([10, 20, 30, 40], 40)\n  false\n  >>> notInRange([10, 20, 30, 40], 50)\n  true\n  >>> notInRange([10, 20, 30, 40], 100)\n  true\n  >>> notInRange([10, 20, 30, 40], 5)\n  true\n  */\nconst notInRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > a || l[i] < b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are in range [a, b]  threshold t.\n  >>> inRange([10, 20, 30, 40], 10)\n  true\n  >>> inRange([10, 20, 30, 40], 20)\n  true\n  >>> inRange([10, 20, 30, 40], 30)\n  true\n  >>> inRange([10, 20, 30, 40], 40)\n  true\n  >>> inRange([10, 20, 30, 40], 50)\n  false\n  >>> inRange([10, 20, 30, 40], 100)\n  false\n  >>> inRange([10, 20, 30, 40], 5)\n  true\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are not in range [a, b]  threshold t.\n  >>> notInRange([10, 20, 30, 40], 10)\n  false\n  >>> notInRange([10, 20, 30, 40], 20)\n  false\n  >>> notInRange([10, 20, 30, 40], 30)\n  false\n  >>> notInRange([10, 20, 30, 40], 40)\n  false\n  >>> notInRange([10, 20, 30, 40], 50)\n  true\n  >>> notInRange([10, 20, 30, 40], 100)\n  true\n  >>> notInRange([10, 20, 30, 40], 5)\n  true\n  */\nconst notInRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > a || l[i] < b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbersin the list l are in range [a, b]  threshold t.\n  >>> inRange([10, 20, 30, 40], 10)\n  true\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the remainder of dividing x by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulus of dividing x by y\n  >>> modulus(2, 3)\n  2\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the modulus of dividing x by y\n  >>> modulus(2, 3)\n  2\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of x\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = s0.length - 1; i >= 0; --i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === closingBracket;\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")\n  false\n  >>> correctNesting(\"<>\")\n  true\n  >>> correctNesting(\"<<><>>\")\n  true\n  >>> correctNesting(\"><<>\")\n  true\n  */\nconst correctNesting = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === '>' && closingBracket === '<';\n    });\n  });\n};\n\n/* Given a string of \"<\" and \">\", return true if brackets are properly nested.\n  >>> correctNesting(\"<\")", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let l = l.slice();\n  let n = l.length;\n  let m = n;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let c = 1;\n  let d = 1;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two list s .\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n >1  and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(6, 2)\n  1\n  >>> numberOfDivisors(6, 3)\n  2\n  >>> numberOfDivisors(6, 4)\n  1\n  >>> numberOfDivisors(6, 5)\n  0\n  >>> numberOfDivisors(6, 6)\n  1\n  */\nconst numberOfDivisors = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors2(6, 2)\n  1\n  >>> numberOfDivisors2(6, 3)\n  2\n  >>> numberOfDivisors2(6, 4)\n  1\n  >>> numberOfDivisors2(6, 5)\n  0\n  >>> numberOfDivisors2(6, 6)\n  1\n  */\nconst numberOfDivisors2 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors3(6, 2)\n  1\n  >>> numberOfDivisors3(6, 3)\n  2\n  >>> numberOfDivisors3(6, 4)\n  1\n  >>> numberOfDivisors3(6, 5)\n  0\n  >>> numberOfDivisors3(6, 6)\n  1\n  */\nconst numberOfDivisors3 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors4(6, 2)\n  1\n  >>> numberOfDivisors4(6, 3)\n  2\n  >>> numberOfDivisors4(6, 4)\n  1\n  >>> numberOfDivisors4(6, 5)\n  0\n  >>> numberOfDivisors4(6, 6)\n  1\n  */\nconst numberOfDivisors4 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors5(6, 2)\n  1\n  >>> numberOfDivisors5(6, 3)\n  2\n  >>> numberOfDivisors5(6, 4)\n  1\n  >>> numberOfDivisors5(6, 5)\n  0\n  >>> numberOfDivisors5(6, 6)\n  1\n  */\nconst numberOfDivisors5 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors6(6, 2)\n  1\n  >>> numberOfDivisors6(6, 3)\n  2\n  >>> numberOfDivisors6(6, 4)\n  1\n  >>> numberOfDivisors6(6, 5)\n  0\n  >>> numberOfDivisors6(6, 6)\n  1\n  */\nconst numberOfDivisors6 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors7(6, 2)\n  1\n  >>> numberOfDivisors7(6, 3)\n  2\n  >>> numberOfDivisors7(6, 4)\n  1\n  >>> numberOfDivisors7(6, 5)\n  0\n  >>> numberOfDivisors7(6, 6)\n  1\n  */\nconst numberOfDivisors7 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors8(6, 2)\n  1\n  >>> numberOfDivisors8(6, 3)\n  2\n  >>> numberOfDivisors8(6, 4)\n  1\n  >>> numberOfDivisors8(6, 5)\n  0\n  >>> numberOfDivisors8(6, 6)\n  1\n  */\nconst numberOfDivisors8 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors9(6, 2)\n  1\n  >>> numberOfDivisors9(6, 3)\n  2\n  >>> numberOfDivisors9(6, 4)\n  1\n  >>> numberOfDivisors9(6, 5)\n  0\n  >>> numberOfDivisors9(6, 6)\n  1\n  */\nconst numberOfDivisors9 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors10(6, 2)\n  1\n  >>> numberOfDivisors10(6, 3)\n  2\n  >>> numberOfDivisors10(6, 4)\n  1\n  >>> numberOfDivisors10(6, 5)\n  0\n  >>> numberOfDivisors10(6, 6)\n  1\n  */\nconst numberOfDivisors10 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors11(6, 2)\n  1\n  >>> numberOfDivisors11(6, 3)\n  2\n  >>> numberOfDivisors11(6, 4)\n  1\n  >>> numberOfDivisors11(6, 5)\n  0\n  >>> numberOfDivisors11(6, 6)\n  1\n  */\nconst numberOfDivisors11 = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ')\n  const paren_array_length = paren_array.length\n  let max_level = 0\n  let current_level = 0\n  let current_level_paren_array = []\n  let current_level_paren_array_length = 0\n  let current_level_paren_string = ''\n  let current_level_paren_string_length = 0\n  for (let i = 0; i < paren_array_length; i++) {\n    const char = paren_array[i]\n    if (char === '(') {\n      current_level_paren_array_length++\n      current_level_paren_array.push(char)\n    } else if (char === ')') {\n      current_level_paren_array_length--\n      current_level_paren_array.pop()\n      if (current_level_paren_array_length === 0) {\n        current_level_paren_string = current_level_paren_string.concat(current_level_paren_array)\n        current_level_paren_string_length += current_level_paren_array.length\n      }\n    } else {\n      current_level_paren_string = current_level_paren_string.concat(char)\n      current_level_paren_string_length++\n    }\n    if (current_level_paren_string_length >= current_level_paren_array_length) {\n      max_level = current_level\n    }\n    current_level++\n  }\n  return max_level\n}\n\n/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensEx = (paren_string) => {\n  const paren_array = paren_string.split(' ')\n  const paren_array_length = paren_array.length\n  let max_level = 0\n  let current_level = 0\n  let current_level_paren_array = []\n  let current_level_paren_array_length = 0\n  let current_level_paren_string = ''\n  let current_level_paren_string_length = 0\n  for (let i = 0; i < paren_array_length; i++) {\n    const char = paren_array[i]\n    if (char === '(') {\n      current_level_paren_array_length++\n      current_level_paren_array.push(char)\n    } else if (char === ')') {\n      current_level_paren_array_length--\n      current_level_paren_array.pop()\n      if (current_level_paren_array_length === 0) {\n        current_level_paren_string = current_level_paren_string.concat(current_level_paren_array)\n        current_level_paren_string_length += current_level_paren_array.length\n      }\n    } else {\n      current_level_paren_string = current_level_paren_string.concat(char)\n      current_level_paren_string_length++\n    }\n    if (current_level_paren_string_length >= current_level_paren_array_length) {\n      max_level = current_level\n    }\n    current_level++\n  }\n  return max_level\n}\n\n/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensEx2 = (paren_string) => {\n  const paren_array = paren_string.split(' ')\n  const paren_array_length = paren_array.length\n  let max_level = 0\n  let current_level = 0\n  let current_level_paren_array = []\n  let current_level_paren_array_length = 0\n  let current_level_paren_string = ''\n  let current_level_paren_string_length = 0\n  for (let i = 0; i < paren_array_length; i++) {\n    const char = paren_array[i]\n    if (char === '(') {\n      current_level_paren_array_length++\n      current_level_paren_array.push(char)\n    } else if (char === ')') {\n      current_level_paren_array_length--\n      current_level_paren_array.pop()\n      if (current_level_paren_array_length === 0) {\n        current_level_paren_string = current_level_paren_string.concat(current_level_paren_array)\n        current_level_paren_string_length += current_level_paren_array.length\n      }\n    } else {\n      current_level_paren_string = current_level_paren_string.concat(char)\n      current_level_paren_string_length++\n    }\n    if (current_level_paren_string_length >= current_level_paren_array_length) {\n      max_level = current_level\n    }\n    current_level++\n  }\n  return max_level\n}\n\n/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensEx3 = (paren_string) => {\n  const paren_array = paren_string.split(' ')\n  const paren_array_length = paren_array.length\n  let max_level = 0\n  let current_level = 0\n  let current_level_paren_array = []\n  let current_level_paren_array_length = 0\n  let current_level_paren_string = ''\n  let current_level_paren_string_length = 0\n  for (let i = 0; i < paren_array_length; i++) {\n    const char = paren_array[i]\n    if (char === '(') {\n      current_level_paren_array_length++\n      current_level_paren_array.push(char)\n    } else if (char === ')') {\n      current_level_paren_array_length--\n      current_level_paren_array.pop()\n      if (current_level_paren_array_length === 0) {\n        current_level_paren_string = current_level_paren_string.concat(current_level_paren_array)\n        current_level_paren_string_length += current_level_paren_array.length\n      }\n    } else {\n      current_level_paren_string = current_level_paren_string.concat(char)\n      current_level_paren_string_length++\n    }\n    if (current_level_paren_string_length >= current_level_paren_array_length) {\n      max_level = current_level\n    }\n    current_level++\n  }\n  return max_level\n}\n\n/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensEx4 = (paren_string) => {\n  const paren_array = paren_string.split(' ')\n  const paren_array_length = paren_array.length\n  let max_level = 0\n  let current_level = 0\n  let current_level_paren_array = []\n  let current_level_paren_array_length = 0\n  let current_level_paren_string = ''\n  let current_level_paren_string_length = 0\n  for (let i = 0; i < paren_array_length; i++) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 ton .\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 ton.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket .\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  const allBracketsCount = openingBracketsCount + closingBracketsCount;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/* Given a string of \"(\" and\")\", return true if every opening bracket  has a  corresponding\n  losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const opening", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 + .. ..\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 +....\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivated = [];\n  for (let i = 1; i < xs.length; i++) {\n    derivated.push(xs[i] - xs[i - 1]);\n  }\n  return derivated;\n};\n\n/* Find the roots of a polynomial using Newton's method.\n  xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 +....\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> roots([3, 1, 2, 4, 5])\n  [-0.5, 1.5]\n  >>> roots([1, 2, 3])\n  [-1.0, 2.0]\n  */\nconst roots = (coefficients) => {\n  let xs = coefficients.slice();\n  let x0 = xs[0];\n  let x1 = xs[1];\n  let x2 = xs[2];\n  let x3 = xs[3];\n  let x4 = xs[4];\n  let x5 = xs[5];\n  let x6 = xs[6];\n  let x7 = xs[7];\n  let x8 = xs[8];\n  let x9 = xs[9];\n  let x10 = xs[10];\n  let x11 = xs[11];\n  let x12 = xs[12];\n  let x13 = xs[13];\n  let x14 = xs[14];\n  let x15 = xs[15];\n  let x16 = xs[16];\n  let x17 = xs[17];\n  let x18 = xs[18];\n  let x19 = xs[19];\n  let x20 = xs[20];\n  let x21 = xs[21];\n  let x22 = xs[22];\n  let x23 = xs[23];\n  let x24 = xs[24];\n  let x25 = xs[25];\n  let x26 = xs[26];\n  let x27 = xs[27];\n  let x28 = xs[28];\n  let x29 = xs[29];\n  let x30 = xs[30];\n  let x31 = xs[31];\n  let x32 = xs[32];\n  let x33 = xs[33];\n  let x34 = xs[34];\n  let x35 = xs[35];\n  let x36 = xs[36];\n  let x37 = xs[37];\n  let x38 = xs[38];\n  let x39 = xs[39];\n  let x40 = xs[40];\n  let x41 = xs[41];\n  let x42 = xs[42];\n  let x43 = xs[43];\n  let x44 = xs[44];\n  let x45 = xs[45];\n  let x46 = xs[46];\n  let x47 = xs[47];\n  let x48 = xs[48];\n  let x49 = xs[49];\n  let x50 = xs[50];\n  let x51 = xs[51];\n  let x52 = xs[52];\n  let x53 = xs[53];\n  let x54 = xs[54];\n  let x55 = xs[55];\n  let x56 = xs[56];\n  let x57 = xs[57];\n  let x58 = xs[58];\n  let x59 = xs[59];\n  let x60 = xs[60];\n  let x61 = xs[61];\n  let x62 = xs[62];\n  let x63 = xs[63];\n  let x64 = xs[64];\n  let x65 = xs[65];\n  let x66 = xs[66];\n  let x67 = xs[67];\n  let x68 = xs[68];\n  let x69 = xs[69];\n  let x70 = xs[70];\n  let x71 = xs[71];\n  let x72 = xs[72];\n  let x73 = xs[73];\n  let x74 = xs[74];\n  let x75 = xs[75];\n  let x76 = xs[76];\n  let x77 = xs[77];\n  let x78 = xs[78];\n  let x79 = xs[79];\n  let x80 = xs[80];\n  let x81 = xs[81];\n  let x82 = xs[82];\n  let x83 = xs[83];\n  let x84 = xs[84];\n  let x85 = xs[85];\n  let x86 = xs[86];\n  let x87 = xs[87];\n  let x88 = xs[88];\n  let x89 = xs[89];\n  let x90 = xs[90];\n  let x91 = xs[91];\n  let x92 = xs[92];\n  let x93 = xs[93];\n  let x94 = xs[94];\n  let x95 = xs[95];\n  let x96 = xs[96];\n  let x97 = xs[97];\n  let x98 = xs[98];\n  let x99 = xs[99];\n  let x100 = xs[100];\n  let x101 = xs[101];\n  let x102 = xs[102];\n  let x103 = xs[103];\n  let x104 = xs[104];\n  let x105 = xs[105];\n  let x106 = xs[106];\n  let x107 = xs[107];\n  let x108 = xs[108];\n  let x109 = xs[109];\n  let x110 = xs[110];\n  let x111 = xs[111];\n  let x112 = xs[112];\n  let x113 = xs[113];\n  let x114 = xs[114];\n  let x115 = xs[115];\n  let x116 = xs[116];\n  let x117 = xs[117];\n  let x118 = xs[118];\n  let x119 = xs[119];\n  let x120 = xs[120];\n  let x121 = xs[121];\n  let x122 = xs[122];\n  let x123 = xs[123];\n  let x124 = xs[124];\n  let x125 = xs[125];\n  let x126 = xs[126];\n  let x127 = xs[127];\n  let x128 = xs[128];\n  let x129 = xs[129];\n  let x130 = xs[130];\n  let x131 = xs[131];\n  let x132 = xs[132];\n  let x133 = xs[133];\n  let x134 = xs[134];\n  let x135 = xs[135];\n  let x136 = xs[136];\n  let x137 = xs[137];\n  let x138 = xs[138];\n  let x139 = xs[139];\n  let x140 = xs[140];\n  let x141 = xs[141];\n  let x142 = xs[142];\n  let x143 = xs[143];\n  let x144 = xs[144];\n  let x145 = xs[145];\n  let x146 = xs[146];\n  let x147 = xs[147];\n  let x148 = xs[148];\n  let x149 = xs[149];\n  let x150 = xs[150];\n  let x151 = xs[151];\n  let x152 = xs[152];\n  let x153 = xs[153];\n  let x154 = xs[154];\n  let x155 = xs[155];\n  let x156 = xs[156];\n  let x157 = xs[157];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that computes the nth element of the fib f ib number sequence\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n*/", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n V", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = \"\";\n  for (let i = shift; i > 0; i--) {\n    res += x.toString().charAt(x.length - i - 1);\n  }\n  return res;\n};\n\n/*\n  Given a binary string x, return its decimal equivalent. \n  >>> binaryToDecimal(\"1100\")\n  5\n  >>> binaryToDecimal(\"1010\")\n  10\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1110\")\n  10\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15\n  >>> binaryToDecimal(\"1111\")\n  15", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    sum += char;\n  }\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let totalApples = apples + oranges;\n  let totalFruits = apples + oranges + fruits;\n  let mango = 0;\n  let count = 0;\n  for (let i = 0; i < totalFruits; i++) {\n    if (totalApples >= fruits) {\n      mango += fruits;\n      totalApples -= fruits;\n      count += fruits;\n      fruits -= 1;\n    }\n  }\n  return mango;\n};\n\n/*\n  In this task, you will be given a string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let totalApples = apples + oranges;\n  let totalFruits = apples + oranges + fruits;\n  let mango = 0;\n  let count = 0;\n  for (let i = 0; i < totalFruits; i++) {\n    if (totalApples >= fruits) {\n      mango += fruits;\n      totalApples -= fruits;\n      count += fruits;\n      fruits -= 1;\n    }\n  }\n  return mango;\n};\n\n/*\n  In this task, you will be given a string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let totalApples = apples + oranges;\n  let totalFruits = apples + oranges + fruits;\n  let mango = 0;\n  let count = 0;\n  for (let i = 0; i < totalFruits; i++) {\n    if (totalApples >= fruits) {\n      mango += fruits;\n      totalApples -= fruits;\n      count += fruits;\n      fruits -= 1;\n    }\n  }\n  return mango;\n};\n\n/*\n  In this task, you will be given a string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let totalApples = apples + oranges;\n  let totalFruits = apples + oranges + fruits;\n  let mango = 0;\n  let count = 0;\n  for (let i = 0; i < totalFruits; i++) {\n    if (totalApples >= fruits) {\n      mango += fruits;\n      totalApples -= fruits;\n      count += fruits;\n      fruits -= 1;\n    }\n  }\n  return mango;\n};\n\n/*\n  In this task, you will be given a string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let apples = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty , re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty, re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(e => e % 2 === 0);\n  const evenInd = even.findIndex(e => e === Math.min.apply(null, even));\n  const evenVal = even[evenInd];\n  const evenIndInd = evenInd.toString();\n  const evenValInd = evenInd.toString();\n  const evenIndIndInd = evenIndInd.toString();\n  const evenValIndIndInd = evenValInd.toString();\n  const evenIndIndIndInd = evenIndIndInd.toString();\n  const evenValIndIndIndInd = evenValIndIndInd.toString();\n  const evenIndIndIndIndInd = evenIndIndIndInd.toString();\n  const evenValIndIndIndIndInd = evenValIndIndIndInd.toString();\n  const evenIndIndIndIndIndInd = evenIndIndIndIndIndInd.toString();\n  const evenValIndIndIndIndIndInd = evenValIndIndIndIndIndInd.toString();\n  const evenIndIndIndIndIndIndInd = evenIndIndIndIndIndIndInd.toString();\n  const evenValIndIndIndIndIndIndInd = evenValIndIndIndIndIndIndInd.toString();\n  const evenIndIndIndIndIndIndIndIndInd = evenIndIndIndIndIndIndIndIndIndInd.toString();\n  const evenValIndIndIndIndIndIndIndIndIndInd = evenValIndIndIndIndIndIndIndIndIndIndInd.toString();\n  const evenIndIndIndIndIndIndIndIndIndIndIndInd = evenIndIndIndIndIndIndIndIndIndIndIndIndInd.toString();\n  const evenValIndIndIndIndIndIndIndIndIndIndIndIndInd = evenValIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd.toString();\n  const evenIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd = evenIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd.toString();\n  const evenValIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd = evenValIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd.toString();\n  const evenIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndInd = evenIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIndIn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      count = 1;\n    } else if (lst[i] === max) {\n      count++;\n    }\n  }\n  return count > 0? max : -1;\n};\n\n/*\n  You are given a list of integers lst. Write a function that returns true if all elements in the list are unique.\n  Examples:\n      unique([1, 1, 2, 2, 3, 3, 4, 4])\n      unique([1, 1, 2, 3, 4, 4])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, 4, 5])\n      unique([1, 1, 2, 3, 4, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minVal = lst[0];\n  let maxVal = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minVal) {\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal) {\n      maxVal = lst[i];\n    }\n  }\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending order.\n  Ascending order is when all the integers are in ascending order.\n\n  Examples:\n  ascendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingSortList([]) == []\n  */\nconst ascendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in descending order.\n  Descending order is when all the integers are in descending order.\n\n  Examples:\n  descendingSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  descendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  descendingSortList([]) == []\n  */\nconst descendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  ascendingOrDescendingSortList([]) == []\n  */\nconst ascendingOrDescendingSortList = (lst) => {\n  let sortedList = lst.slice();\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in ascending or descending order.\n  Ascending or descending order is when all the integers are in ascending or descending order.\n\n  Examples:\n  ascendingOrDescendingSortList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  ascendingOrDescendingSortList([5, 5, 5, 5]) == [5, 5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return -1;\n  }\n  if (a1 + b1 < c1) {\n    return 1;\n  }\n  if (a1 < b1) {\n    return -1;\n  }\n  if (a1 > b1) {\n    return 1;\n  }\n  if (a1 == b1 && b1 == c1) {\n    return 0;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  the triangle if the th ree si des form a validtriangle. Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it 's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let maxIndex = 0;\n  let maxSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    let currentSum = q[i] + maxSum;\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxIndex = i;\n      maxWeight = q[i] + maxSum;\n    }\n  }\n  return maxWeight <= maxSum;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let maxIndex = 0;\n  let maxSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    let currentSum = q[i] + maxSum;\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxIndex = i;\n      maxWeight = q[i] + maxSum;\n    }\n  }\n  return maxWeight <= maxSum;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let maxIndex = 0;\n  let maxSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    let currentSum = q[i] + maxSum;\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxIndex = i;\n      maxWeight = q[i] + maxSum;\n    }\n  }\n  return maxWeight <= maxSum;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let maxIndex = 0;\n  let maxSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    let currentSum = q[i] + maxSum;\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxIndex = i;\n      maxWeight = q[i] + maxSum;\n    }\n  }\n  return maxWeight <= maxSum;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let maxIndex = 0;\n  let maxSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    let currentSum = q[i] + maxSum;\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      maxIndex = i;\n      maxWeight = q[i] + maxSum;\n    }\n  }\n  return maxWeight <= maxSum;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) �", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic . A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the maximum number that needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the minimum number of elements that  needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the maximum number that needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the minimum number that needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the maximum number that needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the maximum number that needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n    if (arr[i] < arr[min]) {\n      min = i;\n    }\n  }\n  if (arr[max] === arr[min]) {\n    return arr[max];\n  }\n  if (arr[max] > arr[min]) {\n    return arr[max] - arr[min];\n  }\n  return arr[min] - arr[max];\n};\n\n/*\n  Given an array arr of integers,find the maximum number that needs  to be  changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return [];\n};\n\n/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower2(x, n / 2);\n  return isSimplePower2(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower3(x, n / 2);\n  return isSimplePower3(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower4(x, n / 2);\n  return isSimplePower4(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower5(x, n / 2);\n  return isSimplePower5(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower6(x, n / 2);\n  return isSimplePower6(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower7(x, n / 2);\n  return isSimplePower7(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower8(x, n / 2);\n  return isSimplePower8(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower9 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower9(x, n / 2);\n  return isSimplePower9(x * x, n / 2);\n};\n\n/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 0) return true;\n  if (a === 180) return false;\n  if (a > 64 || a < 1) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return false;\n  if (a % 5 === 0) return false;\n  if (a % 7 === 0) return false;\n  if (a % 11 === 0) return false;\n  if (a % 13 === 0) return false;\n  if (a % 17 === 0) return false;\n  if (a % 19 === 0) return false;\n  if (a % 23 === 0) return false;\n  if (a % 29 === 0) return false;\n  if (a % 37 === 0) return false;\n  if (a % 43 === 0) return false;\n  if (a % 51 === 0) return false;\n  if (a % 59 === 0) return false;\n  if (a % 67 === 0) return false;\n  if (a % 73 === 0) return false;\n  if (a % 81 === 0) return false;\n  if (a % 89 === 0) return false;\n  if (a % 97 === 0) return false;\n  if (a % 103 === 0) return false;\n  if (a % 111 === 0) return false;\n  if (a % 127 === 0) return false;\n  if (a % 135 === 0) return false;\n  if (a % 143 === 0) return false;\n  if (a % 151 === 0) return false;\n  if (a % 159 === 0) return false;\n  if (a % 167 === 0) return false;\n  if (a % 175 === 0) return false;\n  if (a % 183 === 0) return false;\n  if (a % 191 === 0) return false;\n  if (a % 199 === 0) return false;\n  if (a % 207 === 0) return false;\n  if (a % 215 === 0) return false;\n  if (a % 223 === 0) return false;\n  if (a % 231 === 0) return false;\n  if (a % 239 === 0) return false;\n  if (a % 247 === 0) return false;\n  if (a % 255 === 0) return false;\n  if (a % 265 === 0) return false;\n  if (a % 273 === 0) return false;\n  if (a % 281 === 0) return false;\n  if (a % 289 === 0) return false;\n  if (a % 297 === 0) return false;\n  if (a % 305 === 0) return false;\n  if (a % 313 === 0) return false;\n  if (a % 321 === 0) return false;\n  if (a % 329 === 0) return false;\n  if (a % 337 === 0) return false;\n  if (a % 345 === 0) return false;\n  if (a % 353 === 0) return false;\n  if (a % 361 === 0) return false;\n  if (a % 369 === 0) return false;\n  if (a % 377 === 0) return false;\n  if (a % 385 === 0) return false;\n  if (a % 393 === 0) return false;\n  if (a % 401 === 0) return false;\n  if (a % 409 === 0) return false;\n  if (a % 417 === 0) return false;\n  if (a % 425 === 0) return false;\n  if (a % 433 === 0) return false;\n  if (a % 441 === 0) return false;\n  if (a % 449 === 0) return false;\n  if (a % 457 === 0) return false;\n  if (a % 465 === 0) return false;\n  if (a % 473 === 0) return false;\n  if (a % 481 === 0) return false;\n  if (a % 489 === 0) return false;\n  if (a % 497 === 0) return false;\n  if (a % 505 === 0) return false;\n  if (a % 513 === 0) return false;\n  if (a % 521 === 0) return false;\n  if (a % 529 === 0) return false;\n  if (a % 537 === 0) return false;\n  if (a % 545 === 0) return false;\n  if (a % 553 === 0) return false;\n  if (a % 561 === 0) return false;\n  if (a % 569 === 0) return false;\n  if (a % 577 === 0) return false;\n  if (a % 585 === 0) return false;\n  if (a % 593 === 0) return false;\n  if (a % 601 === 0) return false;\n  if (a % 609 === 0) return false;\n  if (a % 617 === 0) return false;\n  if (a % 625 === 0) return false;\n  if (a % 633 === 0) return false;\n  if (a % 641 === 0) return false;\n  if (a % 649 === 0) return false;\n  if (a % 657 === 0) return false;\n  if (a % 665 === 0) return false;\n  if (a % 673 === 0) return false;\n  if (a % 681 === 0) return false;\n  if (a % 689 === 0) return false;\n  if (a % 697 === 0) return false;\n  if (a % 705 === 0) return false;\n  if (a % 713 === 0) return false;\n  if (a % 721 === 0) return false;\n  if (a % 729 === 0) return false;\n  if (a % 737 === 0) return false;\n  if (a % 745 === 0) return false;\n  if (a % 753 === 0) return false;\n  if (a % 761 === 0) return false;\n  if (a % 769 === 0) return false;\n  if (a % 777 === 0) return false;\n  if (a % 785 === 0) return false;\n  if (a % 793 === 0) return false;\n  if (a % 801 === 0) return false;\n  if (a % 809 === 0) return false;\n  if (a % 817 === 0) return false;\n  if (a % 825 === 0) return false;\n  if (a % 833 === 0) return false;\n  if (a % 841 === 0) return false;\n  if (a % 849 === 0) return false;\n  if (a % 857 === 0) return false;\n  if (a % 865 === 0) return false;\n  if (a % 873 === 0) return false;\n  if (a % 881 === 0) return false;\n  if (a % 889 === 0) return false;\n  if (a % 897 === 0) return false;\n  if (a % 905 === 0) return false;\n  if (a % 913 === 0) return false;\n  if (a % 921 === 0) return false;\n  if (a % 929 === 0) return false;\n  if (a % 937 === 0) return false;\n  if (a % 945 === 0) return false;\n  if (a % 953 === 0) return false;\n  if (a % 961 === 0) return false;\n  if (a % 969 === 0) return false;\n  if (a % 977 === 0) return false;\n  if (a % 985 === 0) return false;\n  if (a % 993 === 0) return false;\n  if (a % 1001 === 0) return false;\n  if (a % 1009 === 0) return false;\n  if (a % 1017 === 0) return false;\n  if (a % 1025 === 0) return false;\n  if (a % 1033 === 0) return false;\n  if (a % 1041 === 0) return false;\n  if (a % 1049 === 0) return false;\n  if (a % 1057 === 0) return false;\n  if (a % 1065 === 0) return false;\n  if (a % 1073 === 0) return false;\n  if (a % 1081 === 0) return false;\n  if (a % 1089 === 0) return false;\n  if (a % ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimal = num;\n  let count = 0;\n  let primes = [];\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime5 = true;\n  let isPrime7 = true;\n  let isPrime11 = true;\n  let isPrime13 = true;\n  let isPrime17 = true;\n  let isPrime19 = true;\n  let isPrime23 = true;\n  let isPrime29 = true;\n  let isPrime31 = true;\n  let isPrime37 = true;\n  let isPrime43 = true;\n  let isPrime47 = true;\n  let isPrime53 = true;\n  let isPrime59 = true;\n  let isPrime61 = true;\n  let isPrime67 = true;\n  let isPrime73 = true;\n  let isPrime79 = true;\n  let isPrime81 = true;\n  let isPrime87 = true;\n  let isPrime93 = true;\n  let isPrime99 = true;\n  let isPrime101 = true;\n  let isPrime103 = true;\n  let isPrime107 = true;\n  let isPrime111 = true;\n  let isPrime113 = true;\n  let isPrime121 = true;\n  let isPrime123 = true;\n  let isPrime125 = true;\n  let isPrime127 = true;\n  let isPrime129 = true;\n  let isPrime131 = true;\n  let isPrime133 = true;\n  let isPrime135 = true;\n  let isPrime137 = true;\n  let isPrime139 = true;\n  let isPrime141 = true;\n  let isPrime143 = true;\n  let isPrime145 = true;\n  let isPrime147 = true;\n  let isPrime149 = true;\n  let isPrime151 = true;\n  let isPrime153 = true;\n  let isPrime155 = true;\n  let isPrime157 = true;\n  let isPrime159 = true;\n  let isPrime161 = true;\n  let isPrime163 = true;\n  let isPrime165 = true;\n  let isPrime167 = true;\n  let isPrime169 = true;\n  let isPrime171 = true;\n  let isPrime173 = true;\n  let isPrime175 = true;\n  let isPrime177 = true;\n  let isPrime179 = true;\n  let isPrime181 = true;\n  let isPrime183 = true;\n  let isPrime185 = true;\n  let isPrime187 = true;\n  let isPrime189 = true;\n  let isPrime191 = true;\n  let isPrime193 = true;\n  let isPrime195 = true;\n  let isPrime197 = true;\n  let isPrime199 = true;\n  let isPrime201 = true;\n  let isPrime203 = true;\n  let isPrime205 = true;\n  let isPrime207 = true;\n  let isPrime209 = true;\n  let isPrime211 = true;\n  let isPrime213 = true;\n  let isPrime215 = true;\n  let isPrime217 = true;\n  let isPrime219 = true;\n  let isPrime221 = true;\n  let isPrime223 = true;\n  let isPrime225 = true;\n  let isPrime227 = true;\n  let isPrime229 = true;\n  let isPrime231 = true;\n  let isPrime233 = true;\n  let isPrime235 = true;\n  let isPrime237 = true;\n  let isPrime239 = true;\n  let isPrime241 = true;\n  let isPrime243 = true;\n  let isPrime245 = true;\n  let isPrime247 = true;\n  let isPrime249 = true;\n  let isPrime251 = true;\n  let isPrime253 = true;\n  let isPrime255;\n  primes.push(2);\n  primes.push(3);\n  primes.push(5);\n  primes.push(7);\n  primes.push(11);\n  primes.push(13);\n  primes.push(17);\n  primes.push(19);\n  primes.push(23);\n  primes.push(29);\n  primes.push(31);\n  primes.push(37);\n  primes.push(43);\n  primes.push(47);\n  primes.push(53);\n  primes.push(59);\n  primes.push(61);\n  primes.push(67);\n  primes.push(73);\n  primes.push(79);\n  primes.push(81);\n  primes.push(87);\n  primes.push(93);\n  primes.push(99);\n  primes.push(101);\n  primes.push(103);\n  primes.push(107);\n  primes.push(111);\n  primes.push(113);\n  primes.push(121);\n  primes.push(123);\n  primes.push(125);\n  primes.push(127);\n  primes.push(129);\n  primes.push(131);\n  primes.push(133);\n  primes.push(135);\n  primes.push(137);\n  primes.push(139);\n  primes.push(141);\n  primes.push(143);\n  primes.push(145);\n  primes.push(147);\n  primes.push(149);\n  primes.push(151);\n  primes.push(153);\n  primes.push(155);\n  primes.push(157);\n  primes.push(159);\n  primes.push(161);\n  primes.push(163);\n  primes.push(165);\n  primes.push(167);\n  primes.push(169);\n  primes.push(171);\n  primes.push(173);\n  primes.push(175);\n  primes.push(177);\n  primes.push(179);\n  primes.push(181);\n  primes.push(183);\n  primes.push(185);\n  primes.push(187);\n  primes.push(189);\n  primes.push(191);\n  primes.push(193);\n  primes.push(195);\n  primes.push(197);\n  primes.push(199);\n  primes.push(201);\n  primes.push(203);\n  primes.push(205);\n  primes.push(207);\n  primes.push(209);\n  primes.push(211);\n  primes.push(213);\n  primes.push(215);\n  primes.push(217);\n  primes.push(219);\n  primes.push(221);\n  primes.push(223);\n  primes.push(225);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er . Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = '';\n  let decimalString2 = '';\n  let decimalString3 = '';\n  let decimalString4 = '';\n  let decimalString5 = '';\n  let decimalString6 = '';\n  let decimalString7 = '';\n  let decimalString8 = '';\n  let decimalString9 = '';\n  let decimalString10 = '';\n  let decimalString11 = '';\n  let decimalString12 = '';\n  let decimalString13 = '';\n  let decimalString14 = '';\n  let decimalString15 = '';\n  let decimalString16 = '';\n  let decimalString17 = '';\n  let decimalString18 = '';\n  let decimalString19 = '';\n  let decimalString20 = '';\n  let decimalString21 = '';\n  let decimalString22 = '';\n  let decimalString23 = '';\n  let decimalString24 = '';\n  let decimalString25 = '';\n  let decimalString26 = '';\n  let decimalString27 = '';\n  let decimalString28 = '';\n  let decimalString29 = '';\n  let decimalString30 = '';\n  let decimalString31 = '';\n  let decimalString32 = '';\n  let decimalString33 = '';\n  let decimalString34 = '';\n  let decimalString35 = '';\n  let decimalString36 = '';\n  let decimalString37 = '';\n  let decimalString38 = '';\n  let decimalString39 = '';\n  let decimalString40 = '';\n  let decimalString41 = '';\n  let decimalString42 = '';\n  let decimalString43 = '';\n  let decimalString44 = '';\n  let decimalString45 = '';\n  let decimalString46 = '';\n  let decimalString47 = '';\n  let decimalString48 = '';\n  let decimalString49 = '';\n  let decimalString50 = '';\n  let decimalString51 = '';\n  let decimalString52 = '';\n  let decimalString53 = '';\n  let decimalString54 = '';\n  let decimalString55 = '';\n  let decimalString56 = '';\n  let decimalString57 = '';\n  let decimalString58 = '';\n  let decimalString59 = '';\n  let decimalString60 = '';\n  let decimalString61 = '';\n  let decimalString62 = '';\n  let decimalString63 = '';\n  let decimalString64 = '';\n  let decimalString65 = '';\n  let decimalString66 = '';\n  let decimalString67 = '';\n  let decimalString68 = '';\n  let decimalString69 = '';\n  let decimalString70 = '';\n  let decimalString71 = '';\n  let decimalString72 = '';\n  let decimalString73 = '';\n  let decimalString74 = '';\n  let decimalString75 = '';\n  let decimalString76 = '';\n  let decimalString77 = '';\n  let decimalString78 = '';\n  let decimalString79 = '';\n  let decimalString80 = '';\n  let decimalString81 = '';\n  let decimalString82 = '';\n  let decimalString83 = '';\n  let decimalString84 = '';\n  let decimalString85 = '';\n  let decimalString86 = '';\n  let decimalString87 = '';\n  let decimalString88 = '';\n  let decimalString89 = '';\n  let decimalString90 = '';\n  let decimalString91 = '';\n  let decimalString92 = '';\n  let decimalString93 = '';\n  let decimalString94 = '';\n  let decimalString95 = '';\n  let decimalString96 = '';\n  let decimalString97 = '';\n  let decimalString98 = '';\n  let decimalString99 = '';\n  let decimalString100 = '';\n  let decimalString101 = '';\n  let decimalString102 = '';\n  let decimalString103 = '';\n  let decimalString104 = '';\n  let decimalString105 = '';\n  let decimalString106 = '';\n  let decimalString107 = '';\n  let decimalString108 = '';\n  let decimalString109 = '';\n  let decimalString110 = '';\n  let decimalString111 = '';\n  let decimalString112 = '';\n  let decimalString113 = '';\n  let decimalString114 = '';\n  let decimalString115 = '';\n  let decimalString116 = '';\n  let decimalString117 = '';\n  let decimalString118 = '';\n  let decimalString119 = '';\n  let decimalString120 = '';\n  let decimalString121 = '';\n  let decimalString122 = '';\n  let decimalString123 = '';\n  let decimalString124 = '';\n  let decimalString125 = '';\n  let decimalString126 = '';\n  let decimalString127 = '';\n  let decimalString128 = '';\n  let decimalString129 = '';\n  let decimalString130 = '';\n  let decimalString131 = '';\n  let decimalString132 = '';\n  let decimalString133 = '';\n  let decimalString134 = '';\n  let decimalString135 = '';\n  let decimalString136 = '';\n  let decimalString137 = '';\n  let decimalString138 = '';\n  let decimalString139 = '';\n  let decimalString140 = '';\n  let decimalString141 = '';\n  let decimalString142 = '';\n  let decimalString143 = '';\n  let decimalString144 = '';\n  let decimalString145 = '';\n  let decimalString146 = '';\n  let decimalString147 = '';\n  let decimalString148 = '';\n  let decimalString149 = '';\n  let decimalString150 = '';\n  let decimalString151 = '';\n  let decimalString152 = '';\n  let decimalString153 = '';\n  let decimalString154 = '';\n  let decimalString155 = '';\n  let decimalString156 = '';\n  let decimalString157 = '';\n  let decimalString158 = '';\n  let decimalString159 = '';\n  let decimalString160 = '';\n  let decimalString161 = '';\n  let decimalString162 = '';\n  let decimalString163 = '';\n  let decimalString164 = '';\n  let decimalString165 = '';\n  let decimalString166 = '';\n  let decimalString167 = '';\n  let decimalString168 = '';\n  let decimalString169 = '';\n  let decimalString170 = '';\n  let decimalString171 = '';\n  let decimalString172 = '';\n  let decimalString173 = '';\n  let decimalString174 = '';\n  let decimalString175 = '';\n  let decimalString176 = '';\n  let decimalString177 = '';\n  let decimalString178 = '';\n  let decimalString179 = '';\n  let decimalString180 = '';\n  let decimalString181 = '';\n  let decimalString182 = '';\n  let decimalString183 = '';\n  let decimalString184 = '';\n  let decimalString185 = '';\n  let decimalString186 = '';\n  let decimalString187 = '';\n  let decimalString188 = '';\n  let decimalString189 = '';\n  let decimalString190 = '';\n  let decimalString191 = '';\n  let decimalString192 = '';\n  let decimalString193 = '';\n  let decimalString194 = '';\n  let decimalString195 = '';\n  let decimalString196 = '';\n  let decimalString197 = '';\n  let decimalString198 = '';\n  let decimalString199 = '';\n  let decimalString200 = '';\n  let decimalString201 = '';\n  let decimalString202 = '';\n  let decimalString203 = '';\n  let decimalString204 = '';\n  let decimalString205 = '';\n  let decimalString206 = '';\n  let decimalString207 = '';\n  let decimalString208 = '';\n  let decimalString209 = '';\n  let decimalString210 = '';\n  let decimalString211 = '';\n  let decimalString212 = '';\n  let decimalString213 = '';\n  let decimalString214 = '';\n  let decimalString215 = '';\n  let decimalString216 = '';\n  let decimalString217 = '';\n  let decimalString218 = '';\n  let decimalString219 = '';\n  let decimalString220 = '';\n  let decimalString221 = '';\n  let decimalString222 = '';\n  let decimalString223 = '';\n  let decimalString224 = '';\n  let decimalString225 = '';\n  let decimalString226 = '';\n  let decimalString227 = '';\n  let decimalString228 = '';\n  let decimalString229 = '';\n  let decimalString", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ------------------------------------------------------------------------------------------\n// ----------------------------------------------------------------", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count += 1;\n      if (count === 3) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (s.charAt(0) === s.charAt(s.length - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*You are given a string s.\n Yourtask is to check if its palindrome or not.\n A string is palindrome if its first and last letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => true\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  if (s.length <= 1) {\n    return true;\n  }\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3 .7               A\n         > 3 .3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3.7               A\n         > 3.3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade >= 0? grade : grade * -1)\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverage = gradesSum / gradesArray.length\n  const gradesGrades = gradesArray.map((grade, index) => {\n    const gradeLetter = grade >= 0? `+${grade}` : `-${grade}`\n    const gradeLetterGrade = gradeLetter\n    if (gradeLetterGrade === gradeLetter) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}+`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `+${gradeLetter}-`) {\n      return gradeLetterGrade\n    }\n    if (gradeLetterGrade === `-${gradeLetter}-`) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeNumber = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '1') {\n      primeNumber++\n    }\n  }\n  return primeNumber === string.length\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are vowels\n  Examples\n  vowelCount('Hello') == 5\n  vowelCount('abcdcba') == 3\n  vowelCount('kittens') == 4\n  vowelCount('orange') == 0\n  */\nconst vowelCount = (string) => {\n  let vowelCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      vowelCount++\n    }\n  }\n  return vowelCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are consonants\n  Examples\n  consonantCount('Hello') == 5\n  consonantCount('abcdcba') == 3\n  consonantCount('kittens') == 4\n  consonantCount('orange') == 0\n  */\nconst consonantCount = (string) => {\n  let consonantCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u') {\n      consonantCount++\n    }\n  }\n  return consonantCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are numbers\n  Examples\n  numberCount('Hello') == 5\n  numberCount('abcdcba') == 3\n  numberCount('kittens') == 4\n  numberCount('orange') == 0\n  */\nconst numberCount = (string) => {\n  let numberCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= '0' && string[i] <= '9') {\n      numberCount++\n    }\n  }\n  return numberCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are letters\n  Examples\n  letterCount('Hello') == 5\n  letterCount('abcdcba') == 3\n  letterCount('kittens') == 4\n  letterCount('orange') == 0\n  */\nconst letterCount = (string) => {\n  let letterCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      letterCount++\n    }\n  }\n  return letterCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are punctuation\n  Examples\n  punctuationCount('Hello') == 5\n  punctuationCount('abcdcba') == 3\n  punctuationCount('kittens') == 4\n  punctuationCount('orange') == 0\n  */\nconst punctuationCount = (string) => {\n  let punctuationCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= '!' && string[i] <= '@') {\n      punctuationCount++\n    }\n  }\n  return punctuationCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are spaces\n  Examples\n  spaceCount('Hello') == 5\n  spaceCount('abcdcba') == 3\n  spaceCount('kittens') == 4\n  spaceCount('orange') == 0\n  */\nconst spaceCount = (string) => {\n  let spaceCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      spaceCount++\n    }\n  }\n  return spaceCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are uppercase letters\n  Examples\n  uppercaseLetterCount('Hello') == 5\n  uppercaseLetterCount('abcdcba') == 3\n  uppercaseLetterCount('kittens') == 4\n  uppercaseLetterCount('orange') == 0\n  */\nconst uppercaseLetterCount = (string) => {\n  let uppercaseLetterCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= 'A' && string[i] <= 'Z') {\n      uppercaseLetterCount++\n    }\n  }\n  return uppercaseLetterCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are lowercase letters\n  Examples\n  lowercaseLetterCount('Hello') == 5\n  lowercaseLetterCount('abcdcba') == 3\n  lowercaseLetterCount('kittens') == 4\n  lowercaseLetterCount('orange') == 0\n  */\nconst lowercaseLetterCount = (string) => {\n  let lowercaseLetterCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      lowercaseLetterCount++\n    }\n  }\n  return lowercaseLetterCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are digits\n  Examples\n  digitCount('Hello') == 5\n  digitCount('abcdcba') == 3\n  digitCount('kittens') == 4\n  digitCount('orange') == 0\n  */\nconst digitCount = (string) => {\n  let digitCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= '0' && string[i] <= '9') {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are special characters\n  Examples\n  specialCharacterCount('Hello') == 5\n  specialCharacterCount('abcdcba') == 3\n  specialCharacterCount('kittens') == 4\n  specialCharacterCount('orange') == 0\n  */\nconst specialCharacterCount = (string) => {\n  let specialCharacterCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= '!' && string[i] <= '@') {\n      specialCharacterCount++\n    }\n  }\n  return specialCharacterCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are numbers\n  Examples\n  numberCount('Hello') == 5\n  numberCount('abcdcba') == 3\n  numberCount('kittens') == 4\n  numberCount('orange') == 0\n  */\nconst numberCount = (string) => {\n  let numberCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= '0' && string[i] <= '9') {\n      numberCount++\n    }\n  }\n  return numberCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are letters\n  Examples\n  letterCount('Hello') == 5\n  letterCount('abcdcba') == 3\n  letterCount('kittens') == 4\n  letterCount('orange') == 0\n  */\nconst letterCount = (string) => {\n  let letterCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n      letterCount++\n    }\n  }\n  return letterCount\n}\n\n/*Write a function that takes a string and returns the number of characters in the string that are punctuation\n  Examples\n  punctuationCount('Hello') == 5\n  punctuationCount('abcdcba') == 3\n  punctuationCount('kittens') == 4\n  punctuationCount('orange') == 0\n  */\nconst punctuationCount = (string) => {\n  let punctuationCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] >= '!' && string[i] <= '@') {\n      punctuationCount++\n    }\n  }\n  return punctuationCount\n}", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n  c onst t = 0;\n  c onst i = 1;\n  c onst j = 1;\n  c onst k = 1;\n  c onst l = n;\n  c onst m = n;\n  c onst n = n;\n  c onst o = n;\n  c onst p = n;\n  c onst q = n;\n  c onst r = n;\n  c onst s = n;\n  c onst t = n;\n  c onst u = n;\n  c onst v = n;\n  c onst w = n;\n  c onst x = n;\n  c onst y = n;\n  c onst z = n;\n  c onst A = n;\n  c onst B = n;\n  c onst C = n;\n  c onst D = n;\n  c onst E = n;\n  c onst F = n;\n  c onst G = n;\n  c onst H = n;\n  c onst I = n;\n  c onst J = n;\n  c onst K = n;\n  c onst L = n;\n  c onst M = n;\n  c onst N = n;\n  c onst O = n;\n  c onst P = n;\n  c onst Q = n;\n  c onst R = n;\n  c onst S = n;\n  c onst T = n;\n  c onst U = n;\n  c onst V = n;\n  c onst W = n;\n  c onst X = n;\n  c onst Y = n;\n  c onst Z = n;\n  c onst a = n;\n  c onst b = n;\n  c onst c = n;\n  c onst d = n;\n  c onst e = n;\n  c onst f = n;\n  c onst g = n;\n  c onst h = n;\n  c onst i = n;\n  c onst j = n;\n  c onst k = n;\n  c onst l = n;\n  c onst m = n;\n  c onst n = n;\n  c onst o = n;\n  c onst p = n;\n  c onst q = n;\n  c onst r = n;\n  c onst s = n;\n  c onst t = n;\n  c onst u = n;\n  c onst v = n;\n  c onst w = n;\n  c onst x = n;\n  c onst y = n;\n  c onst z = n;\n  c onst A = n;\n  c onst B = n;\n  c onst C = n;\n  c onst D = n;\n  c onst E = n;\n  c onst F = n;\n  c onst G = n;\n  c onst H = n;\n  c onst I = n;\n  c onst J = n;\n  c onst K = n;\n  c onst L = n;\n  c onst M = n;\n  c onst N = n;\n  c onst O = n;\n  c onst P = n;\n  c onst Q = n;\n  c onst R = n;\n  c onst S = n;\n  c onst T = n;\n  c onst U = n;\n  c onst V = n;\n  c onst W = n;\n  c onst X = n;\n  c onst Y = n;\n  c onst Z = n;\n  c onst a = n;\n  c onst b = n;\n  c onst c = n;\n  c onst d = n;\n  c onst e = n;\n  c onst f = n;\n  c onst g = n;\n  c onst h = n;\n  c onst i = n;\n  c onst j = n;\n  c onst k = n;\n  c onst l = n;\n  c onst m = n;\n  c onst n = n;\n  c onst o = n;\n  c onst p = n;\n  c onst q = n;\n  c onst r = n;\n  c onst s = n;\n  c onst t = n;\n  c onst u = n;\n  c onst v = n;\n  c onst w = n;\n  c onst x = n;\n  c onst y = n;\n  c onst z = n;\n  c onst A = n;\n  c onst B = n;\n  c onst C = n;\n  c onst D = n;\n  c onst E = n;\n  c onst F = n;\n  c onst G = n;\n  c onst H = n;\n  c onst I = n;\n  c onst J = n;\n  c onst K = n;\n  c onst L = n;\n  c onst M = n;\n  c onst N = n;\n  c onst O = n;\n  c onst P = n;\n  c onst Q = n;\n  c onst R = n;\n  c onst S = n;\n  c onst T = n;\n  c onst U = n;\n  c onst V = n;\n  c onst W = n;\n  c onst X = n;\n  c onst Y = n;\n  c onst Z = n;\n  c onst a = n;\n  c onst b = n;\n  c onst c = n;\n  c onst d = n;\n  c onst e = n;\n  c onst f = n;\n  c onst g = n;\n  c onst h = n;\n  c onst i = n;\n  c onst j = n;\n  c onst k = n;\n  c onst l = n;\n  c onst m = n;\n  c onst n = n;\n  c onst o = n;\n  c onst p = n;\n  c onst q = n;\n  c onst r = n;\n  c onst s = n;\n  c onst t = n;\n  c onst u = n;\n  c onst v = n;\n  c onst w = n;\n  c onst x = n;\n  c onst y = n;\n  c onst z = n;\n  c onst A = n;\n  c onst B = n;\n  c onst C = n;\n  c onst D = n;\n  c onst E = n;\n  c onst F = n;\n  c onst G = n;\n  c onst H = n;\n  c onst I = n;\n  c onst J = n;\n  c onst K = n;\n  c onst L = n;\n  c onst M = n;\n  c onst N = n;\n  c onst O = n;\n  c onst P = n;\n  c onst Q = n;\n  c onst R = n;\n  c onst S = n;\n  c onst T = n;\n  c onst U = n;\n  c onst V = n;\n  c onst W = n;\n  c onst X = n;\n  c onst Y = n;\n  c onst Z = n;\n  c onst a = n;\n  c onst b = n;\n  c onst c = n;\n  c onst d = n;\n  c onst e = n;\n  c on", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the output should be \"1\".\n      For N = 150, the output should be \"11\".\n      For N = 147, the output should be \"111\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i!== lst[i]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers lst. remove all the elements that are at od d indi ces..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let newList = [];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString +='';\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2) ...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  lst.forEach((row, index) => {\n    if (index === 0) {\n      row.forEach((col, i) => {\n        res.push([i, col]);\n      });\n    } else {\n      row.forEach((col, i) => {\n        if (col === x) {\n          res.push([index, col]);\n        }\n      });\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (1, 0), (2, 1), (2, 5)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\nconst getCol = (lst, x) => {\n  const res = [];\n  lst.forEach((row, index) => {\n    if (index === 0) {\n      row.forEach((col, i) => {\n        res.push([i, col]);\n      });\n    } else {\n      row.forEach((col, i) => {\n        if (col === x) {\n          res.push([index, col]);\n        }\n      });\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  lst.forEach((row, index) => {\n    if (index === 0) {\n      row.forEach((col, i) => {\n        res.push([i, col]);\n      });\n    } else {\n      row.forEach((col, i) => {\n        if (col === x) {\n          res.push([index, col]);\n        }\n      });\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  lst.forEach((row, index) => {\n    if (index === 0) {\n      row.forEach((col, i) => {\n        res.push([i, col]);\n      });\n    } else {\n      row.forEach((col, i) => {\n        if (col === x) {\n          res.push([index, col]);\n        }\n      });\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  lst.forEach((row, index) => {\n    if (index === 0) {\n      row.forEach((col, i) => {\n        res.push([i, col]);\n      });\n    } else {\n      row.forEach((col, i) => {\n        if (col === x) {\n          res.push([index, col]);\n        }\n      });\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd , \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n .\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  let newAlphabet = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet2 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet3 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet4 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet5 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet6 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet7 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet8 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet9 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet10 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet11 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet12 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet13 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet14 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet15 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet16 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet17 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet18 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet19 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet20 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet21 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet22 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet23 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet24 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet25 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet26 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet27 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet28 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet29 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet30 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet31 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet32 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet33 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet34 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet35 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet36 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet37 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet38 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet39 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet40 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet41 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet42 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet43 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet44 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet45 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet46 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet47 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet48 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet49 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet50 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet51 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet52 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet53 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet54 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet55 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet56 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet57 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet58 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });\n  let newAlphabet59 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) - i;\n  });\n  let newAlphabet60 = alphabet.map((letter, i) => {\n    return letter.charCodeAt(0) + i;\n  });", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxElement = numbers.reduce((max, number) => {\n    return Math.max(max, number);\n  }, numbers[0]);\n  return numbers.map(number => Math.max(number, maxElement));\n};\n\n/* Froma given list of integers, generate a list o f  rolling minimum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const minElement = numbers.reduce((min, number) => {\n    return Math.min(min, number);\n  }, numbers[0]);\n  return numbers.map(number => Math.min(number, minElement));\n};\n\n/* Froma given list of integers, generate a list o f  rolling sum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  return numbers.reduce((sum, number) => {\n    return sum + number;\n  }, 0);\n};\n\n/* Froma given list of integers, generate a list o f  rolling product element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingProduct([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingProduct = (numbers) => {\n  return numbers.reduce((product, number) => {\n    return product * number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingQuotient([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingQuotient = (numbers) => {\n  return numbers.reduce((quotient, number) => {\n    return quotient / number;\n  }, 1);\n};\n\n/* Froma given list of integers, generate a list o f  rolling quotient ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  lst.forEach((el) => {\n    if (el < smallest) {\n      secondSmallest = smallest\n      smallest = el\n    } else if (el < secondSmallest) {\n      secondSmallest = el\n    }\n  })\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) {\n    return true;\n  }\n  if (y === z) {\n    return false;\n  }\n  if (x % y === 0) {\n    if (x % z === 0) {\n      return true;\n    }\n    return false;\n  }\n  if (x % z === 0) {\n    return false;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    const letter = englishLetters[char];\n    \n    if (letter) {\n      newMessage = newMessage.replace(letter, `th${letter}`);\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS K", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of the factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of the factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of the factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of the factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given numbers and return the sum of the factors.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = lst[i];\n    for (let j = i; j < lst.length; j++) {\n      if (lst[j] % prime === 0) {\n        prime = lst[j];\n      }\n    }\n    if (prime > max", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false .\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key]!== String(dict[key])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  let product = 0;\n  if (a > 0 && b > 0) {\n    product = a % b;\n  }\n  return product;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upperCount += 1;\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string s, count the number of lowercasev owels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let lowerCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lowerCount += 1;\n    }\n  }\n  return lowerCount;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowelsOdd('aBCdEf') returns 3\n  countVowelsOdd('abcdefg') returns 0\n  countVowelsOdd('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowelsEven('aBCdEf') returns 3\n  countVowelsEven('abcdefg') returns 0\n  countVowelsEven('dBBE') returns 0\n  */\nconst countVowelsEven = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 3\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 3\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value)\n  const integerPartOfValue = Math.floor(number)\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 === 0\n  const integerPartOfValueIsOdd = integerPartOfValue % 2!== 0\n  const integerPartOfValueIsPositive = integerPartOfValue > 0\n  const integerPartOfValueIsNegative = integerPartOfValue < 0\n  const integerPartOfValueIsEven = integerPartOfValue % 2 ", "passed": 0, "run_status": 2}
