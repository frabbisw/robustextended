{"task_id": "JavaScript/0", "prompt": "/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Check if given array has any elements closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < number", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = [];\n  let open_brace_count = 0;\n  let closed_brace_count = 0;\n  let open_paren_count = 0;\n  let close_paren_count = 0;\n  let paren_group = [];\n  let paren_group_length = 0;\n  let paren_group_length_count = 0;\n  let paren_group_length_count_max = 0;\n  let paren_group_length_count_min = 0;\n  let paren_group_length_count_sum = 0;\n  let paren_group_length_count_sum_max = 0;\n  let paren_group_length_count_sum_min = 0;\n  let paren_group_length_count_sum_avg = 0;\n  let paren_group_length_count_sum_avg_max = 0;\n  let paren_group_length_count_sum_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n  let paren_group_length_count_sum_avg_avg_min = 0;\n  let paren_group_length_count_sum_avg_avg_avg = 0;\n  let paren_group_length_count_sum_avg_avg_max = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverse = string. split( '' ).rever se( ).join ('');\n  const prefix = string. split( '' ).take ( );\n  const palindrome = reverse. split( '' ).take ( );\n  prefix.push ( palindrome );\n  return prefix.join ( '' );\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindro", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStones = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(i);\n  }\n  return arrangeStonesHelper(arr);\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n  7\n  */\nconst arrangeStonesHelper = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (arr[i] > arr[j]) {\n        count += arrangeStonesHelper(arr.slice(0, i).concat(arr.slice(i + 1, j + 1)));\n      } else {\n        count += arrangeStonesHelper(arr.slice(0, j).concat(arr.slice(j + 1, i + 1)));\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the number of ways to arrange the stones in a  pile\n  of n stones.\n  Examples:\n  >>> arrangeStones(3)\n  3\n  >>> arrangeStones(4)\n  5\n  >>> arrangeStones(5)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0;\n  const evenInRange = even && x >= 0 && x <= y;\n  const oddInRange = odd && x >= 0 && x <= y;\n  const evenInRangeButNotOdd = even &&!odd;\n  const oddInRangeButNotEven = odd &&!even;\n  if (evenInRange && evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange && evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes tw o  positiv e numbers x and y and returns the\n  biggest odd integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0;\n  const evenInRange = even && x >= 0 && x <= y;\n  const oddInRange = odd && x >= 0 && x <= y;\n  const evenInRangeButNotOdd = even &&!odd;\n  const oddInRangeButNotEven = odd &&!even;\n  if (evenInRange && evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange && evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return y;\n  }\n  return -1;\n};\n\n/*This function takes tw o  positiv e numbers x and y and returns the\n  biggest integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0;\n  const evenInRange = even && x >= 0 && x <= y;\n  const oddInRange = odd && x >= 0 && x <= y;\n  const evenInRangeButNotOdd = even &&!odd;\n  const oddInRangeButNotEven = odd &&!even;\n  if (evenInRange && evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange && evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes tw o  positiv e numbers x and y and returns the\n  biggest integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0;\n  const evenInRange = even && x >= 0 && x <= y;\n  const oddInRange = odd && x >= 0 && x <= y;\n  const evenInRangeButNotOdd = even &&!odd;\n  const oddInRangeButNotEven = odd &&!even;\n  if (evenInRange && evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange && evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes tw o  positiv e numbers x and y and returns the\n  biggest integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0;\n  const evenInRange = even && x >= 0 && x <= y;\n  const oddInRange = odd && x >= 0 && x <= y;\n  const evenInRangeButNotOdd = even &&!odd;\n  const oddInRangeButNotEven = odd &&!even;\n  if (evenInRange && evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange && evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes tw o  positiv e numbers x and y and returns the\n  biggest integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0;\n  const evenInRange = even && x >= 0 && x <= y;\n  const oddInRange = odd && x >= 0 && x <= y;\n  const evenInRangeButNotOdd = even &&!odd;\n  const oddInRangeButNotEven = odd &&!even;\n  if (evenInRange && evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return x;\n  }\n  if (evenInRange && evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd && oddInRangeButNotEven) {\n    return y;\n  }\n  if (evenInRange &&!evenInRangeButNotOdd &&!oddInRangeButNotEven) {\n    return x;\n  }\n  return -1;\n};\n\n/*This function takes tw o  positiv e numbers x and y and returns the\n  biggest integer number that is  inth ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ans = []\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      ans.push(x[i])\n    }\n  }\n  return ans\n}\n\n/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\" , \"Six\", \"Seven\", \"Eight\" , \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let reversedArr = arr.reverse();\n  let sortedArr = reversedArr.sort();\n  let reversedSortedArr = sortedArr.reverse();\n  \n  for(let i = 0; i < len; i++){\n    result.push(reversedSortedArr[i]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let reversedArr = arr.reverse();\n  let sortedArr = reversedArr.sort();\n  let reversedSortedArr = sortedArr.reverse();\n  \n  for(let i = 0; i < len; i++){\n    result.push(reversedSortedArr[i]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let reversedArr = arr.reverse();\n  let sortedArr = reversedArr.sort();\n  let reversedSortedArr = sortedArr.reverse();\n  \n  for(let i = 0; i < len; i++){\n    result.push(reversedSortedArr[i]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let reversedArr = arr.reverse();\n  let sortedArr = reversedArr.sort();\n  let reversedSortedArr = sortedArr.reverse();\n  \n  for(let i = 0; i < len; i++){\n    result.push(reversedSortedArr[i]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let reversedArr = arr.reverse();\n  let sortedArr = reversedArr.sort();\n  let reversedSortedArr = sortedArr.reverse();\n  \n  for(let i = 0; i < len; i++){\n    result.push(reversedSortedArr[i]);\n  }\n  \n  return result;\n}\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 * ... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(i * i);\n    } else {\n      arr.push(i * factorial(i));\n    }\n  }\n  return arr;\n};\n\nconst factorial = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n};\n\nconst factorialOfEven = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOdd = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEven = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOdd = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEven = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEvenOdd = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEvenOddEven = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEvenOddEvenOdd = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEvenOddEvenOddEven = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEvenOddEvenOddEvenOdd = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    }\n  }\n  return fact;\n};\n\nconst factorialOfOddEvenOddEvenOddEvenOddEvenOdd = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (i % 2 === 0) {\n      fact *= i;\n    } else if (i % 2!== 0) {\n      fact *= i;\n    } else if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0;\n    const isOdd =!isEven;\n    if (isEven) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [evenPalindrome, oddPalindrome];\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than n that form a palindrome.\n\n  Example 1:\n\n      Input: 12\n      Output: [1, 12, 121]\n      Explanation: 12 is a palindrome.\n\n  Example 2:\n\n      Input: 121\n      Output: [1, 12, 121]\n      Explanation: 121 is a palindrome.\n\n  Example 3:\n\n      Input: 10\n      Output: [1, 10, 100, 101, 102]\n      Explanation: 10 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  const evenPalindrome = evenOddPalindrome(n)[0];\n  const oddPalindrome = evenOddPalindrome(n)[1];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i === evenPalindrome || i === oddPalindrome) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than n that form a palindrome.\n\n  Example 1:\n\n      Input: 12\n      Output: [1, 12, 121]\n      Explanation: 12 is a palindrome.\n\n  Example 2:\n\n      Input: 121\n      Output: [1, 12, 121]\n      Explanation: 121 is a palindrome.\n\n  Example 3:\n\n      Input: 10\n      Output: [1, 10, 100, 101, 102]\n      Explanation: 10 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  const evenPalindrome = evenOddPalindrome(n)[0];\n  const oddPalindrome = evenOddPalindrome(n)[1];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i === evenPalindrome || i === oddPalindrome) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than n that form a palindrome.\n\n  Example 1:\n\n      Input: 12\n      Output: [1, 12, 121]\n      Explanation: 12 is a palindrome.\n\n  Example 2:\n\n      Input: 121\n      Output: [1, 12, 121]\n      Explanation: 121 is a palindrome.\n\n  Example 3:\n\n      Input: 10\n      Output: [1, 10, 100, 101, 102]\n      Explanation: 10 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  const evenPalindrome = evenOddPalindrome(n)[0];\n  const oddPalindrome = evenOddPalindrome(n)[1];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i === evenPalindrome || i === oddPalindrome) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than n that form a palindrome.\n\n  Example 1:\n\n      Input: 12\n      Output: [1, 12, 121]\n      Explanation: 12 is a palindrome.\n\n  Example 2:\n\n      Input: 121\n      Output: [1, 12, 121]\n      Explanation: 121 is a palindrome.\n\n  Example 3:\n\n      Input: 10\n      Output: [1, 10, 100, 101, 102]\n      Explanation: 10 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  const evenPalindrome = evenOddPalindrome(n)[0];\n  const oddPalindrome = evenOddPalindrome(n)[1];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i === evenPalindrome || i === oddPalindrome) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than n that form a palindrome.\n\n  Example 1:\n\n      Input: 12\n      Output: [1, 12, 121]\n      Explanation: 12 is a palindrome.\n\n  Example 2:\n\n      Input: 121\n      Output: [1, 12, 121]\n      Explanation: 121 is a palindrome.\n\n  Example 3:\n\n      Input: 10\n      Output: [1, 10, 100, 101, 102]\n      Explanation: 10 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  const evenPalindrome = evenOddPalindrome(n)[0];\n  const oddPalindrome = evenOddPalindrome(n)[1];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i === evenPalindrome || i === oddPalindrome) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than n that form a palindrome.\n\n  Example 1:\n\n      Input: 12\n      Output: [1, 12, 121]\n      Explanation: 12 is a palindrome.\n\n  Example 2:\n\n      Input: 121\n      Output: [1, 12, 121]\n      Explanation: 121 is a palindrome.\n\n  Example 3:\n\n      Input: 10\n      Output: [1, 10, 100, 101, 102]\n      Ex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive ,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2 , and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function countNums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N int egers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N int egers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const sortedArrLength = sortedArr.length;\n  if (sortedArrLength === 0) {\n    return true;\n  }\n  const lastElement = sortedArr[sortedArrLength - 1];\n  const firstElement = sortedArr[0];\n  const shiftCount = sortedArrLength - 1;\n  for (let i = 0; i < shiftCount; i++) {\n    const temp = sortedArr[i];\n    sortedArr[i] = sortedArr[i + 1];\n    sortedArr[i + 1] = temp;\n  }\n  sortedArr[shiftCount] = lastElement;\n  return sortedArr.every((element, index) => {\n    return sortedArr[index] === firstElement;\n  });\n};\n\n/*\n  Write a function that takes two arrays of equal length and returns true if\n  they have equal elements and false otherwise.\n  \n  Two arrays are equal if they contain the same number of equal elements.\n  \n  Explanation: Two arrays are equal if they contain the same number of equal\n               elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n               of equal elements. Two arrays are equal if they contain the same number\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that starts at position 0.\n  >>> stringCount('abcabc', 'abc')\n  2\n  >>> stringCount('abcabc', 'acb')\n  0\n  */\nconst stringCount = (s, t) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === t[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given two strings s and t, return the number of times you can find a\n  substring t in s that ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  if (evenNum === lst1.length && evenNum === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  if (evenNum === lst1.length && evenNum === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  if (evenNum === lst1.length && evenNum === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  if (evenNum === lst1.length && evenNum === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  if (evenNum === lst1.length && evenNum === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let evenNum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      evenNum++;\n    }\n  }\n  if (evenNum === lst1.length && evenNum === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c) {\n      check = true;\n    } else {\n      check = false;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c) {\n      check = false;\n    } else {\n      check = true;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c) {\n      check = true;\n    } else {\n      check = false;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c) {\n      check = false;\n    } else {\n      check = true;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c) {\n      check = true;\n    } else {\n      check = false;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c) {\n      check = false;\n    } else {\n      check = true;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === c) {\n      check = true;\n    } else {\n      check = false;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete8 = (s, c) => {\n  let resultString = \"\";\n  let check = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c) {\n      check = false;\n    } else {\n      check = true;\n    }\n    resultString += s[i];\n  }\n  return [resultString, check];\n};\n\n/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha ract", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of string s , whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        continue;\n      }\n      if (str[j] === \"1\") {\n        count++;\n      }\n    }\n    res.push(count + \" odd element\" + \" in the \" + i + \" of the \" + str.length + \" of the \" + str);\n  }\n  return res;\n};\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        continue;\n      }\n      if (str[j] === \"1\") {\n        count++;\n      }\n    }\n    res.push(count + \" even element\" + \" in the \" + i + \" of the \" + str.length + \" of the \" + str);\n  }\n  return res;\n};\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        continue;\n      }\n      if (str[j] === \"1\") {\n        count++;\n      }\n    }\n    res.push(count + \" even element\" + \" in the \" + i + \" of the \" + str.length + \" of the \" + str);\n  }\n  return res;\n};\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        continue;\n      }\n      if (str[j] === \"1\") {\n        count++;\n      }\n    }\n    res.push(count + \" even element\" + \" in the \" + i + \" of the \" + str.length + \" of the \" + str);\n  }\n  return res;\n};\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        continue;\n      }\n      if (str[j] === \"1\") {\n        count++;\n      }\n    }\n    res.push(count + \" even element\" + \" in the \" + i + \" of the \" + str.length + \" of the \" + str);\n  }\n  return res;\n};\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        continue;\n      }\n      if (str[j] === \"1\") {\n        count++;\n      }\n    }\n    res.push(count + \" even element\" + \" in the \" + i + \" of the \" + str.length + \" of the \" + str);\n  }\n  return res;\n};\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let minSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum < minSum) {\n        minSum = currentSum;\n        minSumIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the maximum sum of any non-empty sub-array\n of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  let maxSumIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let currentSum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum > maxSum) {\n        maxSum = currentSum;\n        maxSumIndex = j;\n      }\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n divisible by any element in the array.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSum([-1, -2, -3]) == -3\n  */\nconst divisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n not divisible by any element in the array.\n  Example\n  nonDivisibleSum([2, 3, 4, 1, 2, 4]) == 3\n  nonDivisibleSum([-1, -2, -3]) == 6\n  */\nconst nonDivisibleSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n divisible by all elements in the array.\n  Example\n  divisibleSumOfAll([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSumOfAll([-1, -2, -3]) == -3\n  */\nconst divisibleSumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n not divisible by all elements in the array.\n  Example\n  nonDivisibleSumOfAll([2, 3, 4, 1, 2, 4]) == 3\n  nonDivisibleSumOfAll([-1, -2, -3]) == 6\n  */\nconst nonDivisibleSumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n divisible by any element in the array and are less than or equal to any element in the\n array.\n  Example\n  divisibleSumLessThanOrEqualTo([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSumLessThanOrEqualTo([-1, -2, -3]) == -3\n  */\nconst divisibleSumLessThanOrEqualTo = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    if (nums[i] <= nums[i]) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n not divisible by any element in the array and are less than or equal to any element in the\n array.\n  Example\n  nonDivisibleSumLessThanOrEqualTo([2, 3, 4, 1, 2, 4]) == 3\n  nonDivisibleSumLessThanOrEqualTo([-1, -2, -3]) == 6\n  */\nconst nonDivisibleSumLessThanOrEqualTo = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    if (nums[i] <= nums[i]) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n divisible by all elements in the array and are less than or equal to any element in the\n array.\n  Example\n  divisibleSumLessThanOrEqualToAll([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSumLessThanOrEqualToAll([-1, -2, -3]) == -3\n  */\nconst divisibleSumLessThanOrEqualToAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    if (nums[i] <= nums[i]) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n not divisible by all elements in the array and are less than or equal to any element in the\n array.\n  Example\n  nonDivisibleSumLessThanOrEqualToAll([2, 3, 4, 1, 2, 4]) == 3\n  nonDivisibleSumLessThanOrEqualToAll([-1, -2, -3]) == 6\n  */\nconst nonDivisibleSumLessThanOrEqualToAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    if (nums[i] <= nums[i]) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n divisible by any element in the array and are greater than any element in the array.\n  Example\n  divisibleSumGreaterThanOrEqualTo([2, 3, 4, 1, 2, 4]) == 6\n  divisibleSumGreaterThanOrEqualTo([-1, -2, -3]) == -3\n  */\nconst divisibleSumGreaterThanOrEqualTo = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % nums[i] === 0) {\n      continue;\n    }\n    if (nums[i] > nums[i]) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of int e gers num s, find the sum of all elements in the array that are\n not divisible by any element in the array and are greater than any element in the array.\n  Example\n  nonDivisibleSumGreaterThanOrEqualTo([2, 3, 4, 1, 2, 4]) == 3\n  nonDivisibleSumGreaterThanOrEqualTo([-1, -2, -3]) == 6\n  */\nconst nonDivisibleSumGreaterThanOrEqualTo = (nums) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill14 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count++;\n  }\n  return count;\n};\n\nconst maxFill15 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a === b) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in descending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    if (a === b) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayAsc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a === b) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayAscDesc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    if (a === b) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayAscAsc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a === b) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayAscAscDesc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    if (a === b) return 0;\n    if (a > b) return -1;\n    if (a < b) return 1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayAscAscAsc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    if (a === b) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n  });\n  return arrCopy;\n};\n\n/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayAscAscAscDesc = (arr) => {\n  let countOne = 0;\n  let countZero = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants ,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let lastWord = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      if (lastWord.length > 0) {\n        words.push(lastWord);\n      }\n      lastWord = \"\";\n    } else {\n      lastWord += s.charAt(i);\n    }\n  }\n  if (lastWord.length > 0) {\n    words.push(lastWord);\n  }\n  if (words.length < n) {\n    return [];\n  }\n  return words.slice(0, n);\n};\n\n/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let lastWord = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      if (lastWord.length > 0) {\n        words.push(lastWord);\n      }\n      lastWord = \"\";\n    } else {\n      lastWord += s.charAt(i);\n    }\n  }\n  if (lastWord.length > 0) {\n    words.push(lastWord);\n  }\n  if (words.length < n) {\n    return [];\n  }\n  return words.slice(0, n);\n};\n\n/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let lastWord = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      if (lastWord.length > 0) {\n        words.push(lastWord);\n      }\n      lastWord = \"\";\n    } else {\n      lastWord += s.charAt(i);\n    }\n  }\n  if (lastWord.length > 0) {\n    words.push(lastWord);\n  }\n  if (words.length < n) {\n    return [];\n  }\n  return words.slice(0, n);\n};\n\n/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let lastWord = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      if (lastWord.length > 0) {\n        words.push(lastWord);\n      }\n      lastWord = \"\";\n    } else {\n      lastWord += s.charAt(i);\n    }\n  }\n  if (lastWord.length > 0) {\n    words.push(lastWord);\n  }\n  if (words.length < n) {\n    return [];\n  }\n  return words.slice(0, n);\n};\n\n/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let lastWord = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === \" \") {\n      if (lastWord.length > 0) {\n        words.push(lastWord);\n      }\n      lastWord = \"\";\n    } else {\n      lastWord += s.charAt(i);\n    }\n  }\n  if (lastWord.length > 0) {\n    words.push(lastWord);\n  }\n  if (words.length < n) {\n    return [];\n  }\n  return words.slice(0, n);\n};\n\n/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2 = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5 = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8 = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11 = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14 = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17 = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20 = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23 = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26 = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29 = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32 = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35 = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38 = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41 = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44 = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47 = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50 = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53 = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56 = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59 = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowelsIndexCount62 = 0;\n  let vowelsIndexCount63 = 0;\n  let vowelsIndexCount64 = 0;\n  let vowelsIndexCount65 = 0;\n  let vowelsIndexCount66 = 0;\n  let vowelsIndexCount67 = 0;\n  let vowelsIndexCount68 = 0;\n  let vowelsIndexCount69 = 0;\n  let vowelsIndexCount70 = 0;\n  let vowelsIndexCount71 = 0;\n  let vowelsIndexCount72 = 0;\n  let vowelsIndexCount73 = 0;\n  let vowelsIndexCount74 = 0;\n  let vowelsIndexCount75 = 0;\n  let vowelsIndexCount76 = 0;\n  let vowelsIndexCount77 = 0;\n  let vowelsIndexCount78 = 0;\n  let vowelsIndexCount79 = 0;\n  let vowelsIndexCount80 = 0;\n  let vowelsIndexCount81 = 0;\n  let vowelsIndexCount82 = 0;\n  let vowelsIndexCount83 = 0;\n  let vowelsIndexCount84 = 0;\n  let vowelsIndexCount85 = 0;\n  let vowelsIndexCount86 = 0;\n  let vowelsIndexCount87 = 0;\n  let vowelsIndexCount88 = 0;\n  let vowelsIndexCount89 = 0;\n  let vowelsIndexCount90 = 0;\n  let vowelsIndexCount91 = 0;\n  let vowelsIndexCount92 = 0;\n  let vowelsIndexCount93 = 0;\n  let vowelsIndexCount94 = 0;\n  let vowelsIndexCount95 = 0;\n  let vowelsIndexCount96 = 0;\n  let vowelsIndexCount97 = 0;\n  let vowelsIndexCount98 = 0;\n  let vowelsIndexCount99 = 0;\n  let vowelsIndexCount100 = 0;\n  let vowelsIndexCount101 = 0;\n  let vowelsIndexCount102 = 0;\n  let vowelsIndexCount103 = 0;\n  let vowelsIndexCount104 = 0;\n  let vowelsIndexCount105 = 0;\n  let vowelsIndexCount106 = 0;\n  let vowelsIndexCount107 = 0;\n  let vowelsIndexCount108 = 0;\n  let vowelsIndexCount109 = 0;\n  let vowelsIndexCount110 = 0;\n  let vowelsIndexCount111 = 0;\n  let vowelsIndexCount112 = 0;\n  let vowelsIndexCount113 = 0;\n  let vowelsIndexCount114 = 0;\n  let vowelsIndexCount115 = 0;\n  let vowelsIndexCount116 = 0;\n  let vowelsIndexCount117 = 0;\n  let vowelsIndexCount118 = 0;\n  let vowelsIndexCount119 = 0;\n  let vowelsIndexCount120 = 0;\n  let vowelsIndexCount121 = 0;\n  let vowelsIndexCount122 = 0;\n  let vowelsIndexCount123 = 0;\n  let vowelsIndexCount124 = 0;\n  let vowelsIndexCount125 = 0;\n  let vowelsIndexCount126 = 0;\n  let vowelsIndexCount127 = 0;\n  let vowelsIndexCount128 = 0;\n  let vowelsIndexCount129 = 0;\n  let vowelsIndexCount130 = 0;\n  let vowelsIndexCount131 = 0;\n  let vowelsIndexCount132 = 0;\n  let vowelsIndexCount133 = 0;\n  let vowelsIndexCount134 = 0;\n  let vowelsIndexCount135 = 0;\n  let vowelsIndexCount136 = 0;\n  let vowelsIndexCount137 = 0;\n  let vowelsIndexCount138 = 0;\n  let vowelsIndexCount139 = 0;\n  let vowelsIndexCount140 = 0;\n  let vowelsIndexCount141 = 0;\n  let vowelsIndexCount142 = 0;\n  let vowelsIndexCount143 = 0;\n  let vowelsIndexCount144 = 0;\n  let vowelsIndexCount145 = 0;\n  let vowelsIndexCount146 = 0;\n  let vowelsIndexCount147 = 0;\n  let vowelsIndexCount148 = 0;\n  let vowelsIndexCount149 = 0;\n  let vowelsIndexCount150 = 0;\n  let vowelsIndexCount151 = 0;\n  let vowelsIndexCount152 = 0;\n  let vowelsIndexCount153 = 0;\n  let vowelsIndexCount154 = 0;\n  let vowelsIndexCount155 = 0;\n  let vowelsIndexCount156 = 0;\n  let vowelsIndexCount157 = 0;\n  let vowelsIndexCount158 = 0;\n  let vowelsIndexCount159 = 0;\n  let vowelsIndexCount160 = 0;\n  let vowelsIndexCount161 = 0;\n  let vowelsIndexCount162 = 0;\n  let vowelsIndexCount163 = 0;\n  let vowelsIndexCount164 = 0;\n  let vowelsIndexCount165 = 0;\n  let vowelsIndexCount166 = 0;\n  let vowelsIndexCount167 = 0;\n  let vowelsIndexCount168", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str1 = lst[0]\n  let str2 = lst[1]\n  let str3 = \"\"\n  let str4 = \"\"\n  let str5 = \"\"\n  let str6 = \"\"\n  let str7 = \"\"\n  let str8 = \"\"\n  let str9 = \"\"\n  let str10 = \"\"\n  let str11 = \"\"\n  let str12 = \"\"\n  let str13 = \"\"\n  let str14 = \"\"\n  let str15 = \"\"\n  let str16 = \"\"\n  let str17 = \"\"\n  let str18 = \"\"\n  let str19 = \"\"\n  let str20 = \"\"\n  let str21 = \"\"\n  let str22 = \"\"\n  let str23 = \"\"\n  let str24 = \"\"\n  let str25 = \"\"\n  let str26 = \"\"\n  let str27 = \"\"\n  let str28 = \"\"\n  let str29 = \"\"\n  let str30 = \"\"\n  let str31 = \"\"\n  let str32 = \"\"\n  let str33 = \"\"\n  let str34 = \"\"\n  let str35 = \"\"\n  let str36 = \"\"\n  let str37 = \"\"\n  let str38 = \"\"\n  let str39 = \"\"\n  let str40 = \"\"\n  let str41 = \"\"\n  let str42 = \"\"\n  let str43 = \"\"\n  let str44 = \"\"\n  let str45 = \"\"\n  let str46 = \"\"\n  let str47 = \"\"\n  let str48 = \"\"\n  let str49 = \"\"\n  let str50 = \"\"\n  let str51 = \"\"\n  let str52 = \"\"\n  let str53 = \"\"\n  let str54 = \"\"\n  let str55 = \"\"\n  let str56 = \"\"\n  let str57 = \"\"\n  let str58 = \"\"\n  let str59 = \"\"\n  let str60 = \"\"\n  let str61 = \"\"\n  let str62 = \"\"\n  let str63 = \"\"\n  let str64 = \"\"\n  let str65 = \"\"\n  let str66 = \"\"\n  let str67 = \"\"\n  let str68 = \"\"\n  let str69 = \"\"\n  let str70 = \"\"\n  let str71 = \"\"\n  let str72 = \"\"\n  let str73 = \"\"\n  let str74 = \"\"\n  let str75 = \"\"\n  let str76 = \"\"\n  let str77 = \"\"\n  let str78 = \"\"\n  let str79 = \"\"\n  let str80 = \"\"\n  let str81 = \"\"\n  let str82 = \"\"\n  let str83 = \"\"\n  let str84 = \"\"\n  let str85 = \"\"\n  let str86 = \"\"\n  let str87 = \"\"\n  let str88 = \"\"\n  let str89 = \"\"\n  let str90 = \"\"\n  let str91 = \"\"\n  let str92 = \"\"\n  let str93 = \"\"\n  let str94 = \"\"\n  let str95 = \"\"\n  let str96 = \"\"\n  let str97 = \"\"\n  let str98 = \"\"\n  let str99 = \"\"\n  let str100 = \"\"\n  let str101 = \"\"\n  let str102 = \"\"\n  let str103 = \"\"\n  let str104 = \"\"\n  let str105 = \"\"\n  let str106 = \"\"\n  let str107 = \"\"\n  let str108 = \"\"\n  let str109 = \"\"\n  let str110 = \"\"\n  let str111 = \"\"\n  let str112 = \"\"\n  let str113 = \"\"\n  let str114 = \"\"\n  let str115 = \"\"\n  let str116 = \"\"\n  let str117 = \"\"\n  let str118 = \"\"\n  let str119 = \"\"\n  let str120 = \"\"\n  let str121 = \"\"\n  let str122 = \"\"\n  let str123 = \"\"\n  let str124 = \"\"\n  let str125 = \"\"\n  let str126 = \"\"\n  let str127 = \"\"\n  let str128 = \"\"\n  let str129 = \"\"\n  let str130 = \"\"\n  let str131 = \"\"\n  let str132 = \"\"\n  let str133 = \"\"\n  let str134 = \"\"\n  let str135 = \"\"\n  let str136 = \"\"\n  let str137 = \"\"\n  let str138 = \"\"\n  let str139 = \"\"\n  let str140 = \"\"\n  let str141 = \"\"\n  let str142 = \"\"\n  let str143 = \"\"\n  let str144 = \"\"\n  let str145 = \"\"\n  let str146 = \"\"\n  let str147 = \"\"\n  let str148 = \"\"\n  let str149 = \"\"\n  let str150 = \"\"\n  let str151 = \"\"\n  let str152 = \"\"\n  let str153 = \"\"\n  let str154 = \"\"\n  let str155 = \"\"\n  let str156 = \"\"\n  let str157 = \"\"\n  let str158 = \"\"\n  let str159 = \"\"\n  let str160 = \"\"\n  let str161 = \"\"\n  let str162 = \"\"\n  let str163 = \"\"\n  let str164 = \"\"\n  let str165 = \"\"\n  let str166 = \"\"\n  let str167 = \"\"\n  let str168 = \"\"\n  let str169 = \"\"\n  let str170 = \"\"\n  let str171 = \"\"\n  let str172 = \"\"\n  let str173 = \"\"\n  let str174 = \"\"\n  let str175 = \"\"\n  let str176 = \"\"\n  let str177 = \"\"\n  let str178 = \"\"\n  let str179 = \"\"\n  let str180 = \"\"\n  let str181 = \"\"\n  let str182 = \"\"\n  let str183 = \"\"\n  let str184 = \"\"\n  let str185 = \"\"\n  let str186 = \"\"\n  let str187 = \"\"\n  let str188 = \"\"\n  let str189 = \"\"\n  let str190 = \"\"\n  let str191 = \"\"\n  let str192 = \"\"\n  let str193 = \"\"\n  let str194 = \"\"\n  let str195 = \"\"\n  let str196 = \"\"\n  let str197 = \"\"\n  let str198 = \"\"\n  let str199 = \"\"\n  let str200 = \"\"\n  let str201 = \"\"\n  let str202 = \"\"\n  let str203 = \"\"\n  let str204 = \"\"\n  let str205 = \"\"\n  let str206 = \"\"\n  let str207 = \"\"\n  let str208 = \"\"\n  let str209 = \"\"\n  let str210 = \"\"\n  let str211 = \"\"\n  let str212 = \"\"\n  let str213 = \"\"\n  let str214 = \"\"\n  let str215 = \"\"\n  let str216 = \"\"\n  let str217 = \"\"\n  let str218 = \"\"\n  let str219 = \"\"\n  let str220 = \"\"\n  let str221 = \"\"\n  let str222 = \"\"\n  let str223 = \"\"\n  let str224 = \"\"\n  let str225 = \"\"\n  let str226 = \"\"\n  let str227 = \"\"\n  let str228 = \"\"\n  let str229 = \"\"\n  let str230 = \"\"\n  let str231 = \"\"\n  let str232 = \"\"\n  let str233 = \"\"\n  let str234 = \"\"\n  let str235 = \"\"\n  let str236 = \"\"\n  let str237 = \"\"\n  let str238 = \"\"\n  let str239 = \"\"\n  let str240 = \"\"\n  let str241 = \"\"\n  let str242 = \"\"\n  let str243 = \"\"\n  let str244 = \"\"\n  let str245 = \"\"\n  let str246 = \"\"\n  let str247 = \"\"\n  let str248 = \"\"\n  let str249 = \"\"\n  let str250 = \"\"\n  let str251 = \"\"\n  let str252 = \"\"\n  let str253 = \"\"\n  let str254 = \"\"\n  let str255 = \"\"\n  let str", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Outof list of string s , return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Outof list of string s, return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if no such string exists.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum, maximum1 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum1 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum1, maximum2 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum2 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum2, maximum3 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum3 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum3, maximum4 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum4 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum4, maximum5 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum5 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum5, maximum6 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum6 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum6, maximum7 };\n\n/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum7 = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let max = Math.max(max, arr[i]);\n    result.push(max);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the even numbers from the original list.\n  \n\n  Examples\n  even([2, 4, 5, 6, 8]) ==> [4, 8]\n  even([2, 4, 6, 8]) ==> [2, 4]\n  even([2, 4, 6, 8, 10]) ==> [2, 4, 6, 8]\n  even([2, 4, 6, 8, 10, 12]) ==> [2, 4, 6, 8]\n  even([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst even = (lst) => {\n  let evenArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenArr.push(lst[i]);\n    }\n  }\n  return evenArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the odd numbers from the original list.\n  \n\n  Examples\n  odd([2, 4, 5, 6, 8]) ==> [5, 8]\n  odd([2, 4, 6, 8]) ==> [2, 4]\n  odd([2, 4, 6, 8, 10]) ==> [2, 4, 6, 8]\n  odd([2, 4, 6, 8, 10, 12]) ==> [2, 4, 6, 8]\n  odd([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst odd = (lst) => {\n  let oddArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddArr.push(lst[i]);\n    }\n  }\n  return oddArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur more than once in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicates = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur less than or equal to two times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesLessThanTwo = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur exactly three times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesExactlyThree = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2] && lst[i] === lst[i - 3]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur exactly four times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesExactlyFour = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2] && lst[i] === lst[i - 3] && lst[i] === lst[i - 4]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur exactly five times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesExactlyFive = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2] && lst[i] === lst[i - 3] && lst[i] === lst[i - 4] && lst[i] === lst[i - 5]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur exactly six times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesExactlySix = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2] && lst[i] === lst[i - 3] && lst[i] === lst[i - 4] && lst[i] === lst[i - 5] && lst[i] === lst[i - 6]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur exactly seven times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesExactlySeven = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2] && lst[i] === lst[i - 3] && lst[i] === lst[i - 4] && lst[i] === lst[i - 5] && lst[i] === lst[i - 6] && lst[i] === lst[i - 7]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the numbers that occur exactly eight times in the original list.\n  \n\n  Examples\n  duplicates([2, 4, 5, 6, 8, 10, 12]) ==> [4, 6, 8, 10]\n  duplicates([2, 4, 6, 8, 10, 12, 14]) ==> [2, 4, 6, 8]\n  */\nconst duplicatesExactlyEight = (lst) => {\n  let duplicateArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1] && lst[i] === lst[i - 2] && lst[i] === lst[i - 3] && lst[i] === lst[i - 4] && lst[i] === lst[i - 5] && lst[i] === lst[i - 6] && lst[i] === lst[i - 7] && lst[i] === lst[i - 8]) {\n      duplicateArr.push(lst[i]);\n    }\n  }\n  return duplicateArr;\n};\n\n/*Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st three  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 18 # sum of 3 + 4000\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st four  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 10 # sum of 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st five d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 21 # sum of 111 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st six d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 30 # sum of 4000 +  5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st seven d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 42 # sum of 111 + 21  + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st eight d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 52 # sum of 111 + 21  + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st nine d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 62 # sum of 111 + 21  + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st ten d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 72 # sum of 111 + 21  + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((acc, cur) => acc + cur);\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st eleven  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 82 # sum of 111 + 21  + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber!= 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = (3 * currentNumber + 1);\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive int g er n, re turn a sorted list that has the even numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber!= 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = (3 * currentNumber + 1);\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive int g er n, re turn a sorted list that has the even numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber!= 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = (3 * currentNumber + 1);\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive int g er n, re turn a sorted list that has the even numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber!= 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = (3 * currentNumber + 1);\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive int g er n, re turn a sorted list that has the even numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber!= 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = (3 * currentNumber + 1);\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive int g er n, re turn a sorted list that has the even numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse .\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = date", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse .Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in descending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  if (interval1Start < interval2Start) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval1Start > interval2End) {\n    return [interval1End, interval2End];\n  }\n  if (interval2Start < interval1End) {\n    return [interval2Start, interval1End];\n  }\n  const [intersectionStart, intersectionEnd] = interval1.find(([start, end]) => {\n    return start < end;\n  });\n  if (intersectionStart === intersectionEnd) {\n    return [intersectionStart, intersectionEnd];\n  }\n  const [intersectionStart, intersectionEnd] = interval2.find(([start, end]) => {\n    return start < end;\n  });\n  if (intersectionStart === intersectionEnd) {\n    return [intersectionStart, intersectionEnd];\n  }\n  if (intersectionStart < intersectionEnd) {\n    return [intersectionStart, intersectionEnd];\n  }\n  return [intersectionEnd, intersectionStart];\n};\n\n/*\n  Given two inte r vals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 4, which is a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  if (interval1Start < interval2Start) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval1Start > interval2End) {\n    return [interval1End, interval2End];\n  }\n  if (interval2Start < interval1End) {\n    return [interval2Start, interval1End];\n  }\n  const [unionStart, unionEnd] = interval1.find(([start, end]) => {\n    return start < end;\n  });\n  if (unionStart === unionEnd) {\n    return [unionStart, unionEnd];\n  }\n  const [unionStart, unionEnd] = interval2.find(([start, end]) => {\n    return start < end;\n  });\n  if (unionStart === unionEnd) {\n    return [unionStart, unionEnd];\n  }\n  if (unionStart < unionEnd) {\n    return [unionStart, unionEnd];\n  }\n  return [unionEnd, unionStart];\n};\n\n/*\n  Given two inte r vals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (1, 3)\n  which its length is 3, which is a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval2Start === interval2End) {\n    return [interval2Start, interval1Start];\n  }\n  if (interval1Start < interval2Start) {\n    return [interval1Start, interval2Start];\n  }\n  if (interval1Start > interval2End) {\n    return [interval1End, interval2End];\n  }\n  if (interval2Start < interval1End) {\n    return [interval2Start, interval1End];\n  }\n  const [differenceStart, differenceEnd] = interval1.find(([start, end]) => {\n    return start < end;\n  });\n  if (differenceStart === differenceEnd) {\n    return [differenceStart, differenceEnd];\n  }\n  const [differenceStart, differenceEnd] = interval2.find(([start, end]) => {\n    return start < end;\n  });\n  if (differenceStart === differenceEnd) {\n    return [differenceStart, differenceEnd];\n  }\n  if (differenceStart < differenceEnd) {\n    return [differenceStart, differenceEnd];\n  }\n  return [differenceEnd, differenceStart];\n};\n\n/*\n  Given two inte r vals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of product of these two \n  intervals is a prime number.\n  Example, the product of the intervals (1, 3), (2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const m = grid[0].length\n  const visited = new Array(N * N).fill(false)\n  const result = []\n  const stack = []\n  let minPathLength = 0\n  let minPathIndex = 0\n  let minPathValue = 0\n  let minPathIndexInStack = 0\n  let minPathValueInStack = 0\n  let minPathIndexInResult = 0\n  let minPathValueInResult = 0\n  let minPathIndexInMinPath = 0\n  let minPathValueInMinPath = 0\n  let minPathIndexInMinPathInResult = 0\n  let minPathValueInMinPathInResult = 0\n  let minPathIndexInMinPathInStack = 0\n  let minPathValueInMinPathInStack = 0\n  let minPathIndexInMinPathInResult = 0\n  let minPathValueInMinPathInResult = 0\n  let minPathIndexInMinPathInStackInResult = 0\n  let minPathValueInMinPathInStackInResult = 0\n  let minPathIndexInMinPathInResultInStack = 0\n  let minPathValueInMinPathInResultInStack = 0\n  let minPathIndexInMinPathInResultInResult = 0\n  let minPathValueInMinPathInResultInResult = 0\n  let minPathIndexInMinPathInResultInMinPath = 0\n  let minPathValueInMinPathInResultInMinPath = 0\n  let minPathIndexInMinPathInResultInMinPathInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInStack = 0\n  let minPathValueInMinPathInResultInMinPathInStack = 0\n  let minPathIndexInMinPathInResultInMinPathInStackInResult = 0\n  let minPathValueInMinPathInResultInMinPathInStackInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInStack = 0\n  let minPathValueInMinPathInResultInMinPathInResultInStack = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInStack = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInStack = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInStackInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInStackInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInStack = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInStack = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInStack = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInStack = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInStack = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInStack = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInResult = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathIndexInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResult = 0\n  let minPathValueInMinPathInResultInMinPathInResultInMinPathInResultInMinPathInResultInMinPath = 0\n  let minPathIndexInMinPathIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(21, 5)\n  21\n  >>> leastCommonMultiple(7, 21)\n  7\n  >>> leastCommonMultiple(7, 7)\n  1\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 5)\n  21\n  >>> leastCommonMultiple(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return arr;\n  if (n === 2) return [1, 3];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return arr;\n  if (n === 2) return [1, 3];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return arr;\n  if (n === 2) return [1, 3];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return arr;\n  if (n === 2) return [1, 3];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 0) return arr;\n  if (n === 1) return arr;\n  if (n === 2) return [1, 3];\n  if (n % 2 === 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n  return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n};\n\n/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 2? i : 1;\n  }\n  return product;\n};\n\n/*Given a positive integer n and an integer k, return the sum of the\n  digits of n modulo k. For example:\n  digits(1, 2) == 3\n  digits(1, 3) == 6\n  digits(1, 4) == 3\n  digits(1, 5) == 6\n  digits(1, 6) == 3\n  digits(1, 7) == 6\n  digits(1, 8) == 3\n  digits(1, 9) == 6\n  digits(1, 10) == 3\n  digits(1, 11) == 6\n  digits(1, 12) == 3\n  digits(1, 13) == 6\n  digits(1, 14) == 3\n  digits(1, 15) == 6\n  digits(1, 16) == 3\n  digits(1, 17) == 6\n  digits(1, 18) == 3\n  digits(1, 19) == 6\n  digits(1, 20) == 3\n  digits(1, 21) == 6\n  digits(1, 22) == 3\n  digits(1, 23) == 6\n  digits(1, 24) == 3\n  digits(1, 25) == 6\n  digits(1, 26) == 3\n  digits(1, 27) == 6\n  digits(1, 28) == 3\n  digits(1, 29) == 6\n  digits(1, 30) == 3\n  digits(1, 31) == 6\n  digits(1, 32) == 3\n  digits(1, 33) == 6\n  digits(1, 34) == 3\n  digits(1, 35) == 6\n  digits(1, 36) == 3\n  digits(1, 37) == 6\n  digits(1, 38) == 3\n  digits(1, 39) == 6\n  digits(1, 40) == 3\n  digits(1, 41) == 6\n  digits(1, 42) == 3\n  digits(1, 43) == 6\n  digits(1, 44) == 3\n  digits(1, 45) == 6\n  digits(1, 46) == 3\n  digits(1, 47) == 6\n  digits(1, 48) == 3\n  digits(1, 49) == 6\n  digits(1, 50) == 3\n  digits(1, 51) == 6\n  digits(1, 52) == 3\n  digits(1, 53) == 6\n  digits(1, 54) == 3\n  digits(1, 55) == 6\n  digits(1, 56) == 3\n  digits(1, 57) == 6\n  digits(1, 58) == 3\n  digits(1, 59) == 6\n  digits(1, 60) == 3\n  digits(1, 61) == 6\n  digits(1, 62) == 3\n  digits(1, 63) == 6\n  digits(1, 64) == 3\n  digits(1, 65) == 6\n  digits(1, 66) == 3\n  digits(1, 67) == 6\n  digits(1, 68) == 3\n  digits(1, 69) == 6\n  digits(1, 70) == 3\n  digits(1, 71) == 6\n  digits(1, 72) == 3\n  digits(1, 73) == 6\n  digits(1, 74) == 3\n  digits(1, 75) == 6\n  digits(1, 76) == 3\n  digits(1, 77) == 6\n  digits(1, 78) == 3\n  digits(1, 79) == 6\n  digits(1, 80) == 3\n  digits(1, 81) == 6\n  digits(1, 82) == 3\n  digits(1, 83) == 6\n  digits(1, 84) == 3\n  digits(1, 85) == 6\n  digits(1, 86) == 3\n  digits(1, 87) == 6\n  digits(1, 88) == 3\n  digits(1, 89) == 6\n  digits(1, 90) == 3\n  digits(1, 91) == 6\n  digits(1, 92) == 3\n  digits(1, 93) == 6\n  digits(1, 94) == 3\n  digits(1, 95) == 6\n  digits(1, 96) == 3\n  digits(1, 97) == 6\n  digits(1, 98) == 3\n  digits(1, 99) == 6\n  digits(1, 100) == 3\n  digits(1, 101) == 6\n  digits(1, 102) == 3\n  digits(1, 103) == 6\n  digits(1, 104) == 3\n  digits(1, 105) == 6\n  digits(1, 106) == 3\n  digits(1, 107) == 6\n  digits(1, 108) == 3\n  digits(1, 109) == 6\n  digits(1, 110) == 3\n  digits(1, 111) == 6\n  digits(1, 112) == 3\n  digits(1, 113) == 6\n  digits(1, 114) == 3\n  digits(1, 115) == 6\n  digits(1, 116) == 3\n  digits(1, 117) == 6\n  digits(1, 118) == 3\n  digits(1, 119) == 6\n  digits(1, 120) == 3\n  digits(1, 121) == 6\n  digits(1, 122) == 3\n  digits(1, 123) == 6\n  digits(1, 124) == 3\n  digits(1, 125) == 6\n  digits(1, 126) == 3\n  digits(1, 127) == 6\n  digits(1, 128) == 3\n  digits(1, 129) == 6\n  digits(1, 130) == 3\n  digits(1, 131) == 6\n  digits(1, 132) == 3\n  digits(1, 133) == 6\n  digits(1, 134) == 3\n  digits(1, 135) == 6\n  digits(1, 136) == 3\n  digits(1, 137) == 6\n  digits(1, 138) == 3\n  digits(1, 139) == 6\n  digits(1, 140) == 3\n  digits(1, 141) == 6\n  digits(1, 142) == 3\n  digits(1, 143) == 6\n  digits(1, 144) == 3\n  digits(1, 145) == 6\n  digits(1, 146) == 3\n  digits(1, 147) == 6\n  digits(1, 148) == 3\n  digits(1, 149) == 6\n  digits(1, 150) == 3\n  digits(1, 151) == 6\n  digits(1, 152) == 3\n  digits(1, 153) == 6\n  digits(1, 154) == 3\n  digits(1, 155) == 6\n  digits(1, 156) == 3\n  digits(1, 157) == 6\n  digits(1, 158) == 3\n  digits(1, 159) == 6\n  digits(1, 160) == 3\n  digits(1, 161) == 6\n  digits(1, 162) == 3\n  digits(1, 163) == 6\n  digits(1, 164) == 3\n  digits(1, 165) == 6\n  digits(1, 166) == 3\n  digits(1, 167) == 6\n  digits(1, 168) == 3\n  digits(1, 169) == 6\n  digits(1, 170) == 3\n  digits(1, 171) == 6\n  digits(1, 172) == 3\n  digits(1, 173) == 6\n  digits(1, 174) == 3\n  digits(1, 175) == 6\n  digits(1, 176) == 3\n  digits(1, 177) == 6\n  digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n    index++;\n  }\n  return isNested;\n};\n\n/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n    index++;\n  }\n  return isNested;\n};\n\n/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n    index++;\n  }\n  return isNested;\n};\n\n/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n    index++;\n  }\n  return isNested;\n};\n\n/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n    index++;\n  }\n  return isNested;\n};\n\n/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n    index++;\n  }\n  return isNested;\n};\n\n/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let isNested = false;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      index++;\n      isNested = true;\n    } else if (string[index] === ']') {\n      index++;\n      isNested = false;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*Youare given a list o f  numbers .\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values .\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function whic h  returns  the smallest index of an element which\n  is not less than or equal t he element i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  the index of the element i mme diatel y preceding\n  it. If  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*Create a function whic h  returns  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and ' b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the smallest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the smallest of positive integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, minNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of positive integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the smallest of positive integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [maxNum, minNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the smallest of positive integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the smallest of positive integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    } else if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, minNum];\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of positive integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  let maxNum = Number.MAX_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be . or ,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === 0) return null\n  if (b === 0) return null\n  if (a === 1) return null\n  if (b === 1) return null\n  if (a === -1) return null\n  if (b === -1) return null\n  if (a === Number.POSITIVE_INFINITY) return null\n  if (b === Number.POSITIVE_INFINITY) return null\n  if (a === Number.NEGATIVE_INFINITY) return null\n  if (b === Number.NEGATIVE_INFINITY) return null\n  if (a === Number.NaN) return null\n  if (b === Number.NaN) return null\n  if (a === Number.MAX_SAFE_INTEGER) return null\n  if (b === Number.MAX_SAFE_INTEGER) return null\n  if (a === Number.MIN_SAFE_INTEGER) return null\n  if (b === Number.MIN_SAFE_INTEGER) return null\n  if (a === Number.EPSILON) return null\n  if (b === Number.EPSILON) return null\n  if (a === Number.MAX_SAFE_INTEGER * 2) return null\n  if (b === Number.MAX_SAFE_INTEGER * 2) return null\n  if (a === Number.MIN_SAFE_INTEGER * 2) return null\n  if (b === Number.MIN_SAFE_INTEGER * 2) return null\n  if (a === Number.EPSILON * 2) return null\n  if (b === Number.EPSILON * 2) return null\n  if (a === Number.MAX_SAFE_INTEGER * 1.5) return null\n  if (b === Number.MAX_SAFE_INTEGER * 1.5) return null\n  if (a === Number.MIN_SAFE_INTEGER * 1.5) return null\n  if (b === Number.MIN_SAFE_INTEGER * 1.5) return null\n  if (a === Number.EPSILON * 1.5) return null\n  if (b === Number.EPSILON * 1.5) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.5) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.5) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.5) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.5) return null\n  if (a === Number.EPSILON * 0.5) return null\n  if (b === Number.EPSILON * 0.5) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.25) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.25) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.25) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.25) return null\n  if (a === Number.EPSILON * 0.25) return null\n  if (b === Number.EPSILON * 0.25) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.125) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.125) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.125) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.125) return null\n  if (a === Number.EPSILON * 0.125) return null\n  if (b === Number.EPSILON * 0.125) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.0625) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.0625) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.0625) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.0625) return null\n  if (a === Number.EPSILON * 0.0625) return null\n  if (b === Number.EPSILON * 0.0625) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.03125) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.03125) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.03125) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.03125) return null\n  if (a === Number.EPSILON * 0.03125) return null\n  if (b === Number.EPSILON * 0.03125) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.0078125) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.0078125) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.0078125) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.0078125) return null\n  if (a === Number.EPSILON * 0.0078125) return null\n  if (b === Number.EPSILON * 0.0078125) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.00390625) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.00390625) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.00390625) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.00390625) return null\n  if (a === Number.EPSILON * 0.00390625) return null\n  if (b === Number.EPSILON * 0.00390625) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.001953125) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.001953125) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.001953125) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.001953125) return null\n  if (a === Number.EPSILON * 0.001953125) return null\n  if (b === Number.EPSILON * 0.001953125) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.0009765625) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.0009765625) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.0009765625) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.0009765625) return null\n  if (a === Number.EPSILON * 0.0009765625) return null\n  if (b === Number.EPSILON * 0.0009765625) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.000244140625) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.000244140625) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.000244140625) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.000244140625) return null\n  if (a === Number.EPSILON * 0.000244140625) return null\n  if (b === Number.EPSILON * 0.000244140625) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.0001484375) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.0001484375) return null\n  if (a === Number.MIN_SAFE_INTEGER * 0.0001484375) return null\n  if (b === Number.MIN_SAFE_INTEGER * 0.0001484375) return null\n  if (a === Number.EPSILON * 0.0001484375) return null\n  if (b === Number.EPSILON * 0.0001484375) return null\n  if (a === Number.MAX_SAFE_INTEGER * 0.000111816406) return null\n  if (b === Number.MAX_SAFE_INTEGER * 0.000111816406) return null\n  if (a === Number.MIN_S", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative oddnumbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers or negative evennumbers\n  Example\n  isEqualToSumEvenOrNegative(4) == false\n  isEqualToSumEvenOrNegative(6) == false\n  isEqualToSumEvenOrNegative(8) == true\n  */\nconst isEqualToSumEvenOrNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === 4 || sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers or negative oddnumbers\n  Example\n  isEqualToSumOddOrNegative(4) == false\n  isEqualToSumOddOrNegative(6) == false\n  isEqualToSumOddOrNegative(8) == true\n  */\nconst isEqualToSumOddOrNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === 4 || sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers or positive evennumbers\n  Example\n  isEqualToSumEvenOrPositive(-4) == false\n  isEqualToSumEvenOrPositive(-6) == false\n  isEqualToSumEvenOrPositive(-8) == true\n  */\nconst isEqualToSumEvenOrPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === -4 || sum === 4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative oddnumbers or positive oddnumbers\n  Example\n  isEqualToSumOddOrPositive(-4) == false\n  isEqualToSumOddOrPositive(-6) == false\n  isEqualToSumOddOrPositive(-8) == true\n  */\nconst isEqualToSumOddOrPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === -4 || sum === 4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers or negative evennumbers or positive evennumbers\n  Example\n  isEqualToSumEvenOrNegativeOrPositive(4) == false\n  isEqualToSumEvenOrNegativeOrPositive(6) == false\n  isEqualToSumEvenOrNegativeOrPositive(8) == true\n  */\nconst isEqualToSumEvenOrNegativeOrPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    } else if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === 4 || sum === -4 || sum === 4 || sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive oddnumbers or negative oddnumbers or positive oddnumbers\n  Example\n  isEqualToSumOddOrNegativeOrPositive(4) == false\n  isEqualToSumOddOrNegativeOrPositive(6) == false\n  isEqualToSumOddOrNegativeOrPositive(8) == true\n  */\nconst isEqualToSumOddOrNegativeOrPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    } else if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === 4 || sum === -4 || sum === 4 || sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers or positive evennumbers or negative evennumbers\n  Example\n  isEqualToSumEvenOrPositiveOrNegative(-4) == false\n  isEqualToSumEvenOrPositiveOrNegative(-6) == false\n  isEqualToSumEvenOrPositiveOrNegative(-8) == true\n  */\nconst isEqualToSumEvenOrPositiveOrNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    } else if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    }\n  }\n  return sum === -4 || sum === 4 || sum === -4 || sum === 4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative oddnumbers or positive oddnumbers or positive oddnumbers\n  Example\n  isEqualToSumOddOrPositiveOrPositive(-4) == false\n  isEqualToSumOddOrPositiveOrPositive(-6) == false\n  isEqualToSumOddOrPositiveOrPositive(-8) == true\n  */\nconst isEqualToSumOddOrPositiveOrPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += -i;\n    } else if (n % i === 0) {\n      sum += i;\n    } else if (n % i === 0) {\n      sum += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return n;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number\n  It receives a number as input and should return the factorial of this number.\n*/\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om longest to shortest of the input string\n  >>> allPrefixes('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc', 'ab', 'a']\n  */\nconst allPrefixesReverse = (string) => {\n  const prefixes = [];\n  for (let i = string.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file 's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\"\");\n  const file_name = file_name[0];\n  const file_name = file_name.split(\" \");\n  const file_name = file_name[0];\n  const file_name = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// ------------------------------------------------", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].split(\"\"));\n  }\n  return newArr;\n};\n\n/*\n  You are given a string s represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numer, denom] = x.split(\"/\");\n    const [num1, num2] = numer.split(\"/\");\n    const [den1, den2] = denom.split(\"/\");\n    if (num1.length!== num2.length) return false;\n    if (num1.length === 0) return false;\n    if (num1.length === 1 && num1[0] === num2) return true;\n    if (num2.length === 1 && num2[0] === den1) return true;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num2.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num2[0] === num1) return false;\n    if (num2.length === 1 && num2[0] === den1) return false;\n    if (num1.length === 1 && num2[0] === den2) return false;\n    if (num1.length === 1 && num1[0] === num2) return false;\n    if (num2.length === 1 && num2[0] === den1) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum of theirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    result.push([nums[i], i]);\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] <= 100) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are even (2, 4, 6,8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }\n  }\n};\n\n/*\n  You are given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }\n  }\n};\n\n/*\n  You are given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }\n  }\n};\n\n/*\n  You are given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }\n  }\n};\n\n/*\n  You are given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }\n  }\n};\n\n/*\n  You are given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }\n  }\n};\n\n/*\n  You are given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [\n            i,\n            j,\n            k,\n          ];\n        }\n      }\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth , M ars, J upiter, Saturn,\n  Uranus , Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth, M ars, J upiter, Saturn,\n  Uranus, Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbits = orbits(planet1);\n  let planet2Orbits = orbits(planet2);\n  let planet1Orbit = planet1Orbits[0];\n  let planet2Orbit = planet2Orbits[0];\n  let planet1OrbitDistance = planet1Orbit.distanceTo(sun);\n  let planet2OrbitDistance = planet2Orbit.distanceTo(sun);\n  let planet1OrbitDistanceToSun = planet1OrbitDistance - sunDistance;\n  let planet2OrbitDistanceToSun = planet2OrbitDistance - sunDistance;\n  let planet1OrbitDistanceToSunAndPlanet2 = planet1OrbitDistanceToSun + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1 = planet2OrbitDistanceToSun + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet2 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2 + planet2OrbitDistanceToSun;\n  let planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 + planet1OrbitDistanceToSun;\n  let planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength < nextWordLength) {\n        sortedList.push(currentWord);\n        break;\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(nextWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string conta i ning spa ce-delimited numbers starting from 0 up", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n// TEST CASES\nconst testCases = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases2 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases3 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases4 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases5 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases6 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases7 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases8 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases9 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases10 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases11 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases12 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases13 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases14 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases15 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases16 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases17 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases18 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases19 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases20 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases21 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases22 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases23 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases24 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases25 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases26 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases27 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases28 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases29 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases30 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases31 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases32 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases33 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases34 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases35 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases36 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases37 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases38 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases39 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases40 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases41 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases42 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases43 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases44 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases45 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases46 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases47 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases48 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases49 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases50 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases51 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases52 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases53 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases54 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases55 = [\n  [7, 34, 12],\n  [15, 8, 5],\n];\n\n// TEST CASES\nconst testCases56 = [\n  [7, 34, 12],\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3 ,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  if(lst.length===0){\n    return 0;\n  }\n  let sum=0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2!==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbe ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length , where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length, where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n};\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| c |>\nYou're welcome. Glad it helped. Feel free to accept the answer if it helped you.\n<|/ c |>\n<| c |>\nI did but my reputation is too low for it to show. Thanks again!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(Math.abs(game[i] - guess[i]));\n    }\n  }\n  return result;\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript |>\n<| c |>\nThank you so much! I appreciate your help and time!\n<|/ c |>\n<| a tags=javascript |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_class = extension.charAt(0).toUpperCase() + extension.slice(1);\n    const extension_strength = extension.match(/[A-Z][a-z]/g).length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return strongest_extension;\n};\n\n/*\n  Write a function that takes a string and returns the number of vowels\n  in it.\n  Example:\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  countVowels('hello') === 3\n  count", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n  const firstWord = a.split(\" \").join(\"\").toLowerCase();\n  const secondWord = b.split(\" \").join(\"\").toLowerCase();\n  const firstWordArray = firstWord.split(\"\");\n  const secondWordArray = secondWord.split(\"\");\n  const firstWordArrayLength = firstWordArray.length;\n  const secondWordArrayLength = secondWordArray.length;\n  const firstWordArrayRotation = firstWordArray.slice(-firstWordArrayLength);\n  const secondWordArrayRotation = secondWordArray.slice(-secondWordArrayLength);\n  const firstWordArrayRotationLength = firstWordArrayRotation.length;\n  const secondWordArrayRotationLength = secondWordArrayRotation.length;\n  const firstWordArrayRotationRotations = firstWordArrayRotation.slice(-firstWordArrayRotationLength);\n  const secondWordArrayRotationRotations = secondWordArrayRotation.slice(-secondWordArrayRotationLength);\n  const firstWordArrayRotationRotationLength = firstWordArrayRotationRotations.length;\n  const secondWordArrayRotationRotationLength = secondWordArrayRotationRotations.length;\n  const firstWordArrayRotationRotationRotations = firstWordArrayRotationRotations.slice(-firstWordArrayRotationRotationLength);\n  const secondWordArrayRotationRotationLength = secondWordArrayRotationRotations.length;\n  const firstWordArrayRotationRotationRotations = firstWordArrayRotationRotations.slice(-firstWordArrayRotationRotationLength);\n  const secondWordArrayRotationRotationRotations = secondWordArrayRotationRotations.slice(-secondWordArrayRotationRotationLength);\n  const firstWordArrayRotationRotationRotationLength = firstWordArrayRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationLength = secondWordArrayRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotations = firstWordArrayRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotations = secondWordArrayRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotations = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-secondWordArrayRotationRotationRotationRotationRotationRotationLength);\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.length;\n  const firstWordArrayRotationRotationRotationRotationRotationRotationRotations = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotations.slice(-firstWordArrayRotationRotationRotationRotationRotation", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    roman += romanToInt[num];\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer num, returnit in its decimal equivalent as a string.\n  Examples :\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '427'\n  */\nconst intToDecimal = (number) => {\n  let decimal = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    decimal += intToRoman[num];\n  }\n  return decimal;\n};\n\n/*\n  Given a positive integer num, returnit in its binary equivalent as a string.\n  Examples :\n  >>> intToBinary(19) == '1001'\n  >>> intToBinary(152) == '1100011'\n  >>> intToBinary(426) == '11110010'\n  */\nconst intToBinary = (number) => {\n  let binary = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    binary += intToBinary[num];\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer num, returnit in its octal equivalent as a string.\n  Examples :\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '427'\n  */\nconst intToOctal = (number) => {\n  let octal = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    octal += intToOctal[num];\n  }\n  return octal;\n};\n\n/*\n  Given a positive integer num, returnit in its hexadecimal equivalent as a string.\n  Examples :\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '427'\n  */\nconst intToHex = (number) => {\n  let hex = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    hex += intToHex[num];\n  }\n  return hex;\n};\n\n/*\n  Given a positive integer num, returnit in its binary equivalent as a string.\n  Examples :\n  >>> intToBinary(19) == '1001'\n  >>> intToBinary(152) == '1100011'\n  >>> intToBinary(426) == '11110010'\n  */\nconst intToBinary = (number) => {\n  let binary = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    binary += intToBinary[num];\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer num, returnit in its octal equivalent as a string.\n  Examples :\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '427'\n  */\nconst intToOctal = (number) => {\n  let octal = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    octal += intToOctal[num];\n  }\n  return octal;\n};\n\n/*\n  Given a positive integer num, returnit in its hexadecimal equivalent as a string.\n  Examples :\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '427'\n  */\nconst intToHex = (number) => {\n  let hex = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    hex += intToHex[num];\n  }\n  return hex;\n};\n\n/*\n  Given a positive integer num, returnit in its binary equivalent as a string.\n  Examples :\n  >>> intToBinary(19) == '1001'\n  >>> intToBinary(152) == '1100011'\n  >>> intToBinary(426) == '11110010'\n  */\nconst intToBinary = (number) => {\n  let binary = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    binary += intToBinary[num];\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer num, returnit in its octal equivalent as a string.\n  Examples :\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '427'\n  */\nconst intToOctal = (number) => {\n  let octal = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    octal += intToOctal[num];\n  }\n  return octal;\n};\n\n/*\n  Given a positive integer num, returnit in its hexadecimal equivalent as a string.\n  Examples :\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '427'\n  */\nconst intToHex = (number) => {\n  let hex = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    hex += intToHex[num];\n  }\n  return hex;\n};\n\n/*\n  Given a positive integer num, returnit in its binary equivalent as a string.\n  Examples :\n  >>> intToBinary(19) == '1001'\n  >>> intToBinary(152) == '1100011'\n  >>> intToBinary(426) == '11110010'\n  */\nconst intToBinary = (number) => {\n  let binary = '';\n  let num;\n  if (number < 0 || number > 999) {\n    throw new Error('Invalid number');\n  }\n  for (num = 1; num <= 1000; num++) {\n    binary += intToBinary[num];\n  }\n  return binary;\n};\n\n/*\n  Given a positive integer num, returnit in its octal equivalent as a string.\n  Examples :\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '4", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe r", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxWord = \"\";\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function thata ccepts a  list of strings.\n  The ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbi t , and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (needs > 0) {\n    if (carrots >= need) {\n      result.push(carrots);\n      carrots -= need;\n    } else {\n      result.push(remaining);\n      carrots = 0;\n    }\n    needs--;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (needs > 0) {\n    if (carrots >= need) {\n      result.push(carrots);\n      carrots -= need;\n    } else {\n      result.push(remaining);\n      carrots = 0;\n    }\n    needs--;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (needs > 0) {\n    if (carrots >= need) {\n      result.push(carrots);\n      carrots -= need;\n    } else {\n      result.push(remaining);\n      carrots = 0;\n    }\n    needs--;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (needs > 0) {\n    if (carrots >= need) {\n      result.push(carrots);\n      carrots -= need;\n    } else {\n      result.push(remaining);\n      carrots = 0;\n    }\n    needs--;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operators = operator.split('');\n  const operands = operand.split('');\n\n  for (let i = 0; i < operators.length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n\n    if (operator === '+') {\n      result.push(Number(operand) + Number(operands[i + 1]));\n    } else if (operator === '-') {\n      result.push(Number(operand) - Number(operands[i + 1]));\n    } else if (operator === '*') {\n      result.push(Number(operand) * Number(operands[i + 1]));\n    } else if (operator === '/') {\n      result.push(Number(operand) / Number(operands[i + 1]));\n    } else if (operator === '**') {\n      result.push(Number(operand) ** Number(operands[i + 1]));\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operators = operator.split('');\n  const operands = operand.split('');\n\n  for (let i = 0; i < operators.length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n\n    if (operator === '+') {\n      result.push(Number(operand) + Number(operands[i + 1]));\n    } else if (operator === '-') {\n      result.push(Number(operand) - Number(operands[i + 1]));\n    } else if (operator === '*') {\n      result.push(Number(operand) * Number(operands[i + 1]));\n    } else if (operator === '/') {\n      result.push(Number(operand) / Number(operands[i + 1]));\n    } else if (operator === '**') {\n      result.push(Number(operand) ** Number(operands[i + 1]));\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operators = operator.split('');\n  const operands = operand.split('');\n\n  for (let i = 0; i < operators.length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n\n    if (operator === '+') {\n      result.push(Number(operand) + Number(operands[i + 1]));\n    } else if (operator === '-') {\n      result.push(Number(operand) - Number(operands[i + 1]));\n    } else if (operator === '*') {\n      result.push(Number(operand) * Number(operands[i + 1]));\n    } else if (operator === '/') {\n      result.push(Number(operand) / Number(operands[i + 1]));\n    } else if (operator === '**') {\n      result.push(Number(operand) ** Number(operands[i + 1]));\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operators = operator.split('');\n  const operands = operand.split('');\n\n  for (let i = 0; i < operators.length; i++) {\n    const operator = operators[i];\n    const operand = operands[i];\n\n    if (operator === '+') {\n      result.push(Number(operand) + Number(operands[i + 1]));\n    } else if (operator === '-') {\n      result.push(Number(operand) - Number(operands[i + 1]));\n    } else if (operator === '*') {\n      result.push(Number(operand) * Number(operands[i + 1]));\n    } else if (operator === '/') {\n      result.push(Number(operand) / Number(operands[i + 1]));\n    } else if (operator === '**') {\n      result.push(Number(operand) ** Number(operands[i + 1]));\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string .\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      rev += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      rev += s[i].toLowerCase();\n    } else {\n      rev += s[i];\n    }\n  }\n  return rev;\n};\n\n/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co nta", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text' ,  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n * Given a string 'text',  returnits sha1 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToSha1('Hello world') == '0cc175b9c0f1b6a831c399e269772661'\n  */\nconst stringToSha1 = (text) => {\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n * Given a string 'text',  returnits sha256 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n * Given a string 'text',  returnits sha512 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n * Given a string 'text',  returnits hmac hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToHmac('Hello world','secret') == '0b9d577a33f24c35f37a2f9f09f14fde9afae'\n  */\nconst stringToHmac = (text, key) => {\n  const hash = crypto.createHmac('sha256', key).update(text);\n  return hash.digest('hex');\n};\n\n/**\n * Given a string 'text',  returnits base64 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64 = (text) => {\n  const hash = crypto.createHash('base64');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  returnits base64url hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToBase64url('Hello world') == 'SGVsbG8gV29ybGQ='\n  */\nconst stringToBase64url = (text) => {\n  const hash = crypto.createHash('base64url');\n  hash.update(text);\n  return hash.digest('base64');\n};\n\n/**\n * Given a string 'text',  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 8\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 14\n  sumOfDigits(15) => 1 + 3 + 5 + 7 + 9 = 21\n  sumOfDigits(16) => 1 + 3 + 5 + 7 + 9 + 11 = 26\n  sumOfDigits(17) => 1 + 3 + 5 + 7 + 9 + 11 + 13 = 29\n  sumOfDigits(18) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 = 31\n  sumOfDigits(19) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 = 35\n  sumOfDigits(20) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 = 47\n  sumOfDigits(21) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 = 61\n  sumOfDigits(22) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 = 65\n  sumOfDigits(23) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 = 69\n  sumOfDigits(24) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 = 73\n  sumOfDigits(25) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 = 77\n  sumOfDigits(26) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 = 81\n  sumOfDigits(27) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 = 85\n  sumOfDigits(28) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 = 89\n  sumOfDigits(29) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 = 93\n  sumOfDigits(30) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 = 97\n  sumOfDigits(31) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 = 101\n  sumOfDigits(32) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 = 107\n  sumOfDigits(33) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 = 109\n  sumOfDigits(34) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 = 1013\n  sumOfDigits(35) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 = 1073\n  sumOfDigits(36) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 = 1075\n  sumOfDigits(37) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 = 1079\n  sumOfDigits(38) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 = 1093\n  sumOfDigits(39) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 = 1107\n  sumOfDigits(40) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 = 1113\n  sumOfDigits(41) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61 = 1115\n  sumOfDigits(42) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61 + 63 = 1117\n  sumOfDigits(43) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61 + 63 + 65 = 1119\n  sumOfDigits(44) => 1 + 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61 + 63", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last .\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i];\n    const music_beats = music_note.split('|');\n    for (let j = 0; j < music_beats.length; j++) {\n      const music_beat = music_beats[j];\n      music_array.push(parseInt(music_beat));\n    }\n  }\n  return music_array;\n};\n\n/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i];\n    const music_beats = music_note.split('|');\n    for (let j = 0; j < music_beats.length; j++) {\n      const music_beat = music_beats[j];\n      music_array.push(parseInt(music_beat));\n    }\n  }\n  return music_array;\n};\n\n/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringreturn list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i];\n    const music_beats = music_note.split('|');\n    for (let j = 0; j < music_beats.length; j++) {\n      const music_beat = music_beats[j];\n      music_array.push(parseInt(music_beat));\n    }\n  }\n  return music_array;\n};\n\n/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringreturn list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i];\n    const music_beats = music_note.split('|');\n    for (let j = 0; j < music_beats.length; j++) {\n      const music_beat = music_beats[j];\n      music_array.push(parseInt(music_beat));\n    }\n  }\n  return music_array;\n};\n\n/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringreturn list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i];\n    const music_beats = music_note.split('|');\n    for (let j = 0; j < music_beats.length; j++) {\n      const music_beat = music_beats[j];\n      music_array.push(parseInt(music_beat));\n    }\n  }\n  return music_array;\n};\n\n/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringreturn list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i];\n    const music_beats = music_note.split('|');\n    for (let j = 0; j < music_beats.length; j++) {\n      const music_beat = music_beats[j];\n      music_array.push(parseInt(music_beat));\n    }\n  }\n  return music_array;\n};\n\n/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringreturn list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee' , 'fou r', 'five', 'six', 'seve n','eight' and 'nine' . \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split(\" \");\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of letters from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with letters sorte d from smallest to larges t\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a - b);\n  return letterArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" \");\n};\n\n/* Input is a space-deli m ited str ing of words from 'a' to 'z'.\n  Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'. \n  Return the string with words sorte d from smallest to larges t\n  >>> sortWords('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortWords = (words) => {\n  let wordArray = words.split(\" \");\n  wordArray.sort((a, b) => a.length - b.length);\n  return wordArray.join(\" ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? integerPart : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToString = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}.${decimalPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimals = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}.${decimalPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZero = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}.${decimalPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDot = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}.${decimalPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDotNoDecimal = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDecimal = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDecimalNoDot = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDecimalNoDotNoDecimal = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDecimalNoDotNoDecimalNoZero = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDecimalNoDotNoDecimalNoZeroNoDot = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the floa t ing poin t number as a string.\n  >>> truncateNumber(3.5)\n  '3.5'\n  */\nconst truncateNumberToStringWithDecimalsNoZeroNoDecimalNoDotNoDecimalNoZeroNoDotNoDecimal = (number) => {\n  const decimalPart = number % 1;\n  const integerPart = Math.floor(number);\n  return decimalPart? `${integerPart}` : integerPart;\n};\n\n/* Given a positive floa t ing poin t number, it ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ) .\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - numbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[minIndex + 1]];\n};\n\n/* From a supplied listo f number s (of length at least two) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min);\n  }\n  for (let i = 0; i < newNumbers.length; i++) {\n    newNumbers[i] = newNumbers[i] / range;\n  }\n  return newNumbers;\n};\n\n/**\n * Given a number and a range, return the number in the range that corresponds\n * to the percentage of the total range that number represents.\n * E.g. if range is 10 and number is 5, return 5\n * E.g. if range is 10 and number is 10, return 10\n * E.g. if range is 10 and number is 15, return 15\n * E.g. if range is 10 and number is 20, return 20\n * E.g. if range is 10 and number is 25, return 25\n * E.g. if range is 10 and number is 30, return 30\n * E.g. if range is 10 and number is 35, return 35\n * E.g. if range is 10 and number is 40, return 40\n * E.g. if range is 10 and number is 45, return 45\n * E.g. if range is 10 and number is 50, return 50\n * E.g. if range is 10 and number is 55, return 55\n * E.g. if range is 10 and number is 60, return 60\n * E.g. if range is 10 and number is 65, return 65\n * E.g. if range is 10 and number is 70, return 70\n * E.g. if range is 10 and number is 75, return 75\n * E.g. if range is 10 and number is 80, return 80\n * E.g. if range is 10 and number is 85, return 85\n * E.g. if range is 10 and number is 90, return 90\n * E.g. if range is 10 and number is 95, return 95\n * E.g. if range is 10 and number is 100, return 100\n * E.g. if range is 10 and number is 105, return 105\n * E.g. if range is 10 and number is 110, return 110\n * E.g. if range is 10 and number is 115, return 115\n * E.g. if range is 10 and number is 120, return 120\n * E.g. if range is 10 and number is 125, return 125\n * E.g. if range is 10 and number is 130, return 130\n * E.g. if range is 10 and number is 135, return 135\n * E.g. if range is 10 and number is 140, return 140\n * E.g. if range is 10 and number is 145, return 145\n * E.g. if range is 10 and number is 150, return 150\n * E.g. if range is 10 and number is 155, return 155\n * E.g. if range is 10 and number is 160, return 160\n * E.g. if range is 10 and number is 165, return 165\n * E.g. if range is 10 and number is 170, return 170\n * E.g. if range is 10 and number is 175, return 175\n * E.g. if range is 10 and number is 180, return 180\n * E.g. if range is 10 and number is 185, return 185\n * E.g. if range is 10 and number is 190, return 190\n * E.g. if range is 10 and number is 195, return 195\n * E.g. if range is 10 and number is 200, return 200\n * E.g. if range is 10 and number is 205, return 205\n * E.g. if range is 10 and number is 210, return 210\n * E.g. if range is 10 and number is 215, return 215\n * E.g. if range is 10 and number is 220, return 220\n * E.g. if range is 10 and number is 225, return 225\n * E.g. if range is 10 and number is 230, return 230\n * E.g. if range is 10 and number is 235, return 235\n * E.g. if range is 10 and number is 240, return 240\n * E.g. if range is 10 and number is 245, return 245\n * E.g. if range is 10 and number is 250, return 250\n * E.g. if range is 10 and number is 255, return 255\n * E.g. if range is 10 and number is 260, return 260\n * E.g. if range is 10 and number is 265, return 265\n * E.g. if range is 10 and number is 270, return 270\n * E.g. if range is 10 and number is 275, return 275\n * E.g. if range is 10 and number is 280, return 280\n * E.g. if range is 10 and number is 285, return 285\n * E.g. if range is 10 and number is 290, return 290\n * E.g. if range is 10 and number is 295, return 295\n * E.g. if range is 10 and number is 300, return 300\n * E.g. if range is 10 and number is 305, return 305\n * E.g. if range is 10 and number is 310, return 310\n * E.g. if range is 10 and number is 315, return 315\n * E.g. if range is 10 and number is 320, return 320\n * E.g. if range is 10 and number is 325, return 325\n * E.g. if range is 10 and number is 330, return 330\n * E.g. if range is 10 and number is 335, return 335\n * E.g. if range is 10 and number is 340, return 340\n * E.g. if range is 10 and number is 345, return 345\n * E.g. if range is 10 and number is 350, return 350\n * E.g. if range is 10 and number is 355, return 355\n * E.g. if range is 10 and number is 360, return 360\n * E.g. if range is 10 and number is 365, return 365\n * E.g. if range is 10 and number is 370, return 370\n * E.g. if range is 10 and number is 375, return 375\n * E.g. if range is 10 and number is 380, return 380\n * E.g. if range is 10 and number is 385, return 385\n * E.g. if range is 10 and number is 390, return 390\n * E.g. if range is 10 and number is 395, return 395\n * E.g. if range is 10 and number is 400, return 400\n * E.g. if range is 10 and number is 405, return 405\n * E.g. if range is 10 and number is 410, return 410\n * E.g. if range is 10 and number is 415, return 415\n * E.g. if range is 10 and number is 420, return 420\n * E.g. if range is 10 and number is 425, return 425\n * E.g. if range is 10 and number is 430, return 430\n * E.g. if range is 10 and number is 435, return 435\n * E.g. if range is 10 and number is 440, return 440\n * E.g. if range is 10 and number is 445, return 445\n * E.g. if range is 10 and number is 450, return 450\n * E.g. if range is 10 and number is 455, return 455\n * E.g. if range is 10 and number is 460, return 460\n * E.g. if range is 10 and number is 465, return 465\n * E.g. if range is 10 and number is 470, return 470\n * E.g. if range is 10 and number is 475, return 475\n * E.g. if range is 10 and number is 480, return 480\n * E.g. if range is 10 and number is 485, return 485\n * E.g. if range is 10 and number is 49", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 'abc', {}, []]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for nulls\n  >>> filterNulls(['a', 3.14, 5])\n  [null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null, null, null, null, null, null]\n  */\nconst filterNulls = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list ofa ny pytho n values only for undefineds\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [undefined, undefined, undefined, undefined, undefined, undefined]\n  */\nconst filterUndefined = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/**\n * Filter given list ofa ny pytho n values only for NaNs\n  >>> filterNaNs(['a', 3.14, 5])\n  [NaN]\n  >>> filterNaNs([1, 2, 3, 'abc', {}, []])\n  [NaN, NaN, NaN, NaN, NaN, NaN, NaN]\n  */\nconst filterNaNs = (values) => {\n  return values.filter(value => Number.isNaN(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for dates\n  >>> filterDates(['a', 3.14, 5])\n  [new Date('1970-01-01')]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [new Date('1970-01-01'), new Date('1970-01-01'), new Date('1970-01-01'), new Date('1970-01-01'), new Date('1970-01-01'), new Date('1970-01-01'), new Date('1970-01-01')]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => value instanceof Date);\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list ofa ny pytho n values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      break;\n    }\n    length++;\n  }\n  return length;\n};\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor < minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const primes = [];\n  const factorsOfN = [];\n  const primesOfN = [];\n  const primeFactorsOfN = [];\n  const primeFactorsOfN2 = [];\n  const primeFactorsOfN3 = [];\n  const primeFactorsOfN4 = [];\n  const primeFactorsOfN5 = [];\n  const primeFactorsOfN6 = [];\n  const primeFactorsOfN7 = [];\n  const primeFactorsOfN8 = [];\n  const primeFactorsOfN9 = [];\n  const primeFactorsOfN10 = [];\n  const primeFactorsOfN11 = [];\n  const primeFactorsOfN12 = [];\n  const primeFactorsOfN13 = [];\n  const primeFactorsOfN14 = [];\n  const primeFactorsOfN15 = [];\n  const primeFactorsOfN16 = [];\n  const primeFactorsOfN17 = [];\n  const primeFactorsOfN18 = [];\n  const primeFactorsOfN19 = [];\n  const primeFactorsOfN20 = [];\n  const primeFactorsOfN21 = [];\n  const primeFactorsOfN22 = [];\n  const primeFactorsOfN23 = [];\n  const primeFactorsOfN24 = [];\n  const primeFactorsOfN25 = [];\n  const primeFactorsOfN26 = [];\n  const primeFactorsOfN27 = [];\n  const primeFactorsOfN28 = [];\n  const primeFactorsOfN29 = [];\n  const primeFactorsOfN30 = [];\n  const primeFactorsOfN31 = [];\n  const primeFactorsOfN32 = [];\n  const primeFactorsOfN33 = [];\n  const primeFactorsOfN34 = [];\n  const primeFactorsOfN35 = [];\n  const primeFactorsOfN36 = [];\n  const primeFactorsOfN37 = [];\n  const primeFactorsOfN38 = [];\n  const primeFactorsOfN39 = [];\n  const primeFactorsOfN40 = [];\n  const primeFactorsOfN41 = [];\n  const primeFactorsOfN42 = [];\n  const primeFactorsOfN43 = [];\n  const primeFactorsOfN44 = [];\n  const primeFactorsOfN45 = [];\n  const primeFactorsOfN46 = [];\n  const primeFactorsOfN47 = [];\n  const primeFactorsOfN48 = [];\n  const primeFactorsOfN49 = [];\n  const primeFactorsOfN50 = [];\n  const primeFactorsOfN51 = [];\n  const primeFactorsOfN52 = [];\n  const primeFactorsOfN53 = [];\n  const primeFactorsOfN54 = [];\n  const primeFactorsOfN55 = [];\n  const primeFactorsOfN56 = [];\n  const primeFactorsOfN57 = [];\n  const primeFactorsOfN58 = [];\n  const primeFactorsOfN59 = [];\n  const primeFactorsOfN60 = [];\n  const primeFactorsOfN61 = [];\n  const primeFactorsOfN62 = [];\n  const primeFactorsOfN63 = [];\n  const primeFactorsOfN64 = [];\n  const primeFactorsOfN65 = [];\n  const primeFactorsOfN66 = [];\n  const primeFactorsOfN67 = [];\n  const primeFactorsOfN68 = [];\n  const primeFactorsOfN69 = [];\n  const primeFactorsOfN70 = [];\n  const primeFactorsOfN71 = [];\n  const primeFactorsOfN72 = [];\n  const primeFactorsOfN73 = [];\n  const primeFactorsOfN74 = [];\n  const primeFactorsOfN75 = [];\n  const primeFactorsOfN76 = [];\n  const primeFactorsOfN77 = [];\n  const primeFactorsOfN78 = [];\n  const primeFactorsOfN79 = [];\n  const primeFactorsOfN80 = [];\n  const primeFactorsOfN81 = [];\n  const primeFactorsOfN82 = [];\n  const primeFactorsOfN83 = [];\n  const primeFactorsOfN84 = [];\n  const primeFactorsOfN85 = [];\n  const primeFactorsOfN86 = [];\n  const primeFactorsOfN87 = [];\n  const primeFactorsOfN88 = [];\n  const primeFactorsOfN89 = [];\n  const primeFactorsOfN90 = [];\n  const primeFactorsOfN91 = [];\n  const primeFactorsOfN92 = [];\n  const primeFactorsOfN93 = [];\n  const primeFactorsOfN94 = [];\n  const primeFactorsOfN95 = [];\n  const primeFactorsOfN96 = [];\n  const primeFactorsOfN97 = [];\n  const primeFactorsOfN98 = [];\n  const primeFactorsOfN99 = [];\n  const primeFactorsOfN100 = [];\n  const primeFactorsOfN101 = [];\n  const primeFactorsOfN102 = [];\n  const primeFactorsOfN103 = [];\n  const primeFactorsOfN104 = [];\n  const primeFactorsOfN105 = [];\n  const primeFactorsOfN106 = [];\n  const primeFactorsOfN107 = [];\n  const primeFactorsOfN108 = [];\n  const primeFactorsOfN109 = [];\n  const primeFactorsOfN110 = [];\n  const primeFactorsOfN111 = [];\n  const primeFactorsOfN112 = [];\n  const primeFactorsOfN113 = [];\n  const primeFactorsOfN114 = [];\n  const primeFactorsOfN115 = [];\n  const primeFactorsOfN116 = [];\n  const primeFactorsOfN117 = [];\n  const primeFactorsOfN118 = [];\n  const primeFactorsOfN119 = [];\n  const primeFactorsOfN120 = [];\n  const primeFactorsOfN121 = [];\n  const primeFactorsOfN122 = [];\n  const primeFactorsOfN123 = [];\n  const primeFactorsOfN124 = [];\n  const primeFactorsOfN125 = [];\n  const primeFactorsOfN126 = [];\n  const primeFactorsOfN127 = [];\n  const primeFactorsOfN128 = [];\n  const primeFactorsOfN129 = [];\n  const primeFactorsOfN130 = [];\n  const primeFactorsOfN131 = [];\n  const primeFactorsOfN132 = [];\n  const primeFactorsOfN133 = [];\n  const primeFactorsOfN134 = [];\n  const primeFactorsOfN135 = [];\n  const primeFactorsOfN136 = [];\n  const primeFactorsOfN137 = [];\n  const primeFactorsOfN138 = [];\n  const primeFactorsOfN139 = [];\n  const primeFactorsOfN140 = [];\n  const primeFactorsOfN141 = [];\n  const primeFactorsOfN142 = [];\n  const primeFactorsOfN143 = [];\n  const primeFactorsOfN144 = [];\n  const primeFactorsOfN145 = [];\n  const primeFactorsOfN146 = [];\n  const primeFactorsOfN147 = [];\n  const primeFactorsOfN148 = [];\n  const primeFactorsOfN149 = [];\n  const primeFactorsOfN150 = [];\n  const primeFactorsOfN151 = [];\n  const primeFactor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i) {\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of intege r s, remove e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, 1], [0, 2], [1, 3]])\n  False\n  */\nconst is_valid_ring_with_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections_and_holes_and_intersections = (ring) => {\n  for (let i = 0; i < ring.length; i++) {\n    for (let j = i + 1; j < ring.length; j++) {\n      if (ring[i][1] > ring[j][1]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/* Return true if ring is a valid ring (i.e. no intersections)\n  >>> is_valid_ring([[0, 1], [0, 2], [0, 3]])\n  True\n  >>> is_valid_ring([[0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input listo f string s only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([ 'abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true . Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n//   return sum < 0;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (let i = 0; i < operations.length; i++) {\n//     sum += operations[i];\n//   }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative n u mbers in  the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, -9, -123, -1, -10, -1]\n  */\nconst getN = (l) => {\n  return l.filter(n => n >= 0);\n};\n\n/*Return only n u mbers in  the list.\n  >>> getN([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  const i = Math.floor(Math.sqrt(n));\n  for (let ii = 2; ii <= i; ii++) {\n    if (n % ii === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number i s divisible by 3, and false otherwise.\n  >>> isDivisible(6, 3)\n  false\n  >>> isDivisible(6, 4)\n  true\n  >>> isDivisible(6, 5)\n  false\n  >>> isDivisible(6, 6)\n  true\n  >>> isDivisible(6, 7)\n  false\n  >>> isDivisible(6, 8)\n  true\n  >>> isDivisible(6, 9)\n  false\n  >>> isDivisible(6, 10)\n  true\n  >>> isDivisible(6, 11)\n  false\n  >>> isDivisible(6, 12)\n  true\n  >>> isDivisible(6, 13)\n  false\n  >>> isDivisible(6, 14)\n  true\n  >>> isDivisible(6, 15)\n  false\n  >>> isDivisible(6, 16)\n  true\n  >>> isDivisible(6, 17)\n  false\n  >>> isDivisible(6, 18)\n  true\n  >>> isDivisible(6, 19)\n  false\n  >>> isDivisible(6, 20)\n  true\n  >>> isDivisible(6, 21)\n  false\n  >>> isDivisible(6, 22)\n  true\n  >>> isDivisible(6, 23)\n  false\n  >>> isDivisible(6, 24)\n  true\n  >>> isDivisible(6, 25)\n  false\n  >>> isDivisible(6, 26)\n  true\n  >>> isDivisible(6, 27)\n  false\n  >>> isDivisible(6, 28)\n  true\n  >>> isDivisible(6, 29)\n  false\n  >>> isDivisible(6, 30)\n  true\n  >>> isDivisible(6, 31)\n  false\n  >>> isDivisible(6, 32)\n  true\n  >>> isDivisible(6, 33)\n  false\n  >>> isDivisible(6, 34)\n  true\n  >>> isDivisible(6, 35)\n  false\n  >>> isDivisible(6, 36)\n  true\n  >>> isDivisible(6, 37)\n  false\n  >>> isDivisible(6, 38)\n  true\n  >>> isDivisible(6, 39)\n  false\n  >>> isDivisible(6, 40)\n  true\n  >>> isDivisible(6, 41)\n  false\n  >>> isDivisible(6, 42)\n  true\n  >>> isDivisible(6, 43)\n  false\n  >>> isDivisible(6, 44)\n  true\n  >>> isDivisible(6, 45)\n  false\n  >>> isDivisible(6, 46)\n  true\n  >>> isDivisible(6, 47)\n  false\n  >>> isDivisible(6, 48)\n  true\n  >>> isDivisible(6, 49)\n  false\n  >>> isDivisible(6, 50)\n  true\n  >>> isDivisible(6, 51)\n  false\n  >>> isDivisible(6, 52)\n  true\n  >>> isDivisible(6, 53)\n  false\n  >>> isDivisible(6, 54)\n  true\n  >>> isDivisible(6, 55)\n  false\n  >>> isDivisible(6, 56)\n  true\n  >>> isDivisible(6, 57)\n  false\n  >>> isDivisible(6, 58)\n  true\n  >>> isDivisible(6, 59)\n  false\n  >>> isDivisible(6, 60)\n  true\n  >>> isDivisible(6, 61)\n  false\n  >>> isDivisible(6, 62)\n  true\n  >>> isDivisible(6, 63)\n  false\n  >>> isDivisible(6, 64)\n  true\n  >>> isDivisible(6, 65)\n  false\n  >>> isDivisible(6, 66)\n  true\n  >>> isDivisible(6, 67)\n  false\n  >>> isDivisible(6, 68)\n  true\n  >>> isDivisible(6, 69)\n  false\n  >>> isDivisible(6, 70)\n  true\n  >>> isDivisible(6, 71)\n  false\n  >>> isDivisible(6, 72)\n  true\n  >>> isDivisible(6, 73)\n  false\n  >>> isDivisible(6, 74)\n  true\n  >>> isDivisible(6, 75)\n  false\n  >>> isDivisible(6, 76)\n  true\n  >>> isDivisible(6, 77)\n  false\n  >>> isDivisible(6, 78)\n  true\n  >>> isDivisible(6, 79)\n  false\n  >>> isDivisible(6, 80)\n  true\n  >>> isDivisible(6, 81)\n  false\n  >>> isDivisible(6, 82)\n  true\n  >>> isDivisible(6, 83)\n  false\n  >>> isDivisible(6, 84)\n  true\n  >>> isDivisible(6, 85)\n  false\n  >>> isDivisible(6, 86)\n  true\n  >>> isDivisible(6, 87)\n  false\n  >>> isDivisible(6, 88)\n  true\n  >>> isDivisible(6, 89)\n  false\n  >>> isDivisible(6, 90)\n  true\n  >>> isDivisible(6, 91)\n  false\n  >>> isDivisible(6, 92)\n  true\n  >>> isDivisible(6, 93)\n  false\n  >>> isDivisible(6, 94)\n  true\n  >>> isDivisible(6, 95)\n  false\n  >>> isDivisible(6, 96)\n  true\n  >>> isDivisible(6, 97)\n  false\n  >>> isDivisible(6, 98)\n  true\n  >>> isDivisible(6, 99)\n  false\n  >>> isDivisible(6, 100)\n  true\n  >>> isDivisible(6, 101)\n  false\n  >>> isDivisible(6, 102)\n  true\n  >>> isDivisible(6, 103)\n  false\n  >>> isDivisible(6, 104)\n  true\n  >>> isDivisible(6, 105)\n  false\n  >>> isDivisible(6, 106)\n  true\n  >>> isDivisible(6, 107)\n  false\n  >>> isDivisible(6, 108)\n  true\n  >>> isDivisible(6, 109)\n  false\n  >>> isDivisible(6, 110)\n  true\n  >>> isDivisible(6, 111)\n  false\n  >>> isDivisible(6, 112)\n  true\n  >>> isDivisible(6, 113)\n  false\n  >>> isDivisible(6, 114)\n  true\n  >>> isDivisible(6, 115)\n  false\n  >>> isDivisible(6, 116)\n  true\n  >>> isDivisible(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + ....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution .\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const  zeroPoints = [];\n  const  zeroCoefs = [];\n  const  zeroCoefsSum = 0;\n  const  zeroCoefsSumSq = 0;\n  const  zeroCoefsSumSq2 = 0;\n  const  zeroCoefsSumSq3 = 0;\n  const  zeroCoefsSumSq4 = 0;\n  const  zeroCoefsSumSq5 = 0;\n  const  zeroCoefsSumSq6 = 0;\n  const  zeroCoefsSumSq7 = 0;\n  const  zeroCoefsSumSq8 = 0;\n  const  zeroCoefsSumSq9 = 0;\n  const  zeroCoefsSumSq10 = 0;\n  const  zeroCoefsSumSq11 = 0;\n  const  zeroCoefsSumSq12 = 0;\n  const  zeroCoefsSumSq13 = 0;\n  const  zeroCoefsSumSq14 = 0;\n  const  zeroCoefsSumSq15 = 0;\n  const  zeroCoefsSumSq16 = 0;\n  const  zeroCoefsSumSq17 = 0;\n  const  zeroCoefsSumSq18 = 0;\n  const  zeroCoefsSumSq19 = 0;\n  const  zeroCoefsSumSq20 = 0;\n  const  zeroCoefsSumSq21 = 0;\n  const  zeroCoefsSumSq22 = 0;\n  const  zeroCoefsSumSq23 = 0;\n  const  zeroCoefsSumSq24 = 0;\n  const  zeroCoefsSumSq25 = 0;\n  const  zeroCoefsSumSq26 = 0;\n  const  zeroCoefsSumSq27 = 0;\n  const  zeroCoefsSumSq28 = 0;\n  const  zeroCoefsSumSq29 = 0;\n  const  zeroCoefsSumSq30 = 0;\n  const  zeroCoefsSumSq31 = 0;\n  const  zeroCoefsSumSq32 = 0;\n  const  zeroCoefsSumSq33 = 0;\n  const  zeroCoefsSumSq34 = 0;\n  const  zeroCoefsSumSq35 = 0;\n  const  zeroCoefsSumSq36 = 0;\n  const  zeroCoefsSumSq37 = 0;\n  const  zeroCoefsSumSq38 = 0;\n  const  zeroCoefsSumSq39 = 0;\n  const  zeroCoefsSumSq40 = 0;\n  const  zeroCoefsSumSq41 = 0;\n  const  zeroCoefsSumSq42 = 0;\n  const  zeroCoefsSumSq43 = 0;\n  const  zeroCoefsSumSq44 = 0;\n  const  zeroCoefsSumSq45 = 0;\n  const  zeroCoefsSumSq46 = 0;\n  const  zeroCoefsSumSq47 = 0;\n  const  zeroCoefsSumSq48 = 0;\n  const  zeroCoefsSumSq49 = 0;\n  const  zeroCoefsSumSq50 = 0;\n  const  zeroCoefsSumSq51 = 0;\n  const  zeroCoefsSumSq52 = 0;\n  const  zeroCoefsSumSq53 = 0;\n  const  zeroCoefsSumSq54 = 0;\n  const  zeroCoefsSumSq55 = 0;\n  const  zeroCoefsSumSq56 = 0;\n  const  zeroCoefsSumSq57 = 0;\n  const  zeroCoefsSumSq58 = 0;\n  const  zeroCoefsSumSq59 = 0;\n  const  zeroCoefsSumSq60 = 0;\n  const  zeroCoefsSumSq61 = 0;\n  const  zeroCoefsSumSq62 = 0;\n  const  zeroCoefsSumSq63 = 0;\n  const  zeroCoefsSumSq64 = 0;\n  const  zeroCoefsSumSq65 = 0;\n  const  zeroCoefsSumSq66 = 0;\n  const  zeroCoefsSumSq67 = 0;\n  const  zeroCoefsSumSq68 = 0;\n  const  zeroCoefsSumSq69 = 0;\n  const  zeroCoefsSumSq70 = 0;\n  const  zeroCoefsSumSq71 = 0;\n  const  zeroCoefsSumSq72 = 0;\n  const  zeroCoefsSumSq73 = 0;\n  const  zeroCoefsSumSq74 = 0;\n  const  zeroCoefsSumSq75 = 0;\n  const  zeroCoefsSumSq76 = 0;\n  const  zeroCoefsSumSq77 = 0;\n  const  zeroCoefsSumSq78 = 0;\n  const  zeroCoefsSumSq79 = 0;\n  const  zeroCoefsSumSq80 = 0;\n  const  zeroCoefsSumSq81 = 0;\n  const  zeroCoefsSumSq82 = 0;\n  const  zeroCoefsSumSq83 = 0;\n  const  zeroCoefsSumSq84 = 0;\n  const  zeroCoefsSumSq85 = 0;\n  const  zeroCoefsSumSq86 = 0;\n  const  zeroCoefsSumSq87 = 0;\n  const  zeroCoefsSumSq88 = 0;\n  const  zeroCoefsSumSq89 = 0;\n  const  zeroCoefsSumSq90 = 0;\n  const  zeroCoefsSumSq91 = 0;\n  const  zeroCoefsSumSq92 = 0;\n  const  zeroCoefsSumSq93 = 0;\n  const  zeroCoefsSumSq94 = 0;\n  const  zeroCoefsSumSq95 = 0;\n  const  zeroCoefsSumSq96 = 0;\n  const  zeroCoefsSumSq97 = 0;\n  const  zeroCoefsSumSq98 = 0;\n  const  zeroCoefsSumSq99 = 0;\n  const  zeroCoefsSumSq100 = 0;\n  const  zeroCoefsSumSq101 = 0;\n  const  zeroCoefsSumSq102 = 0;\n  const  zeroCoefsSumSq103 = 0;\n  const  zeroCoefsSumSq104 = 0;\n  const  zeroCoefsSumSq105 = 0;\n  const  zeroCoefsSumSq106 = 0;\n  const  zeroCoefsSum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*Return sorted unique e l ements i n a list\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the l ist.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in l.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3])\n  6\n  >>> sumElementsOfBoth([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3])\n  6\n  >>> productElementsOfBoth([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsOfBoth = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in l and all elements in l.\n  >>> productElementsOfBoth([1, 2, 3], [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsOfBoth = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in l and all elements in l.\n  >>> sumElementsOfBoth([1, 2, 3], [", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13 .\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 7.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 9.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 7.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 9.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 3.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 5.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 7.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 9.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 9 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    }\n  }\n  return even\n}\n\n/*\n  >>> sortOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdds = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    }\n  }\n  return odd\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds2 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds3 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds4 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds5 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds6 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds7 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds8 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds9 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds10 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds11 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds12 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds13 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdds14 = (arr) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      even.push(arr[i])\n    } else {\n      odd.push(arr[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*\n  >>> sortEvenOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns decoded string by cycl ing groups of three characters.\n  */\nconst decodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 4) return primeFib(n - 1) + primeFib(n - 2);\n  if (n < 9) return primeFib(n - 3) + primeFib(n - 5) + primeFib(n - 7);\n  return primeFib(n - 7) + primeFib(n - 11) + primeFib(n - 13) + primeFib(n - 17);\n};\n\n/*\n  primeSieve returns n-th number t hat is a Sieve Number and it's also prime.\n  >>> primeSieve(1)\n  2\n  >>> primeSieve(2)\n  3\n  >>> primeSieve(3)\n  5\n  >>> primeSieve(4)\n  13\n  >>> primeSieve(5)\n  89\n  */\nconst primeSieve = (n) => {\n  if (n < 2) return 1;\n  if (n < 4) return primeSieve(n - 1) + primeSieve(n - 2);\n  if (n < 9) return primeSieve(n - 3) + primeSieve(n - 5) + primeSieve(n - 7);\n  return primeSieve(n - 7) + primeSieve(n - 11) + primeSieve(n - 13) + primeSieve(n - 17);\n};\n\n/*\n  primeSieveOfEratosthenes returns n-th number t hat is a Sieve Number and it's also prime.\n  >>> primeSieveOfEratosthenes(1)\n  2\n  >>> primeSieveOfEratosthenes(2)\n  3\n  >>> primeSieveOfEratosthenes(3)\n  5\n  >>> primeSieveOfEratosthenes(4)\n  13\n  >>> primeSieveOfEratosthenes(5)\n  89\n  */\nconst primeSieveOfEratosthenes = (m) => {\n  if (m < 2) return 1;\n  if (m < 4) return primeSieveOfEratosthenes(m - 1) + primeSieveOfEratosthenes(m - 2);\n  if (m < 9) return primeSieveOfEratosthenes(m - 3) + primeSieveOfEratosthenes(m - 5) + primeSieveOfEratosthenes(m - 7);\n  return primeSieveOfEratosthenes(m - 7) + primeSieveOfEratosthenes(m - 11) + primeSieveOfEratosthenes(m - 13) + primeSieveOfEratosthenes(m - 17);\n};\n\n/*\n  primeSieveOfEratosthenesOfEratosthenes returns n-th number t hat is a Sieve Number and it's also prime.\n  >>> primeSieveOfEratosthenesOfEratosthenes(1)\n  2\n  >>> primeSieveOfEratosthenesOfEratosthenes(2)\n  3\n  >>> primeSieveOfEratosthenesOfEratosthenes(3)\n  5\n  >>> primeSieveOfEratosthenesOfEratosthenes(4)\n  13\n  >>> primeSieveOfEratosthenesOfEratosthenes(5)\n  89\n  */\nconst primeSieveOfEratosthenesOfEratosthenes = (m) => {\n  if (m < 2) return 1;\n  if (m < 4) return primeSieveOfEratosthenesOfEratosthenes(m - 1) + primeSieveOfEratosthenesOfEratosthenes(m - 2);\n  if (m < 9) return primeSieveOfEratosthenesOfEratosthenes(m - 3) + primeSieveOfEratosthenesOfEratosthenes(m - 5) + primeSieveOfEratosthenesOfEratosthenes(m - 7);\n  return primeSieveOfEratosthenesOfEratosthenes(m - 7) + primeSieveOfEratosthenesOfEratosthenes(m - 11) + primeSieveOfEratosthenesOfEratosthenes(m - 13) + primeSieveOfEratosthenesOfEratosthenes(m - 17);\n};\n\n/*\n  primeSieveOfEratosthenesOfEratosthenesOfEratosthenes returns n-th number t hat is a Sieve Number and it's also prime.\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(1)\n  2\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(2)\n  3\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(3)\n  5\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(4)\n  13\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(5)\n  89\n  */\nconst primeSieveOfEratosthenesOfEratosthenesOfEratosthenes = (m) => {\n  if (m < 2) return 1;\n  if (m < 4) return primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 1) + primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 2);\n  if (m < 9) return primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 3) + primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 5) + primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 7);\n  return primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 7) + primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 11) + primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 13) + primeSieveOfEratosthenesOfEratosthenesOfEratosthenes(m - 17);\n};\n\n/*\n  primeSieveOfEratosthenesOfEratosthenesOfEratosthenesOfEratosthenes returns n-th number t hat is a Sieve Number and it's also prime.\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenesOfEratosthenes(1)\n  2\n  >>> primeSieveOfEratosthenesOfEratosthenesOfEratosthenesOfEratosthenes(2)\n  3\n  >>> primeSieveOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const n = numbers.length;\n  const mean = Math.mean(numbers);\n  return numbers.map((x) => Math.abs(x - mean)).sum() / n;\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to one, and fal seo therwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  false\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to two, and fal seo therwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  false\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to three, and fal seo therwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  false\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to four, and fal seo therwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  false\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to five, and fal seo therwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  false\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to six, and fal seo therwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  false\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to seven, and fal seo therwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  false\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to eight, and fal seo therwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  false\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously , a  diffe rent set of n cars\n  are  dri ving right to left .    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car.cars[i].speed === car.cars[j].speed && car.cars[i].speed > 0 && car.cars[j].speed > 0) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car.cars[i].speed === car.cars[j].speed && car.cars[i].speed > 0 && car.cars[j].speed > 0) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car.cars[i].speed === car.cars[j].speed && car.cars[i].speed > 0 && car.cars[j].speed > 0) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car.cars[i].speed === car.cars[j].speed && car.cars[i].speed > 0 && car.cars[j].speed > 0) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car.cars[i].speed === car.cars[j].speed && car.cars[i].speed > 0 && car.cars[j].speed > 0) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car.cars[i].speed === car.cars[j].speed && car.cars[i].speed > 0 && car.cars[j].speed > 0) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t + n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n};\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let n = 0;\n  let t = 0;\n  let i = 0;\n  while (i < l.length) {\n    n = l[i];\n    t = t - n;\n    i++;\n  }\n  return t;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = baseNum.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase2(8, 3)\n  '22'\n  >>> changeBase2(8, 2)\n  '1000'\n  >>> changeBase2(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase3(8, 3)\n  '22'\n  >>> changeBase3(8, 2)\n  '1000'\n  >>> changeBase3(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase4(8, 3)\n  '22'\n  >>> changeBase4(8, 2)\n  '1000'\n  >>> changeBase4(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase5(8, 3)\n  '22'\n  >>> changeBase5(8, 2)\n  '1000'\n  >>> changeBase5(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase6(8, 3)\n  '22'\n  >>> changeBase6(8, 2)\n  '1000'\n  >>> changeBase6(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase7(8, 3)\n  '22'\n  >>> changeBase7(8, 2)\n  '1000'\n  >>> changeBase7(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase8(8, 3)\n  '22'\n  >>> changeBase8(8, 2)\n  '1000'\n  >>> changeBase8(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase9(8, 3)\n  '22'\n  >>> changeBase9(8, 2)\n  '1000'\n  >>> changeBase9(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase10(8, 3)\n  '22'\n  >>> changeBase10(8, 2)\n  '1000'\n  >>> changeBase10(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase11(8, 3)\n  '22'\n  >>> changeBase11(8, 2)\n  '1000'\n  >>> changeBase11(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase12(8, 3)\n  '22'\n  >>> changeBase12(8, 2)\n  '1000'\n  >>> changeBase12(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase13(8, 3)\n  '22'\n  >>> changeBase13(8, 2)\n  '1000'\n  >>> changeBase13(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase14(8, 3)\n  '22'\n  >>> changeBase14(8, 2)\n  '1000'\n  >>> changeBase14(7, 2)\n  '111'\n  */\nconst changeBase15 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase15(8, 3)\n  '22'\n  >>> changeBase15(8, 2)\n  '1000'\n  >>> changeBase15(7, 2)\n  '111'\n  */\nconst changeBase16 = (x, base) => {\n  let result = \"\";\n  let baseNum = base;\n  while (x > 0) {\n    result = x.toString() + result;\n    x /= baseNum;\n    baseNum *= base;\n  }\n  return result;\n};\n\n/*\n  >>> changeBase16(8, 3)\n  '22'\n  >>> changeBase16(8, 2)\n  '1000'\n  >>> changeBase16(7, 2)\n  '111'\n  */\nconst changeBase17 = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high  return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high  return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high  return area for a circle.\n  >>> circleArea(5, 3)\n  7.5\n  */\nconst circleArea = (a, h) => {\n  return a * Math.PI * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  7.5\n  */\nconst trapezoidArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*Given length of a side and high  return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  7.5\n  */\nconst parallelogramArea = (a, h) => {\n  return a * Math.pow(h, 2);\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2) + fib2(n - 3) + fib2(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3) + fib3(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2) + fib2(n - 3) + fib2(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3) + fib3(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib(n) - >  fib(n-1) + fib(n-2) + fib(n-3 ) + fib on(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4);\n};\n\n/*\n Write a function to compute the n-th element of the Fibonacci number sequence using recursion.\n fib", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort((a, b) => a - b);\n  if (sorted.length % 2 === 0) {\n    return sorted[(sorted.length / 2) - 1];\n  }\n  return sorted[sorted.length / 2 - 1];\n};\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given strin g  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % p;\n  return m === 0? 0 : m === p? 1 : m;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpow = (n, p, m) => {\n  const r = modp(modp(n, p), m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpow(3, 5, 5)\n  3\n  >>> modpow(1101, 101, 5)\n  2\n  >>> modpow(0, 101, 5)\n  1\n  >>> modpow(3, 11, 5)\n  8\n  >>> modpow(100, 101, 5)\n  1\n  */\nconst modpowm = (n, p, m) => {\n  const r = modpow(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm(3, 5, 5)\n  3\n  >>> modpowm(1101, 101, 5)\n  2\n  >>> modpowm(0, 101, 5)\n  1\n  >>> modpowm(3, 11, 5)\n  8\n  >>> modpowm(100, 101, 5)\n  1\n  */\nconst modpowm1 = (n, p, m) => {\n  const r = modpowm(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm1(3, 5, 5)\n  3\n  >>> modpowm1(1101, 101, 5)\n  2\n  >>> modpowm1(0, 101, 5)\n  1\n  >>> modpowm1(3, 11, 5)\n  8\n  >>> modpowm1(100, 101, 5)\n  1\n  */\nconst modpowm2 = (n, p, m) => {\n  const r = modpowm1(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm(2, 5, 5)\n  2\n  >>> modpowm2(1101, 101, 5)\n  2\n  >>> modpowm2(0, 101, 5)\n  1\n  >>> modpowm(2, 11, 5)\n  8\n  >>> modpowm2(100, 101, 5)\n  1\n  */\nconst modpowm3 = (n, p, m) => {\n  const r = modpowm2(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm3(3, 5, 5)\n  3\n  >>> modpowm3(1101, 101, 5)\n  2\n  >>> modpowm3(0, 101, 5)\n  1\n  >>> modpowm3(3, 11, 5)\n  8\n  >>> modpowm3(100, 101, 5)\n  1\n  */\nconst modpowm4 = (n, p, m) => {\n  const r = modpowm3(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm4(2, 5, 5)\n  2\n  >>> modpowm4(1101, 101, 5)\n  2\n  >>> modpowm4(0, 101, 5)\n  1\n  >>> modpowm4(2, 11, 5)\n  8\n  >>> modpowm4(100, 101, 5)\n  1\n  */\nconst modpowm5 = (n, p, m) => {\n  const r = modpowm4(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm5(2, 5, 5)\n  2\n  >>> modpowm5(1101, 101, 5)\n  2\n  >>> modpowm5(0, 101, 5)\n  1\n  >>> modpowm5(2, 11, 5)\n  8\n  >>> modpowm5(100, 101, 5)\n  1\n  */\nconst modpowm6 = (n, p, m) => {\n  const r = modpowm5(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm6(2, 5, 5)\n  2\n  >>> modpowm6(1101, 101, 5)\n  2\n  >>> modpowm6(0, 101, 5)\n  1\n  >>> modpowm6(2, 11, 5)\n  8\n  >>> modpowm6(100, 101, 5)\n  1\n  */\nconst modpowm7 = (n, p, m) => {\n  const r = modpowm6(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm7(2, 5, 5)\n  2\n  >>> modpowm7(1101, 101, 5)\n  2\n  >>> modpowm7(0, 101, 5)\n  1\n  >>> modpowm7(2, 11, 5)\n  8\n  >>> modpowm7(100, 101, 5)\n  1\n  */\nconst modpowm8 = (n, p, m) => {\n  const r = modpowm7(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm8(2, 5, 5)\n  2\n  >>> modpowm8(1101, 101, 5)\n  2\n  >>> modpowm8(0, 101, 5)\n  1\n  >>> modpowm8(2, 11, 5)\n  8\n  >>> modpowm8(100, 101, 5)\n  1\n  */\nconst modpowm9 = (n, p, m) => {\n  const r = modpowm8(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm9(2, 5, 5)\n  2\n  >>> modpowm9(1101, 101, 5)\n  2\n  >>> modpowm9(0, 101, 5)\n  1\n  >>> modpowm9(2, 11, 5)\n  8\n  >>> modpowm9(100, 101, 5)\n  1\n  */\nconst modpowm10 = (n, p, m) => {\n  const r = modpowm9(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm10(2, 5, 5)\n  2\n  >>> modpowm10(1101, 101, 5)\n  2\n  >>> modpowm10(0, 101, 5)\n  1\n  >>> modpowm10(2, 11, 5)\n  8\n  >>> modpowm10(100, 101, 5)\n  1\n  */\nconst modpowm11 = (n, p, m) => {\n  const r = modpowm10(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm11(2, 5, 5)\n  2\n  >>> modpowm11(1101, 101, 5)\n  2\n  >>> modpowm11(0, 101, 5)\n  1\n  >>> modpowm11(2, 11, 5)\n  8\n  >>> modpowm11(100, 101, 5)\n  1\n  */\nconst modpowm12 = (n, p, m) => {\n  const r = modpowm11(n, p, m);\n  return r === 0? n : r;\n};\n\n/*\n  >>> modpowm12(2, 5, 5)\n  2\n  >>> modpow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === numbers.length - 1) {\n      result.push(delimeter);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = _curry2((n, xs) => {\n  return slice(0, n < 0? Infinity : n, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.drop, R.head, R.take\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.takeLast(3, 'ramda');               //=> 'ra'\n */\nconst takeLast = _curry2((n, xs) => {\n  return drop(n >= 0? xs.length - n : 0, xs);\n});\n\n/**\n * Returns a new list containing the first `n` elements of the given list\n * in reverse order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {Array} xs\n * @return {Array}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.takeLastIndex(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLastIndex(2, 'ramda');               //=> 'ra'\n *      R.takeLastIndex(3, 'z');                  //=> 'z'\n */\nconst takeLastIndex = _curry2(function takeLastIndex(n, xs) {\n  return _isString(n)? slice(-n, Infinity, xs) : take(n < 0? Infinity : n, xs);\n});\n\n/**\n * Checks if a list starts with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = _curry2(function(prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\n\n/**\n * Checks if a list ends with the provided values\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> Boolean\n * @sig String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @see R.startsWith\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar endsWith = _curry2(function(suffix, list) {\n  return equals(drop(suffix.length, list), suffix);\n});\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = _curry3(function minBy(f, a, b) {\n  return f(b) < f(a)? b : a;\n});\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), -Infinity, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), -Infinity, []); //=> -Infinity\n */\nvar maxBy = _curry3(function maxBy(f, a, b) {\n  return f(b) > f(a)? b : a;\n});\n\n/**\n * Takes a predicate and a \"filterable\", and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.reject, R.transduce, R.addIndex\n * @example\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removeAccents is a fun c tion tha t takes string and returns string without accents.\n  >>> removeAccents('')\n  ''\n  >>> removeAccents(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAccents('abcdef')\n  'abcdef'\n  >>> removeAccents('aaaaa')\n  ''\n  >>> removeAccents('aaBAA')\n  'aaBAA'\n  >>> removeAccents('zbcd')\n  'zbcd'\n  */\nconst removeAccents = (text) => {\n  return text.replace(/[ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜŸàáâãäåçèéêëìíîïðòóôõöùúûüž]/g, '');\n};\n\n/*\n  removeNonAscii is a fun c tion tha t takes string and returns string without non ascii characters.\n  >>> removeNonAscii('')\n  ''\n  >>> removeNonAscii(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAscii('abcdef')\n  'abcdef'\n  >>> removeNonAscii('aaaaa')\n  ''\n  >>> removeNonAscii('aaBAA')\n  'aaBAA'\n  >>> removeNonAscii('zbcd')\n  'zbcd'\n  */\nconst removeNonAscii = (text) => {\n  return text.replace(/[^\\x00-\\x7F]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewLines is a fun c tion tha t takes string and returns string without non ascii characters and new lines.\n  >>> removeNonAsciiAndNewLines('')\n  ''\n  >>> removeNonAsciiAndNewLines(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAsciiAndNewLines('abcdef')\n  'abcdef'\n  >>> removeNonAsciiAndNewLines('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewLines('aaBAA')\n  'aaBAA'\n  >>> removeNonAsciiAndNewLines('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndNewLines = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\n]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewLinesAndTabs is a fun c tion tha t takes string and returns string without non ascii characters and new lines and tabs.\n  >>> removeNonAsciiAndNewLinesAndTabs('')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabs(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAsciiAndNewLinesAndTabs('abcdef')\n  'abcdef'\n  >>> removeNonAsciiAndNewLinesAndTabs('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabs('aaBAA')\n  'aaBAA'\n  >>> removeNonAsciiAndNewLinesAndTabs('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndNewLinesAndTabs = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\n\\t ]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewLinesAndTabsAndSpaces is a fun c tion tha t takes string and returns string without non ascii characters, new lines and tabs and spaces.\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('abcdef')\n  'abcdef'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('aaBAA')\n  'aaBAA'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndNewLinesAndTabsAndSpaces = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\n\\t ]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewLinesAndTabsAndSpaces is a fun c tion tha t takes string and returns string without non ascii characters, new lines and tabs and spaces.\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('abcdef')\n  'abcdef'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('aaBAA')\n  'aaBAA'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('zbcd')\n  'zbcd'\n  */\nconst removeNonAsciiAndNewLinesAndTabsAndSpaces = (text) => {\n  return text.replace(/[^\\x00-\\x7F\\n\\t ]/g, '');\n};\n\n/*\n  removeNonAsciiAndNewLinesAndTabsAndSpaces is a fun c tion tha t takes string and returns string without non ascii characters, new lines and tabs and spaces.\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('abcdef')\n  'abcdef'\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('aaaaa')\n  ''\n  >>> removeNonAsciiAndNewLinesAndTabsAndSpaces('aaBAA')\n  'aaBAA'\n  >>> removeNonAsciiAndNewLinesAndTab", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtracts two numbers x andy \n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiplies two numbers x andy \n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divides two numbers x andy \n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Calculates the modulus of two numbers x andy \n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Calculates the square root of x \n  >>> sqrt(2)\n  1.4142135623730951\n  >>> sqrt(5)\n  2.8284271247461903\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*Calculates the cube root of x \n  >>> cube(2)\n  2\n  >>> cube(5)\n  3\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*Calculates the square root of x \n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<[^<>]+>/g);\n  const closingBrackets = brackets.match(/<[^<>]+>/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * Returns true if the given string is a valid HTML tag.\n *\n * A valid HTML tag consists of a tag name followed by an optional attribute\n * list.\n *\n * A tag name is a non-empty string containing only ASCII letters, digits,\n * underscores, or dashes.\n *\n * A tag name must start with a letter or underscore.\n *\n * Attribute names are case insensitive.\n *\n * Attribute values must be quoted with double-quotes.\n *\n * A tag must not contain two or more adjacent hyphenated words.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *\n * A tag must not contain two or more adjacent hyphenated words or adjacent\n * punctuation marks or a numeric value or a leading or trailing space.\n *", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      if (l[i] > l[k]) {\n        return true;\n      }\n      k = i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  */\nconst monotonic = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let i1 = 0, i2 = 0;\n  while (i1 < l1.length && i2 < l2.length) {\n    if (l1[i1] === l2[i2]) {\n      result.push(l1[i1]);\n      i1++;\n      i2++;\n    } else if (l1[i1] < l2[i2]) {\n      i1++;\n    } else {\n      i2++;\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 0;\n  for (let i = 2; i <= n / 2; i++) {\n    if (n % i === 0) {\n      maxFactor = i;\n    }\n  }\n  return maxFactor;\n};\n\n/*Return the smallest prime factor  of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  5\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let minFactor = Number.MAX_SAFE_INTEGER;\n  for (let i = 2; i <= n / 2; i++) {\n    if (n % i === 0) {\n      minFactor = i;\n    }\n  }\n  return minFactor;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors(13195)\n  4\n  >>> numberOfDivisors(2048)\n  2\n  */\nconst numberOfDivisors = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors2(13195)\n  4\n  >>> numberOfDivisors2(2048)\n  2\n  */\nconst numberOfDivisors2 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors3(13195)\n  4\n  >>> numberOfDivisors3(2048)\n  2\n  */\nconst numberOfDivisors3 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors4(13195)\n  4\n  >>> numberOfDivisors4(2048)\n  2\n  */\nconst numberOfDivisors4 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors5(13195)\n  4\n  >>> numberOfDivisors5(2048)\n  2\n  */\nconst numberOfDivisors5 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors6(13195)\n  4\n  >>> numberOfDivisors6(2048)\n  2\n  */\nconst numberOfDivisors6 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors7(13195)\n  4\n  >>> numberOfDivisors7(2048)\n  2\n  */\nconst numberOfDivisors7 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors8(13195)\n  4\n  >>> numberOfDivisors8(2048)\n  2\n  */\nconst numberOfDivisors8 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors9(13195)\n  4\n  >>> numberOfDivisors9(2048)\n  2\n  */\nconst numberOfDivisors9 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors10(13195)\n  4\n  >>> numberOfDivisors10(2048)\n  2\n  */\nconst numberOfDivisors10 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors11(13195)\n  4\n  >>> numberOfDivisors11(2048)\n  2\n  */\nconst numberOfDivisors11 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors12(13195)\n  4\n  >>> numberOfDivisors12(2048)\n  2\n  */\nconst numberOfDivisors12 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors13(13195)\n  4\n  >>> numberOfDivisors13(2048)\n  2\n  */\nconst numberOfDivisors13 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors14(13195)\n  4\n  >>> numberOfDivisors14(2048)\n  2\n  */\nconst numberOfDivisors14 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors15(13195)\n  4\n  >>> numberOfDivisors15(2048)\n  2\n  */\nconst numberOfDivisors15 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors16(13195)\n  4\n  >>> numberOfDivisors16(2048)\n  2\n  */\nconst numberOfDivisors16 = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are prime.\n  >>> numberOfDivisors17(13195)\n  4\n  >>> numberOfDivisors17(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_levels = [];\n  let paren_level = 0;\n  let paren_group = 0;\n  let paren_group_level = 0;\n  let paren_group_group = 0;\n  let paren_group_group_level = 0;\n  let paren_group_group_group = 0;\n  let paren_group_group_group_level = 0;\n  let paren_group_group_group_group = 0;\n  let paren_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level = 0;\n  let paren_group_group_group_group_group_group_group = 0;\n  let paren_group_group_group_group_group_group_level", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Given a string, returns an array of all possible combinations of substrings\n * of the given string.\n *\n * Examples:\n *\n * \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * \"ab\" -> [\"ab\", \"ba\"]\n * \"a\" -> [\"a\", \"a\"]\n * \"a\" -> []\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit: http://www.geeksforgeeks.org/given-string-find-all-possible-substrings/\n *\n * Credit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> coefficient([1, 2, 3])\n  [2, 6]\n  */\nconst coefficient = (xs) => {\n  const n = xs.length\n  let c = Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i]\n  }\n  return c\n}\n\n/* Return coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return coeffici e nts of a  polynomial.\n  >>> coefficient([3, 1, 2, 4, 5])\n  [1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n Write a function t o efficiently compute the n-th element of the Fibonacci sequence that starts at 0 and ends at n.\n  >>> fibfib(0)\n  0\n  >>> fibfib(1)\n  1\n  >>> fibfib(2)\n  1\n  >>> fibfib(3)\n  2\n  >>> fibfib(4)\n  3\n  >>> fibfib(5)\n  5\n  >>> fibfib(6)\n  8\n  >>> fibfib(7)\n  13\n  >>> fibfib(8)\n  21\n  >>> fibfib(9)\n  34\n  >>> fibfib(10)\n  55\n  >>> fibfib(11)\n  89\n  >>> fibfib(12)\n  144\n  >>> fibfib(13)\n  233\n  >>> fibfib(14)\n  377\n  >>> fibfib(15)\n  610\n  >>> fibfib(16)\n  987\n  >>> fibfib(17)\n  1597\n  >>> fibfib(18)\n  2584\n  >>> fibfib(19)\n  4181\n  >>> fibfib(20)\n  6765\n  >>> fibfib(21)\n  10946\n  >>> fibfib(22)\n  17711\n  >>> fibfib(23)\n  28657\n  >>> fibfib(24)\n  46368\n  >>> fibfib(25)\n  75025\n  >>> fibfib(26)\n  121393\n  >>> fibfib(27)\n  196418\n  >>> fibfib(28)\n  317811\n  >>> fibfib(29)\n  514229\n  >>> fibfib(30)\n  832040\n  >>> fibfib(31)\n  1346269\n  >>> fibfib(32)\n  2178309\n  >>> fibfib(33)\n  3524578\n  >>> fibfib(34)\n  5702887\n  >>> fibfib(35)\n  9497558\n  >>> fibfib(36)\n  14930352\n  >>> fibfib(37)\n  24157817\n  >>> fibfib(38)\n  39088169\n  >>> fibfib(39)\n  63245986\n  >>> fibfib(40)\n  102334155\n  >>> fibfib(41)\n  165580141\n  >>> fibfib(42)\n  267914296\n  >>> fibfib(43)\n  433494437\n  >>> fibfib(44)\n  701408733\n  >>> fibfib(45)\n  1134903170\n  >>> fibfib(46)\n  1836311903\n  >>> fibfib(47)\n  2971215073\n  >>> fibfib(48)\n  4807526976\n  >>> fibfib(49)\n  7778742049\n  >>> fibfib(50)\n  12586269025\n  >>> fibfib(51)\n  20365011074\n  >>> fibfib(52)\n  32951280099\n  >>> fibfib(53)\n  49267608063\n  >>> fibfib(54)\n  96714065784\n  >>> fibfib(55)\n  1548008755920\n  >>> fibfib(56)\n  250473078196\n  >>> fibfib(57)\n  4052739537881\n  >>> fibfib(58)\n  655747031984\n  >>> fibfib(59)\n  10610209857723\n  >>> fibfib(60)\n  17167680177565\n  >>> fibfib(61)\n  27777890035288\n  >>> fibfib(62)\n  44945570212853\n  >>> fibfib(63)\n  73029397956141\n  >>> fibfib(64)\n  121645100408832\n  >>> fibfib(65)\n  192230935462855\n  >>> fibfib(66)\n  31781199627376\n  >>> fibfib(67)\n  51422968763801\n  >>> fibfib(68)\n  83204391712352\n  >>> fibfib(69)\n  134626901639229\n  >>> fibfib(70)\n  217830909786657\n  >>> fibfib(71)\n  352457812564096\n  >>> fibfib(72)\n  570288701896396\n  >>> fibfib(73)\n  949755813888397\n  >>> fibfib(74)\n  1493035218580848\n  >>> fibfib(75)\n  2415781726092512\n  >>> fibfib(76)\n  390881692658996\n  >>> fibfib(77)\n  632459862594757\n  >>> fibfib(78)\n  1023341549012272\n  >>> fibfib(79)\n  1655801408998908\n  >>> fibfib(80)\n  2679142968474576\n  >>> fibfib(81)\n  4334944361648352\n  >>> fibfib(82)\n  701408733560992\n  >>> fibfib(83)\n  1134903170415176\n  >>> fibfib(84)\n  1836311903100661\n  >>> fibfib(85)\n  2971215073170394\n  >>> fibfib(86)\n  4807526976089968\n  >>> fibfib(87)\n  777874204900964\n  >>> fibfib(88)\n  12586269025908480\n  >>> fibfib(89)\n  2036501107424096\n  >>> fibfib(90)\n  3295128009900928\n  >>> fibfib(91)\n  4926760806300624\n  >>> fibfib(92)\n  9671406578400912\n  >>> fibfib(93)\n  154800", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ' , 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ', 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount that takes a string as input and returns\n  the number of vowels present in the given string.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let dig;\n  if (shift > x.length) {\n    dig = x.toString();\n  } else {\n    dig = x.toString().split('').reverse().join('');\n  }\n  return dig.split('')\n   .map((d, i) => d === '1'? x.toString().charAt(x.length - i - 1) : d)\n   .join('');\n};\n\n/*\n  Given a number x and an exponent e, return the number x raised to the power e.\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n  >>> raiseToPower(2, 0)\n  1\n  >>> raiseToPower(2, 1)\n  2\n  >>> raiseToPower(2, 2)\n  4\n  >>> raiseToPower(2, 3)\n  8\n  >>> raiseToPower(2, -3)\n  -8\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the lower characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) < 97 && s.charCodeAt(i) > 65) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) < 97 && s.charCodeAt(i) > 65) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) < 97 && s.charCodeAt(i) > 65) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the digits only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\" ,3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\",3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let totalFruits = apples + oranges + fruits;\n  let totalApples = apples;\n  let totalOranges = oranges;\n  let totalFruitsPerApple = fruits;\n  let totalFruitsPerOrange = fruits;\n  let totalFruitsPerMango = fruits;\n  let totalApplesPerOrange = apples;\n  let totalApplesPerMango = apples;\n  let totalOrangesPerApple = oranges;\n  let totalOrangesPerMango = oranges;\n  let totalMangoPerApple = fruits;\n  let totalMangoPerOrange = fruits;\n  let totalMangoPerMango = fruits;\n  let totalApplesPerOrangePerMango = apples;\n  let totalApplesPerMangoPerOrange = apples;\n  let totalOrangesPerApplePerMango = oranges;\n  let totalOrangesPerMangoPerApple = oranges;\n  let totalMangoPerApplePerOrangePerMango = fruits;\n  let totalMangoPerOrangePerApple = fruits;\n  let totalMangoPerMangoPerOrange = fruits;\n  let totalApplesPerOrangePerMangoPerOrange = apples;\n  let totalApplesPerMangoPerOrangePerApple = apples;\n  let totalOrangesPerApplePerMangoPerOrange = oranges;\n  let totalOrangesPerMangoPerApplePerMango = oranges;\n  let totalMangoPerApplePerOrangePerMangoPerOrange = fruits;\n  let totalMangoPerOrangePerApplePerMangoPerOrange = fruits;\n  let totalMangoPerMangoPerOrangePerApplePerMango = fruits;\n  let totalApplesPerOrangePerMangoPerOrangePerMango = apples;\n  let totalApplesPerMangoPerOrangePerApplePerMango = apples;\n  let totalOrangesPerApplePerMangoPerOrangePerMango = oranges;\n  let totalOrangesPerMangoPerApplePerMangoPerOrangePerMango = oranges;\n  let totalMangoPerApplePerOrangePerMangoPerOrangePerMango = fruits;\n  let totalMangoPerOrangePerApplePerMangoPerOrangePerMango = fruits;\n  let totalMangoPerMangoPerOrangePerApplePerMangoPerOrangePerMango = fruits;\n  let totalApplesPerOrangePerMangoPerOrangePerMangoPerOrange = apples;\n  let totalApplesPerMangoPerOrangePerApplePerMangoPerOrange = apples;\n  let totalOrangesPerApplePerMangoPerOrangePerMangoPerOrange = oranges;\n  let totalOrangesPerMangoPerApplePerMangoPerOrangePerMangoPerOrange = oranges;\n  let totalMangoPerApplePerOrangePerMangoPerOrangePerMangoPerOrange = fruits;\n  let totalMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrange = fruits;\n  let totalMangoPerMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrange = fruits;\n  let totalApplesPerOrangePerMangoPerOrangePerMangoPerOrangePerMango = apples;\n  let totalApplesPerMangoPerOrangePerApplePerMangoPerOrangePerMango = apples;\n  let totalOrangesPerApplePerMangoPerOrangePerMangoPerOrangePerMango = oranges;\n  let totalOrangesPerMangoPerApplePerMangoPerOrangePerMangoPerOrangePerMango = oranges;\n  let totalMangoPerApplePerOrangePerMangoPerOrangePerMangoPerOrangePerMango = fruits;\n  let totalMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrangePerMango = fruits;\n  let totalMangoPerMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrangePerMango = fruits;\n  let totalApplesPerOrangePerMangoPerOrangePerMangoPerOrangePerMangoPerOrange = apples;\n  let totalApplesPerMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrange = apples;\n  let totalOrangesPerApplePerMangoPerOrangePerMangoPerOrangePerMangoPerOrange = oranges;\n  let totalOrangesPerMangoPerApplePerMangoPerOrangePerMangoPerOrangePerMangoPerOrange = oranges;\n  let totalMangoPerApplePerOrangePerMangoPerOrangePerMangoPerOrangePerMangoPerOrange = fruits;\n  let totalMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrangePerMangoPerOrange = fruits;\n  let totalMangoPerMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrangePerMangoPerOrange = fruits;\n  let totalApplesPerOrangePerMangoPerOrangePerMangoPerOrangePerMangoPerOrangePerMango = apples;\n  let totalApplesPerMangoPerOrangePerApplePerMangoPerOrangePerMangoPerOrangePerMango = apples;\n  let totalOrangesPerApplePerMangoPerOrangePerMangoPerOrangePerMangoPerOrangePerMango = oranges;\n  let totalOrangesPerMangoPerApplePerMangoPerOrangePerMangoPerOrangePerMangoPerOrangePerMango = oranges;\n  let totalMangoPerApplePerOrangePerMangoPerOrangePerMangoPerO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenArr = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n      if (minValue > arr[i]) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return evenArr.indexOf(minValue) === minIndex? evenArr.indexOf(minValue) : [];\n};\n\n/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck2 = (arr) => {\n  const evenArr = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n      if (minValue > arr[i]) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return evenArr.indexOf(minValue) === minIndex? evenArr.indexOf(minValue) : [];\n};\n\n/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck3 = (arr) => {\n  const evenArr = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n      if (minValue > arr[i]) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return evenArr.indexOf(minValue) === minIndex? evenArr.indexOf(minValue) : [];\n};\n\n/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck4 = (arr) => {\n  const evenArr = [];\n  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n      if (minValue > arr[i]) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return evenArr.indexOf(minValue) === minIndex? evenArr.indexOf(minValue) : [];\n};\n\n/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input listo f string s only for ones that ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integer s , return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given a list of integers, return a new list with all the odd numbers removed.\n  Odd numbers are those that are divisible by 2.\n  Examples:\n  removeOdds([1, 3, 5]) ==> [1, 5]\n  removeOdds([1, 3, 5]) ==> []\n  removeOdds([]) ==> []\n*/\nconst removeOdds = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 2!== 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the even numbers removed.\n  Even numbers are those that are divisible by 2.\n  Examples:\n  removeEvens([1, 3, 5]) ==> [1, 3]\n  removeEvens([1, 3, 5]) ==> []\n  removeEvens([]) ==> []\n*/\nconst removeEvens = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 2 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 3 removed.\n  Examples:\n  removeDivisibleBy3([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy3([1, 3, 5]) ==> []\n  removeDivisibleBy3([]) ==> []\n*/\nconst removeDivisibleBy3 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 3 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 5 removed.\n  Examples:\n  removeDivisibleBy5([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy5([1, 3, 5]) ==> []\n  removeDivisibleBy5([]) ==> []\n*/\nconst removeDivisibleBy5 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 5 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 7 removed.\n  Examples:\n  removeDivisibleBy7([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy7([1, 3, 5]) ==> []\n  removeDivisibleBy7([]) ==> []\n*/\nconst removeDivisibleBy7 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 7 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 9 removed.\n  Examples:\n  removeDivisibleBy9([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy9([1, 3, 5]) ==> []\n  removeDivisibleBy9([]) ==> []\n*/\nconst removeDivisibleBy9 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 9 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 11 removed.\n  Examples:\n  removeDivisibleBy11([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy11([1, 3, 5]) ==> []\n  removeDivisibleBy11([]) ==> []\n*/\nconst removeDivisibleBy11 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 11 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 13 removed.\n  Examples:\n  removeDivisibleBy13([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy13([1, 3, 5]) ==> []\n  removeDivisibleBy13([]) ==> []\n*/\nconst removeDivisibleBy13 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 13 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 17 removed.\n  Examples:\n  removeDivisibleBy17([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy17([1, 3, 5]) ==> []\n  removeDivisibleBy17([]) ==> []\n*/\nconst removeDivisibleBy17 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 17 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 19 removed.\n  Examples:\n  removeDivisibleBy19([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy19([1, 3, 5]) ==> []\n  removeDivisibleBy19([]) ==> []\n*/\nconst removeDivisibleBy19 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 19 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*\n  Given a list of integers, return a new list with all the numbers divisible by 23 removed.\n  Examples:\n  removeDivisibleBy23([1, 3, 5]) ==> [1, 5]\n  removeDivisibleBy23([1, 3, 5]) ==> []\n  removeDivisibleBy23([]) ==> []\n*/\nconst removeDivisibleBy23 = (arr) => {\n  const newArr = [...arr];\n  newArr.forEach((item) => {\n    if (item % 23 === 0) {\n      newArr.splice(newArr.indexOf(item), 1);\n    }\n  });\n  return newArr;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  const a2 = a1 + b1 + c1;\n  const b2 = a1 + b1 - c1;\n  const c2 = a1 - b1 - c1;\n  const a3 = a2 + b2 + c2;\n  const b3 = a2 + b2 - c2;\n  const c3 = a2 - b2 - c2;\n  const a4 = a3 + b3 + c3;\n  const b4 = a3 + b3 - c3;\n  const c4 = a3 - b3 - c3;\n  const a5 = a4 + b4 + c4;\n  const b5 = a4 + b4 - c4;\n  const c5 = a4 - b4 - c4;\n  const a6 = a5 + b5 + c5;\n  const b6 = a5 + b5 - c5;\n  const c6 = a5 - b5 - c5;\n  const a7 = a6 + b6 + c6;\n  const b7 = a6 + b6 - c6;\n  const c7 = a6 - b6 - c6;\n  const a8 = (a7 + b7 + c7) / 2;\n  const b8 = (a7 + b7 - c7) / 2;\n  const c8 = (a7 - b7 - c7) / 2;\n  const a9 = (a8 + b8 + c8) / 2;\n  const b9 = (a8 + b8 - c8) / 2;\n  const c9 = (a8 - b8 - c8) / 2;\n  const a10 = (a9 + b9 + c9) / 2;\n  const b10 = (a9 + b9 - c9) / 2;\n  const c10 = (a9 - b9 - c9) / 2;\n  const a11 = a10 + b10 + c10;\n  const b11 = a10 + b10 - c10;\n  const c11 = a10 - b10 - c10;\n  const a12 = a11 + b11 + c11;\n  const b12 = a11 + b11 - c11;\n  const c12 = a11 - b11 - c11;\n  const a13 = a12 + b12 + c12;\n  const b13 = a12 + b12 - c12;\n  const c13 = a12 - b12 - c12;\n  const a14 = a13 + b13 + c13;\n  const b14 = a13 + b13 - c13;\n  const c14 = a13 - b13 - c13;\n  const a15 = a14 + b14 + c14;\n  const b15 = a14 + b14 - c14;\n  const c15 = a14 - b14 - c14;\n  const a16 = a15 + b15 + c15;\n  const b16 = a15 + b15 - c15;\n  const c16 = a15 - b15 - c15;\n  const a17 = a16 + b16 + c16;\n  const b17 = a16 + b16 - c16;\n  const c17 = a16 - b16 - c16;\n  const a18 = a17 + b17 + c17;\n  const b18 = a17 + b17 - c17;\n  const c18 = a17 - b17 - c17;\n  const a19 = a18 + b18 + c18;\n  const b19 = a18 + b18 - c18;\n  const c19 = a18 - b18 - c18;\n  const a20 = a19 + b19 + c19;\n  const b20 = a19 + b19 - c19;\n  const c20 = a19 - b19 - c19;\n  const a21 = a20 + b20 + c20;\n  const b21 = a20 + b20 - c20;\n  const c21 = a20 - b20 - c20;\n  const a22 = a21 + b21 + c21;\n  const b22 = a21 + b21 - c21;\n  const c22 = a21 - b21 - c21;\n  const a23 = a22 + b22 + c22;\n  const b23 = a22 + b22 - c22;\n  const c23 = a22 - b22 - c22;\n  const a24 = a23 + b23 + c23;\n  const b24 = a23 + b23 - c23;\n  const c24 = a23 - b23 - c23;\n  const a25 = a24 + b24 + c24;\n  const b25 = a24 + b24 - c24;\n  const c25 = a24 - b24 - c24;\n  const a26 = a25 + b25 + c25;\n  const b26 = a25 + b25 - c25;\n  const c26 = a25 - b25 - c25;\n  const a27 = a26 + b26 + c26;\n  const b27 = a26 + b26 - c26;\n  const c27 = a26 - b26 - c26;\n  const a28 = a27 + b27 + c27;\n  const b28 = a27 + b27 - c27;\n  const c28 = a27 - b27 - c27;\n  const a29 = a28 + b28 + c28;\n  const b29 = a28 + b28 - c28;\n  const c29 = a28 - b28 - c28;\n  const a30 = a29 + b29 + c29;\n  const b30 = a29 + b29 - c29;\n  const c30 = a29 - b29 - c29;\n  const a31 = a30 + b30 + c30;\n  const b31 = a30 + b30 - c30;\n  const c31 = a30 - b30 - c30;\n  const a32 = a31 + b31 + c31;\n  const b32 = a31 + b31 - c31;\n  const c32 = a31 - b31 - c31;\n  const a33 = a32 + b32 + c32;\n  const b33 = a32 + b32 - c32;\n  const c33 = a32 - b32 - c32;\n  const a34 = a33 + b33 + c33;\n  const b34 = a33 + b33 - c33;\n  const c34 = a33 - b33 - c33;\n  const a35 = a34 + b34 + c34;\n  const b35 = a34 + b34 - c34;\n  const c35 = a34 - b34 - c34;\n  const a36 = a35 + b35 + c35;\n  const b36 = a35 + b35 - c35;\n  const c36 = a35 - b35 - c35;\n  const a37 = a36 + b36 + c36;\n  const b37 = a36 + b36 - c36;\n  const c37 = a36 - b36 - c36;\n  const a38 = a37 + b37 + c37;\n  const b38 = a37 + b37 - c37;\n  const c38 = a37 - b37 - c37;\n  const a39 = a38 + b38 + c38;\n  const b39 = a38 + b38 - c38;\n  const c39 = a38 - b38 - c38;\n  const a40 = a39 + b39 + c39;\n  const b40 = a39 + b39 - c39;\n  const c40 = a39 - b39 - c39;\n  const a4", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.pow(maxWeight, 2);\n  let sum = 0;\n  let i = 0;\n  while (i < q.length) {\n    sum += q[i];\n    i++;\n  }\n  return sum <= maxSum;\n};\n\n// 👉 Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n/*\n  Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n  Example:\n  countPalindromes([1, 2, 3], 5) ➞ 2\n  # 1+2+3 is less than or equal to 5, but it's unbalanced.\n\n  countPalindromes([3, 2, 3], 1) ➞ 0\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  countPalindromes([3, 2, 3], 9) ➞ 1\n  # 3+2+3 is less than or equal to 9, and it's balanced.\n\n  countPalindromes([3], 5) ➞ 0\n  # 3 is less than or equal to 5, and it's balanced.\n  */\nconst countPalindromes = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.pow(maxWeight, 2);\n  let sum = 0;\n  let i = 0;\n  while (i < q.length) {\n    sum += q[i];\n    i++;\n  }\n  return sum <= maxSum;\n};\n\n// 👉 Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n/*\n  Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n  Example:\n  countPalindromes([1, 2, 3], 5) ➞ 2\n  # 1+2+3 is less than or equal to 5, but it's unbalanced.\n\n  countPalindromes([3, 2, 3], 1) ➞ 0\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  countPalindromes([3, 2, 3], 9) ➞ 1\n  # 3+2+3 is less than or equal to 9, and it's balanced.\n\n  countPalindromes([3], 5) ➞ 0\n  # 3 is less than or equal to 5, and it's balanced.\n  */\nconst countPalindromes = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.pow(maxWeight, 2);\n  let sum = 0;\n  let i = 0;\n  while (i < q.length) {\n    sum += q[i];\n    i++;\n  }\n  return sum <= maxSum;\n};\n\n// 👉 Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n/*\n  Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n  Example:\n  countPalindromes([1, 2, 3], 5) ➞ 2\n  # 1+2+3 is less than or equal to 5, but it's unbalanced.\n\n  countPalindromes([3, 2, 3], 1) ➞ 0\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  countPalindromes([3, 2, 3], 9) ➞ 1\n  # 3+2+3 is less than or equal to 9, and it's balanced.\n\n  countPalindromes([3], 5) ➞ 0\n  # 3 is less than or equal to 5, and it's balanced.\n  */\nconst countPalindromes = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.pow(maxWeight, 2);\n  let sum = 0;\n  let i = 0;\n  while (i < q.length) {\n    sum += q[i];\n    i++;\n  }\n  return sum <= maxSum;\n};\n\n// 👉 Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n/*\n  Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n  Example:\n  countPalindromes([1, 2, 3], 5) ➞ 2\n  # 1+2+3 is less than or equal to 5, but it's unbalanced.\n\n  countPalindromes([3, 2, 3], 1) ➞ 0\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  countPalindromes([3, 2, 3], 9) ➞ 1\n  # 3+2+3 is less than or equal to 9, and it's balanced.\n\n  countPalindromes([3], 5) ➞ 0\n  # 3 is less than or equal to 5, and it's balanced.\n  */\nconst countPalindromes = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.pow(maxWeight, 2);\n  let sum = 0;\n  let i = 0;\n  while (i < q.length) {\n    sum += q[i];\n    i++;\n  }\n  return sum <= maxSum;\n};\n\n// 👉 Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n/*\n  Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n  Example:\n  countPalindromes([1, 2, 3], 5) ➞ 2\n  # 1+2+3 is less than or equal to 5, but it's unbalanced.\n\n  countPalindromes([3, 2, 3], 1) ➞ 0\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  countPalindromes([3, 2, 3], 9) ➞ 1\n  # 3+2+3 is less than or equal to 9, and it's balanced.\n\n  countPalindromes([3], 5) ➞ 0\n  # 3 is less than or equal to 5, and it's balanced.\n  */\nconst countPalindromes = (q, w) => {\n  const maxWeight = w;\n  const maxSum = Math.pow(maxWeight, 2);\n  let sum = 0;\n  let i = 0;\n  while (i < q.length) {\n    sum += q[i];\n    i++;\n  }\n  return sum <= maxSum;\n};\n\n// 👉 Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n/*\n  Write a function that returns the number of palindromic lists whose elements sum to less than or equal to a given number.\n\n  Example:\n  countPalindromes([1, 2, 3], 5) ➞ 2\n  # 1+2+3 is less than or equal to 5, but it's unbalanced.\n\n  countPalindromes([3, 2, 3], 1) ➞ 0\n  # it's balanced, but 3+2+3 is more than the maximum possible ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers , find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, arr[i] - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars , return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.sort();\n  const arr2 = lst2.sort();\n  const arr3 = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      arr3.push(arr1[i]);\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return arr3;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise .\n Knowi ng that (a) is less then  100 .\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let flag = true;\n    for (let i = 0; i < primes.length; i++) {\n      if (a % primes[i] === 0) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n};\n\n/*Write a function thatr ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower2 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower3 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower4 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower5 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower6 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower7 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower8 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower9 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower10 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n */\nconst isSimplePower11 = (x, n) => {\n  for (let i = 1; i <= n; i++) {\n    if (x % i === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Write a functio n that returns true if a number x is a simple power of n and false in\n  other cases. x is a s imple power of n if n**i nt=x ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === -1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArray2 = [];\n  let hexNumArray2Length = hexNumArray2.length;\n  let hexNumArray3 = [];\n  let hexNumArray3Length = hexNumArray3.length;\n  let hexNumArray4 = [];\n  let hexNumArray4Length = hexNumArray4.length;\n  let hexNumArray5 = [];\n  let hexNumArray5Length = hexNumArray5.length;\n  let hexNumArray6 = [];\n  let hexNumArray6Length = hexNumArray6.length;\n  let hexNumArray7 = [];\n  let hexNumArray7Length = hexNumArray7.length;\n  let hexNumArray8 = [];\n  let hexNumArray8Length = hexNumArray8.length;\n  let hexNumArray9 = [];\n  let hexNumArray9Length = hexNumArray9.length;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = hexNumArrayA.length;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = hexNumArrayB.length;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = hexNumArrayC.length;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = hexNumArrayD.length;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = hexNumArrayE.length;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = hexNumArrayF.length;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = hexNumArrayG.length;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = hexNumArrayH.length;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = hexNumArrayI.length;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = hexNumArrayJ.length;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = hexNumArrayK.length;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = hexNumArrayL.length;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = hexNumArrayM.length;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = hexNumArrayN.length;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = hexNumArrayO.length;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = hexNumArrayP.length;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = hexNumArrayQ.length;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = hexNumArrayR.length;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = hexNumArrayS.length;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = hexNumArrayT.length;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = hexNumArrayU.length;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = hexNumArrayV.length;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = hexNumArrayW.length;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = hexNumArrayX.length;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = hexNumArrayY.length;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = hexNumArrayZ.length;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = hexNumArrayA.length;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = hexNumArrayB.length;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = hexNumArrayC.length;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = hexNumArrayD.length;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = hexNumArrayE.length;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = hexNumArrayF.length;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = hexNumArrayG.length;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = hexNumArrayH.length;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = hexNumArrayI.length;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = hexNumArrayJ.length;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = hexNumArrayK.length;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = hexNumArrayL.length;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = hexNumArrayM.length;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = hexNumArrayN.length;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = hexNumArrayO.length;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = hexNumArrayP.length;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = hexNumArrayQ.length;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = hexNumArrayR.length;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = hexNumArrayS.length;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = hexNumArrayT.length;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = hexNumArrayU.length;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = hexNumArrayV.length;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = hexNumArrayW.length;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = hexNumArrayX.length;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = hexNumArrayY.length;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = hexNumArrayZ.length;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = hexNumArrayA.length;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = hexNumArrayB.length;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = hexNumArrayC.length;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = hexNumArrayD.length;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    binary += decimalString[i] == '0'? '0' : '1';\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the\n  vowels removed. Vowels are 'a', 'e', 'i', 'o', and 'u'.\n  Examples:\n  removeVowels('hello')   # returns \"helo\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('e')      # returns \"e\"\n  removeVowels('i')      # returns \"i\"\n  removeVowels('o')      # returns \"o\"\n  removeVowels('u')      # returns \"u\"\n  removeVowels('a')      # returns \"a\"\n  removeVow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list and a number n, return a list consisting of the first n numbers in the list. \n  >>> firstN([1, 2, 3, 4])\n  [1, 2]\n  >>> firstN([1, 2, 3, 4], 2)\n  [3, 4]\n  >>> firstN([1, 2, 3, 4], 3)\n  [1, 2]\n  >>> firstN([1, 2, 3, 4], 4)\n  []\n  */\nconst firstN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.slice(0, n);\n};\n\n/* Given a list and a number n, return a list consisting of the last n numbers in the list. \n  >>> lastN([1, 2, 3, 4])\n  [3, 4]\n  >>> lastN([1, 2, 3, 4], 2)\n  [1, 2]\n  >>> lastN([1, 2, 3, 4], 3)\n  []\n  >>> lastN([1, 2, 3, 4], 4)\n  []\n  */\nconst lastN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.slice(-n);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are less than or equal to n. \n  >>> lessThanN([1, 2, 3, 4], 2)\n  [1, 2]\n  >>> lessThanN([1, 2, 3, 4], 3)\n  [1, 2]\n  >>> lessThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst lessThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x <= n);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are greater than or equal to n. \n  >>> greaterThanN([1, 2, 3, 4], 2)\n  [3, 4]\n  >>> greaterThanN([1, 2, 3, 4], 3)\n  [3, 4]\n  >>> greaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst greaterThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x >= n);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n. \n  >>> divisibleByN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n === 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and less than or equal to n. \n  >>> divisibleByNLessThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNLessThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNLessThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNLessThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n <= 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and greater than or equal to n. \n  >>> divisibleByNGreaterThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNGreaterThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNGreaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNGreaterThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n >= 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and less than or equal to n and greater than or equal to n. \n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNLessThanNGreaterThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n <= 0 && x % n >= 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and less than or equal to n and greater than or equal to n. \n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNLessThanNGreaterThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n <= 0 && x % n >= 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and less than or equal to n and greater than or equal to n. \n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNLessThanNGreaterThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n <= 0 && x % n >= 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and less than or equal to n and greater than or equal to n. \n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNLessThanNGreaterThanN = (list, n) => {\n  if (n >= list.length) {\n    return [];\n  }\n  return list.filter((x) => x % n <= 0 && x % n >= 0);\n};\n\n/* Given a list and a number n, return a list consisting of the numbers in the list that are divisible by n and less than or equal to n and greater than or equal to n. \n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 2)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 3)\n  [2, 4]\n  >>> divisibleByNLessThanNGreaterThanN([1, 2, 3, 4], 4)\n  []\n  */\nconst divisibleByNLessThanNGreaterThanN = (list, n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.2)\n  let gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade >= gradesAverage - 0.2) {\n      return (grade >= gradesAverage - 0.2? 'A-' : 'A')\n    } else if (grade >= gradesAverage - 0.3) {\n      return (grade >= gradesAverage - 0.3? 'B+' : 'B')\n    } else if (grade >= gradesAverage - 0.4) {\n      return (grade >= gradesAverage - 0.4? 'B' : 'B-')\n    } else if (grade >= gradesAverage - 0.5) {\n      return (grade >= gradesAverage - 0.5? 'C+' : 'C')\n    } else if (grade >= gradesAverage - 0.6) {\n      return (grade >= gradesAverage - 0.6? 'C' : 'C-')\n    } else if (grade >= gradesAverage - 0.7) {\n      return (grade >= gradesAverage - 0.7? 'D+' : 'D')\n    } else if (grade >= gradesAverage - 0.8) {\n      return (grade >= gradesAverage - 0.8? 'D' : 'D-')\n    } else if (grade >= gradesAverage - 0.9) {\n      return (grade >= gradesAverage - 0.9? 'E' : 'E-')\n    }\n  })\n  return gradesLetter\n}\n\n/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.2)\n  let gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade >= gradesAverage - 0.2) {\n      return (grade >= gradesAverage - 0.2? 'A-' : 'A')\n    } else if (grade >= gradesAverage - 0.3) {\n      return (grade >= gradesAverage - 0.3? 'B+' : 'B')\n    } else if (grade >= gradesAverage - 0.4) {\n      return (grade >= gradesAverage - 0.4? 'B' : 'B-')\n    } else if (grade >= gradesAverage - 0.5) {\n      return (grade >= gradesAverage - 0.5? 'C+' : 'C')\n    } else if (grade >= gradesAverage - 0.6) {\n      return (grade >= gradesAverage - 0.6? 'C' : 'C-')\n    } else if (grade >= gradesAverage - 0.7) {\n      return (grade >= gradesAverage - 0.7? 'D+' : 'D')\n    } else if (grade >= gradesAverage - 0.8) {\n      return (grade >= gradesAverage - 0.8? 'D' : 'D-')\n    } else if (grade >= gradesAverage - 0.9) {\n      return (grade >= gradesAverage - 0.9? 'E' : 'E-')\n    }\n  })\n  return gradesLetter\n}\n\n/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.2)\n  let gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return (grade >= gradesAverage? 'A+' : 'A')\n    } else if (grade >= gradesAverage - 0.2) {\n      return (grade >= gradesAverage - 0.2? 'A-' : 'A')\n    } else if (grade >= gradesAverage - 0.3) {\n      return (grade >= gradesAverage - 0.3? 'B+' : 'B')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n  st <- {\n    st <- {\n      st <- {\n        st <- {\n          st <- {\n            st <- {\n              st <- {\n                st <- {\n                  st <- {\n                    st <- {\n                      st <- {\n                        st <- {\n                          st <- {\n                            st <- {\n                              st <- {\n                                st <- {\n                                  st <- {\n                                    st <- {\n                                      st <- {\n                                        st <- {\n                                          st <- {\n                                            st <- {\n                                              st <- {\n                                                st <- {\n                                                  st <- {\n                                                    st <- {\n                                                      st <- {\n                                                        st <- {\n                                                          st <- {\n                                                            st <- {\n                                                              st <- {\n                                                                st <- {\n                                                                  st <- {\n                                                                    st <- {\n                                                                      st <- {\n                                                                        st <- {\n                                                                          st <- {\n                                                                            st <- {\n                                                                              st <- {\n                                                                                st <- {\n                                                                                  st <- {\n                                                                                    st <- {\n                                                                                      st <- {\n                                                                                        st <- {\n                                                                                          st <- {\n                                                                                            st <- {\n                                                                                              st <- {\n                                                                                                st <- {\n                                                                                                  st <- {\n                                                                                                    st <- {\n                                                                                                      st <- {\n                                                                                                        st <- {\n                                                                                                          st <- {\n                                                                                                            st <- {\n                                                                                                              st <- {\n                                                                                                                st <- {\n                                                                                                                  st <- {\n                                                                                                                    st <- {\n                                                                                                                      st <- {\n                                                                                                                        st <- {\n                                                                                                                          st <- {\n                                                                                                                            st <- {\n                                                                                                                              st <- {\n                                                                                                                                st <- {\n                                                                                                                                  st <- {\n                                                                                                                                    st <- {\n                                                                                                                                      st <- {\n                                                                                                                                        st <- {\n                                                                                                                                          st <- {\n                                                                                                                                            st <- {\n                                                                                                                                              st <- {\n                                                                                                                                                st <- {\n                                                                                                                                                  st <- {\n                                                                                                                                                    st <- {\n                                                                                                                                                      st <- {\n                                                                                                                                                        st <- {\n                                                                                                                                                          st <- {\n                                                                                                                                                            st <- {\n                                                                                                                                                              st <- {\n                                                                                                                                                                st <- {\n                                                                                                                                                                  st <- {\n                                                                                                                                                                    st <- {\n                                                                                                                                                                      st <- {\n                                                                                                                                                                        st <- {\n                                                                                                                                                                          st <- {\n                                                                                                                                                                            st <- {\n                                                                                                                                                                              st <- {\n                                                                                                                                                                                st <- {\n                                                                                                                                                                                  st <- {\n                                                                                                                                                                                    st <- {\n                                                                                                                                                                                      st <- {\n                                                                                                                                                                                        st <- {\n                                                                                                                                                                                          st <- {\n                                                                                                                                                                                            st <- {\n                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                                                                                                          st <- {\n                                                                                                                                                                                                                                                                                                                                                                                            st <- {\n                                                                                                                                                                                                                                                                                                                                                                                              st <- {\n                                                                                                                                                                                                                                                                                                                                                                                                st <- {\n                                                                                                                                                                                                                                                                                                                                                                                                  st <- {\n                                                                                                                                                                                                                                                                                                                                                                                                    st <- {\n                                                                                                                                                                                                                                                                                                                                                                                                      st <- {\n                                                                                                                                                                                                                                                                                                                                                                                                        st <- {\n                                                                                                                                                                                                                                                                                                                                                                                                          st <- {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let binary = \"\";\n    for (let i = 0; i < N; i++) {\n        sum += N % 2;\n        N = N / 2;\n    }\n    binary = sum.toString(2);\n    return binary;\n}\n\n/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integ ers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddOdd = (lst) => {\n  let even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!=='') {\n      newWord += s.charAt(i);\n    }\n  }\n  return newWord;\n};\n\n/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newWord = '';\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es ,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2) ...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2)...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      row.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return row;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer y in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2)...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by columns in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(3, 3)]\n  */\nconst getCol = (lst, x) => {\n  let col = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      col.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return col;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer z in lst such that \n  lst[x][z] == x. \n  \n  Examples:\n  getVal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 6) == 6\n  getVal([], 1, 6) == 6\n  getVal([[], [1], [1, 2, 3]], 3, 2) == 3\n  */\nconst getVal = (lst, x, z) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      if (lst[i][z] === x) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer y in lst such that \n  lst[x][y] == x. \n  \n  Examples:\n  getVal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 1) == 6\n  getVal([], 1, 1) == 6\n  getVal([[], [1], [1, 2, 3]], 3, 1) == 3\n  */\nconst getVal = (lst, x, y) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      if (lst[i][y] === x) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer z in lst such that \n  lst[x][z] == x. \n  \n  Examples:\n  getVal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 6) == 6\n  getVal([], 1, 6) == 6\n  getVal([[], [1], [1, 2, 3]], 3, 2) == 3\n  */\nconst getVal = (lst, x, z) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      if (lst[i][z] === x) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer y in lst such that \n  lst[x][y] == x. \n  \n  Examples:\n  getVal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 1) == 6\n  getVal([], 1, 1) == 6\n  getVal([[], [1], [1, 2, 3]], 3, 1) == 3\n  */\nconst getVal = (lst, x, y) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      if (lst[i][y] === x) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer z in lst such that \n  lst[x][z] == x. \n  \n  Examples:\n  getVal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 6) == 6\n  getVal([], 1, 6) == 6\n  getVal([[], [1], [1, 2, 3]], 3, 2) == 3\n  */\nconst getVal = (lst, x, z) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      if (lst[i][z] === x) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer y in lst such that \n  lst[x][y] == x. \n  \n  Examples:\n  getVal([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1, 1) == 6\n  getVal([], 1, 1) == 6\n  getVal([[], [1], [1, 2, 3]], 3, 1) == 3\n  */\nconst getVal = (lst, x, y) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      if (lst[i][y] === x) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  Youare given a 2 dim e nsion", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array;\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s[i]) + alphabet.indexOf(s[i]) % 26);\n  }\n  return encrypted;\n};\n\n/*Create a function decr y pt thattakes a string as an argument and\n  returns a string decrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) % 26);\n  }\n  return decrypted;\n};\n\n/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s[i]) + alphabet.indexOf(s[i]) % 26);\n  }\n  return encrypted;\n};\n\n/*Create a function decr y pt thattakes a string as an argument and\n  returns a string decrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) % 26);\n  }\n  return decrypted;\n};\n\n/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s[i]) + alphabet.indexOf(s[i]) % 26);\n  }\n  return encrypted;\n};\n\n/*Create a function decr y pt thattakes a string as an argument and\n  returns a string decrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) % 26);\n  }\n  return decrypted;\n};\n\n/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += alphabet.charAt(alphabet.indexOf(s[i]) + alphabet.indexOf(s[i]) % 26);\n  }\n  return encrypted;\n};\n\n/*Create a function decr y pt thattakes a string as an argument and\n  returns a string decrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  decrypt('hi') returns 'lm'\n  decrypt('asdfghjkl') returns 'ewhjklnop'\n  decrypt('gf') returns 'kj'\n  decrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += alphabet.charAt(alphabet.indexOf(s[i]) - alphabet.indexOf(s[i]) % 26);\n  }\n  return decrypted;\n};\n\n/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence .\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let maxIndex = 0;\n  let maxValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxValue) {\n      maxIndex = i;\n      maxValue = numbers[i];\n    }\n  }\n  return numbers.slice(maxIndex, numbers.length);\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling minimum element found until given moment\n in the  s equence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  let minIndex = 0;\n  let minValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minValue) {\n      minIndex = i;\n      minValue = numbers[i];\n    }\n  }\n  return numbers.slice(minIndex, numbers.length);\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling sum element found until given moment\n in the  s equence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling average element found until given moment\n in the  s equence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling standard deviation element found until given moment\n in the  s equence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingStd = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling variance element found until given moment\n in the  s equence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingVar = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling count element found until given moment\n in the  s equence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2]\n  */\nconst rollingCount = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return count;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling median element found until given moment\n in the  s equence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  let sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedNumbers.length / 2);\n  let median = sortedNumbers[middleIndex];\n  return median;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling mode element found until given moment\n in the  s equence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMode = (numbers) => {\n  let modeIndex = 0;\n  let modeCount = 0;\n  let modeValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === modeValue) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndex) {\n        modeIndex = modeCount;\n        modeValue = numbers[i];\n      }\n      modeCount = 1;\n    }\n  }\n  return modeValue;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling variance element found until given moment\n in the  s equence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling standard deviation element found until given moment\n in the  s equence.\n  >>> rollingStdDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingStdDeviation = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling variance element found until given moment\n in the  s equence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.6449340668482264, 1.6449340668482264, 1.6449340668482264]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling count element found until given moment\n in the  s equence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1, 2, 1, 2]\n  */\nconst rollingCount = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return count;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling median element found until given moment\n in the  s equence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  let sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedNumbers.length / 2);\n  let median = sortedNumbers[middleIndex];\n  return median;\n};\n\n/* From a given list ofi ntegers,  generate a list of rolling mode element found until given moment\n in the  s equence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2]\n  */\nconst rollingMode = (numbers) => {\n  let modeIndex = 0;\n  let modeCount = 0;\n  let mode", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n  if(lst.length===0) return null\n  if(lst.length===1) return lst[0]\n  let smallest = lst[0]\n  let secondSmallest = lst[0]\n  for(let i=1;i<lst.length;i++){\n    if(smallest>lst[i]){\n      secondSmallest = smallest\n      smallest = lst[i]\n    }\n  }\n  return secondSmallest\n}\n\n/*\n  You are given a list of integers. Write a function that returns the sum of the integers in the list but does not exceed the given limit.\n  \n  sumOfLimitedSums([10, 20, 30, 40]) == 60\n  sumOfLimitedSums([10, 20, 30, 40, 50]) == 60\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60]) == 60\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70]) == 70\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80]) == 80\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 90\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 100\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]) == 110\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) == 120\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]) == 130\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140]) == 140\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]) == 150\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160]) == 160\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170]) == 170\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180]) == 180\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190]) == 190\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]) == 200\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610]) == 600\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]) == 1000\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260, 1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590, 1600, 1610, 1620, 1630, 1640, 1650, 1660, 1670, 1680, 1690, 1700, 1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000]) == 1000\n  sumOfLimitedSums([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by' .', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) return true\n  if (x % 1 === 0 && y % 1!== 0 && z % 1!== 0) return true\n  if (x % 1!== 0 && y % 1!== 0 && z % 1!== 0) return true\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters , repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.toLowerCase().split('');\n  let repl = `abcdefghijklmnopqrstuvwxyz`;\n  let en = letters.map((letter) => {\n    return repl.indexOf(letter) + 2;\n  });\n  return en.join('');\n};\n\n/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Youare given a list o f  integer s.\n  You need to find the largest prime number and return the sum of its digits s.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Youare given a list o f  integer s.\n  You need to find the largest prime number and return the sum of its digits s.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Youare given a list o f  integer s.\n  You need to find the largest prime number and return the sum of its digits s.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Youare given a list o f  integer s.\n  You need to find the largest prime number and return the sum of its digits s.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Youare given a list o f  integer s.\n  You need to find the largest prime number and return the sum of its digits s.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Youare given a list o f  integer s.\n  You need to find the largest prime number and return the sum of its digits s.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (typeof dict[key] === \"string\") {\n      if (key.toLowerCase() === key) {\n        return true;\n      }\n      if (key.includes(dict[key])) {\n        return true;\n      }\n    } else {\n      if (dict[key] === key) {\n        return true;\n      }\n      if (dict[key].includes(key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (typeof dict[key] === \"string\") {\n      if (key.toLowerCase() === key) {\n        return true;\n      }\n      if (key.includes(dict[key])) {\n        return true;\n      }\n    } else {\n      if (dict[key] === key) {\n        return true;\n      }\n      if (dict[key].includes(key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (typeof dict[key] === \"string\") {\n      if (key.toLowerCase() === key) {\n        return true;\n      }\n      if (key.includes(dict[key])) {\n        return true;\n      }\n    } else {\n      if (dict[key] === key) {\n        return true;\n      }\n      if (dict[key].includes(key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (typeof dict[key] === \"string\") {\n      if (key.toLowerCase() === key) {\n        return true;\n      }\n      if (key.includes(dict[key])) {\n        return true;\n      }\n    } else {\n      if (dict[key] === key) {\n        return true;\n      }\n      if (dict[key].includes(key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (typeof dict[key] === \"string\") {\n      if (key.toLowerCase() === key) {\n        return true;\n      }\n      if (key.includes(dict[key])) {\n        return true;\n      }\n    } else {\n      if (dict[key] === key) {\n        return true;\n      }\n      if (dict[key].includes(key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsOne(5) => [2,3]\n  countTowardsOne(11) => [2,3,5,7]\n  countTowardsOne(0) => []\n  countTowardsOne(20) => [2,3,5,7,11,13,17,19]\n  countTowardsOne(1) => []\n  countTowardsOne(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsOne = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsTwo(5) => [2,3]\n  countTowardsTwo(11) => [2,3,5,7]\n  countTowardsTwo(0) => []\n  countTowardsTwo(20) => [2,3,5,7,11,13,17,19]\n  countTowardsTwo(1) => []\n  countTowardsTwo(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsTwo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsThree(5) => [2,3]\n  countTowardsThree(11) => [2,3,5,7]\n  countTowardsThree(0) => []\n  countTowardsThree(20) => [2,3,5,7,11,13,17,19]\n  countTowardsThree(1) => []\n  countTowardsThree(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsThree = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsFour(5) => [2,3]\n  countTowardsFour(11) => [2,3,5,7]\n  countTowardsFour(0) => []\n  countTowardsFour(20) => [2,3,5,7,11,13,17,19]\n  countTowardsFour(1) => []\n  countTowardsFour(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsFour = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsFive(5) => [2,3]\n  countTowardsFive(11) => [2,3,5,7]\n  countTowardsFive(0) => []\n  countTowardsFive(20) => [2,3,5,7,11,13,17,19]\n  countTowardsFive(1) => []\n  countTowardsFive(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsFive = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countTowardsSix(5) => [2,3]\n  countTowardsSix(11) => [2,3,5,7]\n  countTowardsSix(0) => []\n  countTowardsSix(20) => [2,3,5,7,11,13,17,19]\n  countTowardsSix(1) => []\n  countTowardsSix(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsSix = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n  }\n  return sum + product;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the sum of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    sum += b[i];\n  }\n  return sum;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the difference of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  diff(148, 412) should return 16.\n  diff(19, 28) should return 72.\n  diff(2020, 1851) should return 0.\n  diff(14,-15) should return 20.\n  */\nconst diff = (a, b) => {\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) {\n    diff += a[i] - b[i];\n  }\n  return diff;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  product(148, 412) should return 16.\n  product(19, 28) should return 72.\n  product(2020, 1851) should return 0.\n  product(14,-15) should return 20.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    product *= b[i];\n  }\n  return product;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the quotient of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  quotient(148, 412) should return 16.\n  quotient(19, 28) should return 72.\n  quotient(2020, 1851) should return 0.\n  quotient(14,-15) should return 20.\n  */\nconst quotient = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += a[i] / b[i];\n  }\n  return quotient;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the remainder of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  remainder(148, 412) should return 16.\n  remainder(19, 28) should return 72.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 20.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder += a[i] % b[i];\n  }\n  return remainder;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the quotient of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  quotient2(148, 412) should return 16.\n  quotient2(19, 28) should return 72.\n  quotient2(2020, 1851) should return 0.\n  quotient2(14,-15) should return 20.\n  */\nconst quotient2 = (a, b) => {\n  let quotient2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient2 += a[i] / b[i];\n  }\n  return quotient2;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the remainder of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  remainder2(148, 412) should return 16.\n  remainder2(19, 28) should return 72.\n  remainder2(2020, 1851) should return 0.\n  remainder2(14,-15) should return 20.\n  */\nconst remainder2 = (a, b) => {\n  let remainder2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder2 += a[i] % b[i];\n  }\n  return remainder2;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the quotient of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  quotient3(148, 412) should return 16.\n  quotient3(19, 28) should return 72.\n  quotient3(2020, 1851) should return 0.\n  quotient3(14,-15) should return 20.\n  */\nconst quotient3 = (a, b) => {\n  let quotient3 = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient3 += a[i] / b[i];\n  }\n  return quotient3;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the remainder of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  remainder3(148, 412) should return 16.\n  remainder3(19, 28) should return 72.\n  remainder3(2020, 1851) should return 0.\n  remainder3(14,-15) should return 20.\n  */\nconst remainder3 = (a, b) => {\n  let remainder3 = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder3 += a[i] % b[i];\n  }\n  return remainder3;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the quotient of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  quotient4(148, 412) should return 16.\n  quotient4(19, 28) should return 72.\n  quotient4(2020, 1851) should return 0.\n  quotient4(14,-15) should return 20.\n  */\nconst quotient4 = (a, b) => {\n  let quotient4 = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient4 += a[i] / b[i];\n  }\n  return quotient4;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the remainder of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  remainder4(148, 412) should return 16.\n  remainder4(19, 28) should return 72.\n  remainder4(2020, 1851) should return 0.\n  remainder4(14,-15) should return 20.\n  */\nconst remainder4 = (a, b) => {\n  let remainder4 = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder4 += a[i] % b[i];\n  }\n  return remainder4;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, cou n t the nu mber of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit .If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {\n    closest = 0;\n  } else if (num > 0) {\n    closest = num;\n  } else {\n    closest = num * -1;\n  }\n  return closest;\n};\n\n/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  let closest;\n  if (num === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
