{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n * Get a random element from given array.\n * If array is empty, return undefined.\n * If array has less than two elements, return undefined.\n * If array has more than two elements, return last element.\n * If array has exactly two elements, return either first or second element.\n * If array has two or more elements, return random element from that array.\n * If array has three or more elements, return random element from that array.\n * If array has four elements, return random element from that array.\n * If array has five or more elements, return random element from that array.\n * If array has six or more elements, return random element from that array.\n * If array has seven or more elements, return random element from that array.\n * If array has eight or more elements, return random element from that array.\n * If array has nine or more elements, return random element from that array.\n * If array has ten or more elements, return random element from that array.\n * If array has eleven or more elements, return random element from that array.\n * If array has twelve or more elements, return random element from that array.\n * If array has thirteen or more elements, return random element from that array.\n * If array has fourteen or more elements, return random element from that array.\n * If array has fifteen or more elements, return random element from that array.\n * If array has sixteen or more elements, return random element from that array.\n * If array has seventeen or more elements, return random element from that array.\n * If array has eighteen or more elements, return random element from that array.\n * If array has nineteen or more elements, return random element from that array.\n * If array has twenty or more elements, return random element from that array.\n * If array has twenty-one elements, return random element from that array.\n * If array has twenty-two elements, return random element from that array.\n * If array has twenty-three elements, return random element from that array.\n * If array has twenty-four elements, return random element from that array.\n * If array has twenty-five elements, return random element from that array.\n * If array has twenty-six elements, return random element from that array.\n * If array has twenty-seven elements, return random element from that array.\n * If array has twenty-eight elements, return random element from that array.\n * If array has twenty-nine elements, return random element from that array.\n * If array has thirty-one elements, return random element from that array.\n * If array has thirty-two elements, return random element from that array.\n * If array has thirty-three elements, return random element from that array.\n * If array has thirty-four elements, return random element from that array.\n * If array has thirty-five elements, return random element from that array.\n * If array has thirty-six elements, return random element from that array.\n * If array has thirty-seven elements, return random element from that array.\n * If array has thirty-eight elements, return random element from that array.\n * If array has thirty-nine elements, return random element from that array.\n * If array has fourty-one elements, return random element from that array.\n * If array has fourty-two elements, return random element from that array.\n * If array has fourty-three elements, return random element from that array.\n * If array has fourty-four elements, return random element from that array.\n * If array has fourty-five elements, return random element from that array.\n * If array has fourty-six elements, return random element from that array.\n * If array has fourty-seven elements, return random element from that array.\n * If array has fourty-eight elements, return random element from that array.\n * If array has fourty-nine elements, return random element from that array.\n * If array has fifty-one elements, return random element from that array.\n * If array has fifty-two elements, return random element from that array.\n * If array has fifty-three elements, return random element from that array.\n * If array has fifty-four elements, return random element from that array.\n * If array has fifty-five elements, return random element from that array.\n * If array has fifty-six elements, return random element from that array.\n * If array has fifty-seven elements, return random element from that array.\n * If array has fifty-eight elements, return random element from that array.\n * If array has fifty-nine elements, return random element from that array.\n * If array has sixty-one elements, return random element from that array.\n * If array has sixty-two elements, return random element from that array.\n * If array has sixty-three elements, return random element from that array.\n * If array has sixty-four elements, return random element from that array.\n * If array has sixty-five elements, return random element from that array.\n * If array has sixty-six elements, return random element from that array.\n * If array has sixty-seven elements, return random element from that array.\n * If array has sixty-eight elements, return random element from that array.\n * If array has sixty-nine elements, return random element from that array.\n * If array has seventy-one elements, return random element from that array.\n * If array has seventy-two elements, return random element from that array.\n * If array has seventy-three elements, return random element from that array.\n * If array has seventy-four elements, return random element from that array.\n * If array has seventy-five elements, return random element from that array.\n * If array has seventy-six elements, return random element from that array.\n * If array has seventy-seven elements, return random element from that array.\n * If array has seventy-eight elements, return random element from that array.\n * If array has seventy-nine elements, return random element from that array.\n * If array has eighty-one elements, return random element from that array.\n * If array has eighty-two elements, return random element from that array.\n * If array has eighty-three elements, return random element from that array.\n * If array has eighty-four elements, return random element from that array.\n * If array has eighty-five elements, return random element from that array.\n * If array has eighty-six elements, return random element from that array.\n * If array has eighty-seven elements, return random element from that array.\n * If array has eighty-eight elements, return random element from that array.\n * If array has eighty-nine elements, return random element from that array.\n * If array has ninety-one elements, return random element from that array.\n * If array has ninety-two elements, return random element from that array.\n * If array has ninety", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let current_group = [];\n  let current_group_length = 0;\n  let current_group_open_brace_count = 0;\n  let current_group_closed_brace_count = 0;\n  let current_group_open_brace_index = 0;\n  let current_group_closed_brace_index = 0;\n  let current_group_open_brace_string = '';\n  let current_group_closed_brace_string = '';\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_closed_brace_string_index = 0;\n  let current_group_open_brace_string_index = 0;\n  let current_group_close", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Find the longest palindrome that begins with a supplied string.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = [];\n  for (let i = 0; i < n; i++) {\n    p.push((i + 1) % 2 === 1? i + 1 : i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s+/);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a\n  given letter. \n  \n  For example:\n  wordsStartingWith(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  wordsStartingWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"four\", \"five\", \"six\"]\n  */\nconst wordsStartingWith = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.startsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a\n  given letter. \n  \n  For example:\n  wordsEndingWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsEndingWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"four\", \"five\", \"six\"]\n  */\nconst wordsEndingWith = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.endsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain a given\n  letter. \n  \n  For example:\n  wordsContaining(\"Hi, my name is John\", \"n\") == [\"my\", \"name\", \"is\", \"John\"]\n  wordsContaining(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"four\", \"five\", \"six\"]\n  */\nconst wordsContaining = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word => word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain a\n  given letter. \n  \n  For example:\n  wordsNotContaining(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotContaining(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotContaining = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with\n  a given letter. \n  \n  For example:\n  wordsNotStartingWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotStartingWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotStartingWith = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.startsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not end with\n  a given letter. \n  \n  For example:\n  wordsNotEndingWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotEndingWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotEndingWith = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.endsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain a\n  given letter. \n  \n  For example:\n  wordsNotContaining(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotContaining(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotContaining = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with\n  a given letter. \n  \n  For example:\n  wordsNotStartingWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotStartingWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotStartingWith = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.startsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not end with\n  a given letter. \n  \n  For example:\n  wordsNotEndingWith(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotEndingWith(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotEndingWith = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.endsWith(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain a\n  given letter. \n  \n  For example:\n  wordsNotContaining(\"Hi, my name is John\", \"n\") == [\"Hi\", \"is\", \"my\", \"name\", \"John\"]\n  wordsNotContaining(\"One, two, three, four, five, six\", \"o\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsNotContaining = (s, letter) => {\n  return s.split(/,|\\s+/).filter(word =>!word.includes(letter));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with\n  a given letter. \n  \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return x + y;\n  }\n  return -1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = ((n + m) / 2);\n  const binary = avg.toString(2);\n  if (binary.length < n) {\n    return -1;\n  }\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 1) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any negative digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueNegativeDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] < 0) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any positive digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniquePositiveDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] > 0) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange2 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange3 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange4 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange5 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange6 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange7 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange8 = (x, a, b) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] >= a && x[i] <= b) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any digit in range [a, b].\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsInRange9 = (x, a, b) => {\n  let result = [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit >= 1 && digit <= 9) {\n      return digits[digit];\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit >= 1 && digit <= 9) {\n      return digits[digit];\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit >= 1 && digit <= 9) {\n      return digits[digit];\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit >= 1 && digit <= 9) {\n      return digits[digit];\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit >= 1 && digit <= 9) {\n      return digits[digit];\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit, index) => {\n    if (digit >= 1 && digit <= 9) {\n      return digits[digit];\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  {\n    name: \"factorial of 0\",\n    fn: () => factorial(0),\n    expected: []\n  },\n  {\n    name: \"factorial of 1\",\n    fn: () => factorial(1),\n    expected: [[1]]\n  },\n  {\n    name: \"factorial of 2\",\n    fn: () => factorial(2),\n    expected: [[1, 1]]\n  },\n  {\n    name: \"factorial of 3\",\n    fn: () => factorial(3),\n    expected: [1, 2, 6, 24]\n  },\n  {\n    name: \"factorial of 4\",\n    fn: () => factorial(4),\n    expected: [1, 2, 6, 24, 30]\n  },\n  {\n    name: \"factorial of 5\",\n    fn: () => factorial(5),\n    expected: [1, 2, 6, 24, 30, 120, 210, 320, 430, 640, 1260, 2480, 5120, 7240, 10480, 15360, 20960, 31360, 43920, 64320, 128720, 241760, 493440, 927840, 1939160]\n  },\n  {\n    name: \"factorial of 6\",\n    fn: () => factorial(6),\n    expected: [1, 2, 6, 24, 30, 120, 210, 320, 430, 640, 1260, 2480, 5120, 7240, 10480, 15360, 20960, 31360, 43920, 64320, 128720, 241760, 493440, 927840, 1939160, 4334920, 8764320, 17981320, 35245920, 70495920, 130740720, 268435420, 536870920, 1073741820, 17592186044415, 351843720888329, 703687441776649, 1307370700495685, 2684354410085964]\n  },\n  {\n    name: \"factorial of 7\",\n    fn: () => factorial(7),\n    expected: [1, 2, 6, 24, 30, 120, 210, 320, 430, 640, 1260, 2480, 5120, 7240, 10480, 15360, 20960, 31360, 43920, 64320, 128720, 241760, 493440, 927840, 1939160, 4334920, 8764320, 17981320, 35245920, 70495920, 130740720, 268435420, 536870920, 1073741820, 17592186044415, 351843720888329, 703687441776649, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 1307370700495685, 2684354410085964, 13", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += arr[i] * Math.pow(10, arr.length - i - 1);\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  let temp;\n  \n  for(let i = 1; i < n; i++) {\n    temp = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = temp;\n  }\n  \n  for(let i = n - 1; i >= 0; i--) {\n    temp = arr[i];\n    arr[i] = arr[n - 1];\n    arr[n - 1] = temp;\n  }\n  \n  if(n == 1) {\n    flag = false;\n  }\n  \n  return flag;\n}\n\n/*\n  Write a function that takes an array of integers and returns true if the \n  array is sorted in non-decreasing order else return false.\n  \n  Note: Your solution should run in O(n) time and O(1) space.\n  \n  For Example:\n  \n  sortNonDecreasing([3, 5, 4, 1, 2])==>true\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>true\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==>false\n  sortNonDecreasing([3, 5, 4, 1, 2])==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  let carry = 0;\n  for (let i = 0; i < a.length; i++) {\n    const aChar = a.charCodeAt(i);\n    const bChar = b.charCodeAt(i);\n    const aCharCode = a.charCodeAt(i);\n    const bCharCode = b.charCodeAt(i);\n    const aCharCodeInt = aCharCode | 0;\n    const bCharCodeInt = bCharCode | 0;\n    const aCharCodeIntInt = aCharCodeInt | 0;\n    const bCharCodeIntInt = bCharCodeInt | 0;\n    const aCharCodeIntInt = aCharCodeInt & 255;\n    const bCharCodeIntInt = bCharCodeInt & 255;\n    const aCharCodeIntIntInt = aCharCodeIntInt & 255;\n    const bCharCodeIntIntInt = bCharCodeIntInt & 255;\n    const aCharCodeIntIntIntInt = aCharCodeIntIntInt & 255;\n    const bCharCodeIntIntIntInt = bCharCodeIntIntInt & 255;\n    const aCharCodeIntIntIntIntInt = aCharCodeIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntInt = bCharCodeIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntInt = aCharCodeIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntInt = bCharCodeIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = bCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt & 255;\n    const aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharCodeIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }\n  \n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    \n    if (currentCount === undefined) {\n      histogram[currentLetter] = 1;\n    } else {\n      histogram[currentLetter] = currentCount + 1;\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task\n  We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odds = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] % 2 === 1) {\n        odds.push(digits[j]);\n      }\n    }\n  }\n  return odds.map((odd) => `the number of odd elements ${odd} the str${odd} ${\n    odd.toString().length\n  } of the ${odd.toString().length} ${odd} ${\n    odd.toString().length\n  } ${odd.toString().length} ${odd.toString().length}.`);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str2ng.\",\n   \"the number of even elements 4n in the str4ng.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng.\",\n   \"the number of even elements 8n in the str8ng.\"]\n  */\nconst evenCount = (lst) => {\n  const evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] % 2 === 0) {\n        evens.push(digits[j]);\n      }\n    }\n  }\n  return evens.map((even) => `the number of even elements ${even} the str${\n    even.toString().length\n  } ${even.toString().length} ${even.toString().length} ${\n    even.toString().length\n  } ${even.toString().length} ${even.toString().length}.`);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng.\",\n   \"the number of even and odd elements 4n in the str4ng.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng.\",\n   \"the number of even and odd elements 8n in the str8ng.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] % 2 === 1) {\n        odds.push(digits[j]);\n      } else {\n        evens.push(digits[j]);\n      }\n    }\n  }\n  return oddEvens(odds, evens);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng.\",\n   \"the number of even and odd elements 4n in the str4ng.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng.\",\n   \"the number of even and odd elements 8n in the str8ng.\"]\n  */\nconst oddEvens = (odds, evens) => {\n  return odds.map((odd) => `the number of even and odd elements ${odd} the str${\n    odd.toString().length\n  } ${odd.toString().length} ${odd.toString().length} ${\n    odd.toString().length\n  } ${odd.toString().length} ${odd.toString().length}.`);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng.\",\n   \"the number of even and odd elements 4n in the str4ng.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng.\",\n   \"the number of even and odd elements 8n in the str8ng.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const odds = [];\n  const evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const digits = str.split('');\n    for (let j = 0; j < digits.length; j++) {\n      if (digits[j] % 2 === 1) {\n        odds.push(digits[j]);\n      } else {\n        evens.push(digits[j]);\n      }\n    }\n  }\n  return oddEvens(odds, evens);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng.\",\n   \"the number of even and odd elements 4n in the str4ng.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng.\",\n   \"the number of even and odd elements 8n in the str8ng.\"]\n  */\nconst oddEvens = (odds, evens) => {\n  return odds.map((odd) => `the number of even and odd elements ${odd} the str${\n    odd.toString().length\n  } ${odd.toString().length} ${odd.toString().length} ${\n    odd.toString().length\n  } ${odd.toString().length} ${odd.toString().length}.`);\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str2ng.\",\n   \"the number of even and odd elements 4n in the str4ng.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng.\",\n   \"the number of even and odd elements 8n in the str8ng.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const odds = [];\n  const even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let minSum = nums[0];\n  for (let i = 1; i < n; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < n; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are less than the specified value.\n  Example\n  sumLessThan([2, 3, 4, 1, 2, 4], 4) == 5\n  sumLessThan([-1, -2, -3, 4], -4) == 4\n  */\nconst sumLessThan = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] < value) sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are equal to the specified value.\n  Example\n  sumEquals([2, 3, 4, 1, 2, 4], 4) == 6\n  sumEquals([-1, -2, -3, 4], -4) == 4\n  */\nconst sumEquals = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] === value) sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are greater than the specified value.\n  Example\n  sumGreaterThan([2, 3, 4, 1, 2, 4], 4) == 5\n  sumGreaterThan([-1, -2, -3, 4], -4) == 6\n  */\nconst sumGreaterThan = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] > value) sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are less than or equal to the specified value.\n  Example\n  sumLessThanOrEquals([2, 3, 4, 1, 2, 4], 4) == 5\n  sumLessThanOrEquals([-1, -2, -3, 4], -4) == 4\n  */\nconst sumLessThanOrEquals = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] <= value) sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are greater than or equal to the specified value.\n  Example\n  sumGreaterThanOrEquals([2, 3, 4, 1, 2, 4], 4) == 6\n  sumGreaterThanOrEquals([-1, -2, -3, 4], -4) == 6\n  */\nconst sumGreaterThanOrEquals = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] > value) sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of all elements in the array\n  that are less than the specified value.\n  Example\n  productLessThan([2, 3, 4, 1, 2, 4], 4) == 24\n  productLessThan([-1, -2, -3, 4], -4) == 24\n  */\nconst productLessThan = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] < value) product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the product of all elements in the array\n  that are equal to the specified value.\n  Example\n  productEquals([2, 3, 4, 1, 2, 4], 4) == 24\n  productEquals([-1, -2, -3, 4], -4) == 24\n  */\nconst productEquals = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] === value) product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the product of all elements in the array\n  that are greater than the specified value.\n  Example\n  productGreaterThan([2, 3, 4, 1, 2, 4], 4) == 24\n  productGreaterThan([-1, -2, -3, 4], -4) == 24\n  */\nconst productGreaterThan = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] > value) product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the product of all elements in the array\n  that are less than or equal to the specified value.\n  Example\n  productLessThanOrEquals([2, 3, 4, 1, 2, 4], 4) == 24\n  productLessThanOrEquals([-1, -2, -3, 4], -4) == 24\n  */\nconst productLessThanOrEquals = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] <= value) product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the product of all elements in the array\n  that are greater than or equal to the specified value.\n  Example\n  productGreaterThanOrEquals([2, 3, 4, 1, 2, 4], 4) == 24\n  productGreaterThanOrEquals([-1, -2, -3, 4], -4) == 24\n  */\nconst productGreaterThanOrEquals = (nums, value) => {\n  const n = nums.length;\n  if (n < 2) return 0;\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (nums[i] > value) product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, return a new array containing only the\n  elements that appear more than once in the original array.\n  Example\n  removeDuplicates([2, 3, 4, 1, 2, 4]) == [3, 4]\n  removeDuplicates([-1, -2, -3]) == [-2, -3]\n  */\nconst removeDuplicates = (nums) => {\n  const n = nums.length;\n  if (n < 2) return [];\n  const newArray = [];\n  for (let i = 0; i < n; i++) {\n    if (newArray.indexOf(nums[i]) === -1) newArray.push(nums[i]);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of integers nums, return a new array containing only the\n  elements that appear less than or equal to half the times in the original array.\n  Example\n  removeDuplicates([2, 3, 4, 1, 2, 4], 2) == [3, 4]\n  removeDuplicates([-1, -2, -3, 4], 2) == [-3]\n  */\nconst removeDuplicatesLessThanHalf = (nums, length) => {\n  const n = nums.length;\n  if (n < 2) return [];\n  const newArray = [];\n  for (let i = 0; i < n; i++) {\n    if (newArray.indexOf(nums[i]) === -1) newArray.push(nums[i]);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of integers nums, return a new array containing only the", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, index) => {\n    const bucket = new Array(capacity).fill(0);\n    row.forEach((value, index) => {\n      if (value) {\n        bucket[index] += 1;\n      }\n    });\n    return bucket;\n  });\n  let result = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    const bucket = buckets[i];\n    for (let j = 0; j < bucket.length; j++) {\n      if (bucket[j] > 0) {\n        bucket[j] -= 1;\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nexport { maxFill };\n\n/*\n  You are given an array of integers representing a 2D grid of 0's and 1's.\n  Each 1 in the grid represents a landmark where you can water from.\n  Each 0 represents water that you can extract from the grid.\n  You are given a target landmark represented by a 1 in the grid.\n  You want to know how many possible ways you can extract water\n  from the grid while trying to maintain the landmark you chose.\n  \n  Example 1:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 1\n      Output: 3\n  \n  Example 2:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 0\n      Output: 2\n\n  Example 3:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 2\n      Output: 3\n\n  Constraints:\n      * grid[i][j] -> 0 | 1\n      * 0 <= grid[i].length <= 10^3\n      * 0 <= grid[0].length <= 10^3\n      * grid[i][j] can only be 0 or 1\n      * 1 <= target <= 10^3\n      * grid[i][j] == target iff grid[i][j] == 1\n*/\nconst numLandmarks = (grid, target) => {\n  const result = [];\n  const visited = new Array(grid.length).fill(false);\n  const queue = [];\n  queue.push([...grid]);\n  while (queue.length > 0) {\n    const row = queue.shift();\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === target) {\n        result.push(i);\n        visited[i] = true;\n      }\n      if (row[i] === 0 && visited[i]) {\n        queue.push([...row.slice(0, i),...row.slice(i + 1)]);\n      }\n    }\n  }\n  return result.length;\n};\n\nexport { numLandmarks };\n\n/*\n  You are given an array of integers representing a 2D grid of 0's and 1's.\n  Each 1 in the grid represents a landmark where you can water from.\n  Each 0 represents water that you can extract from the grid.\n  You are given a target landmark represented by a 1 in the grid.\n  You want to know how many possible ways you can extract water\n  from the grid while trying to maintain the landmark you chose.\n  \n  Example 1:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 1\n      Output: 3\n  \n  Example 2:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 0\n      Output: 2\n\n  Example 3:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 2\n      Output: 3\n\n  Constraints:\n      * grid[i][j] -> 0 | 1\n      * 0 <= grid[i].length <= 10^3\n      * 0 <= grid[0].length <= 10^3\n      * grid[i][j] can only be 0 or 1\n      * 1 <= target <= 10^3\n      * grid[i][j] == target iff grid[i][j] == 1\n*/\nconst numLandmarksOptimized = (grid, target) => {\n  const result = [];\n  const visited = new Array(grid.length).fill(false);\n  const queue = [];\n  queue.push([...grid]);\n  while (queue.length > 0) {\n    const row = queue.shift();\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === target) {\n        result.push(i);\n        visited[i] = true;\n      }\n      if (row[i] === 0 && visited[i]) {\n        queue.push([...row.slice(0, i),...row.slice(i + 1)]);\n      }\n    }\n  }\n  return result.length;\n};\n\nexport { numLandmarksOptimized };\n\n/*\n  You are given an array of integers representing a 2D grid of 0's and 1's.\n  Each 1 in the grid represents a landmark where you can water from.\n  Each 0 represents water that you can extract from the grid.\n  You are given a target landmark represented by a 1 in the grid.\n  You want to know how many possible ways you can extract water\n  from the grid while trying to maintain the landmark you chose.\n  \n  Example 1:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 1\n      Output: 3\n  \n  Example 2:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 0\n      Output: 2\n\n  Example 3:\n      Input: \n          grid: [[0,0,1,1],[1,0,1,0],[1,1,1,1],[0,1,1,0]]\n          target: 2\n      Output: 3\n\n  Constraints:\n      * grid[i][j] -> 0 | 1\n      * 0 <= grid[i].length <= 10^3\n      * 0 <= grid[0].length <= 10^3\n      * grid[i][j] can only be 0 or 1\n      * 1 <= target <= 10^3\n      * grid[i][j] == target iff grid[i][j] == 1\n*/\nconst numLandmarksOptimized2 = (grid, target) => {\n  const result = [];\n  const visited = new Array(grid.length).fill(false);\n  const queue = [];\n  queue.push([...grid]);\n  while (queue.length > 0) {\n    const row = queue.shift();\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === target) {\n        result.push(i);\n        visited[i] = true;\n      }\n      if (row[i] === 0 && visited[i]) {\n        queue.push([...row.slice(0, i),...row.slice(i + 1)]);\n      }\n    }\n  }\n  return result.length;\n};\n\nexport { numLandmarksOptimized2 };\n\n/*\n  You are given an array of integers representing a 2D grid of 0's and 1's.\n  Each 1 in the grid represents a landmark where you can water from.\n  Each 0 represents water that you can extract from the grid.\n  You are given a target landmark represented by a 1 in the grid.\n  You want to know how many possible ways you can extract water", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const decs = arr.filter((x) => x === 1).map((x) => x - 1).sort().reverse();\n  return [...decs,...ones].sort();\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.filter((x) => x === 1).length;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromRightAndLeft = vowelsCount - 3;\n  let vowelsCountFromRightAndLeftAndUp = vowelsCount - 4;\n  let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 5;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUp = vowelsCount - 6;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDown = vowelsCount - 7;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUp = vowelsCount - 8;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDown = vowelsCount - 9;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 10;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown = vowelsCount - 11;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 12;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 13;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown = vowelsCount - 14;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 15;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown = vowelsCount - 16;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 17;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown = vowelsCount - 18;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 19;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 20;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 21;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 22;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 23;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 24;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 25;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 26;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 27;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 28;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 29;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp = vowelsCount - 30;\n  let vowelsCountFromRightAndLeftAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let open = 0;\n  let close = 0;\n  let i = 0;\n  let j = 0;\n  let res = false;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      open++;\n    } else if (lst[i] === ')') {\n      close++;\n    } else {\n      i++;\n    }\n  }\n  if (open === close) {\n    res = true;\n  }\n  return res;\n};\n\n/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n\n  return longest\n}\n\n/**\n * Return a new array with the elements that satisfy the predicate in reverse order.\n * If no predicate is provided, the elements are sorted in ascending order.\n * If the predicate is provided, the elements are sorted in ascending order using the predicate.\n * If the predicate is provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided, the elements are sorted in ascending order.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned array is the element that satisfies the predicate.\n * If the predicate is not provided and there are multiple elements that satisfy the predicate,\n * the first element in the returned ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    index++;\n  }\n  result.push(max);\n  while (index < arr.length) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    index++;\n  }\n  result.push(max);\n  return result;\n};\n\nexport { maximum, maximumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  result.push(min);\n  while (index < arr.length) {\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  result.push(min);\n  return result;\n};\n\nexport { minimum, minimumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 10, 2, 6, 4, 8, 9], k = 2\n      Output: [10, 6, 8, 9]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 10, 2, 6, 4, 8, 9], k = 1\n      Output: [1, 5, 3, 10, 2, 6, 4, 8, 9]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] > largest) {\n      largest = arr[index];\n    }\n    index++;\n  }\n  result.push(largest);\n  while (index < arr.length) {\n    if (arr[index] > largest) {\n      largest = arr[index];\n    }\n    index++;\n  }\n  result.push(largest);\n  return result;\n};\n\nexport { kLargest, kLargestSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 10, 2, 6, 4, 8, 9], k = 2\n      Output: [1, 2, 3, 4, 6, 8, 9]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 10, 2, 6, 4, 8, 9], k = 1\n      Output: [1, 5, 3, 10, 2, 6, 4, 8, 9]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] < smallest) {\n      smallest = arr[index];\n    }\n    index++;\n  }\n  result.push(smallest);\n  while (index < arr.length) {\n    if (arr[index] < smallest) {\n      smallest = arr[index];\n    }\n    index++;\n  }\n  result.push(smallest);\n  return result;\n};\n\nexport { kSmallest, kSmallestSorted };\n\n/*\n  Given an array arr of integers sorted in ascending order, \n  return a new array with the largest and smallest numbers removed.\n\n  Example 1:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 2]\n\n  Example 2:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15, 3]\n\n  Example 3:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15]\n\n  Note:\n      1. You may assume the given array does not contain duplicates.\n      2. You can modify the input array in-place with O(1) extra memory.\n  */\nconst removeSmallestAndLargest = (arr) => {\n  const result = [];\n  let largest = arr[0];\n  let smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  result.push(smallest);\n  result.push(largest);\n  return result;\n};\n\nexport { removeSmallestAndLargest, removeSmallestAndLargestSorted };\n\n/*\n  Given an array arr of integers sorted in ascending order, \n  return a new array with the largest number removed.\n\n  Example 1:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15, 3]\n\n  Example 2:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15]\n\n  Example 3:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15]\n\n  Note:\n      1. You may assume the given array does not contain duplicates.\n      2. You can modify the input array in-place with O(1) extra memory.\n  */\nconst removeLargest = (arr) => {\n  const result = [];\n  let largest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  result.push(largest);\n  return result;\n};\n\nexport { removeLargest, removeLargestSorted };\n\n/*\n  Given an array arr of integers sorted in ascending order, \n  return a new array with the smallest number removed.\n\n  Example 1:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15, 3]\n\n  Example 2:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15]\n\n  Example 3:\n\n      Input: [1, 5, 10, 15, 3, 2]\n      Output: [1, 5, 10, 15]\n\n  Note:\n      1. You may assume the given array does not contain duplicates.\n      2. You can modify the input array in-place with O(1) extra memory.\n  */\nconst removeSmallest = (arr) => {\n  const result = [];\n  let smallest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index.\n\n  Examples\n  productExceptIndex([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1]);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 2.\n\n  Examples\n  productExceptIndex2([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex2([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex2([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex2 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 2);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 3.\n\n  Examples\n  productExceptIndex3([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex3([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex3([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex3 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 3);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 4.\n\n  Examples\n  productExceptIndex4([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex4([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex4([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex4 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 4);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 5.\n\n  Examples\n  productExceptIndex5([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex5([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex5([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex5 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 5);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 6.\n\n  Examples\n  productExceptIndex6([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex6([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex6([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex6 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 6);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 7.\n\n  Examples\n  productExceptIndex7([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex7([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex7([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex7 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 7);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 8.\n\n  Examples\n  productExceptIndex8([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex8([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex8([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex8 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 8);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 9.\n\n  Examples\n  productExceptIndex9([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex9([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex9([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex9 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 9);\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list of integers such that each element is the product of all the numbers in the original list except the one at that index and multiplied by 10.\n\n  Examples\n  productExceptIndex10([5, 8, 7, 1]) ==> [120, 73, 24]\n  productExceptIndex10([3, 3, 3, 3, 3]) ==> [9, 9, 9, 9, 9]\n  productExceptIndex10([30, 13, 24, 321]) ==> [30, 24, 321]\n  */\nconst productExceptIndex10 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    newList.push(lst[i] * lst[lst.length - i - 1] * 10);\n  }\n  return newList;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber > 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber > 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber > 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatzDesc = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber > 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber > 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    collatz.push(currentNumber);\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 16, 8, 4, 2, 1] # the collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatzDesc = (n) => {\n  let collatz = [];\n  let currentNumber = n;\n  while (currentNumber > 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArrayLength = dateArray.length;\n  const dateArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return false;\n    }\n    map.set(key, true);\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return true;\n    }\n    map.set(key, true);\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of the\n  same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return true;\n    }\n    map.set(key, true);\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of the\n  same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return true;\n    }\n    map.set(key, true);\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrAsc([5]) ➞ false\n  isSortedOrAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrAsc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrAsc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return true;\n    }\n    map.set(key, true);\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return true;\n    }\n    map.set(key, true);\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrAsc([5]) ➞ false\n  isSortedOrAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedOrAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrAsc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedOrAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedOrAsc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i];\n    if (map.has(key)) {\n      return true;\n    }\n    map.set(key, true);\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start2 >= start1 && end2 <= end1) return \"YES\"\n  if (start1 <= start2 && end1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 3, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"YES\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start2 >= start1 && end2 <= end1) return \"YES\"\n  if (start1 <= start2 && end1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (-1, 1)\n  which its length is 1, which a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"YES\"\n  difference((-3, -1), (-5, 5)) ==> \"NO\"\n  */\nconst difference = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start2 >= start1 && end2 <= end1) return \"NO\"\n  if (start1 <= start2 && end1 >= end2) return \"NO\"\n  return \"YES\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of the two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 3, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"YES\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst unionOfTwoIntervals = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start2 >= start1 && end2 <= end1) return \"YES\"\n  if (start1 <= start2 && end1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of the two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersectionOfTwoIntervals = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start2 >= start1 && end2 <= end1) return \"YES\"\n  if (start1 <= start2 && end1 >= end2) return \"YES\"\n  return \"NO\"\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of the two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 3, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV2 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV3 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV4 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV5 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV6 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV7 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV8 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV9 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV10 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsV11 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSign", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {\n        if (grid[i][j] < grid[i][k]) {\n          min = grid[i][j];\n          minIndex = k;\n        }\n      }\n\n      if (min > M[minIndex]) {\n        M[minIndex] = min;\n        visited[minIndex] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (!visited[i]) {\n      result.push(grid[i][0]);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {\n        if (grid[i][j] < grid[i][k]) {\n          min = grid[i][j];\n          minIndex = k;\n        }\n      }\n\n      if (min > M[minIndex]) {\n        M[minIndex] = min;\n        visited[minIndex] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (!visited[i]) {\n      result.push(grid[i][0]);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {\n        if (grid[i][j] < grid[i][k]) {\n          min = grid[i][j];\n          minIndex = k;\n        }\n      }\n\n      if (min > M[minIndex]) {\n        M[minIndex] = min;\n        visited[minIndex] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (!visited[i]) {\n      result.push(grid[i][0]);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {\n        if (grid[i][j] < grid[i][k]) {\n          min = grid[i][j];\n          minIndex = k;\n        }\n      }\n\n      if (min > M[minIndex]) {\n        M[minIndex] = min;\n        visited[minIndex] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (!visited[i]) {\n      result.push(grid[i][0]);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {\n        if (grid[i][j] < grid[i][k]) {\n          min = grid[i][j];\n          minIndex = k;\n        }\n      }\n\n      if (min > M[minIndex]) {\n        M[minIndex] = min;\n        visited[minIndex] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (!visited[i]) {\n      result.push(grid[i][0]);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {\n        if (grid[i][j] < grid[i][k]) {\n          min = grid[i][j];\n          minIndex = k;\n        }\n      }\n\n      if (min > M[minIndex]) {\n        M[minIndex] = min;\n        visited[minIndex] = true;\n      }\n    }\n  }\n\n  for (let i = 0; i < N; i++) {\n    if (!visited[i]) {\n      result.push(grid[i][0]);\n    }\n  }\n\n  return result;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const result = [];\n\n  for (let i = 0; i < N; i++) {\n    M[i] = grid[i].length;\n  }\n\n  M[0] = 0;\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < M[i]; j++) {\n      if (visited[j]) {\n        continue;\n      }\n\n      let min = 0;\n      let minIndex = 0;\n\n      for (let k = 0; k < M[i]; k++) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * a > b\n * \n * >>> leastCommonMultiple(7, 5)\n * 21\n * >>> leastCommonMultiple(7, 10)\n * 40\n * >>> leastCommonMultiple(7, 15)\n * 35\n * >>> leastCommonMultiple(7, 20)\n * 40\n * >>> leastCommonMultiple(7, 25)\n * 40\n * >>> leastCommonMultiple(7, 30)\n * 40\n * >>> leastCommonMultiple(7, 35)\n * 40\n * >>> leastCommonMultiple(7, 40)\n * 40\n * >>> leastCommonMultiple(7, 45)\n * 40\n * >>> leastCommonMultiple(7, 50)\n * 40\n * >>> leastCommonMultiple(7, 55)\n * 40\n * >>> leastCommonMultiple(7, 60)\n * 40\n * >>> leastCommonMultiple(7, 65)\n * 40\n * >>> leastCommonMultiple(7, 70)\n * 40\n * >>> leastCommonMultiple(7, 75)\n * 40\n * >>> leastCommonMultiple(7, 80)\n * 40\n * >>> leastCommonMultiple(7, 85)\n * 40\n * >>> leastCommonMultiple(7, 90)\n * 40\n * >>> leastCommonMultiple(7, 95)\n * 40\n * >>> leastCommonMultiple(7, 100)\n * 40\n * >>> leastCommonMultiple(7, 105)\n * 40\n * >>> leastCommonMultiple(7, 110)\n * 40\n * >>> leastCommonMultiple(7, 115)\n * 40\n * >>> leastCommonMultiple(7, 120)\n * 40\n * >>> leastCommonMultiple(7, 125)\n * 40\n * >>> leastCommonMultiple(7, 130)\n * 40\n * >>> leastCommonMultiple(7, 135)\n * 40\n * >>> leastCommonMultiple(7, 140)\n * 40\n * >>> leastCommonMultiple(7, 145)\n * 40\n * >>> leastCommonMultiple(7, 150)\n * 40\n * >>> leastCommonMultiple(7, 155)\n * 40\n * >>> leastCommonMultiple(7, 160)\n * 40\n * >>> leastCommonMultiple(7, 165)\n * 40\n * >>> leastCommonMultiple(7, 170)\n * 40\n * >>> leastCommonMultiple(7, 175)\n * 40\n * >>> leastCommonMultiple(7, 180)\n * 40\n * >>> leastCommonMultiple(7, 185)\n * 40\n * >>> leastCommonMultiple(7, 190)\n * 40\n * >>> leastCommonMultiple(7, 195)\n * 40\n * >>> leastCommonMultiple(7, 200)\n * 40\n * >>> leastCommonMultiple(7, 205)\n * 40\n * >>> leastCommonMultiple(7, 210)\n * 40\n * >>> leastCommonMultiple(7, 215)\n * 40\n * >>> leastCommonMultiple(7, 220)\n * 40\n * >>> leastCommonMultiple(7, 225)\n * 40\n * >>> leastCommonMultiple(7, 230)\n * 40\n * >>> leastCommonMultiple(7, 235)\n * 40\n * >>> leastCommonMultiple(7, 240)\n * 40\n * >>> leastCommonMultiple(7, 245)\n * 40\n * >>> leastCommonMultiple(7, 250)\n * 40\n * >>> leastCommonMultiple(7, 255)\n * 40\n * >>> leastCommonMultiple(7, 265)\n * 40\n * >>> leastCommonMultiple(7, 270)\n * 40\n * >>> leastCommonMultiple(7, 275)\n * 40\n * >>> leastCommonMultiple(7, 280)\n * 40\n * >>> leastCommonMultiple(7, 285)\n * 40\n * >>> leastCommonMultiple(7, 290)\n * 40\n * >>> leastCommonMultiple(7, 295)\n * 40\n * >>> leastCommonMultiple(7, 300)\n * 40\n * >>> leastCommonMultiple(7, 305)\n * 40\n * >>> leastCommonMultiple(7, 310)\n * 40\n * >>> leastCommonMultiple(7, 315)\n * 40\n * >>> leastCommonMultiple(7, 320)\n * 40\n * >>> leastCommonMultiple(7, 325)\n * 40\n * >>> leastCommonMultiple(7, 330)\n * 40\n * >>> leastCommonMultiple(7, 335)\n * 40\n * >>> leastCommonMultiple(7, 340)\n * 40\n * >>> leastCommonMultiple(7, 345)\n * 40\n * >>> leastCommonMultiple(7, 350)\n * 40\n * >>> leastCommonMultiple(7, 355)\n * 40\n * >>> leastCommonMultiple(7, 360)\n * 40\n * >>> leastCommonMultiple(7, 365)\n * 40\n * >>> leastCommonMultiple(7, 370)\n * 40\n * >>> leastCommonMultiple(7, 375)\n * 40\n * >>> leastCommonMultiple(7, 380)\n * 40\n * >>> leastCommonMultiple(7, 385)\n * 40\n * >>> leastCommonMultiple(7, 390)\n * 40\n * >>> leastCommonMultiple(7, 395)\n * 40\n * >>> leastCommonMultiple(7, 400)\n * 40\n * >>> leastCommonMultiple(7, 405)\n * 40\n * >>> leastCommonMultiple(7, 410)\n * 40\n * >>> leastCommonMultiple(7, 415)\n * 40\n * >>> leastCommonMultiple(7, 420)\n * 40\n * >>> leastCommonMultiple(7, 425)\n * 40\n * >>> leastCommonMultiple(7, 430)\n * 40\n * >>> leastCommonMultiple(7, 435)\n * 40\n * >>> leastCommonMultiple(7, 440)\n * 40\n * >>> leastCommonMultiple(7, 445)\n * 40\n * >>> leastCommonMultiple(7, 450)\n * 40\n * >>> leastCommonMultiple(7, 455)\n * 40\n * >>> leastCommonMultiple(7, 460)\n * 40\n * >>> leastCommonMultiple(7, 465)\n * 40\n * >>> leastCommonMultiple(7, 470)\n * 40\n * >>> leastCommonMultiple(7, 475)\n * 40\n * >>> leastCommonMultiple(7, 480)\n * 40\n * >>> leastCommonMultiple(7, 485)\n * 40\n * >>> leastCommonMultiple(7, 490)\n * 40\n * >>> leastCommonMultiple(7, 495)\n * 40\n * >>> leastCommonMultiple(7, 500)\n * 40\n * >>> leastCommonMultiple(7, 505)\n * 40\n * >>> leastCommonMultiple(7, 510)\n * 40\n * >>> leastCommonMultiple(7, 515)\n * 40\n * >>> leastCommonMultiple(7, 520)\n * 40\n * >>> leastCommonMultiple(7, 525)\n * 40\n * >>> leastCommonMultiple(7, 530)\n * 40\n * >>> leastCommonMultiple(7, 535)\n * 40\n * >>> leastCommonMultiple(7, 540)\n * 40\n * >>> leastCommonMultiple(7, 545)\n * 40\n * >>> leastCommonMultiple(7, 550)\n * 40\n * >>> leastCommonMultiple(7, 555)\n * 40\n * >>> leastCommonMultiple(7, 560)\n * 40\n * >>> leastCommonMultiple(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    return arr;\n  }\n  arr.push(1);\n  arr.push(n / 2);\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all the \n  numbers of the Fibonacci sequence up to and including n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(5) = [1, 2, 3, 5, 8, 13]\n  fib(6) = [1, 2, 3, 5, 8, 13, 21]\n  fib(7) = [1, 2, 3, 5, 8, 13, 21, 34]\n  fib(8) = [1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(9) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(10) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n  fib(11) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n  fib(12) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n  fib(13) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n  fib(14) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n  fib(15) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593]\n  fib(16) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584]\n  fib(17) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181]\n  fib(18) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765]\n  fib(19) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946]\n  fib(20) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711]\n  fib(21) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657]\n  fib(22) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368]\n  fib(23) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025]\n  fib(24) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393]\n  fib(25) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418]\n  fib(26) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811]\n  fib(27) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]\n  fib(28) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n  fib(29) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269]\n  fib(30) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309]\n  fib(31) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578]\n  fib(32) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]\n  fib(33) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 8375904]\n  fib(34) = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1593, 2584, 4181, 6765, 10946, 17711, 28657, 4636", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i -= 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1\n  digits(235) == 13\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 2\n  digits(235) == 26\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 6\n  digits(235) == 42\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 156\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 312\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 48\n  digits(235) == 576\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 96\n  digits(235) == 1120\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 192\n  digits(235) == 2168\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 9.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 384\n  digits(235) == 3072\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 10.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 576\n  digits(235) == 5120\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 11.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 768\n  digits(235) == 7680\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 12.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 896\n  digits(235) == 8960\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 13.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1024\n  digits(235) == 10256\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 14.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1296\n  digits(235) == 12960\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 14;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 15.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1536\n  digits(235) == 15360\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 15;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 16.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1792\n  digits(235) == 17960\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 16;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 17.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let openingBracketsCount = 0;\n  let closingBracketsCount = 0;\n  let openingBracketsString = '';\n  let closingBracketsString = '';\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      openingBracketsCount++;\n      openingBracketsString += char;\n    } else if (char === ']') {\n      closingBracketsCount++;\n      closingBracketsString += char;\n    } else if (char === '[' && openingBracketsCount > 0) {\n      openingBracketsCount--;\n      openingBracketsString += char;\n    } else if (char === ']' && closingBracketsCount > 0) {\n      closingBracketsCount--;\n      closingBracketsString += char;\n    } else if (char === '[' && openingBracketsCount === 0 && closingBracketsCount === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.push(openingBracketsString);\n      openingBracketsString = '';\n      closingBracketsString = '';\n    } else if (char === ']' && openingBracketsCount === 0 && closingBracketsCount === 0) {\n      if (stack.length > 0) {\n        openingBracketsString = stack.pop();\n        closingBracketsString = stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n\n  if (openingBracketsCount > closingBracketsCount) {\n    return true;\n  }\n\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let openingBracketsCount = 0;\n  let closingBracketsCount = 0;\n  let openingBracketsString = '';\n  let closingBracketsString = '';\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      openingBracketsCount++;\n      openingBracketsString += char;\n    } else if (char === ']') {\n      closingBracketsCount++;\n      closingBracketsString += char;\n    } else if (char === '[' && openingBracketsCount > 0) {\n      openingBracketsCount--;\n      openingBracketsString += char;\n    } else if (char === ']' && closingBracketsCount > 0) {\n      closingBracketsCount--;\n      closingBracketsString += char;\n    } else if (char === '[' && openingBracketsCount === 0 && closingBracketsCount === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.push(openingBracketsString);\n      openingBracketsString = '';\n      closingBracketsString = '';\n    } else if (char === ']' && openingBracketsCount === 0 && closingBracketsCount === 0) {\n      if (stack.length > 0) {\n        openingBracketsString = stack.pop();\n        closingBracketsString = stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n\n  if (openingBracketsCount > closingBracketsCount) {\n    return true;\n  }\n\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let openingBracketsCount = 0;\n  let closingBracketsCount = 0;\n  let openingBracketsString = '';\n  let closingBracketsString = '';\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      openingBracketsCount++;\n      openingBracketsString += char;\n    } else if (char === ']') {\n      closingBracketsCount++;\n      closingBracketsString += char;\n    } else if (char === '[' && openingBracketsCount > 0) {\n      openingBracketsCount--;\n      openingBracketsString += char;\n    } else if (char === ']' && closingBracketsCount > 0) {\n      closingBracketsCount--;\n      closingBracketsString += char;\n    } else if (char === '[' && openingBracketsCount === 0 && closingBracketsCount === 0) {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.push(openingBracketsString);\n      openingBracketsString = '';\n      closingBracketsString = '';\n    } else if (char === ']' && openingBracketsCount === 0 && closingBracketsCount === 0) {\n      if (stack.length > 0) {\n        openingBracketsString = stack.pop();\n        closingBracketsString = stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n\n  if (openingBracketsCount > closingBracketsCount) {\n    return true;\n  }\n\n  return false;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let openingBracketsCount = 0;\n  let closingBracketsCount = 0;\n  let openingBracketsString = '';\n  let closingBracketsString = '';\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n\n    if (char === '[') {\n      openingBracketsCount++;\n      openingBracket", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[0-9]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[!,.?]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[#,$,%,&,*,+,=,-,^,/,_,~]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-zA-Z0-9]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-zA-Z0-9]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-zA-Z0-9]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-zA-Z0-9]/i);\n  return!lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a word character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALet", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the average of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  average([1,2,3,4,5,6]) = 2.5\n  average([1,2,3]) = 0\n  */\nconst average = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\n/*Create a function which returns the median of an array of numbers. The\n  given array will not contain duplicate values.\n\n  Examples:\n  median([1,2,3,4,5,6]) = 3\n  median([1,2,3]) = 0\n  */\nconst median = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let midIndex = Math.floor(sortedArr.length / 2);\n  return sortedArr[midIndex];\n};\n\n/*Create a function which returns an array of all positive integers less\n  than or equal to the given number. The given number will not be greater\n  than or equal to 0.\n\n  Examples:\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  */\nconst range = (num) => {\n  let arr = [];\n  for (let i = 0; i <= num; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Create a function which returns an array of all positive integers greater\n  than or equal to the given number. The given number will not be less\n  than or equal to 0.\n\n  Examples:\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  range(10) = [0,1,2,3,4,5,6,7,8,9]\n  */\nconst range = (num) => {\n  let arr = [];\n  for (let i = num; i >= 0; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Create a function which returns an array of all even numbers in the\n  given array. The given array will not contain duplicate values.\n\n  Examples:\n  evens([1,2,3,4,5,6]) = [2,4,6]\n  evens([1,2,3]) = [2,3]\n  */\nconst evens = (arr) => {\n  let evenArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n    }\n  }\n  return evenArr;\n};\n\n/*Create a function which returns an array of all odd numbers in the\n  given array. The given array will not contain duplicate values.\n\n  Examples:\n  odds([1,2,3,4,5,6]) = [1,3,5]\n  odds([1,2,3]) = [1,3]\n  */\nconst odds = (arr) => {\n  let oddArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      oddArr.push(arr[i]);\n    }\n  }\n  return oddArr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 7. The given array will not contain duplicate\n  values.\n\n  Examples:\n  divisibleBy7([1,2,3,4,5,6]) = [2,4,6,8]\n  divisibleBy7([1,2,3]) = [1,3]\n  */\nconst divisibleBy7 = (arr) => {\n  let divisibleBy7Arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 7 === 0) {\n      divisibleBy7Arr.push(arr[i]);\n    }\n  }\n  return divisibleBy7Arr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 3. The given array will not contain duplicate\n  values.\n\n  Examples:\n  divisibleBy3([1,2,3,4,5,6]) = [1,3,5]\n  divisibleBy3([1,2,3]) = [1,3]\n  */\nconst divisibleBy3 = (arr) => {\n  let divisibleBy3Arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0) {\n      divisibleBy3Arr.push(arr[i]);\n    }\n  }\n  return divisibleBy3Arr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 5. The given array will not contain duplicate\n  values.\n\n  Examples:\n  divisibleBy5([1,2,3,4,5,6]) = [1,3,5]\n  divisibleBy5([1,2,3]) = [1,3]\n  */\nconst divisibleBy5 = (arr) => {\n  let divisibleBy5Arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 5 === 0) {\n      divisibleBy5Arr.push(arr[i]);\n    }\n  }\n  return divisibleBy5Arr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 11. The given array will not contain duplicate\n  values.\n\n  Examples:\n  divisibleBy11([1,2,3,4,5,6]) = [1,3,5,7,9]\n  divisibleBy11([1,2,3]) = [1,3]\n  */\nconst divisibleBy11 = (arr) => {\n  let divisibleBy11Arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 11 === 0) {\n      divisibleBy11Arr.push(arr[i]);\n    }\n  }\n  return divisibleBy11Arr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 13. The given array will not contain duplicate\n  values.\n\n  Examples:\n  divisibleBy13([1,2,3,4,5,6]) = [1,3,5,7,9]\n  divisibleBy13([1,2,3]) = [1,3]\n  */\nconst divisibleBy13 = (arr) => {\n  let divisibleBy13Arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 13 === 0) {\n      divisibleBy13Arr.push(arr[i]);\n    }\n  }\n  return divisibleBy13Arr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 17. The given array will not contain duplicate\n  values.\n\n  Examples:\n  divisibleBy17([1,2,3,4,5,6]) = [1,3,5,7,9]\n  divisibleBy17([1,2,3]) = [1,3]\n  */\nconst divisibleBy17 = (arr) => {\n  let divisibleBy17Arr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 17 === 0) {\n      divisibleBy17Arr.push(arr[i]);\n    }\n  }\n  return divisibleBy17Arr;\n};\n\n/*Create a function which returns an array of all numbers in the given\n  array which are divisible by 19. The given array ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => Math.min(min, x), 0);\n  return [maxPositiveInteger, minNegativeInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers2 = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => Math.min(min, x), 0);\n  return [minNegativeInteger, maxPositiveInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers3 = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => Math.min(min, x), 0);\n  return [minNegativeInteger, maxPositiveInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers4 = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => Math.min(min, x), 0);\n  return [minNegativeInteger, maxPositiveInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers5 = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => Math.min(min, x), 0);\n  return [minNegativeInteger, maxPositiveInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers6 = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => Math.min(min, x), 0);\n  return [minNegativeInteger, maxPositiveInteger];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers7 = (lst) => {\n  const positiveIntegers = lst.filter(x => x >= 0);\n  const negativeIntegers = lst.filter(x => x < 0);\n  if (positiveIntegers.length === 0 && negativeIntegers.length === 0) {\n    return null;\n  }\n  if (positiveIntegers.length === 0) {\n    return positiveIntegers[0];\n  }\n  if (negativeIntegers.length === 0) {\n    return negativeIntegers[0];\n  }\n  const maxPositiveInteger = positiveIntegers.reduce((max, x) => Math.max(max, x), 0);\n  const minNegativeInteger = negativeIntegers.reduce((min, x) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\" || b === \".\") return null\n  if (a === \",\" || b === \",\") return null\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"-\" || b === \"-\") return null\n  if (a === \"+\" || b === \"+\") return null\n  if (a === \".1\") return b\n  if (b === \".1\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\" || b === \"2\") return null\n  if (a === \"3\" || b === \"3\") return null\n  if (a === \"4\" || b === \"4\") return null\n  if (a === \"5\" || b === \"5\") return null\n  if (a === \"6\" || b === \"6\") return null\n  if (a === \"7\" || b === \"7\") return null\n  if (a === \"8\" || b === \"8\") return null\n  if (a === \"9\" || b === \"9\") return null\n  if (a === \"10\" || b === \"10\") return null\n  if (a === \"11\" || b === \"11\") return null\n  if (a === \"12\" || b === \"12\") return null\n  if (a === \"13\" || b === \"13\") return null\n  if (a === \"14\" || b === \"14\") return null\n  if (a === \"15\" || b === \"15\") return null\n  if (a === \"16\" || b === \"16\") return null\n  if (a === \"17\" || b === \"17\") return null\n  if (a === \"18\" || b === \"18\") return null\n  if (a === \"19\" || b === \"19\") return null\n  if (a === \"20\" || b === \"20\") return null\n  if (a === \"21\" || b === \"21\") return null\n  if (a === \"22\" || b === \"22\") return null\n  if (a === \"23\" || b === \"23\") return null\n  if (a === \"24\" || b === \"24\") return null\n  if (a === \"25\" || b === \"25\") return null\n  if (a === \"26\" || b === \"26\") return null\n  if (a === \"27\" || b === \"27\") return null\n  if (a === \"28\" || b === \"28\") return null\n  if (a === \"29\" || b === \"29\") return null\n  if (a === \"30\" || b === \"30\") return null\n  if (a === \"31\" || b === \"31\") return null\n  if (a === \"32\" || b === \"32\") return null\n  if (a === \"33\" || b === \"33\") return null\n  if (a === \"34\" || b === \"34\") return null\n  if (a === \"35\" || b === \"35\") return null\n  if (a === \"36\" || b === \"36\") return null\n  if (a === \"37\" || b === \"37\") return null\n  if (a === \"38\" || b === \"38\") return null\n  if (a === \"39\" || b === \"39\") return null\n  if (a === \"40\" || b === \"40\") return null\n  if (a === \"41\" || b === \"41\") return null\n  if (a === \"42\" || b === \"42\") return null\n  if (a === \"43\" || b === \"43\") return null\n  if (a === \"44\" || b === \"44\") return null\n  if (a === \"45\" || b === \"45\") return null\n  if (a === \"46\" || b === \"46\") return null\n  if (a === \"47\" || b === \"47\") return null\n  if (a === \"48\" || b === \"48\") return null\n  if (a === \"49\" || b === \"49\") return null\n  if (a === \"50\" || b === \"50\") return null\n  if (a === \"51\" || b === \"51\") return null\n  if (a === \"52\" || b === \"52\") return null\n  if (a === \"53\" || b === \"53\") return null\n  if (a === \"54\" || b === \"54\") return null\n  if (a === \"55\" || b === \"55\") return null\n  if (a === \"56\" || b === \"56\") return null\n  if (a === \"57\" || b === \"57\") return null\n  if (a === \"58\" || b === \"58\") return null\n  if (a === \"59\" || b === \"59\") return null\n  if (a === \"60\" || b === \"60\") return null\n  if (a === \"61\" || b === \"61\") return null\n  if (a === \"62\" || b === \"62\") return null\n  if (a === \"63\" || b === \"63\") return null\n  if (a === \"64\" || b === \"64\") return null\n  if (a === \"65\" || b === \"65\") return null\n  if (a === \"66\" || b === \"66\") return null\n  if (a === \"67\" || b === \"67\") return null\n  if (a === \"68\" || b === \"68\") return null\n  if (a === \"69\" || b === \"69\") return null\n  if (a === \"70\" || b === \"70\") return null\n  if (a === \"71\" || b === \"71\") return null\n  if (a === \"72\" || b === \"72\") return null\n  if (a === \"73\" || b === \"73\") return null\n  if (a === \"74\" || b === \"74\") return null\n  if (a === \"75\" || b === \"75\") return null\n  if (a === \"76\" || b === \"76\") return null\n  if (a === \"77\" || b === \"77\") return null\n  if (a === \"78\" || b === \"78\") return null\n  if (a === \"79\" || b === \"79\") return null\n  if (a === \"80\" || b === \"80\") return null\n  if (a === \"81\" || b === \"81\") return null\n  if (a === \"82\" || b === \"82\") return null\n  if (a === \"83\" || b === \"83\") return null\n  if (a === \"84\" || b === \"84\") return null\n  if (a === \"85\" || b === \"85\") return null\n  if (a === \"86\" || b === \"86\") return null\n  if (a === \"87\" || b === \"87\") return null\n  if (a === \"88\" || b === \"88\") return null\n  if (a === \"89\" || b === \"89\") return null\n  if (a === \"90\" || b === \"90\") return null\n  if (a === \"91\" || b === \"91\") return null\n  if (a === \"92\" || b === \"92\") return null\n  if (a === \"93\" || b === \"93\") return null\n  if (a === \"94\" || b === \"94\") return null\n  if (a === \"95\" || b === \"95\") return null\n  if (a === \"96\" || b === \"96\") return null\n  if (a === \"97\" || b === \"97\") return null\n  if (a === \"98\" || b === \"98\") return null\n  if (a === \"99\" || b === \"99\") return null\n  if (a === \"100\" || b === \"100\") return null\n  if (a === \"101\" || b === \"101\") return null\n  if (a === \"102\" || b === \"102\") return null\n  if (a === \"103\" || b === \"103\") return null\n  if (a === \"104\" || b === \"104\") return null\n  if (a === \"105\" || b === \"105\") return null\n  if (a === \"106\" || b === \"106\") ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive numbers\n  Example\n  isEqualToSum(8) == true\n  isEqualToSum(10) == true\n  isEqualToSum(12) == false\n  */\nconst isEqualToSum = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 negative numbers\n  Example\n  isEqualToSumNeg(8) == true\n  isEqualToSumNeg(10) == true\n  isEqualToSumNeg(12) == false\n  */\nconst isEqualToSumNeg = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive numbers\n  Example\n  isEqualToSumPositive(8) == true\n  isEqualToSumPositive(10) == true\n  isEqualToSumPositive(12) == false\n  */\nconst isEqualToSumPositive = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 negative numbers\n  Example\n  isEqualToSumNegative(8) == true\n  isEqualToSumNegative(10) == true\n  isEqualToSumNegative(12) == false\n  */\nconst isEqualToSumNegative = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive numbers\n  Example\n  isEqualToSumPositive(16) == true\n  isEqualToSumPositive(18) == true\n  isEqualToSumPositive(20) == false\n  */\nconst isEqualToSumPositive16 = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 negative numbers\n  Example\n  isEqualToSumNegative(16) == true\n  isEqualToSumNegative(18) == true\n  isEqualToSumNegative(20) == false\n  */\nconst isEqualToSumNegative16 = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive numbers\n  Example\n  isEqualToSumPositive(32) == true\n  isEqualToSumPositive(36) == true\n  isEqualToSumPositive(40) == false\n  */\nconst isEqualToSumPositive32 = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 negative numbers\n  Example\n  isEqualToSumNegative(32) == true\n  isEqualToSumNegative(36) == true\n  isEqualToSumNegative(40) == false\n  */\nconst isEqualToSumNegative32 = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return true;\n  if (n % 16 === 0) return true;\n  if (n % 32 === 0) return true;\n  if (n % 64 === 0) return true;\n  if (n % 128 === 0) return true;\n  if (n % 256 === 0) return true;\n  if (n % 512 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 64 positive numbers\n  Example\n  isEqualToSumPositive(64) == true\n  isEqualToSumPositive(68) == true\n  isEqualToSumPositive(72) == false\n  */\nconst isEqualToSumPositive64 = (n) => {\n  if (n === 0) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 8 === 0) return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the sum\n  of the factorials of the numbers from 1 to that number.\n*/\nconst sumOfFactorials = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the product\n  of the factorials of the numbers from 1 to that number.\n*/\nconst productOfFactorials = (num) => {\n  let factorial = 1;\n  for (let i = 1; i <= num; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number.\n*/\nconst numberOfDivisors = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThan = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThan = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualTo = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThanOrEqualTo = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualToAndNotDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThanOrEqualToAndNotDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualToAndDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThanOrEqualToAndDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualToAndDivisibleByAndNotDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThanOrEqualToAndDivisibleByAndNotDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualToAndDivisibleByAndDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThanOrEqualToAndDivisibleByAndDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualToAndDivisibleByAndDivisibleByAndNotDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are greater than that number.\n*/\nconst numberOfDivisorsGreaterThanOrEqualToAndDivisibleByAndDivisibleByAndNotDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the number\n  of divisors of that number that are less than or equal to that number.\n*/\nconst numberOfDivisorsLessThanOrEqualToAndDivisibleByAndDivisibleByAndDivisibleBy = (num) => {\n  let divisors = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*\n  A function that will receive a number as input and will return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    prefixes.push(char);\n    if (i > 0) {\n      prefixes.push(string.substr(0, i));\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.substr(i, 1);\n    suffixes.push(char);\n    if (i < string.length - 1) {\n      suffixes.push(string.substr(i + 1));\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 2)\n  ['ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 3)\n  ['abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 4)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 5)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 6)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 7)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 8)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 9)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 10)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 11)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 12)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 13)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 14)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc', 15)\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string, length) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    substrings.push(char);\n    if (i > 0) {\n      substrings.push(string.substr(0, i));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Given a string text, replace all dashes with underscores, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with - \n  \n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\" Example 2\") == \"Example_2\"\n  fixDashes(\" Example   3\") == \"Example_3\"\n  */\nconst fixDashes = (text) => {\n  return text.replace(/-/g, \"_\");\n};\n\n/*\n  Given a string text, replace all commas with underscores, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with - \n  \n  fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example_1\"\n  fixCommas(\" Example 2\") == \"Example_2\"\n  fixCommas(\" Example   3\") == \"Example_3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, \"_\");\n};\n\n/*\n  Given a string text, replace all periods with underscores, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with - \n  \n  fixPeriods(\"Example\") == \"Example\"\n  fixPeriods(\"Example 1\") == \"Example_1\"\n  fixPeriods(\" Example 2\") == \"Example_2\"\n  fixPeriods(\" Example   3\") == \"Example_3\"\n  */\nconst fixPeriods = (text) => {\n  return text.replace(/\\./g, \"_\");\n};\n\n/*\n  Given a string text, replace all question marks with underscores, \n  and if a string has more than 2 consecutive question marks, \n  then replace all consecutive question marks with - \n  \n  fixQuestionMarks(\"Example\") == \"Example\"\n  fixQuestionMarks(\"Example 1\") == \"Example_1\"\n  fixQuestionMarks(\" Example 2\") == \"Example_2\"\n  fixQuestionMarks(\" Example   3\") == \"Example_3\"\n  */\nconst fixQuestionMarks = (text) => {\n  return text.replace(/?/g, \"_\");\n};\n\n/*\n  Given a string text, replace all exclamation marks with underscores, \n  and if a string has more than 2 consecutive exclamation marks, \n  then replace all consecutive exclamation marks with - \n  \n  fixExclamationMarks(\"Example\") == \"Example\"\n  fixExclamationMarks(\"Example 1\") == \"Example_1\"\n  fixExclamationMarks(\" Example 2\") == \"Example_2\"\n  fixExclamationMarks(\" Example   3\") == \"Example_3\"\n  */\nconst fixExclamationMarks = (text) => {\n  return text.replace(/!/g, \"_\");\n};\n\n/*\n  Given a string text, replace all colons with underscores, \n  and if a string has more than 2 consecutive colons, \n  then replace all consecutive colons with - \n  \n  fixColons(\"Example\") == \"Example\"\n  fixColons(\"Example 1\") == \"Example_1\"\n  fixColons(\" Example 2\") == \"Example_2\"\n  fixColons(\" Example   3\") == \"Example_3\"\n  */\nconst fixColons = (text) => {\n  return text.replace(/:/g, \"_\");\n};\n\n/*\n  Given a string text, replace all semicolons with underscores, \n  and if a string has more than 2 consecutive semicolons, \n  then replace all consecutive semicolons with - \n  \n  fixSemicolons(\"Example\") == \"Example\"\n  fixSemicolons(\"Example 1\") == \"Example_1\"\n  fixSemicolons(\" Example 2\") == \"Example_2\"\n  fixSemicolons(\" Example   3\") == \"Example_3\"\n  */\nconst fixSemicolons = (text) => {\n  return text.replace(/;/g, \"_\");\n};\n\n/*\n  Given a string text, replace all commas with underscores, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with underscores, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with commas \n  \n  fixCommasUnderscores(\"Example\") == \"Example\"\n  fixCommasUnderscores(\"Example 1\") == \"Example_1\"\n  fixCommasUnderscores(\" Example 2\") == \"Example_2\"\n  fixCommasUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixCommasUnderscores = (text) => {\n  return text.replace(/,/g, \"_\").replace(/_/g, \"_\");\n};\n\n/*\n  Given a string text, replace all periods with underscores, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with underscores, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with periods \n  \n  fixPeriodsUnderscores(\"Example\") == \"Example\"\n  fixPeriodsUnderscores(\"Example 1\") == \"Example_1\"\n  fixPeriodsUnderscores(\" Example 2\") == \"Example_2\"\n  fixPeriodsUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixPeriodsUnderscores = (text) => {\n  return text.replace(/\\./g, \"_\").replace(/_/g, \"_\");\n};\n\n/*\n  Given a string text, replace all question marks with underscores, \n  and if a string has more than 2 consecutive question marks, \n  then replace all consecutive question marks with underscores, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with question marks \n  \n  fixQuestionMarksUnderscores(\"Example\") == \"Example\"\n  fixQuestionMarksUnderscores(\"Example 1\") == \"Example_1\"\n  fixQuestionMarksUnderscores(\" Example 2\") == \"Example_2\"\n  fixQuestionMarksUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixQuestionMarksUnderscores = (text) => {\n  return text.replace(/?/g, \"_\").replace(/_/g, \"_\");\n};\n\n/*\n  Given a string text, replace all exclamation marks with underscores, \n  and if a string has more than 2 consecutive exclamation marks, \n  then replace all consecutive exclamation marks with underscores, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with exclamation marks \n  \n  fixExclamationMarksUnderscores(\"Example\") == \"Example\"\n  fixExclamationMarksUnderscores(\"Example 1\") == \"Example_1\"\n  fixExclamationMarksUnderscores(\" Example 2\") == \"Example_2\"\n  fixExclamationMarksUnderscores(\" Example   3\") == \"Example_3\"\n  */\nconst fixExclamationMarksUnderscores = (text) => {\n  return text.replace(/!/g, \"_\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.trim();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[a-z][a-z]+$/);\n  const file_name = file_name[0];\n  const file_name = file_name.trim();\n  const file_name = file_name.match(/^[0-9][0-9]$/);\n  const file_name = file_name[0];\n  const file_name = file_name.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquaresAndCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquaresAndCubesAndSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquaresAndCubesAndSquaresAndCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a \n  multiple of 4 and will square if the integer entry is a multiple of 3 and not a multiple of 4. The function will not \n  change the entries in the list whose indexes are not a multiple of 4 or 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -496\n  */\nconst sumCubesAndSquaresAndCubesAndSquaresAndCubesAndSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 4 === 0 && i % 3 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (len === 1) {\n      newArr.push(str);\n    } else {\n      for (let j = 2; j <= len; j++) {\n        if (len % j === 0) {\n          newArr.push(str);\n          break;\n        }\n      }\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction simplify(fraction) {\n  const [numerator, denominator] = fraction.split('/');\n  return numerator === parseInt(numerator) && denominator === parseInt(denominator);\n}\n\nconsole.log(simplify('1/5'));\nconsole.log(simplify('1/6'));\nconsole.log(simplify('7/10'));\nconsole.log(simplify('10/2'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(simplify('10/3'));\nconsole.log(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumA - sumB;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumB - sumA;\n  });\n  return numsSorted", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. For example:\n  specialMax([15, -73, 14, -15]) => -15\n  specialMax([33, -2, -3, 45, 21, 109]) => 45\n  */\nconst specialMax = (nums) => {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. For example:\n  specialMin([15, -73, 14, -15]) => -15\n  specialMin([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMin = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array. For example:\n  specialSum([15, -73, 14, -15]) => -73\n  specialSum([33, -2, -3, 45, 21, 109]) => -26\n  */\nconst specialSum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the average of the numbers in the array. For example:\n  specialAvg([15, -73, 14, -15]) => -7.5\n  specialAvg([33, -2, -3, 45, 21, 109]) => -7.5\n  */\nconst specialAvg = (nums) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the median of the numbers in the array. For example:\n  specialMedian([15, -73, 14, -15]) => -15\n  specialMedian([33, -2, -3, 45, 21, 109]) => 21\n  */\nconst specialMedian = (nums) => {\n  let sorted = nums.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return sorted[middle];\n  }\n  return sorted[middle - 1] + sorted[middle];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the mode of the numbers in the array. For example:\n  specialMode([15, -73, 14, -15]) => -15\n  specialMode([33, -2, -3, 45, 21, 109]) => 21\n  */\nconst specialMode = (nums) => {\n  let mode = 0;\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxCount = 1;\n    } else if (nums[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === max) {\n      if (maxCount > mode) {\n        mode = max;\n      }\n    }\n  }\n  return mode;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the standard deviation of the numbers in the array. For example:\n  specialStDev([15, -73, 14, -15]) => 0\n  specialStDev([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialStDev = (nums) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    sumSquare += nums[i] * nums[i];\n    count++;\n  }\n  let avg = sum / count;\n  let variance = sumSquare / count - avg * avg;\n  return Math.sqrt(variance);\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the variance of the numbers in the array. For example:\n  specialVariance([15, -73, 14, -15]) => 0\n  specialVariance([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialVariance = (nums) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    sumSquare += nums[i] * nums[i];\n    count++;\n  }\n  let avg = sum / count;\n  let variance = sumSquare / count - avg * avg;\n  return variance;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the median absolute deviation of the numbers in the array. For example:\n  specialMedianAbs([15, -73, 14, -15]) => 0\n  specialMedianAbs([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialMedianAbs = (nums) => {\n  let sorted = nums.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return sorted[middle];\n  }\n  return sorted[middle - 1] + sorted[middle];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the median of the numbers in the array. For example:\n  specialMedian([15, -73, 14, -15]) => -15\n  specialMedian([33, -2, -3, 45, 21, 109]) => 21\n  */\nconst specialMedian = (nums) => {\n  let sorted = nums.sort((a, b) => a - b);\n  let middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return sorted[middle];\n  }\n  return sorted[middle - 1] + sorted[middle];\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the mode of the numbers in the array. For example:\n  specialMode([15, -73, 14, -15]) => -15\n  specialMode([33, -2, -3, 45, 21, 109]) => 21\n  */\nconst specialMode = (nums) => {\n  let mode = 0;\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxCount = 1;\n    } else if (nums[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === max) {\n      if (maxCount > mode) {\n        mode = max;\n      }\n    }\n  }\n  return mode;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the standard deviation of the numbers in the array. For example:\n  specialStDev([15, -73, 14, -15]) => 0\n  specialStDev([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst specialStDev = (nums) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    sumSquare += nums[i] * nums[i];\n    count++;\n  }\n  let avg = sum / count;\n  let variance = sumSquare / count - avg * avg;\n  return Math.sqrt(variance);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without using any additional variables. I mean, can we do it in O(n) time complexity?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without using any additional variables. I mean, can we do it in O(n) time complexity?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without using any additional variables. I mean, can we do it in O(n) time complexity?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without using any additional variables. I mean, can we do it in O(n) time complexity?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without using any additional variables. I mean, can we do it in O(n) time complexity?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = a[i] = 0;\n        }\n      }\n    }\n  }\n  return a.length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I wonder if there is a way to do it without using any additional variables. I mean, can we do it in O(n) time complexity?\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any additional variables. But I still think it can be done in O(n) time complexity.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[j] + a[k] + a[i] === 3 * i) {\n          a[j] = a[k] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const planetsOrbits = [\n    [\n      { name: \"Mercury\", orbit: new Orbit(new Date(\"2019/01/01\"), new Date(\"2019/01/02\")) },\n      { name: \"Venus\", orbit: new Orbit(new Date(\"2019/01/02\"), new Date(\"2019/01/03\")) },\n      { name: \"Earth\", orbit: new Orbit(new Date(\"2019/01/03\"), new Date(\"2019/01/04\")) },\n      { name: \"Mars\", orbit: new Orbit(new Date(\"2019/01/04\"), new Date(\"2019/01/05\")) },\n      { name: \"Jupiter\", orbit: new Orbit(new Date(\"2019/01/05\"), new Date(\"2019/01/06\")) },\n      { name: \"Saturn\", orbit: new Orbit(new Date(\"2019/01/06\"), new Date(\"2019/01/07\")) },\n      { name: \"Uranus\", orbit: new Orbit(new Date(\"2019/01/07\"), new Date(\"2019/01/08\")) },\n      { name: \"Neptune\", orbit: new Orbit(new Date(\"2019/01/08\"), new Date(\"2019/01/09\")) },\n    ],\n    [\n      { name: \"Mercury\", orbit: new Orbit(new Date(\"2019/01/01\"), new Date(\"2019/01/02\")) },\n      { name: \"Venus\", orbit: new Orbit(new Date(\"2019/01/02\"), new Date(\"2019/01/03\")) },\n      { name: \"Earth\", orbit: new Orbit(new Date(\"2019/01/03\"), new Date(\"2019/01/04\")) },\n      { name: \"Mars\", orbit: new Orbit(new Date(\"2019/01/04\"), new Date(\"2019/01/05\")) },\n      { name: \"Jupiter\", orbit: new Orbit(new Date(\"2019/01/05\"), new Date(\"2019/01/06\")) },\n      { name: \"Saturn\", orbit: new Orbit(new Date(\"2019/01/06\"), new Date(\"2019/01/07\")) },\n      { name: \"Uranus\", orbit: new Orbit(new Date(\"2019/01/07\"), new Date(\"2019/01/08\")) },\n      { name: \"Neptune\", orbit: new Orbit(new Date(\"2019/01/08\"), new Date(\"2019/01/09\")) },\n    ],\n    [\n      { name: \"Mercury\", orbit: new Orbit(new Date(\"2019/01/01\"), new Date(\"2019/01/02\")) },\n      { name: \"Venus\", orbit: new Orbit(new Date(\"2019/01/02\"), new Date(\"2019/01/03\")) },\n      { name: \"Earth\", orbit: new Orbit(new Date(\"2019/01/03\"), new Date(\"2019/01/04\")) },\n      { name: \"Mars\", orbit: new Orbit(new Date(\"2019/01/04\"), new Date(\"2019/01/05\")) },\n      { name: \"Jupiter\", orbit: new Orbit(new Date(\"2019/01/05\"), new Date(\"2019/01/06\")) },\n      { name: \"Saturn\", orbit: new Orbit(new Date(\"2019/01/06\"), new Date(\"2019/01/07\")) },\n      { name: \"Uranus\", orbit: new Orbit(new Date(\"2019/01/07\"), new Date(\"2019/01/08\")) },\n      { name: \"Neptune\", orbit: new Orbit(new Date(\"2019/01/08\"), new Date(\"2019/01/09\")) },\n    ],\n    [\n      { name: \"Mercury\", orbit: new Orbit(new Date(\"2019/01/01\"), new Date(\"2019/01/02\")) },\n      { name: \"Venus\", orbit: new Orbit(new Date(\"2019/01/02\"), new Date(\"2019/01/03\")) },\n      { name: \"Earth\", orbit: new Orbit(new Date(\"2019/01/03\"), new Date(\"2019/01/04\")) },\n      { name: \"Mars\", orbit: new Orbit(new Date(\"2019/01/04\"), new Date(\"2019/01/05\")) },\n      { name: \"Jupiter\", orbit: new Orbit(new Date(\"2019/01/05\"), new Date(\"2019/01/06\")) },\n      { name: \"Saturn\", orbit: new Orbit(new Date(\"2019/01/06\"), new Date(\"2019/01/07\")) },\n      { name: \"Uranus\", orbit: new Orbit(new Date(\"2019/01/07\"), new Date(\"2019/01/08\")) },\n      { name: \"Neptune\", orbit: new Orbit(new Date(\"2019/01/08\"), new Date(\"2019/01/09\")) },\n    ],\n    [\n      { name: \"Mercury\", orbit: new Orbit(new Date(\"2019/01/01\"), new Date(\"2019/01/02\")) },\n      { name: \"Venus\", orbit: new Orbit(new Date(\"2019/01/02\"), new Date(\"2019/01/03\")) },\n      { name: \"Earth\", orbit: new Orbit(new Date(\"2019/01/03\"), new Date(\"2019/01/04\")) },\n      { name: \"Mars\", orbit: new Orbit(new Date(\"2019/01/04\"), new Date(\"2019/01/05\")) },\n      { name: \"Jupiter\", orbit: new Orbit(new Date(\"2019/01/05\"), new Date(\"2019/01/06\")) },\n      { name: \"Saturn\", orbit: new Orbit(new Date(\"2019/01/06\"), new Date(\"2019/01/07\")) },\n      { name: \"Uranus\", orbit: new Orbit(new Date(\"2019/01/07\"), new Date(\"2019/01/08\")) },\n      { name: \"Neptune\", orbit: new Orbit(new Date(\"2019/01/08\"), new Date(\"2019/01/09\")) },\n    ],\n    [\n      { name: \"Mercury\", orbit: new Orbit(new Date(\"2019/01/01\"), new Date(\"2019/01/02\")) },\n      { name: \"Venus\", orbit: new Orbit(new Date(\"2019/01/02\"), new Date(\"2019/01/03\")) },\n      { name: \"Earth\", orbit: new Orbit(new Date(\"2019/", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{}],8:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],9:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],10:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],11:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],12:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],13:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],14:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],15:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],16:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],17:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],18:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],19:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],20:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],21:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],22:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],23:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],24:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],25:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort\":7}],26:[function(require,module,exports){\nconst list_sort = require('./list_sort');\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sortedListSum = (lst) => {\n  // Write your code here\n};\n\nmodule.exports = {\n  list_sort,\n  sortedListSum,\n};\n\n},{\"./list_sort", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + curr * curr;\n    }\n    return acc;\n  }, 0);\n  return sumOfSquares - lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let cap = extension.charAt(0).toUpperCase();\n    let sm = extension.charAt(0).toLowerCase();\n    let strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*You will be given a list of classes (each of them is a string) and a list of\n  extensions (each of them is a string).\n  You should return a list of classes that each of them extends the strongest\n  extension of the given classes.\n  Example:\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal', 'Animal', 'Animal']\n  given: ['Animal', 'Animal', 'Animal'],\n  and: ['Animal', 'Animal', 'Animal'],\n  then: ['Animal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr || bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      bSubStr = true;\n    } else {\n      aIndex++;\n      bIndex++;\n    }\n  }\n  return aSubStr && bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  subStringCheck(\"abcd\",\"abd\") => true\n  subStringCheck(\"hello\",\"ell\") => true\n  subStringCheck(\"whassup\",\"psus\") => true\n  subStringCheck(\"abab\",\"baa\") => true\n  subStringCheck(\"efef\",\"eeff\") => true\n  subStringCheck(\"himenss\",\"simen\") => true\n  */\nconst subStringCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num;\n\n  for (num = 1; num <= 1000; num++) {\n    roman = (num % 10) + roman;\n    num = Math.floor(num / 10);\n  }\n\n  return roman;\n};\n\n/*\n  Given a positive integer, convert it to its equivalent in hexadecimal.\n  Restrictions: 0 <= num <= 16\n\n  Examples:\n  >>> intToHex(9) == '9'\n  >>> intToHex(15) == 'f'\n  >>> intToHex(21) == '1f'\n  >>> intToHex(37) == '3ac'\n  >>> intToHex(87) == '755d'\n  */\nconst intToHex = (number) => {\n  let hex = '';\n  let num;\n\n  for (num = 1; num <= 16; num++) {\n    hex = num.toString(16) + hex;\n    num = Math.floor(num / 16);\n  }\n\n  return hex;\n};\n\n/*\n  Given a positive integer, convert it to its equivalent in binary.\n  Restrictions: 0 <= num <= 31\n\n  Examples:\n  >>> intToBin(9) == '0b11'\n  >>> intToBin(15) == '0b1111'\n  >>> intToBin(21) == '0b111111'\n  >>> intToBin(37) == '0b1001110011100111'\n  >>> intToBin(87) == '0bpassed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc || ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc || ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc || ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc || ab === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab === bc && bc === ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word exists in the list, false otherwise.\n\n  exist([\"name\", \"of\", \"string\"], \"string\") === true\n  exist([\"name\", \"of\", \"string\"], \"name\") === false\n  */\nconst exist = (list, word) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    throw new Error('Invalid input');\n  }\n  const carrots = number;\n  const carrotsNeed = need;\n  const carrotsRemaining = remaining;\n  const carrotsEaten = [];\n  let carrotsLeft = 0;\n  while (true) {\n    if (carrotsRemaining === 0) {\n      break;\n    }\n    carrotsEaten.push(carrots);\n    carrotsLeft += carrots;\n    carrots -= 1;\n  }\n  return [carrotsEaten.length, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    throw new Error('Invalid input');\n  }\n  const carrots = number;\n  const carrotsNeed = need;\n  const carrotsRemaining = remaining;\n  const carrotsEaten = [];\n  let carrotsLeft = 0;\n  while (true) {\n    if (carrotsRemaining === 0) {\n      break;\n    }\n    carrotsEaten.push(carrots);\n    carrotsLeft += carrots;\n    carrots -= 1;\n  }\n  return [carrotsEaten.length, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    throw new Error('Invalid input');\n  }\n  const carrots = number;\n  const carrotsNeed = need;\n  const carrotsRemaining = remaining;\n  const carrotsEaten = [];\n  let carrotsLeft = 0;\n  while (true) {\n    if (carrotsRemaining === 0) {\n      break;\n    }\n    carrotsEaten.push(carrots);\n    carrotsLeft += carrots;\n    carrots -= 1;\n  }\n  return [carrotsEaten.length, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    throw new Error('Invalid input');\n  }\n  const carrots = number;\n  const carrotsNeed = need;\n  const carrotsRemaining = remaining;\n  const carrotsEaten = [];\n  let carrotsLeft = 0;\n  while (true) {\n    if (carrotsRemaining === 0) {\n      break;\n    }\n    carrotsEaten.push(carrots);\n    carrotsLeft += carrots;\n    carrots -= 1;\n  }\n  return [carrotsEaten.length, carrotsLeft];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }\n  }\n  return characterCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let characterCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (character === character.toUpperCase()) {\n      characterCount++;\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    const operator = operator[i];\n    const operand1 = operand[i - 1];\n    const operand2 = operand[i];\n    switch (operator) {\n      case '+':\n        result += operand1;\n        break;\n      case '-':\n        result -= operand1;\n        break;\n      case '*':\n        result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n        break;\n      case '**':\n        result **= operand1;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    const operator = operator[i];\n    const operand1 = operand[i - 1];\n    const operand2 = operand[i];\n    switch (operator) {\n      case '+':\n        result += operand1;\n        break;\n      case '-':\n        result -= operand1;\n        break;\n      case '*':\n        result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n        break;\n      case '**':\n        result **= operand1;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    const operator = operator[i];\n    const operand1 = operand[i - 1];\n    const operand2 = operand[i];\n    switch (operator) {\n      case '+':\n        result += operand1;\n        break;\n      case '-':\n        result -= operand1;\n        break;\n      case '*':\n        result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n        break;\n      case '**':\n        result **= operand1;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    const operator = operator[i];\n    const operand1 = operand[i - 1];\n    const operand2 = operand[i];\n    switch (operator) {\n      case '+':\n        result += operand1;\n        break;\n      case '-':\n        result -= operand1;\n        break;\n      case '*':\n        result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n        break;\n      case '**':\n        result **= operand1;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    const operator = operator[i];\n    const operand1 = operand[i - 1];\n    const operand2 = operand[i];\n    switch (operator) {\n      case '+':\n        result += operand1;\n        break;\n      case '-':\n        result -= operand1;\n        break;\n      case '*':\n        result *= operand1;\n        break;\n      case '/':\n        result /= operand1;\n        break;\n      case '**':\n        result **= operand1;\n        break;\n      default:\n        throw 'Invalid operator';\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newString = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newString += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newString += s[i].toLowerCase();\n    } else {\n      newString += s[i];\n    }\n  }\n  return newString;\n};\n\n/*You are given a string s.\n  Return true if and only if the string contains only letters.\n  Examples\n  letters(\"abc\") = true\n  letters(\"ab\") = false\n  letters(\"abd\") = false\n  letters(\"abcde\") = false\n  letters(\"aBcDe\") = false\n  letters(\"aBcD\") = false\n  letters(\"aBcDf\") = false\n  letters(\"aBcDfG\") = false\n  letters(\"aBcDfGh\") = false\n  letters(\"aBcDfGhI\") = false\n  letters(\"aBcDfGhIj\") = false\n  letters(\"aBcDfGhIjK\") = false\n  letters(\"aBcDfGhIjKl\") = false\n  letters(\"aBcDfGhIjKlM\") = false\n  letters(\"aBcDfGhIjKlMno\") = false\n  letters(\"aBcDfGhIjKlMnoP\") = false\n  letters(\"aBcDfGhIjKlMnoPq\") = false\n  letters(\"aBcDfGhIjKlMnoPqR\") = false\n  letters(\"aBcDfGhIjKlMnoPqRs\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsT\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTy\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyY\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz000000000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz0000000000000000000000000000000000\") = false\n  letters(\"aBcDfGhIjKlMnoPqRsTyYz00000000000000000000000000000000000\") = false\n  letters(\"aBcDf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha1 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha1('Hello world') == '0dfa9a1a51c7d07b6f9c709eeebeb8b7a67'\n */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha256('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha512('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha256('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha512('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha1 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha1('Hello world') == '0dfa9a1a51c7d07b6f9c709eeebeb8b7a67'\n */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha256('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha512('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its md5 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha1 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha1('Hello world') == '0dfa9a1a51c7d07b6f9c709eeebeb8b7a67'\n */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha256('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its sha512 hash equivalent string.\n * If 'text' is an empty string, return null.\n *\n * >>> stringToSha512('Hello world') == 'b3c63b21c670f00fcee3a2bb9c1b9f2b61e5'\n */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n * Given a string 'text', return its md5 hash equivalent string.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  generateOdds(2, 8) => [2, 4, 6, 8]\n  generateOdds(8, 2) => [8, 6, 4, 2]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer x, return the sum of its digits in ascending order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 8\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 14\n  sumOfDigits(15) => 1 + 3 + 5 + 7 + 9 = 21\n  sumOfDigits(16) => 1 + 5 + 7 = 9\n  sumOfDigits(17) => 1 + 5 + 7 + 9 = 14\n  sumOfDigits(18) => 1 + 5 + 7 + 9 + 11 = 21\n  sumOfDigits(19) => 1 + 5 + 7 + 9 + 11 + 13 = 25\n  sumOfDigits(20) => 1 + 5 + 7 + 9 + 11 + 13 + 15 = 29\n  sumOfDigits(21) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 = 42\n  sumOfDigits(22) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 = 55\n  sumOfDigits(23) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 = 68\n  sumOfDigits(24) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 = 84\n  sumOfDigits(25) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 = 99\n  sumOfDigits(26) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 = 114\n  sumOfDigits(27) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 = 127\n  sumOfDigits(28) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 = 141\n  sumOfDigits(29) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 = 152\n  sumOfDigits(30) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 = 169\n  sumOfDigits(31) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 = 186\n  sumOfDigits(32) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 = 198\n  sumOfDigits(33) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 = 217\n  sumOfDigits(34) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 = 241\n  sumOfDigits(35) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 = 253\n  sumOfDigits(36) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 = 271\n  sumOfDigits(37) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 = 287\n  sumOfDigits(38) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 = 305\n  sumOfDigits(39) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 = 325\n  sumOfDigits(40) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 = 345\n  sumOfDigits(41) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 = 375\n  sumOfDigits(42) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 = 395\n  sumOfDigits(43) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61 = 415\n  sumOfDigits(44) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27 + 29 + 31 + 33 + 35 + 37 + 39 + 41 + 43 + 45 + 47 + 49 + 51 + 53 + 55 + 57 + 59 + 61 + 63 = 445\n  sumOfDigits(45) => 1 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_array = music_notes.map((note) => note.charCodeAt(0) - 64);\n  const music_notes_array_length = music_notes_array.length;\n  const music_notes_array_max = Math.max(...music_notes_array);\n  const music_notes_array_min = Math.min(...music_notes_array);\n\n  const music_notes_array_range = music_notes_array_max - music_notes_array_min;\n\n  const music_notes_array_range_length = music_notes_array_range / music_notes_length;\n\n  const music_notes_array_range_length_rounded = Math.round(music_notes_array_range_length);\n\n  const music_notes_array_range_length_rounded_length = music_notes_array_range_length_rounded / music_notes_length;\n\n  const music_notes_array_range_length_rounded_length_floor = Math.floor(music_notes_array_range_length_rounded);\n\n  const music_notes_array_range_length_rounded_length_ceil = Math.ceil(music_notes_array_range_length_rounded);\n\n  const music_notes_array_range_length_rounded_length_floor_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor;\n\n  const music_notes_array_range_length_rounded_length_ceil_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_floor_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length = music_notes_array_range_length_rounded - music_notes_array_range_length_rounded_length_ceil_length_length_length_length_length_length_length_length_length;\n\n  const music_notes_array_range_length_rounded_length_floor_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++;\n      index = string.indexOf(substring, index) + 1;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/* ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ');\n  const sortedNumberList = numberList.sort((a, b) => a - b);\n  return sortedNumberList.join(' ');\n};\n\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ==========================================================\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return integerPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(1).split('.');\n  return decimalPart;\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const secondNumber = sortedNumbers[1];\n  if (firstNumber === secondNumber) {\n    return [firstNumber, firstNumber];\n  }\n  if (firstNumber > secondNumber) {\n    return [secondNumber, firstNumber];\n  }\n  return [firstNumber, secondNumber];\n};\n\n/**\n * Given a number and a step size, returns an array of all numbers that fall within the step size\n * and are closest to it.\n * e.g. findClosestSteps(1, 1) => [1]\n * e.g. findClosestSteps(1, 0.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5) => [1, 1.5]\n * e.g. findClosestSteps(1, 1.5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== undefined) {\n      length++\n    }\n  }\n  return length\n}\n\n/* Return index of first occurrence of given string\n  >>> strfind('abc', 'a')\n  0\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'c')\n  -1\n  */\nconst strfind = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      return i\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string\n  >>> strfindin('abc', 'a', 'b')\n  0\n  >>> strfindin('abc', 'a', 'c')\n  -1\n  */\nconst strfindin = (string, substring, substring2) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          return i + j\n        }\n      }\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string in given string\n  >>> strfindin('abc', 'a', 'c', 'd')\n  -1\n  */\nconst strfindin = (string, substring, substring2, substring3) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          for (let k = 0; k < substring3.length; k++) {\n            if (string[i + j + k] === substring3[k]) {\n              return i + j + k\n            }\n          }\n        }\n      }\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string in given string in given string\n  >>> strfindin('abc', 'a', 'c', 'd', 'e')\n  -1\n  */\nconst strfindin = (string, substring, substring2, substring3, substring4) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          for (let k = 0; k < substring3.length; k++) {\n            if (string[i + j + k] === substring3[k]) {\n              for (let l = 0; l < substring4.length; l++) {\n                if (string[i + j + k + l] === substring4[l]) {\n                  return i + j + k + l\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string in given string in given string in given string\n  >>> strfindin('abc', 'a', 'c', 'd', 'e', 'f')\n  -1\n  */\nconst strfindin = (string, substring, substring2, substring3, substring4, substring5) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          for (let k = 0; k < substring3.length; k++) {\n            if (string[i + j + k] === substring3[k]) {\n              for (let l = 0; l < substring4.length; l++) {\n                if (string[i + j + k + l] === substring4[l]) {\n                  for (let m = 0; m < substring5.length; m++) {\n                    if (string[i + j + k + l + m] === substring5[m]) {\n                      return i + j + k + l + m\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string in given string in given string in given string in given string\n  >>> strfindin('abc', 'a', 'c', 'd', 'e', 'f', 'gh')\n  -1\n  */\nconst strfindin = (string, substring, substring2, substring3, substring4, substring5, substring6) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          for (let k = 0; k < substring3.length; k++) {\n            if (string[i + j + k] === substring3[k]) {\n              for (let l = 0; l < substring4.length; l++) {\n                if (string[i + j + k + l] === substring4[l]) {\n                  for (let m = 0; m < substring5.length; m++) {\n                    if (string[i + j + k + l + m] === substring5[m]) {\n                      for (let n = 0; n < substring6.length; n++) {\n                        if (string[i + j + k + l + m + n] === substring6[n]) {\n                          return i + j + k + l + m + n\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string in given string in given string in given string in given string in given string\n  >>> strfindin('abc', 'a', 'c', 'd', 'e', 'f', 'gh', 'h')\n  -1\n  */\nconst strfindin = (string, substring, substring2, substring3, substring4, substring5, substring6, substring7) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          for (let k = 0; k < substring3.length; k++) {\n            if (string[i + j + k] === substring3[k]) {\n              for (let l = 0; l < substring4.length; l++) {\n                if (string[i + j + k + l] === substring4[l]) {\n                  for (let m = 0; m < substring5.length; m++) {\n                    if (string[i + j + k + l + m] === substring5[m]) {\n                      for (let n = 0; n < substring6.length; n++) {\n                        if (string[i + j + k + l + m + n] === substring6[n]) {\n                          for (let o = 0; o < substring7.length; o++) {\n                            if (string[i + j + k + l + m + n + o] === substring7[o]) {\n                              return i + j + k + l + m + n + o\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return -1\n}\n\n/* Return index of first occurrence of given string in given string in given string in given string in given string in given string in given string in given string\n  >>> strfindin('abc', 'a', 'c', 'd', 'e', 'f', 'gh', 'h', 'i')\n  -1\n  */\nconst strfindin = (string, substring, substring2, substring3, substring4, substring5, substring6, substring7, substring8) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring) {\n      for (let j = 0; j < substring2.length; j++) {\n        if (string[i + j] === substring2[j]) {\n          for (let k = 0; k < substring3.length; k++) {\n            if (string[i + j + k] === substring3[k]) {\n              for (let l = 0; l < substring4.length; l++) {\n                if (string[i + j + k + l] === substring4[l]) {\n                  for (let m = 0; m < substring5.length; m++) {\n                    if (string[i + j + k + l + m] === substring5[m]) {\n                      for (let n = 0; n < substring6.length; n++) {\n                        if (string[i + j + k + l + m + n] === substring6[n]) {\n                          for (let o = 0; o < substring7.length; o++) {\n                            if (string[i + j + k + l + m + n + o] === substring7[o]) {\n                              for (let p = 0; p < substring8.length; p++) {\n                                if (string[i + j + k + ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let maxNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n      maxNumber = n;\n    } else {\n      if (maxNumber % i === 0) {\n        maxNumber = maxNumber / i;\n      } else {\n        maxNumber = maxNumber * i;\n      }\n    }\n  }\n\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n      minNumber = n;\n    } else {\n      if (minNumber % i === 0) {\n        minNumber = minNumber / i;\n      } else {\n        minNumber = minNumber * i;\n      }\n    }\n  }\n\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let minNumber = n;\n\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]++;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst removeDuplicatesExactlyOnce = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (hash[number]) {\n      hash[number]--;\n    } else {\n      hash[number] = 1;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3]\n  */\nconst remove", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in lower case.\n  >>> lowerCase('hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in upper case.\n  >>> upperCase('hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in title case.\n  >>> titleCase('hello')\n  'Hello World'\n  */\nconst titleCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in sentence case.\n  >>> sentenceCase('hello')\n  'Hello World'\n  */\nconst sentenceCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join(' ');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in snake case.\n  >>> snakeCase('hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in kebab case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in snake case.\n  >>> snakeCase('hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in kebab case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toUpperCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in camel case.\n  >>> camelCase('hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in snake case.\n  >>> snakeCase('hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in kebab case.\n  >>> kebabCase('hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charAt(0).toLowerCase() + char.slice(1))\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each character in pascal case.\n  >>> pascalCase('hello')\n  'Hello'\n  */\nconst pascalCase = (string) => {\n  return string", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove('abc', 'b')\n  'ac'\n  >>> remove('abc', 'b')\n  'ac'\n  */\nconst remove = (string, substring) => {\n  return string.replace(new RegExp(substring, \"g\"), \"\");\n};\n\n/* Convert string to lowercase\n  >>> toLower('abc')\n  'abc'\n  >>> toLower('ABC')\n  'abc'\n  */\nconst toLower = (string) => {\n  return string.toLowerCase();\n};\n\n/* Convert string to uppercase\n  >>> toUpper('abc')\n  'ABC'\n  >>> toUpper('ABC')\n  'ABC'\n  */\nconst toUpper = (string) => {\n  return string.toUpperCase();\n};\n\n/* Convert string to titlecase\n  >>> toTitleCase('abc')\n  'Abc'\n  >>> toTitleCase('ABC')\n  'ABC'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to camelCase\n  >>> toCamelCase('abc')\n  'abc'\n  >>> toCamelCase('ABC')\n  'abc'\n  */\nconst toCamelCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnakeCase('abc')\n  'abc'\n  >>> toSnakeCase('ABC')\n  'abc'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to pascalCase\n  >>> toPascalCase('abc')\n  'Abc'\n  >>> toPascalCase('ABC')\n  'ABC'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebabCase('abc')\n  'abc-'\n  >>> toKebabCase('ABC')\n  'abc-'\n  */\nconst toKebabCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnakeCase('abc')\n  'abc'\n  >>> toSnakeCase('ABC')\n  'abc'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to pascalCase\n  >>> toPascalCase('abc')\n  'Abc'\n  >>> toPascalCase('ABC')\n  'ABC'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebabCase('abc')\n  'abc-'\n  >>> toKebabCase('ABC')\n  'abc-'\n  */\nconst toKebabCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnakeCase('abc')\n  'abc'\n  >>> toSnakeCase('ABC')\n  'abc'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to pascalCase\n  >>> toPascalCase('abc')\n  'Abc'\n  >>> toPascalCase('ABC')\n  'ABC'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebabCase('abc')\n  'abc-'\n  >>> toKebabCase('ABC')\n  'abc-'\n  */\nconst toKebabCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnakeCase('abc')\n  'abc'\n  >>> toSnakeCase('ABC')\n  'abc'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to pascalCase\n  >>> toPascalCase('abc')\n  'Abc'\n  >>> toPascalCase('ABC')\n  'ABC'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebabCase('abc')\n  'abc-'\n  >>> toKebabCase('ABC')\n  'abc-'\n  */\nconst toKebabCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnakeCase('abc')\n  'abc'\n  >>> toSnakeCase('ABC')\n  'abc'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to pascalCase\n  >>> toPascalCase('abc')\n  'Abc'\n  >>> toPascalCase('ABC')\n  'ABC'\n  */\nconst toPascalCase = (string) => {\n  return string.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebabCase('abc')\n  'abc-'\n  >>> toKebabCase('ABC')\n  'abc-'\n  */\nconst toKebabCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnakeCase('abc')\n  'abc'\n  >>> toSnakeCase('ABC')\n  'abc'\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/_\\w/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1);\n  });\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given prefix.\n  >>> filterByNotPrefix([], 'a')\n  []\n  >>> filterByNotPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given suffix.\n  >>> filterByNotSuffix([], 'a')\n  []\n  >>> filterByNotSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance += operations[i];\n    } else {\n      balance -= operations[i];\n    }\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter((n) =>!isNaN(n));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"hello\", \"world\"])\n  [\"hello\", \"world\"]\n  >>> getStrings([\"hello\", null, \"world\"])\n  [\"hello\", null, \"world\"]\n  */\nconst getStrings = (l) => {\n  return l.filter((n) => typeof n === \"string\");\n};\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false, true])\n  [true, false, true]\n  >>> getBooleans([false, true, false])\n  [false, true, false]\n  */\nconst getBooleans = (l) => {\n  return l.filter((n) => typeof n === \"boolean\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{a: 1}, {a: 2}, {a: 3}])\n  [{a: 1}, {a: 2}, {a: 3}]\n  >>> getObjects([{a: 1}, {a: 2, b: 3}, {a: 3}])\n  [{a: 1}, {a: 2, b: 3}, {a: 3}]\n  */\nconst getObjects = (l) => {\n  return l.filter((n) => typeof n === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([1, 2, 3])\n  [1, 2, 3]\n  >>> getArrays([1, 2, 3, null, 4, 5])\n  [1, 2]\n  */\nconst getArrays = (l) => {\n  return l.filter((n) => Array.isArray(n));\n};\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}])\n  [() => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter((n) => typeof n === \"function\");\n};\n\n/*Return only nulls in the list.\n  >>> getNulls([null, null, null])\n  [null, null, null]\n  >>> getNulls([null, null, null, null])\n  [null, null, null, null]\n  */\nconst getNulls = (l) => {\n  return l.filter((n) => n === null);\n};\n\n/*Return only undefined in the list.\n  >>> getUndefined([undefined, undefined, undefined])\n  [undefined, undefined, undefined]\n  >>> getUndefined([undefined, undefined, undefined, undefined])\n  [undefined, undefined, undefined, undefined]\n  */\nconst getUndefined = (l) => {\n  return l.filter((n) => n === undefined);\n};\n\n/*Return only NaNs in the list.\n  >>> getNaNs([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> getNaNs([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst getNaNs = (l) => {\n  return l.filter((n) => isNaN(n));\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"hello\", \"\", \"\"])\n  [\"hello\", \"\", \"\"]\n  >>> getEmptyStrings([\"hello\", null, \"\"])\n  [\"hello\", null, \"\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter((n) => n === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([[], [], []])\n  [[], [], []]\n  >>> getEmptyArrays([[], [], [], []])\n  [[], [], [], []]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter((n) => n === []);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getEmptyObjects([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter((n) => n === {});\n};\n\n/*Return only empty functions in the list.\n  >>> getEmptyFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getEmptyFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}, () => {}]\n  */\nconst getEmptyFunctions = (l) => {\n  return l.filter((n) => n === () => {});\n};\n\n/*Return only empty nulls in the list.\n  >>> getEmptyNulls([null, null, null])\n  [null, null, null]\n  >>> getEmptyNulls([null, null, null, null])\n  [null, null, null, null]\n  */\nconst getEmptyNulls = (l) => {\n  return l.filter((n) => n === null);\n};\n\n/*Return only empty undefineds in the list.\n  >>> getEmptyUndefined([undefined, undefined, undefined])\n  [undefined, undefined, undefined]\n  >>> getEmptyUndefined([undefined, undefined, undefined, undefined])\n  [undefined, undefined, undefined, undefined]\n  */\nconst getEmptyUndefined = (l) => {\n  return l.filter((n) => n === undefined);\n};\n\n/*Return only empty NaNs in the list.\n  >>> getEmptyNaNs([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> getEmptyNaNs([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst getEmptyNaNs = (l) => {\n  return l.filter((n) => isNaN(n));\n};\n\n/*Return only empty empty strings in the list.\n  >>> getEmptyEmptyStrings([\"hello\", \"\", \"\"])\n  [\"hello\", \"\", \"\"]\n  >>> getEmptyEmptyStrings([\"hello\", null, \"\"])\n  [\"hello\", null, \"\"]\n  */\nconst getEmptyEmptyStrings = (l) => {\n  return l.filter((n) => n === \"\");\n};\n\n/*Return only empty empty arrays in the list.\n  >>> getEmptyEmptyArrays([[], [], []])\n  [[], [], []]\n  >>> getEmptyEmptyArrays([[], [], [], []])\n  [[], [], [], []]\n  */\nconst getEmptyEmptyArrays = (l) => {\n  return l.filter((n) => n === []);\n};\n\n/*Return only empty empty objects in the list.\n  >>> getEmptyEmptyObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getEmptyEmptyObjects([{}, {}, {}, {}])\n  [{}, {}, {}, {}]\n  */\nconst getEmptyEmptyObjects = (l) => {\n  return l.filter((n) => n === {});\n};\n\n/*Return only empty empty functions in the list.\n  >>> getEmptyEmptyFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getEmptyEmptyFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}, () => {}]", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n!== 1 && isPrime(n - 1) === false) return false;\n  if (n === 5) return true;\n  if (n === 13) return true;\n  if (n === 17) return true;\n  if (n === 19) return true;\n  if (n === 23) return true;\n  if (n === 29) return true;\n  if (n === 31) return true;\n  if (n === 37) return true;\n  if (n === 43) return true;\n  if (n === 47) return true;\n  if (n === 53) return true;\n  if (n === 59) return true;\n  if (n === 61) return true;\n  if (n === 67) return true;\n  if (n!== 9) return false;\n  if (n % 10 === 0) return false;\n  if (n % 10 === 1) return true;\n  if (n % 10 === 2) return true;\n  if (n % 10 === 3) return true;\n  if (n % 10 === 4) return true;\n  if (n % 10 === 5) return true;\n  if (n % 10 === 6) return true;\n  if (n % 10 === 7) return true;\n  if (n % 10 === 8) return true;\n  if (n % 10 === 9) return true;\n  if (n % 10 === 10) return true;\n  if (n % 10 === 11) return true;\n  if (n % 10 === 12) return true;\n  if (n % 10 === 13) return true;\n  if (n % 10 === 14) return true;\n  if (n % 10 === 15) return true;\n  if (n % 10 === 16) return true;\n  if (n % 10 === 17) return true;\n  if (n % 10 === 18) return true;\n  if (n % 10 === 19) return true;\n  if (n % 10 === 20) return true;\n  if (n % 10 === 21) return true;\n  if (n % 10 === 22) return true;\n  if (n % 10 === 23) return true;\n  if (n % 10 === 24) return true;\n  if (n % 10 === 25) return true;\n  if (n % 10 === 26) return true;\n  if (n % 10 === 27) return true;\n  if (n % 10 === 28) return true;\n  if (n % 10 === 29) return true;\n  if (n % 10 === 30) return true;\n  if (n % 10 === 31) return true;\n  if (n % 10 === 32) return true;\n  if (n % 10 === 33) return true;\n  if (n % 10 === 34) return true;\n  if (n % 10 === 35) return true;\n  if (n % 10 === 36) return true;\n  if (n % 10 === 37) return true;\n  if (n % 10 === 38) return true;\n  if (n % 10 === 39) return true;\n  if (n % 10 === 40) return true;\n  if (n % 10 === 41) return true;\n  if (n % 10 === 42) return true;\n  if (n % 10 === 43) return true;\n  if (n % 10 === 44) return true;\n  if (n % 10 === 45) return true;\n  if (n % 10 === 46) return true;\n  if (n % 10 === 47) return true;\n  if (n % 10 === 48) return true;\n  if (n % 10 === 49) return true;\n  if (n % 10 === 50) return true;\n  if (n % 10 === 51) return true;\n  if (n % 10 === 52) return true;\n  if (n % 10 === 53) return true;\n  if (n % 10 === 54) return true;\n  if (n % 10 === 55) return true;\n  if (n % 10 === 56) return true;\n  if (n % 10 === 57) return true;\n  if (n % 10 === 58) return true;\n  if (n % 10 === 59) return true;\n  if (n % 10 === 60) return true;\n  if (n % 10 === 61) return true;\n  if (n % 10 === 62) return true;\n  if (n % 10 === 63) return true;\n  if (n % 10 === 64) return true;\n  if (n % 10 === 65) return true;\n  if (n % 10 === 66) return true;\n  if (n % 10 === 67) return true;\n  if (n % 10 === 68) return true;\n  if (n % 10 === 69) return true;\n  if (n % 10 === 70) return true;\n  if (n % 10 === 71) return true;\n  if (n % 10 === 72) return true;\n  if (n % 10 === 73) return true;\n  if (n % 10 === 74) return true;\n  if (n % 10 === 75) return true;\n  if (n % 10 === 76) return true;\n  if (n % 10 === 77) return true;\n  if (n % 10 === 78) return true;\n  if (n % 10 === 79) return true;\n  if (n % 10 === 80) return true;\n  if (n % 10 === 81) return true;\n  if (n % 10 === 82) return true;\n  if (n % 10 === 83) return true;\n  if (n % 10 === 84) return true;\n  if (n % 10 === 85) return true;\n  if (n % 10 === 86) return true;\n  if (n % 10 === 87) return true;\n  if (n % 10 === 88) return true;\n  if (n % 10 === 89) return true;\n  if (n % 10 === 90) return true;\n  if (n % 10 === 91) return true;\n  if (n % 10 === 92) return true;\n  if (n % 10 === 93) return true;\n  if (n % 10 === 94) return true;\n  if (n % 10 === 95) return true;\n  if (n % 10 === 96) return true;\n  if (n % 10 === 97) return true;\n  if (n % 10 === 98) return true;\n  if (n % 10 === 99) return true;\n  if (n % 10 === 100) return true;\n  if (n % 10 === 101) return true;\n  if (n % 10 === 102) return true;\n  if (n % 10 === 103) return true;\n  if (n % 10 === 104) return true;\n  if (n % 10 === 105) return true;\n  if (n % 10 === 106) return true;\n  if (n % 10 === 107) return true;\n  if (n % 10 === 108) return true;\n  if (n % 10 === 109) return true;\n  if (n % 10 === 110) return true;\n  if (n % 10 === 111) return true;\n  if (n % 10 === 112) return true;\n  if (n % 10 === 113) return true;\n  if (n % 10 === 114) return true;\n  if (n % 10 === 115) return true;\n  if (n % 10 === 116) return true;\n  if (n % 10 === 117) return true;\n  if (n % 10 === 118) return true;\n  if (n % 10 === 119) return true;\n  if (n % 10 === 120) return true;\n  if (n % 10 === 121) return true;\n  if (n % 10 === 122) return true;\n  if (n % 10 === 123) return true;\n  if (n % 10 === 124) return true;\n  if (n % 10 === 125) return true;\n  if (n % 10 === 126) return true;\n  if (n % 10 === 127) return true;\n  if (n % 10 === 128) return true;\n  if (n % 10 === 129) return true;\n  if (n % 10 === 130) return true;\n  if (n % 10 === 131) return true;\n  if (n % 10 === 132) return true;\n  if (n % 10 === 133) return true;\n  if (n % 10 === 134) return true;\n  if (n % 10 === 135) return true;\n  if (n % 10 === 136) return true;\n  if (n % 10 === 137) return true;\n  if (n % 10 === 138) return true;\n  if (n % 10 === 139) return true;\n  if (n % 10 === 140) return true;\n  if (n % 10 === 141) return true;\n  if (n % 10 === 142) return true;\n  if (n % 10 === 143) return true;\n  if (n % 10 === 144) return true;\n  if (n % 10 === 145) return true;\n  if (n % 10 === 146) return true;\n  if (n % 10 === 147) return true;\n  if (n % 10 === 148) return true;\n  if (n % 10 === 149) return true;\n  if (n % 10 === 150) return true;\n  if (n % 10 === 151) return true;\n  if (n % 10 === 152) return true;\n  if (n % 10 === 153) return true;\n  if (n % 10 === 154) return true;\n  if (n % 10 === 155) return true;\n  if (n % 10 === 156) return true;\n  if (n % 10 === 157) return true;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item > max) {\n      max = item;\n      x = item;\n    }\n  });\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only max point, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let max = 0;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item > max) {\n      max = item;\n      x = item;\n    }\n  });\n  return max;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only min point, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let min = Number.MAX_VALUE;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item < min) {\n      min = item;\n      x = item;\n    }\n  });\n  return min;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoot find x such that poly(x) = min of all xs.\n  findRoot returns only min point, even if there are many.\n  Moreover, findRoot only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot = (xs) => {\n  let min = Number.MAX_VALUE;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item < min) {\n      min = item;\n      x = item;\n    }\n  });\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCeil find x such that poly(x) = max of all xs.\n  findCeil returns only max point, even if there are many.\n  Moreover, findCeil only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCeil([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findCeil([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCeil = (xs) => {\n  let max = Number.MIN_VALUE;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item > max) {\n      max = item;\n      x = item;\n    }\n  });\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findFloor find x such that poly(x) = min of all xs.\n  findFloor returns only min point, even if there are many.\n  Moreover, findFloor only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findFloor([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findFloor([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findFloor = (xs) => {\n  let min = Number.MAX_VALUE;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item < min) {\n      min = item;\n      x = item;\n    }\n  });\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCeilRoot find x such that poly(x) = max of all xs.\n  findCeilRoot returns only max point, even if there are many.\n  Moreover, findCeilRoot only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCeilRoot([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findCeilRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCeilRoot = (xs) => {\n  let max = Number.MIN_VALUE;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item > max) {\n      max = item;\n      x = item;\n    }\n  });\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findFloorRoot find x such that poly(x) = min of all xs.\n  findFloorRoot returns only min point, even if there are many.\n  Moreover, findFloorRoot only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findFloorRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findFloorRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findFloorRoot = (xs) => {\n  let min = Number.MAX_VALUE;\n  let x = 0;\n  xs.forEach((item) => {\n    if (item < min) {\n      ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 2, 9]\n  */\nconst sortSeven = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return an array of all items in list that match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 9, 123]\n  */\nconst all = (l, pred) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst none = (l, pred) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!pred(l[i])) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return an array of all items in list that match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 9, 123]\n  */\nconst filter = (l, pred) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst reject = (l, pred) => {\n  const a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!pred(l[i])) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\n/*Return an array of all items in list that match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 9, 123]\n  */\nconst partition = (l, pred) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAll = (l, pred) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 9, 123]\n  */\nconst partitionAllWith = (l, pred, other) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAll = (l, pred, other) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWith = (l, pred, other, other2) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWithAll = (l, pred, other, other2, other3) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWithAllWith = (l, pred, other, other2, other3, other4) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWithAllWithAll = (l, pred, other, other2, other3, other4, other5) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWithAllWithAllWith = (l, pred, other, other2, other3, other4, other5, other6) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWithAllWithAllWithAll = (l, pred, other, other2, other3, other4, other5, other6, other7) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x % 2 === 0)\n  [5, 3, 123]\n  */\nconst partitionAllWithAllWithAllWithAllWithAllWith = (l, pred, other, other2, other3, other4, other5, other6, other7, other8) => {\n  const a = [], b = [];\n  for (let i = 0; i < l.length; i++) {\n    if (pred(l[i])) {\n      a.push(l[i]);\n    } else {\n      b.push(l[i]);\n    }\n  }\n  return [a, b];\n};\n\n/*Return an array of all items in list that do not match a predicate\n  >>> all([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return sum of all elements in list divided by number of elements in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -55\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz2(50)\n  0\n  >>> fizzBuzz2(78)\n  2\n  >>> fizzBuzz2(79)\n  3\n  */\nconst fizzBuzz2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz3(50)\n  0\n  >>> fizzBuzz3(78)\n  2\n  >>> fizzBuzz3(79)\n  3\n  */\nconst fizzBuzz3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz4(50)\n  0\n  >>> fizzBuzz4(78)\n  2\n  >>> fizzBuzz4(79)\n  3\n  */\nconst fizzBuzz4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz5(50)\n  0\n  >>> fizzBuzz5(78)\n  2\n  >>> fizzBuzz5(79)\n  3\n  */\nconst fizzBuzz5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz6(50)\n  0\n  >>> fizzBuzz6(78)\n  2\n  >>> fizzBuzz6(79)\n  3\n  */\nconst fizzBuzz6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz7(50)\n  0\n  >>> fizzBuzz7(78)\n  2\n  >>> fizzBuzz7(79)\n  3\n  */\nconst fizzBuzz7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz8(50)\n  0\n  >>> fizzBuzz8(78)\n  2\n  >>> fizzBuzz8(79)\n  3\n  */\nconst fizzBuzz8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz9(50)\n  0\n  >>> fizzBuzz9(78)\n  2\n  >>> fizzBuzz9(79)\n  3\n  */\nconst fizzBuzz9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz10(50)\n  0\n  >>> fizzBuzz10(78)\n  2\n  >>> fizzBuzz10(79)\n  3\n  */\nconst fizzBuzz10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz11(50)\n  0\n  >>> fizzBuzz11(78)\n  2\n  >>> fizzBuzz11(79)\n  3\n  */\nconst fizzBuzz11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz12(50)\n  0\n  >>> fizzBuzz12(78)\n  2\n  >>> fizzBuzz12(79)\n  3\n  */\nconst fizzBuzz12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz13(50)\n  0\n  >>> fizzBuzz13(78)\n  2\n  >>> fizzBuzz13(79)\n  3\n  */\nconst fizzBuzz13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz14(50)\n  0\n  >>> fizzBuzz14(78)\n  2\n  >>> fizzBuzz14(79)\n  3\n  */\nconst fizzBuzz14 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz15(50)\n  0\n  >>> fizzBuzz15(78)\n  2\n  >>> fizzBuzz15(79)\n  3\n  */\nconst fizzBuzz15 = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      odd.sort((a, b) => a - b)\n    }\n  }\n  return odd\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd)]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortEven([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  let evenOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 53) {\n    return 53;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 71) {\n    return 71;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 79) {\n    return 79;\n  }\n  if (n === 83) {\n    return 83;\n  }\n  if (n === 89) {\n    return 89;\n  }\n  if (n === 97) {\n    return 97;\n  }\n  if (n === 101) {\n    return 101;\n  }\n  if (n === 103){\n    return 103;\n  }\n  if (n === 105){\n    return 105;\n  }\n  if (n === 107){\n    return 107;\n  }\n  if (n === 109){\n    return 109;\n  }\n  if (n === 113){\n    return 113;\n  }\n  if (n === 121){\n    return 121;\n  }\n  if (n === 123){\n    return 123;\n  }\n  if (n === 127)\n    return 127;\n  if (n === 131)\n    return 131;\n  if (n === 137)\n    return 137;\n  if (n === 139)\n    return 139;\n  if (n === 149)\n    return 149;\n  if (n === 151)\n    return 151;\n  if (n === 157)\n    return 157;\n  if (n === 163)\n    return 163;\n  if (n === 167)\n    return 167;\n  if (n === 173)\n    return 173;\n  if (n === 179)\n    return 179;\n  if (n === 181)\n    return 181;\n  if (n === 191)\n    return 191;\n  if (n === 193)\n    return 193;\n  if (n === 197)\n    return 197;\n  if (n === 199)\n    return 199;\n  if (n === 203)\n    return 203;\n  if (n === 207)\n    return 207;\n  if (n === 211)\n    return 211;\n  if (n === 213)\n    return 213;\n  if (n === 217)\n    return 217;\n  if (n === 223)\n    return 223;\n  if (n === 227)\n    return 227;\n  if (n === 229)\n    return 229;\n  if (n === 233)\n    return 233;\n  if (n === 239)\n    return 239;\n  if (n === 241)\n    return 241;\n  if (n === 243)\n    return 243;\n  if (n === 247)\n    return 247;\n  if (n === 251)\n    return 251;\n  if (n === 253)\n    return 253;\n  if (n === 257)\n    return 257;\n  if (n === 263)\n    return 263;\n  if (n === 267)\n    return 267;\n  if (n === 269)\n    return 269;\n  if (n === 271)\n    return 271;\n  if (n === 273)\n    return 273;\n  if (n === 277)\n    return 277;\n  if (n === 281)\n    return 281;\n  if (n === 283)\n    return 283;\n  if (n === 293)\n    return 293;\n  if (n === 307)\n    return 307;\n  if (n === 311)\n    return 311;\n  if (n === 313)\n    return 313;\n  if (n === 317)\n    return 317;\n  if (n === 331)\n    return 331;\n  if (n === 333)\n    return 333;\n  if (n === 339)\n    return 339;\n  if (n === 347)\n    return 347;\n  if (n === 353)\n    return 353;\n  if (n === 359)\n    return 359;\n  if (n === 361)\n    return 361;\n  if (n === 363)\n    return 363;\n  if (n === 365)\n    return 365;\n  if (n === 367)\n    return 367;\n  if (n === 373)\n    return 373;\n  if (n === 377)\n    return 377;\n  if (n === 381)\n    return 381;\n  if (n === 383)\n    return 383;\n  if (n === 389)\n    return 389;\n  if (n === 397)\n    return 397;\n  if (n === 401)\n    return 401;\n  if (n === 403)\n    return 403;\n  if (n === 409)\n    return 409;\n  if (n === 419)\n    return 419;\n  if (n === 421)\n    return 421;\n  if (n === 423)\n    return 423;\n  if (n === 429)\n    return 429;\n  if (n === 433)\n    return 433;\n  if (n === 439)\n    return 439;\n  if (n === 443)\n    return 443;\n  if (n === 449)\n    return 449;\n  if (n === 457)\n    return 457;\n  if (n === 461)\n    return 461;\n  if (n === 463)\n    return 463;\n  if (n === 467)\n    return 467;\n  if (n === 471)\n    return 471;\n  if (n === 473)\n    return 473;\n  if (n === 479)\n    return 479;\n  if (n === 483)\n    return 483;\n  if (n === 487)\n    return 487;\n  if (n === 491)\n    return 491;\n  if (n === 493)\n    return 493;\n  if (n === 495)\n    return 495;\n  if (n === 497)\n    return 497;\n  if (n === 501)\n    return 501;\n  if (n === 503)\n    return 503;\n  if (n === 505)\n    return 505;\n  if (n === 507)\n    return 507;\n  if (n === 509)\n    return 509;\n  if (n === 511)\n    return 511;\n  if (n === 513)\n    return 513;\n  if (n === 517)\n    return 517;\n  if (n === 519)\n    return 519;\n  if (n === 521)\n    return 521;\n  if (n === 523)\n    return 523;\n  if (n === 525)\n    return 525;\n  if (n === 527)\n    return 527;\n  if (n === 533)\n    return 533;\n  if (n === 537)\n    return 537;\n  if (n === 541)\n    return 541;\n  if (n === 543)\n    return 543;\n  if (n === 547)\n    return 547;\n  if (n === 551)\n    return 551;\n  if (n === 553)\n    return 553;\n  if (n === 555)\n    return 555;\n  if (n === 557)\n    return 557;\n  if (n === 561)\n    return 561;\n  if (n === 563)\n    return 563;\n  if (n === 569)\n    return 569;\n  if (n === 571)\n    return 571;\n  if (n === 577)\n    return 577;\n  if (n === 583)\n    return 583;\n  if (n === 589)\n    return 589;\n  if (n === 591)\n    return 591;\n  if (n === 593)\n    return 593;\n  if (n === 595)\n    return 595;\n  if (n === 597)\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - median));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mode = mode(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mode));\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - median));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - median));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mode = mode(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mode));\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - median));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - median));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mode = mode(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mode));\n  return mode(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - median));\n  return median(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/* For a given list of input numbers, calculate Mean ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision2 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision3 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision4 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision5 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision6 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision7 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision8 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n  */\nconst multList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst divList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfDivList([1, 2, 3])\n  [1, 2, 1, 2, 1, 2]\n  >>> halfDivList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35]\n  */\nconst halfDivList = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 0.5 / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x) === i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n  '1000'\n  >>> convertBase(7, 2)\n  '111'\n  */\nconst convertBase = (x, base) => {\n  let str = x.toString(base);\n  while (str.length < base) {\n    str = `0${str}`;\n  }\n  return str;\n};\n\n/*\n  Convert number to string with given base\n  >>> convertBase(8, 3)\n  '22'\n  >>> convertBase(8, 2)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter(5, 3)\n  7.5\n  */\nconst trianglePerimeter = (a, h) => {\n  return a + a + h + h + h;\n};\n\n/*Given a triangle, find the area of its volume\n  >>> triangleVolume(5, 3)\n  7.5\n  */\nconst triangleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its circumcircle\n  >>> triangleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its hypotenuse\n  >>> triangleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle\n  >>> triangleRightAngle(5, 3)\n  7.5\n  */\nconst triangleRightAngle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypotenuse)\n  >>> triangleRightAngleHypotenuse(5, 3)\n  7.5\n  */\nconst triangleRightAngleHypotenuse = (a, h) => {\n  return Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (circumcircle)\n  >>> triangleRightAngleCircumcircle(5, 3)\n  7.5\n  */\nconst triangleRightAngleCircumcircle = (a, h) => {\n  return Math.PI * Math.pow(a / 2, 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its right angle (volume)\n  >>> triangleRightAngleVolume(5, 3)\n  7.5\n  */\nconst triangleRightAngleVolume = (a, h) => {\n  return a * (h / 2) * (h / 2) * Math.PI;\n};\n\n/*Given a triangle, find the area of its right angle (hypoten", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibbonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibbonacci(0) -> 0\n  fibbonacci(1) -> 1\n  fibbonacci(2) -> 1\n  fibbonacci(3) -> 2\n  fibbonacci(n) -> fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3) + fibbonacci(n-4).\n  Please write a function to efficiently compute the n-th element of the fibbonacci number sequence.  Do not use recursion.\n  >>> fibbonacci(5)\n  5\n  >>> fibbonacci(6)\n  8\n  >>> fibbonacci(7)\n  13\n  */\nconst fibbonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fibbonacci(n - 1) + fibbonacci(n - 2) + fibbonacci(n - 3) + fibbonacci(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(2) -> 1\n  fibonacci(3) -> 2\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3) + fibonacci(n-4).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3) + fibonacci(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(2) -> 1\n  fibonacci(3) -> 2\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3) + fibonacci(n-4).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3) + fibonacci(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(2) -> 1\n  fibonacci(3) -> 2\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3) + fibonacci(n-4).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3) + fibonacci(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(2) -> 1\n  fibonacci(3) -> 2\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3) + fibonacci(n-4).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3) + fibonacci(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(2) -> 1\n  fibonacci(3) -> 2\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2) + fibonacci(n-3) + fibonacci(n-4).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  return fibonacci(n - 1) + fibonacci(n - 2) + fibonac", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = l.sort((a, b) => a - b);\n  if (sortedList.length % 2 === 0) {\n    return sortedList[Math.floor(sortedList.length / 2)];\n  }\n  return sortedList[sortedList.length / 2 - 1];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const counts = {};\n  for (let i = 0; i < l.length; i++) {\n    const value = l[i];\n    if (counts[value] === undefined) {\n      counts[value] = 0;\n    }\n    counts[value]++;\n  }\n  let maxCount = 0;\n  let maxValue = undefined;\n  for (let value in counts) {\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      maxValue = value;\n    }\n  }\n  return maxValue;\n};\n\n/*Return mode of element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isP", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % p;\n  return m === 0? 0 : m > 0? p : p - 1;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 7)\n  2\n  >>> modpow(2, 3, 7)\n  2\n  >>> modpow(2, 11)\n  1\n  >>> modpow(2, 11)\n  1\n  >>> modpow(2, 15)\n  1\n  >>> modpow(2, 15)\n  1\n  */\nconst modpow = (n, p, m) => {\n  const r = 1;\n  for (let i = 0; i < p; i++) {\n    r = r * n % m;\n    n = n / m;\n  }\n  return r;\n};\n\n/*\n  >>> modinv(8, 5)\n  2\n  >>> modinv(8, 5)\n  2\n  >>> modinv(8, 7)\n  1\n  >>> modinv(8, 7)\n  1\n  >>> modinv(8, 11)\n  4\n  >>> modinv(8, 11)\n  4\n  >>> modinv(8, 15)\n  2\n  >>> modinv(8, 15)\n  2\n  */\nconst modinv = (n, p) => {\n  const m = modp(n, p);\n  return m === 0? 1 : m > 0? modpow(n, m, p) : p - 1;\n};\n\n/*\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(8)\n  2\n  >>> isqrt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    result.push(numbers[i]);\n    if (i!== 0) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = _curry2((n, xs) => {\n  if (n < 0 || xs.length === 0) {\n    return xs;\n  }\n  return dropLast(n, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to drop.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nconst dropLast = _curry2((n, xs) => {\n  const idx = xs.length - 1;\n  if (n === 0) {\n    return xs;\n  }\n  idx += n < 0? 0 : n;\n  return _slice(idx, Infinity, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements while the predicate\n * function returns `true`. The predicate function is applied to one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} predicate The function to be called on each element\n * @param {Array} list The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return false\n * from the predicate function `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropRight, R.dropWhile\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.takeLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = _curry2((predicate, list) => takeLastWhile(predicate, drop(list)));\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      // Exhaustive comparison, including cyclical equality\n *      R.equals({ a: 1, b: 2 }, { a: 1, b: 2 }); //=> false\n *      R.equals({ a: 1 }, { a: 1 }); //=> true\n *      R.equals([{ a: 1 }], [{ a: 1 }]); //=> true\n */\nconst equals = _curry2(function equals(a, b) {\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0!= -0\n    return a!== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a!== a && b!== b;\n  }\n});\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nconst minBy = _curry3(function minBy(f, a, b) {\n  return f(b) < f(a)? b : a;\n});\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.minWith(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minWith(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minWith(square), Infinity, []); //=> Infinity\n */\nconst minWith = _curry3(function minWith(f, a, b) {\n  return f(b) < f(a)? b : a;\n});\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet.\n  */\nconst encodeShiftNeg = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNeg = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet.\n  */\nconst encodeShiftNeg2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNeg2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet.\n  */\nconst encodeShiftNeg3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNeg3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet.\n  */\nconst encodeShiftNeg4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNeg4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -5 in the alphabet.\n  */\nconst encodeShiftNeg5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNeg5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -6 in the alphabet.\n  */\nconst encodeShiftNeg6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNeg6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -7 in the alphabet.\n  */\nconst encodeShiftNeg7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) - 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(vowels[i], \"\");\n  }\n  return newText;\n};\n\n/*\n  removeStopWords is a function that takes string and returns string without stopwords.\n  >>> removeStopWords('')\n  ''\n  >>> removeStopWords(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeStopWords('abcdef')\n  'bcdf'\n  >>> removeStopWords('aaaaa')\n  ''\n  >>> removeStopWords('aaBAA')\n  'B'\n  >>> removeStopWords('zbcd')\n  'zcd'\n  */\nconst removeStopWords = (text) => {\n  let stopWords = ['the', 'a', 'an', 'the', 'and', 'or', 'it', 'its', 'it', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'its', 'it", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold2 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold3 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold4 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold5 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold6 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold7 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold8 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold9 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold10 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold11 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold12 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold13 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold14 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t - delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold15 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) return false\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> betweenThreshold([1, 2, 4, 10], 100, -5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, -5)\n  true\n  */\nconst betweenThreshold16 = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-5)\n  5\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Get the factorial of number x\n  >>> factorial(-5)\n  5\n  >>> factorial(5)\n  120\n  */\nconst factorial = (x) => {\n  return factorialHelper(x, 1);\n};\n\n/*Get the factorial helper function\n  >>> factorialHelper(-5, 1)\n  5\n  >>> factorialHelper(5, 1)\n  120\n  */\nconst factorialHelper = (x, acc) => {\n  if (x === 0) {\n    return acc;\n  }\n  return factorialHelper(x - 1, acc * x);\n};\n\n/*Get the factorial helper function with memoization\n  >>> factorialMemoize(-5, 1)\n  5\n  >>> factorialMemoize(5, 1)\n  120\n  */\nconst factorialMemoize = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoize(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);\n  }\n  if (x === 0) {\n    return acc;\n  }\n  memoize.set(x, factorialMemoizeRecursive(x - 1, acc * x));\n  return memoize.get(x);\n};\n\n/*Get the factorial helper function with memoization and recursion\n  >>> factorialMemoizeRecursive(-5, 1)\n  5\n  >>> factorialMemoizeRecursive(5, 1)\n  120\n  */\nconst factorialMemoizeRecursive = (x, acc) => {\n  if (memoize.has(x)) {\n    return memoize.get(x);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = s0.length - 1; i >= 0; i--) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters in reverse order.\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsRev('abcd', 'dddddddabc')\n  true\n  >>> sameCharsRev('dddddddabc', 'abcd')\n  true\n  >>> sameCharsRev('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsRev('abcd', 'dddddddabce')\n  false\n  >>> sameCharsRev('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsRev = (s0, s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  4\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('>')\n  const closingBrackets = brackets.split('<')\n\n  if (openingBrackets.length!== closingBrackets.length) {\n    return false\n  }\n\n  for (let i = 0; i < openingBrackets.length; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Returns true if the given string is a valid CSS color value.\nconst isValidColor = (color) => {\n  // We don't accept empty strings or strings that are whitespace.\n  if (color === '') {\n    return false\n  }\n\n  // We don't accept strings that start with a number.\n  if (/^\\d/.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  return true\n}\n\n// Returns true if the given string is a valid CSS color value.\nconst isValidHexColor = (color) => {\n  // We don't accept empty strings or strings that are whitespace.\n  if (color === '') {\n    return false\n  }\n\n  // We don't accept strings that start with a number.\n  if (/^\\d/.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  return true\n}\n\n// Returns true if the given string is a valid CSS color value.\nconst isValidColorName = (color) => {\n  // We don't accept empty strings or strings that are whitespace.\n  if (color === '') {\n    return false\n  }\n\n  // We don't accept strings that start with a number.\n  if (/^\\d/.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').\n  if (!/^#[0-9a-f]{6}$/i.test(color)) {\n    return false\n  }\n\n  // We don't accept strings that contain non-hex characters (like '#').", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j;\n  let prev;\n  let cur;\n  let next;\n  let len = l.length;\n  let flag;\n\n  while (i < len) {\n    prev = cur;\n    cur = l[i];\n    next = l[i + 1];\n    flag = cur > prev;\n    if (flag) {\n      if (next < cur) {\n        i++;\n      } else {\n        j = i;\n        while (j < len) {\n          cur = l[j];\n          next = l[j + 1];\n          flag = cur > prev;\n          if (flag) {\n            if (next < cur) {\n              break;\n            } else {\n              j++;\n            }\n          } else {\n            break;\n          }\n        }\n        i = j;\n      }\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1, 'p'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1, 'p', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1, 'p', 1, 'q'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1, 'p', 1, 'q', 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1, 'p', 1, 'q', 1, 'r'])\n  true\n  >>> monotonic([4, 1, 0, -10, 'a', 1, 'b', 1, 'c', 1, 'd', 1, 'e', 1, 'f', 1, 'g', 1, 'h', 1, 'i', 1, 'j', 1, 'k', 1, 'l', 1,'m', 1, 'n', 1, 'o', 1, 'p', 1, 'q', 1, 'r", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(4, 6)\n  2\n  >>> numberOfDivisors(4, 7)\n  0\n  >>> numberOfDivisors(4, 8)\n  1\n  >>> numberOfDivisors(4, 9)\n  1\n  >>> numberOfDivisors(4, 10)\n  0\n  >>> numberOfDivisors(4, 11)\n  1\n  >>> numberOfDivisors(4, 12)\n  1\n  >>> numberOfDivisors(4, 13)\n  1\n  >>> numberOfDivisors(4, 14)\n  1\n  >>> numberOfDivisors(4, 15)\n  1\n  >>> numberOfDivisors(4, 16)\n  1\n  >>> numberOfDivisors(4, 17)\n  1\n  >>> numberOfDivisors(4, 18)\n  1\n  >>> numberOfDivisors(4, 19)\n  1\n  >>> numberOfDivisors(4, 20)\n  1\n  >>> numberOfDivisors(4, 21)\n  1\n  >>> numberOfDivisors(4, 22)\n  1\n  >>> numberOfDivisors(4, 23)\n  1\n  >>> numberOfDivisors(4, 24)\n  1\n  >>> numberOfDivisors(4, 25)\n  1\n  >>> numberOfDivisors(4, 26)\n  1\n  >>> numberOfDivisors(4, 27)\n  1\n  >>> numberOfDivisors(4, 28)\n  1\n  >>> numberOfDivisors(4, 29)\n  1\n  >>> numberOfDivisors(4, 30)\n  1\n  >>> numberOfDivisors(4, 31)\n  1\n  >>> numberOfDivisors(4, 32)\n  1\n  >>> numberOfDivisors(4, 33)\n  1\n  >>> numberOfDivisors(4, 34)\n  1\n  >>> numberOfDivisors(4, 35)\n  1\n  >>> numberOfDivisors(4, 36)\n  1\n  >>> numberOfDivisors(4, 37)\n  1\n  >>> numberOfDivisors(4, 38)\n  1\n  >>> numberOfDivisors(4, 39)\n  1\n  >>> numberOfDivisors(4, 40)\n  1\n  >>> numberOfDivisors(4, 41)\n  1\n  >>> numberOfDivisors(4, 42)\n  1\n  >>> numberOfDivisors(4, 43)\n  1\n  >>> numberOfDivisors(4, 44)\n  1\n  >>> numberOfDivisors(4, 45)\n  1\n  >>> numberOfDivisors(4, 46)\n  1\n  >>> numberOfDivisors(4, 47)\n  1\n  >>> numberOfDivisors(4, 48)\n  1\n  >>> numberOfDivisors(4, 49)\n  1\n  >>> numberOfDivisors(4, 50)\n  1\n  >>> numberOfDivisors(4, 51)\n  1\n  >>> numberOfDivisors(4, 52)\n  1\n  >>> numberOfDivisors(4, 53)\n  1\n  >>> numberOfDivisors(4, 54)\n  1\n  >>> numberOfDivisors(4, 55)\n  1\n  >>> numberOfDivisors(4, 56)\n  1\n  >>> numberOfDivisors(4, 57)\n  1\n  >>> numberOfDivisors(4, 58)\n  1\n  >>> numberOfDivisors(4, 59)\n  1\n  >>> numberOfDivisors(4, 60)\n  1\n  >>> numberOfDivisors(4, 61)\n  1\n  >>> numberOfDivisors(4, 62)\n  1\n  >>> numberOfDivisors(4, 63)\n  1\n  >>> numberOfDivisors(4, 64)\n  1\n  >>> numberOfDivisors(4, 65)\n  1\n  >>> numberOfDivisors(4, 66)\n  1\n  >>> numberOfDivisors(4, 67)\n  1\n  >>> numberOfDivisors(4, 68)\n  1\n  >>> numberOfDivisors(4, 69)\n  1\n  >>> numberOfDivisors(4, 70)\n  1\n  >>> numberOfDivisors(4, 71)\n  1\n  >>> numberOfDivisors(4, 72)\n  1\n  >>> numberOfDivisors(4, 73)\n  1\n  >>> numberOfDivisors(4, 74)\n  1\n  >>> numberOfDivisors(4, 75)\n  1\n  >>> numberOfDivisors(4, 76)\n  1\n  >>> numberOfDivisors(4, 77)\n  1\n  >>> numberOfDivisors(4, 78)\n  1\n  >>> numberOfDivisors(4, 79)\n  1\n  >>> numberOfDivisors(4, 80)\n  1\n  >>> numberOfDivisors(4, 81)\n  1\n  >>> numberOfDivisors(4, 82)\n  1\n  >>> numberOfDivisors(4, 83)\n  1\n  >>> numberOfDivisors(4, 84)\n  1\n  >>> numberOfDivisors(4, 85)\n  1\n  >>> numberOfDivisors(4, 86)\n  1\n  >>> numberOfDivisors(4, 87)\n  1\n  >>> numberOfDivisors(4, 88)\n  1\n  >>> numberOfDivisors(4, 89)\n  1\n  >>> numberOfDivisors(4, 90)\n  1\n  >>> numberOfDivisors(4, 91)\n  1\n  >>> numberOfDivisors(4, 92)\n  1\n  >>> numberOfDivisors(4, 93)\n  1\n  >>> numberOfDivisors(4, 94)\n  1\n  >>> numberOfDivisors(4, 95)\n  1\n  >>> numberOfDivisors(4, 96)\n  1\n  >>> numberOfDivisors(4, 97)\n  1\n  >>> numberOfDivisors(4, 98)\n  1\n  >>> numberOfDivisors(4, 99)\n  1\n  >>> numberOfDivisors(4, 100)\n  1\n  >>> numberOfDivisors(4, 101)\n  1\n  >>> numberOfDivisors(4, 102)\n  1\n  >>> numberOfDivisors(4, 103)\n  1\n  >>> numberOfDivisors(4, 104)\n  1\n  >>> numberOfDivisors(4, 105)\n  1\n  >>> numberOfDivisors(4, 106)\n  1\n  >>> numberOfDivisors(4, 107)\n  1\n  >>> numberOfDivisors(4, 108)\n  1\n  >>> numberOfDivisors(4, 109)\n  1\n  >>> numberOfDivisors(4, 110)\n  1\n  >>> numberOfDivisors(4, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_count);\n      paren_count++;\n    } else if (paren_string[i] === ')') {\n      paren_count = paren_stack.pop();\n    } else if (paren_string[i] ==='') {\n      paren_level++;\n    }\n  }\n  return paren_stack;\n};\n\n/**\n * Given a string representing a mathematical expression, return the parsed expression\n * as a list of nested lists.\n * E.g.\n * '((x+y)+z)' -> [[['x', '+', 'y'], '+', 'z']]\n * '(x+y)+z' -> [['x', '+', 'y'], '+', 'z']\n * 'x+y+z' -> [['x', '+', 'y'], '+', 'z']\n * 'x+y+(z+w)' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w']]\n * '(x+y+(z+w))' -> [['x', '+', 'y'], '+', ['z', '+', 'w", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n  const allOpeningBracketsAreClosed = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket);\n  });\n  return allOpeningBracketsAreClosed;\n};\n\n/**\n * Given a string, returns a string with all spaces replaced with a single space.\n * \n * >>> replaceSpaces(\"hi there\")\n * \"hi there\"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpaces(\"hi there   \")\n * \"hi there   \"\n * >>> replaceSpaces(\"hi there  \")\n * \"hi there  \"\n * >>> replaceSpa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  let d = [];\n  for (let i = 1; i < n; i++) {\n    d.push(xs[i] - xs[i - 1]);\n  }\n  return d;\n};\n\n/* Returns sum of all elements in an array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  let total = 0;\n  for (let i = 0; i < xs.length; i++) {\n    total += xs[i];\n  }\n  return total;\n};\n\n/* Returns average of all elements in an array.\n  >>> average([1, 2, 3, 4, 5])\n  2.6666666666666665\n  */\nconst average = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Returns standard deviation of all elements in an array.\n  >>> stdev([1, 2, 3, 4, 5])\n  1.5811395070422535\n  */\nconst stdev = (xs) => {\n  let mean = average(xs);\n  let variance = 0;\n  for (let i = 0; i < xs.length; i++) {\n    variance += Math.pow(xs[i] - mean, 2);\n  }\n  return Math.sqrt(variance / xs.length);\n};\n\n/* Returns minimum of all elements in an array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  let min = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < min) {\n      min = xs[i];\n    }\n  }\n  return min;\n};\n\n/* Returns maximum of all elements in an array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  let max = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n    }\n  }\n  return max;\n};\n\n/* Returns product of all elements in an array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  let product = 1;\n  for (let i = 0; i < xs.length; i++) {\n    product *= xs[i];\n  }\n  return product;\n};\n\n/* Returns median of all elements in an array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  let middle = Math.floor(xs.length / 2);\n  if (xs.length % 2 === 0) {\n    return average(xs.slice(0, middle));\n  } else {\n    return average(xs.slice(middle));\n  }\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let count = 0;\n    for (let j = 0; j < xs.length; j++) {\n      if (xs[j] === xs[i]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [xs[i]];\n    } else if (count === maxCount) {\n      modes.push(xs[i]);\n    }\n  }\n  return modes;\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  let mode", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes in an array of integers and returns an array of the even numbers in the array.\n  >>> evens([1, 2, 3, 4])\n  [2, 4]\n  >>> evens([1, 2, 3, 4, 5])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])\n  [2, 4, 5]\n  >>> evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = '';\n  while (shift > x.length) {\n    digits = digits + x.slice(-shift);\n    x = x.slice(0, -shift);\n  }\n  digits = digits + x;\n  while (digits.length < shift) {\n    digits = digits + '0';\n  }\n  return digits;\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> toBase10(12)\n  'twelve'\n  >>> toBase10(12, 2)\n  'twelve'\n  >>> toBase10(12, 10)\n  '12'\n  >>> toBase10(12, 16)\n  '560'\n  >>> toBase10(12, 2)\n  'twelve'\n  >>> toBase10(12, 1)\n  'one'\n  >>> toBase10(12, 0)\n  'none'\n  */\nconst toBase10 = (x, base) => {\n  if (base === undefined) base = 10;\n  if (base < 2) return 'none';\n  if (base === 10) return x.toString();\n  if (base === 16) return toBase10(toBase10(x).toString(16));\n  if (base > 10) return toBase10(toBase10(x).toString(base));\n  return toBase10(toBase10(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 16.\n  >>> toBase16(12)\n  '0c0'\n  >>> toBase16(12, 2)\n  '0c0'\n  >>> toBase16(12, 10)\n  '0c0'\n  >>> toBase16(12, 16)\n  '0c0'\n  >>> toBase16(12, 2)\n  '0c0'\n  >>> toBase16(12, 1)\n  '0c'\n  >>> toBase16(12, 0)\n  '0c'\n  */\nconst toBase16 = (x, base) => {\n  if (base === undefined) base = 16;\n  if (base < 2) return 'none';\n  if (base === 16) return x.toString();\n  if (base > 16) return toBase16(toBase16(x).toString(base));\n  return toBase16(toBase16(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 2.\n  >>> toBase2(12)\n  '10'\n  >>> toBase2(12, 2)\n  '10'\n  >>> toBase2(12, 10)\n  '10'\n  >>> toBase2(12, 16)\n  '10'\n  >>> toBase2(12, 2)\n  '10'\n  >>> toBase2(12, 1)\n  '11'\n  >>> toBase2(12, 0)\n  '11'\n  */\nconst toBase2 = (x, base) => {\n  if (base === undefined) base = 2;\n  if (base < 2) return 'none';\n  if (base === 2) return x.toString();\n  if (base > 2) return toBase2(toBase2(x).toString(base));\n  return toBase2(toBase2(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 8, with leading zeros.\n  >>> toBase8(12)\n  '00001100'\n  >>> toBase8(12, 2)\n  '00001100'\n  >>> toBase8(12, 10)\n  '0000000000'\n  >>> toBase8(12, 16)\n  '0000000000'\n  >>> toBase8(12, 2)\n  '00001100'\n  >>> toBase8(12, 1)\n  '00000110'\n  >>> toBase8(12, 0)\n  '0000000000'\n  */\nconst toBase8 = (x, base) => {\n  if (base === undefined) base = 8;\n  if (base < 2) return 'none';\n  if (base === 8) return x.toString();\n  if (base > 8) return toBase8(toBase8(x).toString(base));\n  return toBase8(toBase8(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 16, with leading zeros.\n  >>> toBase16(12)\n  '0000000000'\n  >>> toBase16(12, 2)\n  '0000000000'\n  >>> toBase16(12, 10)\n  '0000000000'\n  >>> toBase16(12, 16)\n  '0000000000'\n  >>> toBase16(12, 2)\n  '0000000000'\n  >>> toBase16(12, 1)\n  '0000000001'\n  >>> toBase16(12, 0)\n  '0000000000'\n  */\nconst toBase16 = (x, base) => {\n  if (base === undefined) base = 16;\n  if (base < 2) return 'none';\n  if (base === 16) return x.toString();\n  if (base > 16) return toBase16(toBase16(x).toString(base));\n  return toBase16(toBase16(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 2, with leading zeros.\n  >>> toBase2(12)\n  '0000000000'\n  >>> toBase2(12, 2)\n  '0000000000'\n  >>> toBase2(12, 10)\n  '0000000000'\n  >>> toBase2(12, 16)\n  '0000000000'\n  >>> toBase2(12, 2)\n  '0000000000'\n  >>> toBase2(12, 1)\n  '0000000001'\n  >>> toBase2(12, 0)\n  '0000000000'\n  */\nconst toBase2 = (x, base) => {\n  if (base === undefined) base = 2;\n  if (base < 2) return 'none';\n  if (base === 2) return x.toString();\n  if (base > 2) return toBase2(toBase2(x).toString(base));\n  return toBase2(toBase2(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 8, with leading zeros.\n  >>> toBase8(12)\n  '0000000000'\n  >>> toBase8(12, 2)\n  '0000000000'\n  >>> toBase8(12, 10)\n  '0000000000'\n  >>> toBase8(12, 16)\n  '0000000000'\n  >>> toBase8(12, 2)\n  '0000000000'\n  >>> toBase8(12, 1)\n  '0000000001'\n  >>> toBase8(12, 0)\n  '0000000000'\n  */\nconst toBase8 = (x, base) => {\n  if (base === undefined) base = 8;\n  if (base < 2) return 'none';\n  if (base === 8) return x.toString();\n  if (base > 8) return toBase8(toBase8(x).toString(base));\n  return toBase8(toBase8(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base 16, with leading zeros.\n  >>> toBase16(12)\n  '0000000000'\n  >>> toBase16(12, 2)\n  '0000000000'\n  >>> toBase16(12, 10)\n  '0000000000'\n  >>> toBase16(12, 16)\n  '0000000000'\n  >>> toBase16(12, 2)\n  '0000000000'\n  >>> toBase16(12, 1)\n  '0000000001'\n  >>> toBase16(12, 0)\n  '0000000000'\n  */\nconst toBase16 = (x, base) => {\n  if (base === undefined) base = 16;\n  if (base < 2) return 'none';\n  if (base === 16) return x.toString();\n  if (base > 16) return toBase16(toBase16(x).toString(base));\n  return toBase16(toBase16(x.toString(base)).toString());\n};\n\n/*\n  Convert a number to a string in base ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigits = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsDigitsDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsDigitsDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumDigitsDigitsDigitsDigitsDigitsLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ');\n  return n - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter(n => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = evenValues.reduce((a, b) => a < b? a : b);\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((a, b) => a < b? a : b);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((a, b) => a < b? a : b);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((a, b) => a < b? a : b);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const oddValues = arr.filter(n => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = oddValues.reduce((a, b) => a < ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  if (freq >= lst[freq]) {\n    return freq;\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing positive integer in this list.\n  If the list does not contain any missing positive integer, return -1.\n  Examples:\n      missingPositive([2, -1, 0, 4, 5]) == 4\n      missingPositive([-2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingPositive = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing negative integer in this list.\n  If the list does not contain any missing negative integer, return -1.\n  Examples:\n      missingNegative([2, -1, 0, 4, 5]) == 4\n      missingNegative([-2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingNegative = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing positive integer in this list.\n  If the list does not contain any missing positive integer, return -1.\n  Examples:\n      missingPositive([2, -1, 0, 4, 5]) == 4\n      missingPositive([-2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingPositive = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing negative integer in this list.\n  If the list does not contain any missing negative integer, return -1.\n  Examples:\n      missingNegative([2, -1, 0, 4, 5]) == 4\n      missingNegative([-2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingNegative = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing positive integer in this list.\n  If the list does not contain any missing positive integer, return -1.\n  Examples:\n      missingPositive([2, -1, 0, 4, 5]) == 4\n      missingPositive([-2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingPositive = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing negative integer in this list.\n  If the list does not contain any missing negative integer, return -1.\n  Examples:\n      missingNegative([2, -1, 0, 4, 5]) == 4\n      missingNegative([-2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingNegative = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing positive integer in this list.\n  If the list does not contain any missing positive integer, return -1.\n  Examples:\n      missingPositive([2, -1, 0, 4, 5]) == 4\n      missingPositive([-2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, 5]) == -1\n      missingPositive([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingPositive = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing negative integer in this list.\n  If the list does not contain any missing negative integer, return -1.\n  Examples:\n      missingNegative([2, -1, 0, 4, 5]) == 4\n      missingNegative([-2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, 5]) == -1\n      missingNegative([-1, -2, -1, 0, 4, -5]) == 4\n*/\nconst missingNegative = (lst) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min || lst[i] > max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Your task is to find the first missing positive integer in this list.\n  If the list does not contain any missing positive integer, return -1.\n  Examples:\n      missingPositive([2, -1, 0, 4, 5]) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  replaceChar('hello', 'h', 'x') == \"xhox\"\n  */\nconst replaceChar = (str, char, replacement) => {\n  return str.replace(new RegExp(char, 'g'), replacement);\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n  Examples:\n  replaceChar('hello', 'h', 'x') == \"xlox\"\n  replaceChar('hello', 'h', 'x", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero`)\n  if (d === 0) throw new Error(`Triangle area cannot be zero`)\n  const s = (a + b + c + d) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c) * (s - d))\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  if (a === b) throw new Error(`Triangle area cannot be zero`)\n  if (b === c) return a\n  if (c === 0) throw new Error(`Triangle area cannot be zero", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly2 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly3 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly4 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly5 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly6 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly7 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly8 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly9 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly10 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly11 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly12 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly13 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly14 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly15 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly16 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly17 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly18 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly19 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly20 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly21 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly22 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly23 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly24 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly25 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly26 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly27 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly28 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly29 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly30 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly31 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\nconst willItFly32 = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.indexOf(x) < 0)\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hihihihihi') ➞ 5\n  count('hihihihihihi') ➞ 6\n  count('hihihihihihihi') ➞ 7\n  count('hihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  */\nconst count = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hihihihihi') ➞ 5\n  count('hihihihihihi') ➞ 6\n  count('hihihihihihihi') ➞ 7\n  count('hihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  */\nconst count = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hihihihihi') ➞ 5\n  count('hihihihihihi') ➞ 6\n  count('hihihihihihihi') ➞ 7\n  count('hihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  */\nconst count = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hihihihihi') ➞ 5\n  count('hihihihihihi') ➞ 6\n  count('hihihihihihihi') ➞ 7\n  count('hihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  */\nconst count = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hihihihihi') ➞ 5\n  count('hihihihihihi') ➞ 6\n  count('hihihihihihihi') ➞ 7\n  count('hihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  */\nconst count = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hihihihihi') ➞ 5\n  count('hihihihihihi') ➞ 6\n  count('hihihihihihihi') ➞ 7\n  count('hihihihihihihihi') ➞ 8\n  count('hihihihihihihihihi') ➞ 9\n  count('hihihihihihihihihihi') ➞ 10\n  */\nconst count = (str) => {\n  let count = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that accepts a string and returns the number of times the string occurs in the string.\n\n  Examples\n  count('hi') ➞ 1\n  count('hihi') ➞ 2\n  count('hihihi') ➞ 3\n  count('hihihihi') ➞ 4\n  count('hi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a prime number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isPerfect(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPerfect = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function that returns true if the given number is a perfect number and false otherwise.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return x === Math.pow(n, 1 / 2);\n  return isPowerOf(x, n / 2);\n};\n\n/*\n  Write a function that returns true if a number x is a power of n and false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let hexNumArray = hexNum.split('');\n  for (let i = 0; i < hexNumArray.length; i++) {\n    if (hexNumArray[i] === 'A' || hexNumArray[i] === 'B' || hexNumArray[i] === 'C' || hexNumArray[i] === 'D' || hexNumArray[i] === 'E' || hexNumArray[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey2 = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let hexNumArray = hexNum.split('');\n  for (let i = 0; i < hexNumArray.length; i++) {\n    if (hexNumArray[i] === '2' || hexNumArray[i] === '3' || hexNumArray[i] === '5' || hexNumArray[i] === '7') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey3 = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let hexNumArray = hexNum.split('');\n  for (let i = 0; i < hexNumArray.length; i++) {\n    if (hexNumArray[i] === 'B' || hexNumArray[i] === 'D' || hexNumArray[i] === 'E') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey4 = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let hexNumArray = hexNum.split('');\n  for (let i = 0; i < hexNumArray.length; i++) {\n    if (hexNumArray[i] === 'A' || hexNumArray[i] === 'B' || hexNumArray[i] === 'C' || hexNumArray[i] === 'D' || hexNumArray[i] === 'E' || hexNumArray[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimal%2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal/2);\n  }\n  return `db${binary}`;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number will\n  be given as a string. The function should return an integer, with the decimal number represented\n  as a string.\n\n  Examples:\n  binaryToDecimal(\"1111\") # returns 15\n  binaryToDecimal(\"100000\") # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal * 2 + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to a binary number. The decimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  decimalToBinary(15) # returns \"1111\"\n  decimalToBinary(32) # returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimal%2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal/2);\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i))}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i))}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i))}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i))}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a hexadecimal number. The binary number will\n  be given as a string. The function should return an integer, with the hexadecimal number represented\n  as a string.\n\n  Examples:\n  binaryToHex(\"1111\") # returns \"f\"\n  binaryToHex(\"100000\") # returns \"10\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = `${hex}${binary[i]}`;\n  }\n  return hex;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to a binary number. The hexadecimal number will\n  be given as a string. The function should return an integer, with the binary number represented\n  as a string.\n\n  Examples:\n  hexToBinary(\"f\") # returns \"1111\"\n  hexToBinary(\"10\") # returns \"100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = `${binary}${parseInt(hex.charAt(i))}`;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 0]\n  }\n  const sum = numbers.reduce((acc, val) => acc + val, 0)\n  const product = numbers.reduce((acc, val) => acc * val, 1)\n  return [sum, product]\n}\n\n/* Given a list of integers, return a list of all possible permutations.\n  >>> permutations([1, 2, 3])\n  [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  */\nconst permutations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n  return result.reduce((acc, val) => acc.concat(val), [])\n}\n\n/* Given a list of integers, return a list containing all the possible combinations.\n  >>> combinations([1, 2, 3])\n  [[1, 2], [1, 3], [2, 3]]\n  */\nconst combinations = (numbers) => {\n  const result = []\n  const n = numbers.length\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1\n    }\n    return factorial(n-1) * n\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        result.push([numbers[i]])\n      } else {\n        result.push([numbers[i], numbers[j", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count === (s.length - 2);\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  Return true if it contains only letters a-z and false otherwise.\n  For example:\n  isOnlyLetters(a) => true\n  isOnlyLetters(aa) => false\n  isOnlyLetters(ab) => false\n  isOnlyLetters(abc) => false\n  isOnlyLetters(abd) => false\n  isOnlyLetters(abe) => false\n  isOnlyLetters(abef) => true\n  isOnlyLetters(abefg) => false\n  isOnlyLetters(abfg) => false\n  isOnlyLetters(abfgd) => false\n  isOnlyLetters(abh) => false\n  isOnlyLetters(abhg) => false\n  isOnlyLetters(abhgf) => false\n  isOnlyLetters(abhgfd) => false\n  isOnlyLetters(abhj) => false\n  isOnlyLetters(abhjg) => false\n  isOnlyLetters(abhjgf) => false\n  isOnlyLetters(abhjgfd) => false\n  isOnlyLetters(abhjgfed) => false\n  isOnlyLetters(abhjgfedc) => false\n  isOnlyLetters(abhjgfedcj) => false\n  isOnlyLetters(abhjgfedcjg) => false\n  isOnlyLetters(abhjgfedcjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhj) => false\n  isOnlyLetters(abhjgfedcjgfhjg) => false\n  isOnlyLetters(abhjgfedcjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhj) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjg) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhj) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjg) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhj) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjg) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfhjgfh) => false\n  isOnlyLetters(abhjgfedcjgfhjgfhjgfhj", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gpa = grades.reduce((acc, cur) => acc + cur, 0);\n  let gpaSum = gpa;\n  let gpaSumOfSquares = gpa;\n  let gpaSumOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = gpa;\n  let gpaSumOfSquareOfSquareOfSquareOfSquare", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '.') {\n      if (string[i]!== '/') {\n        if (string[i]!== '+') {\n          if (string[i]!== '-') {\n            if (string[i]!== '*') {\n              if (string[i]!== '/') {\n                if (string[i]!== '(') {\n                  if (string[i]!== ')') {\n                    if (string[i]!== '[') {\n                      if (string[i]!== ']') {\n                        prime = false;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a palindrome and false otherwise\n  Examples\n  palindrome('abba') == true\n  palindrome('aba') == false\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba') == true\n  palindrome('abba", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 5\n  */\nconst addOdds = (lst) => {\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) == 14\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list..\n\n\n  Examples:\n      product([4, 2, 6, 7]) == 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the largest element in the list..\n\n\n  Examples:\n      max([4, 2, 6, 7]) == 7\n  */\nconst max = (lst) => {\n  let maxValue = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  return maxValue;\n};\n\n/*Given a non-empty list of integers lst. find the smallest element in the list..\n\n\n  Examples:\n      min([4, 2, 6, 7]) == 4\n  */\nconst min = (lst) => {\n  let minValue = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n  }\n  return minValue;\n};\n\n/*Given a non-empty list of integers lst. find the index of the first occurrence of the target element in the list..\n\n\n  Examples:\n      indexOf([4, 2, 6, 7], 7) == 3\n  */\nconst indexOf = (lst, target) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === target) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*Given a non-empty list of integers lst. reverse the elements in place..\n\n\n  Examples:\n      reverse([4, 2, 6, 7]) == [7, 4, 2, 6]\n  */\nconst reverse = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    let temp = lst[i];\n    lst[i] = lst[lst.length - i - 1];\n    lst[lst.length - i - 1] = temp;\n  }\n  return lst;\n};\n\n/*Given a non-empty list of integers lst. sort the list in descending order using the compare function..\n\n\n  Examples:\n      sort([4, 2, 6, 7], (a, b) => a > b) ==> [7, 6, 4, 2]\n  */\nconst sort = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in ascending order using the compare function..\n\n\n  Examples:\n      sort([4, 2, 6, 7], (a, b) => a < b) ==> [2, 4, 6, 7]\n  */\nconst sortAscending = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in descending order using the compare function..\n\n\n  Examples:\n      sortDescending([4, 2, 6, 7], (a, b) => a > b) ==> [7, 6, 4, 2]\n  */\nconst sortDescending = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in ascending order using the compare function..\n\n\n  Examples:\n      sortAscending([4, 2, 6, 7], (a, b) => a < b) ==> [2, 4, 6, 7]\n  */\nconst sortAscendingOdds = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in descending order using the compare function..\n\n\n  Examples:\n      sortDescendingOdds([4, 2, 6, 7], (a, b) => a < b) ==> [7, 6, 4, 2]\n  */\nconst sortDescendingOdds = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in ascending order using the compare function..\n\n\n  Examples:\n      sortAscendingOdds([4, 2, 6, 7], (a, b) => a < b) ==> [2, 4, 6, 7]\n  */\nconst sortAscendingEvens = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in descending order using the compare function..\n\n\n  Examples:\n      sortDescendingEvens([4, 2, 6, 7], (a, b) => a < b) ==> [7, 6, 4, 2]\n  */\nconst sortDescendingEvens = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in ascending order using the compare function..\n\n\n  Examples:\n      sortAscendingEvens([4, 2, 6, 7], (a, b) => a < b) ==> [2, 4, 6, 7]\n  */\nconst sortAscendingEvensOdds = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return 1;\n    }\n    return -1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in descending order using the compare function..\n\n\n  Examples:\n      sortDescendingEvensOdds([4, 2, 6, 7], (a, b) => a < b) ==> [7, 6, 4, 2]\n  */\nconst sortDescendingEvensOdds = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\n/*Given a non-empty list of integers lst. sort the list in ascending order using the compare function..\n\n\n  Examples:\n      sortAscendingEvensOdds([4, 2, 6, 7], (a, b) => a < b) ==> [2, 4, 6, 7]\n  */\nconst sortAscendingEvensOddsOdds = (lst, compare) => {\n  let sortedArray = lst;\n  sortedArray.sort((a, b) => {\n    if (compare(a, b)) {\n      return 1;\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return a.charCodeAt() - b.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return a.charCodeAt() - b.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWords.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => {\n    return b.charCodeAt() - a.charCodeAt();\n  });\n  return sortedWord", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = [];\n  const col = [];\n  const rowMap = {};\n  const colMap = {};\n  lst.forEach((row, i) => {\n    row.forEach((val, j) => {\n      if (rowMap[j]) {\n        rowMap[j].push(val);\n      } else {\n        rowMap[j] = [];\n        rowMap[j].push(val);\n      }\n    });\n  });\n  Object.keys(rowMap).forEach(key => {\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => b - a);\n    rowMap[key].sort((a, b) => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  you will sort the given array in descending order if the sum( first index value, last index value) is even,\n  or sort it in ascending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is even,\n  or sort it in descending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  you will sort the given array in descending order if the sum( first index value, last index value) is even,\n  or sort it in ascending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is even,\n  or sort it in descending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  you will sort the given array in descending order if the sum( first index value, last index value) is even,\n  or sort it in ascending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is even,\n  or sort it in descending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in ascending order,\n  you will sort the given array in descending order if the sum( first index value, last index value) is even,\n  or sort it in ascending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting in descending order,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is even,\n  or sort it in descending order if the sum( first index value, last index value) is odd.\n\n  Note:\n  * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns 'ix'\n  */\nconst encryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    encrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n  }\n  return encrypted;\n};\n\n/*Create a function decryptString that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decryptString('lm') returns 'hi'\n  decryptString('ewhjklnop') returns 'asdfghjkl'\n  decryptString('kj') returns 'gf'\n  decryptString('ix') returns 'et'\n  */\nconst decryptString = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    decrypted += rotatedAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2);\n  }\n  return decrypted;\n};\n\n/*Create a function encryptString that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptString('hi') returns 'lm'\n  encryptString('asdfghjkl') returns 'ewhjklnop'\n  encryptString('gf') returns 'kj'\n  encryptString('et') returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.5, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 3, 3.5, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    median += numbers[i];\n    count++;\n  }\n  if (count % 2 === 0) {\n    median = median / 2;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(median);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 3, 3]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      mode = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === mode) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling count element found until given moment\n  in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 4, 4, 4]\n  */\nconst rollingCount = (numbers) => {\n  const result = [];\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 3.5, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2.5, 3, 3.5, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    median += numbers[i];\n    count++;\n  }\n  if (count % 2 === 0) {\n    median = median / 2;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(median);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 4, 3, 3]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      mode = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === mode) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / count));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  return lst[1];\n};\n\n/*\n  You are given a list of integers. Write a function that returns the sum of the integers in the list.\n  \n  sum([1, 2, 3]) == 6\n  sum([-1, -2, -3]) == 6\n  sum([]) == 0\n  sum([1, 1]) == null\n  */\nconst sum = (lst) => {\n  if (lst.length < 2) return null;\n  return lst.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  You are given a list of integers. Write a function that returns the product of the integers in the list.\n  \n  product([1, 2, 3]) == 6\n  product([-1, -2, -3]) == -1\n  product([]) == 1\n  product([1, 1]) == null\n  */\nconst product = (lst) => {\n  if (lst.length < 2) return null;\n  return lst.reduce((acc, curr) => acc * curr, 1);\n};\n\n/*\n  You are given a list of integers. Write a function that returns the largest integer in the list.\n  \n  max([1, 2, 3]) == 3\n  max([-1, -2, -3]) == -3\n  max([]) == null\n  max([1, 1]) == null\n  */\nconst max = (lst) => {\n  if (lst.length < 2) return null;\n  return Math.max(...lst);\n};\n\n/*\n  You are given a list of integers. Write a function that returns the smallest integer in the list.\n  \n  min([1, 2, 3]) == 1\n  min([-1, -2, -3]) == -1\n  min([]) == null\n  min([1, 1]) == null\n  */\nconst min = (lst) => {\n  if (lst.length < 2) return null;\n  return Math.min(...lst);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that add up to a specific value.\n  \n  sumToN([1, 2, 3], 2) == [3, 5]\n  sumToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  sumToN([], 0) == []\n  sumToN([1, 1], 0) == []\n  sumToN([1, 1], 1) == [1]\n  */\nconst sumToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that multiply to a specific value.\n  \n  productToN([1, 2, 3], 2) == [1, 3]\n  productToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  productToN([], 0) == []\n  productToN([1, 1], 0) == []\n  productToN([1, 1], 1) == [1]\n  */\nconst productToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that divide to a specific value.\n  \n  divideToN([1, 2, 3], 2) == [1, 3]\n  divideToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  divideToN([], 0) == []\n  divideToN([1, 1], 0) == []\n  divideToN([1, 1], 1) == [1]\n  */\nconst divideToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that multiply to a specific value.\n  \n  productToN([1, 2, 3], 2) == [1, 3]\n  productToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  productToN([], 0) == []\n  productToN([1, 1], 0) == []\n  productToN([1, 1], 1) == [1]\n  */\nconst productToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that divide to a specific value.\n  \n  divideToN([1, 2, 3], 2) == [1, 3]\n  divideToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  divideToN([], 0) == []\n  divideToN([1, 1], 0) == []\n  divideToN([1, 1], 1) == [1]\n  */\nconst divideToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that multiply to a specific value.\n  \n  productToN([1, 2, 3], 2) == [1, 3]\n  productToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  productToN([], 0) == []\n  productToN([1, 1], 0) == []\n  productToN([1, 1], 1) == [1]\n  */\nconst productToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that divide to a specific value.\n  \n  divideToN([1, 2, 3], 2) == [1, 3]\n  divideToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  divideToN([], 0) == []\n  divideToN([1, 1], 0) == []\n  divideToN([1, 1], 1) == [1]\n  */\nconst divideToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that multiply to a specific value.\n  \n  productToN([1, 2, 3], 2) == [1, 3]\n  productToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  productToN([], 0) == []\n  productToN([1, 1], 0) == []\n  productToN([1, 1], 1) == [1]\n  */\nconst productToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr], []);\n};\n\n/*\n  You are given a list of integers. Write a function that returns a list of all integers in the list that divide to a specific value.\n  \n  divideToN([1, 2, 3], 2) == [1, 3]\n  divideToN([-1, -2, -3, 2, 1], 1) == [-1, -3]\n  divideToN([], 0) == []\n  divideToN([1, 1], 0) == []\n  divideToN([1, 1], 1) == [1]\n  */\nconst divideToN = (lst, val) => {\n  if (lst.length < 2) return [];\n  return lst.filter((n) => n % val === 0).reduce((acc, curr) => [...acc, curr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredoms = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredoms += 1\n    }\n  }\n  return boredoms\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sadness. A sadness is a sentence that starts with the word \"U\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isSad(\"Hello world\")\n  0\n  >>> isSad(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isSad = (S) => {\n  let sadness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'U') {\n      sadness += 1\n    }\n  }\n  return sadness\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isAnger(\"Hello world\")\n  0\n  >>> isAnger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAnger (S) {\n  let anger = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') {\n      anger += 1\n    }\n  }\n  return anger\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isFear(\"Hello world\")\n  0\n  >>> isFear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isFear = (S) => {\n  let fear = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') {\n      fear += 1\n    }\n  }\n  return fear\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isDisgust(\"Hello world\")\n  0\n  >>> isDisgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDisgust = (S) => {\n  let disgust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') {\n      disgust += 1\n    }\n  }\n  return disgust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isFear(\"Hello world\")\n  0\n  >>> isFear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isFear = (S) => {\n  let fear = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') {\n      fear += 1\n    }\n  }\n  return fear\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isDisgust(\"Hello world\")\n  0\n  >>> isDisgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDisgust = (S) => {\n  let disgust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') {\n      disgust += 1\n    }\n  }\n  return disgust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of happiness. A happiness is a sentence that starts with the word \"H\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isHappy(\"Hello world\")\n  0\n  >>> isHappy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappy = (S) => {\n  let happiness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'H') {\n      happiness += 1\n    }\n  }\n  return happiness\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of happiness. A happiness is a sentence that starts with the word \"H\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isHappy(\"Hello world\")\n  0\n  >>> isHappy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappy = (S) => {\n  let happiness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'H') {\n      happiness += 1\n    }\n  }\n  return happiness\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of happiness. A happiness is a sentence that starts with the word \"H\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isHappy(\"Hello world\")\n  0\n  >>> isHappy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappy = (S) => {\n  let happiness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'H') {\n      happiness += 1\n    }\n  }\n  return happiness\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of happiness. A happiness is a sentence that starts with the word \"H\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isHappy(\"Hello world\")\n  0\n  >>> isHappy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappy = (S) => {\n  let happiness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'H') {\n      happiness += 1\n    }\n  }\n  return happine", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddNumber(5, 2, 7) ➞ true\n  oddNumber(3, 2, 2) ➞ false\n  oddNumber(3, -2, 1) ➞ false\n  oddNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddNumber = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 1\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  evenNumber(5, 2, 7) ➞ false\n  evenNumber(3, 2, 2) ➞ true\n  evenNumber(3, -2, 1) ➞ false\n  evenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst evenNumber = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ true\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return x % y === 0 && x % z === 1\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ false\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber2 = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ false\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber3 = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ false\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber4 = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ false\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber5 = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ false\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber6 = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  oddOrEvenNumber(5, 2, 7) ➞ false\n  oddOrEvenNumber(3, 2, 2) ➞ true\n  oddOrEvenNumber(3, -2, 1) ➞ true\n  oddOrEvenNumber(3.6, -2.2, 2) ➞ true\n  */\nconst oddOrEvenNumber7 = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return true\n  return x % y === 0 && x % z === 0\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      encodedMessage += nextLetter;\n    } else {\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      decodedMessage += nextLetter;\n    } else {\n      decodedMessage += letter;\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      encodedMessage += nextLetter;\n    } else {\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      decodedMessage += nextLetter;\n    } else {\n      decodedMessage += letter;\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      encodedMessage += nextLetter;\n    } else {\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      decodedMessage += nextLetter;\n    } else {\n      decodedMessage += letter;\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      encodedMessage += nextLetter;\n    } else {\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      decodedMessage += nextLetter;\n    } else {\n      decodedMessage += letter;\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex > -1) {\n      const nextLetter = alphabet[letterIndex + 1];\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number.\n\n  Examples:\n  For num = 3, the output should be 2\n  For num = 5, the output should be 2\n  For num = 6, the output should be 2\n  For num = 7, the output should be 3\n  For num = 9, the output should be 3\n  For num = 10, the output should be 3\n  For num = 12, the output should be 3\n  For num = 14, the output should be 3\n  For num = 16, the output should be 3\n  For num = 18, the output should be 3\n  For num = 19, the output should be 3\n  For num = 20, the output should be 3\n  For num = 21, the output should be 3\n  For num = 22, the output should be 3\n  For num = 23, the output should be 3\n  For num = 24, the output should be 3\n  For num = 25, the output should be 3\n  For num = 26, the output should be 3\n  For num = 27, the output should be 3\n  For num = 28, the output should be 3\n  For num = 29, the output should be 3\n  For num = 30, the output should be 3\n  For num = 31, the output should be 3\n  For num = 32, the output should be 3\n  For num = 34, the output should be 3\n  For num = 36, the output should be 3\n  For num = 37, the output should be 3\n  For num = 38, the output should be 3\n  For num = 39, the output should be 3\n  For num = 40, the output should be 3\n  For num = 42, the output should be 3\n  For num = 44, the output should be 3\n  For num = 47, the output should be 3\n  For num = 49, the output should be 3\n  For num = 50, the output should be 3\n  For num = 51, the output should be 3\n  For num = 53, the output should be 3\n  For num = 55, the output should be 3\n  For num = 57, the output should be 3\n  For num = 59, the output should be 3\n  For num = 61, the output should be 3\n  For num = 63, the output should be 3\n  For num = 65, the output should be 3\n  For num = 67, the output should be 3\n  For num = 69, the output should be 3\n  For num = 71, the output should be 3\n  For num = 73, the output should be 3\n  For num = 75, the output should be 3\n  For num = 77, the output should be 3\n  For num = 79, the output should be 3\n  For num = 81, the output should be 3\n  For num = 83, the output should be 3\n  For num = 85, the output should be 3\n  For num = 87, the output should be 3\n  For num = 89, the output should be 3\n  For num = 91, the output should be 3\n  For num = 93, the output should be 3\n  For num = 95, the output should be 3\n  For num = 97, the output should be 3\n  For num = 99, the output should be 3\n  For num = 101, the output should be 3\n  For num = 103, the output should be 3\n  For num = 105, the output should be 3\n  For num = 107, the output should be 3\n  For num = 109, the output should be 3\n  For num = 11, the output should be 3\n  For num = 112, the output should be 3\n  For num = 114, the output should be 3\n  For num = 117, the output should be 3\n  For num = 119, the output should be 3\n  For num = 120, the output should be 3\n  For num = 122, the output should be 3\n  For num = 124, the output should be 3\n  For num = 126, the output should be 3\n  For num = 128, the output should be 3\n  For num = 130, the output should be 3\n  For num = 131, the output should be 3\n  For num = 133, the output should be 3\n  For num = 135, the output should be 3\n  For num = 137, the output should be 3\n  For num = 139, the output should be 3\n  For num = 141, the output should be 3\n  For num = 143, the output should be 3\n  For num = 145, the output should be 3\n  For num = 147, the output should be 3\n  For num = 149, the output should be 3\n  For num = 151, the output should be 3\n  For num = 153, the output should be 3\n  For num = 155, the output should be 3\n  For num = 157, the output should be 3\n  For num = 159, the output should be 3\n  For num = 161, the output should be 3\n  For num = 163, the output should be 3\n  For num = 165, the output should be 3\n  For num = 167, the output should be 3\n  For num = 169, the output should be 3\n  For num = 171, the output should be 3\n  For num = 173, the output should be 3\n  For num = 175, the output should be 3\n  For num = 177, the output should be 3\n  For num = 179, the output should be 3\n  For num = 181, the output should be 3\n  For num = 183, the output should be 3\n  For num = 185, the output should be 3\n  For num = 187, the output should be 3\n  For num = 189, the output should be 3\n  For num = 191, the output should be 3\n  For num = 193, the output should be 3\n  For num = 195, the output should be 3\n  For num = 197, the output should be 3\n  For num = 199, the output should be 3\n  For num = 201, the output should be 3\n  For num = 203, the output should be 3\n  For num = 205, the output should be 3\n  For num = 207, the output should be 3\n  For num = 209, the output should be 3\n  For num = 211, the output should be 3\n  For num = 213, the output should be 3\n  For num = 215, the output should be 3\n  For num = 217, the output should be 3\n  For num = 219, the output should be 3\n  For num = 221, the output should be 3\n  For num = 223, the output should be 3\n  For num = 225, the output should be 3\n  For num = 227, the output should be 3\n  For num = 229, the output should be 3\n  For num = 231, the output should be 3\n  For num = 233, the output should be 3\n  For num = 235, the output should be 3\n  For num = 237, the output should be 3\n  For num = 239, the output should be 3\n  For num = 0 the output should be 0\n*/\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = primeCheck(lst[i]);\n    if (prime > maxPrime) {\n      maxPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number.\n\n  Examples:\n  For num = 3, the output should be 2\n  For num = 5, the output should be 2\n  For num = 6, the output should be 2\n  For num = 7, the output should be 3\n  For num = 9, the output should be 3\n  For num = 10, the output should be 3\n  For num = 12, the output should be 3\n  For num = 14, the output should be 3\n  For num = 16, the output ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].toLowerCase()!== keys[i]){\n        return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] === \"string\"){\n      if(keys[i].", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the squares of the integers\n  in the array.\n  for example:\n  sumOfSquares([2,3,4]) => [4,9,16]\n  sumOfSquares([1,3,5]) => [3,10,15]\n  sumOfSquares([]) => []\n  sumOfSquares([1,3,5,7,9]) => [25,49,81]\n  sumOfSquares([1,3,5,7,9,11,13,15]) => [50,73,105]\n  sumOfSquares([1,3,5,7,9,11,13,15,17,19]) => [50,73,105,131,179,253]\n  sumOfSquares([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => [50,73,105,131,179,253,341,409,419,487,553,613,659,729,787,841,911,969,1013,1097,1153,1229,1289,1367,1423,1479,1521,1571,1623,1679,1745,1797,1859,1907,1969,2039,2093,2151,2207,2253,2319,2371,2423,2489,2549,2591,2623,2671,2739,2783,2821,2877,2923,2969,3031]\n  */\nconst sumOfSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfSquares([2,3,4]) => [8,12,16]\n  productOfSquares([1,3,5]) => [3,10,15]\n  productOfSquares([]) => []\n  productOfSquares([1,3,5,7,9]) => [25,49,81]\n  productOfSquares([1,3,5,7,9,11,13,15]) => [50,73,105]\n  productOfSquares([1,3,5,7,9,11,13,15,17,19]) => [50,73,105,131,179,253]\n  productOfSquares([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => [50,73,105,131,179,253,341,409,419,487,553,613,659,729,787,841,911,969,1013,1097,1153,1229,1289,1367,1423,1479,1521,1571,1623,1679,1745,1797,1859,1907,1969,2039,2093,2151,2207,2253,2319,2371,2423,2489,2549,2591,2623,2671,2739,2783,2821,2877,2923,2969,3031]\n  */\nconst productOfSquares = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers in the array.\n  for example:\n  sumOfArray([2,3,4]) => [5,7,9]\n  sumOfArray([1,3,5]) => [6,10,12]\n  sumOfArray([]) => []\n  sumOfArray([1,3,5,7,9]) => [18,22,26]\n  sumOfArray([1,3,5,7,9,11,13,15]) => [21,25,30]\n  sumOfArray([1,3,5,7,9,11,13,15,17,19]) => [21,25,30,36,42,50]\n  sumOfArray([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => [21,25,30,36,42,50,62,70,81,92,103,113,124,135,146,158,170,182,194,206,218,230,242,254,266,278,290,302,314,326,348,360]\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the integers in the array.\n  for example:\n  productOfArray([2,3,4]) => [24,48,96]\n  productOfArray([1,3,5]) => [3,15,31]\n  productOfArray([]) => []\n  productOfArray([1,3,5,7,9]) => [60,120,240]\n  productOfArray([1,3,5,7,9,11,13,15]) => [60,120,240,480,960]\n  productOfArray([1,3,5,7,9,11,13,15,17,19]) => [60,120,240,480,960,1440,2880]\n  productOfArray([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]) => [60,120,240,480,960,1440,2880,4320,6440,7640,9840]\n  */\nconst productOfArray = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers in the array.\n  for example:\n  sumOfArray([2,3,4]) => [5,7,9]\n  sumOfArray([1,3,5]) => [6,10,12]\n  sumOfArray([]) => []\n  sumOfArray([1,3,5,7,9]) => [18,22,26]\n  sumOfArray([1,3,5,7,9,11,13,15]) => [21,25,30]\n  sumOfArray([1,3,5,7,9,11,13,15,17,19]) => [21,25,30,36,42,50]\n  sumOfArray([1,3,5,7,9,11,13,15,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply15 = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > 0? a * b : a * b;\n};\n\n/*Complete the function that takes two integers and returns \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      if (s[i] >= 'a' && s[i] <= 'z') {\n        upperCount += 1;\n      }\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let lowerCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        lowerCount += 1;\n      }\n    }\n  }\n  return lowerCount;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        consonantCount += 1;\n      }\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        vowelCount += 1;\n      }\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        consonantCount += 1;\n      }\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        vowelCount += 1;\n      }\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of consonants in all indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsAll = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        consonantCount += 1;\n      }\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of vowels in all indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsAll = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        vowelCount += 1;\n      }\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in all indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperAll = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      if (s[i] >= 'a' && s[i] <= 'z') {\n        upperCount += 1;\n      }\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in all indices.\n  \n  For example:\n  countLower('aBCdEf') returns 3\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerAll = (s) => {\n  let lowerCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        lowerCount += 1;\n      }\n    }\n  }\n  return lowerCount;\n};\n\n/*\n  Given a string s, count the number of consonants in all indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsAll = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        consonantCount += 1;\n      }\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, count the number of vowels in all indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsAll = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      if (s[i] >= 'A' && s[i] <= 'Z') {\n        vowelCount += 1;\n      }\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpperOdd('a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split('.');\n  const [integer1int, integer2int] = [parseInt(integer1), parseInt(integer2)];\n  if (Math.abs(integer1int - integer2int) < 1) {\n    return integer1int;\n  }\n  return integer2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  const [decimal1, decimal2] = value.split('.');\n  const [decimal1int, decimal2int] = [parseFloat(decimal1), parseFloat(decimal2)];\n  if (Math.abs(decimal1int - decimal2int) < 1) {\n    return decimal1int;\n  }\n  return decimal2int;\n};\n\n/* Create a function that takes a value (string) representing a number\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
