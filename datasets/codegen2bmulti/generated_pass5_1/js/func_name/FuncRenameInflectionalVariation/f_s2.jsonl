{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [];\n  let closestDistance = Infinity;\n  let closestIndex = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    const distance = sortedNumbers[i] - threshold;\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      closestIndex = i;\n    }\n  }\n  return closestDistance < threshold;\n};\n\nexport default hadClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let open_paren_count_max = 0;\n  let open_paren_count_min = 0;\n  let open_paren_count_max_min = 0;\n  let open_paren_count_max_min_max = 0;\n  let open_paren_count_max_min_min = 0;\n  let open_paren_count_max_min_min_max = 0;\n  let open_paren_count_max_min_min_min = 0;\n  let open_paren_count_max_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_paren_count_max_min_min_min_min_min_min_min_"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimals = (number) => {\n  const decimals = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndInteger = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndIntegerAndDecimals = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  const decimalsPart = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndIntegerAndDecimalsAndDecimals = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  const decimalsPart = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndIntegerAndDecimalsAndDecimalsAndDecimals = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  const decimalsPart = Math.floor(number);\n  const decimalsPart2 = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndIntegerAndDecimalsAndDecimalsAndDecimalsAndDecimals = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  const decimalsPart = Math.floor(number);\n  const decimalsPart2 = Math.floor(number);\n  const decimalsPart3 = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndIntegerAndDecimalsAndDecimalsAndDecimalsAndDecimalsAndDecimals = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  const decimalsPart = Math.floor(number);\n  const decimalsPart2 = Math.floor(number);\n  const decimalsPart3 = Math.floor(number);\n  const decimalsPart4 = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalsAndIntegerAndDecimalsAndDecimalsAndDecimalsAndDecimalsAndDecimalsAndDecimalsAndDecimals = (number) => {\n  const decimals = Math.floor(number);\n  const integerPart = Math.floor(number);\n  const decimalsPart = Math.floor(number);\n  const decimalsPart2 = Math.floor(number);\n  const decimalsPart3 = Math.floor(number);\n  const decimalsPart4 = Math.floor(number);\n  const decimalsPart5 = Math.floor(number);\n  return decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i]\n  }\n  return balance < 0\n}\n\nmodule.exports = belowZeros\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((number) => Math.abs(number - mean));\n  return mean(deviations);\n};\n\nexport default meanerAbsolutesDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  let stack = [0];\n  let deepest_level = 0;\n  let current_level = 0;\n  let current_paren_level = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_end_length = 0;\n  let current_paren_string_end_index_index = 0;\n  let current_paren_string_end_index_length = 0;\n  let current_paren_string_end_index_index_index = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let current_paren_string_end_index_index_length = 0;\n  let"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regex)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regex));\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByRegexp = (strings, regexp) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.match(regexp)!== null? [strings[0]] : [];\n  }\n  return strings.filter(s => s.match(regexp));\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByLength = (strings, length) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.length === length? [strings[0]] : [];\n  }\n  return strings.filter(s => s.length === length);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterByLength([], 2)\n  []\n  >>> filterByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'array']\n  */\nconst filterByLengths = (strings, lengths) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.length === lengths[0]? [strings[0]] : [];\n  }\n  return strings.filter(s => s.length === lengths[0]);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterByLengths([], [2])\n  []\n  >>> filterByLengths(['abc', 'bacd', 'cde', 'array'], [2])\n  ['abc', 'array']\n  */\nconst filterByLengthsWithIndex = (strings, lengths) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.length === lengths[0]? [strings[0]] : [];\n  }\n  return strings.filter(s => s.length === lengths[0]);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterByLengthsWithIndex([], [2])\n  []\n  >>> filterByLengthsWithIndex(['abc', 'bacd', 'cde', 'array'], [2])\n  ['abc', 'array']\n  */\nconst filterByLengthsWithIndexes = (strings, lengths) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.length === lengths[0]? [strings[0]] : [];\n  }\n  return strings.filter(s => s.length === lengths[0]);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterByLengthsWithIndexes([], [2])\n  []\n  >>> filterByLengthsWithIndexes(['abc', 'bacd', 'cde', 'array'], [2])\n  ['abc', 'array']\n  */\nconst filterByLengthsWithIndexesAndIndexes = (strings, lengths) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.length === lengths[0]? [strings[0]] : [];\n  }\n  return strings.filter(s => s.length === lengths[0]);\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByRegex,\n  filterByRegexp,\n  filterByLength,\n  filterByLengths,\n  filterByLengthsWithIndex,\n  filterByLengthsWithIndexes,\n  filterByLengthsWithIndexesAndIndexes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProducts;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n\n  while (i < j) {\n    let mid = (i + j) / 2;\n    let prefix = string.substr(0, mid);\n    let suffix = string.substr(mid);\n    if (isPalindrome(suffix)) {\n      result = prefix + result;\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n\n  while (i < j) {\n    let mid = (i + j) / 2;\n    let prefix = string.substr(0, mid);\n    let suffix = string.substr(mid);\n    if (isPalindrome(suffix)) {\n      result = prefix + result;\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n\n  while (i < j) {\n    let mid = (i + j) / 2;\n    let prefix = string.substr(0, mid);\n    let suffix = string.substr(mid);\n    if (isPalindrome(suffix)) {\n      result = prefix + result;\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n\n  while (i < j) {\n    let mid = (i + j) / 2;\n    let prefix = string.substr(0, mid);\n    let suffix = string.substr(mid);\n    if (isPalindrome(suffix)) {\n      result = prefix + result;\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  let result = '';\n\n  while (i < j) {\n    let mid = (i + j) / 2;\n    let prefix = string.substr(0, mid);\n    let suffix = string.substr(mid);\n    if (isPalindrome(suffix)) {\n      result = prefix + result;\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = ''\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1'\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0'\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '0'\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '1'\n      }\n    }\n  }\n  return result\n}\n\nmodule.exports = stringXor\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n\n  return longest;\n};\n\nexport default longer;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a < b) {\n    return greaterCommonDivisors(b, a)\n  }\n  if (a === b) {\n    return a\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (a === 2) {\n    return 2\n  }\n  if (a === 3) {\n    return 3\n  }\n  if (a === 4) {\n    return 4\n  }\n  if (a === 5) {\n    return 5\n  }\n  if (a === 6) {\n    return 6\n  }\n  if (a === 7) {\n    return 7\n  }\n  if (a === 8) {\n    return 8\n  }\n  if (a === 9) {\n    return 9\n  }\n  if (a === 10) {\n    return 10\n  }\n  if (a === 11) {\n    return 11\n  }\n  if (a === 12) {\n    return 12\n  }\n  if (a === 13) {\n    return 13\n  }\n  if (a === 14) {\n    return 14\n  }\n  if (a === 15) {\n    return 15\n  }\n  if (a === 16) {\n    return 16\n  }\n  if (a === 17) {\n    return 17\n  }\n  if (a === 18) {\n    return 18\n  }\n  if (a === 19) {\n    return 19\n  }\n  if (a === 20) {\n    return 20\n  }\n  if (a === 21) {\n    return 21\n  }\n  if (a === 22) {\n    return 22\n  }\n  if (a === 23) {\n    return 23\n  }\n  if (a === 24) {\n    return 24\n  }\n  if (a === 25) {\n    return 25\n  }\n  if (a === 26) {\n    return 26\n  }\n  if (a === 27) {\n    return 27\n  }\n  if (a === 28) {\n    return 28\n  }\n  if (a === 29) {\n    return 29\n  }\n  if (a === 30) {\n    return 30\n  }\n  if (a === 31) {\n    return 31\n  }\n  if (a === 32) {\n    return 32\n  }\n  if (a === 33) {\n    return 33\n  }\n  if (a === 34) {\n    return 34\n  }\n  if (a === 35) {\n    return 35\n  }\n  if (a === 36) {\n    return 36\n  }\n  if (a === 37) {\n    return 37\n  }\n  if (a === 38) {\n    return 38\n  }\n  if (a === 39) {\n    return 39\n  }\n  if (a === 40) {\n    return 40\n  }\n  if (a === 41) {\n    return 41\n  }\n  if (a === 42) {\n    return 42\n  }\n  if (a === 43) {\n    return 43\n  }\n  if (a === 44) {\n    return 44\n  }\n  if (a === 45) {\n    return 45\n  }\n  if (a === 46) {\n    return 46\n  }\n  if (a === 47) {\n    return 47\n  }\n  if (a === 48) {\n    return 48\n  }\n  if (a === 49) {\n    return 49\n  }\n  if (a === 50) {\n    return 50\n  }\n  if (a === 51) {\n    return 51\n  }\n  if (a === 52) {\n    return 52\n  }\n  if (a === 53) {\n    return 53\n  }\n  if (a === 54) {\n    return 54\n  }\n  if (a === 55) {\n    return 55\n  }\n  if (a === 56) {\n    return 56\n  }\n  if (a === 57) {\n    return 57\n  }\n  if (a === 58) {\n    return 58\n  }\n  if (a === 59) {\n    return 59\n  }\n  if (a === 60) {\n    return 60\n  }\n  if (a === 61) {\n    return 61\n  }\n  if (a === 62) {\n    return 62\n  }\n  if (a === 63) {\n    return 63\n  }\n  if (a === 64) {\n    return 64\n  }\n  if (a === 65) {\n    return 65\n  }\n  if (a === 66) {\n    return 66\n  }\n  if (a === 67) {\n    return 67\n  }\n  if (a === 68) {\n    return 68\n  }\n  if (a === 69) {\n    return 69\n  }\n  if (a === 70) {\n    return 70\n  }\n  if (a === 71) {\n    return 71\n  }\n  if (a === 72) {\n    return 72\n  }\n  if (a === 73) {\n    return 73\n  }\n  if (a === 74) {\n    return 74\n  }\n  if (a === 75) {\n    return 75\n  }\n  if (a === 76) {\n    return 76\n  }\n  if (a === 77) {\n    return 77\n  }\n  if (a === 78) {\n    return 78\n  }\n  if (a === 79) {\n    return 79\n  }\n  if (a === 80) {\n    return 80\n  }\n  if (a === 81) {\n    return 81\n  }\n  if (a === 82) {\n    return 82\n  }\n  if (a === 83) {\n    return 83\n  }\n  if (a === 84) {\n    return 84\n  }\n  if (a === 85) {\n    return 85\n  }\n  if (a === 86) {\n    return 86\n  }\n  if (a === 87) {\n    return 87\n  }\n  if (a === 88) {\n    return 88\n  }\n  if (a === 89"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let result = [];\n  let current = string;\n  while (current.length > 0) {\n    result.push(current);\n    current = current.substr(current.length - 1, current.length);\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allS"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences12 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences13 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `0 ${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences14 = (n) => {\n"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let count = 0;\n  let character = '';\n  for (let i = 0; i < string.length; i++) {\n    character = string[i];\n    if (character!== character.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistincterCharacter;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nmodule.exports = howManyTime\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const sortedNumbers = numbers.split(' ').sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedNumbers.join(' ');\n};\n\nmodule.exports = sortsNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const closest = (a, b) => {\n    if (a === b) {\n      return a;\n    }\n    if (a < b) {\n      return a;\n    }\n    return b;\n  };\n  return numbers.reduce((acc, current) => {\n    const currentDistance = closest(current, numbers[0]);\n    const nextDistance = closest(numbers[0], current);\n    if (currentDistance === nextDistance) {\n      acc.push(current);\n    }\n    return acc;\n  }, []);\n};\n\nmodule.exports = foundCloserElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits2 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits3 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits4 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits5 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits6 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits7 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits8 = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (2.0 * Math.PI)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUn"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value);\n  });\n};\n\n/**\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  Filter given list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  Filter given list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3,"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_n = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_n_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_n = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_n_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the number of characters in a given string.\n  @param {string} string\n  @returns {number}\n  */\nconst strlen_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s_s = (string) => {\n  if (string === null || string === undefined) {\n    return 0"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let divisors = [1];\n  let largestDivisor = 1;\n  while (largestDivisor < n) {\n    let divisor = largestDivisor;\n    while (n % divisor === 0) {\n      divisors.push(divisor);\n      n = n / divisor;\n    }\n    largestDivisor = divisors.pop();\n  }\n  return divisors;\n};\n\nmodule.exports = largerDivisors;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  factors.push(n);\n  return factors;\n};\n\nmodule.exports = {\n  factorizes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num === numbers[j]) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are not divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num % 3 === 0 || num % 5 === 0) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible2 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num % 3 === 0 || num % 5 === 0) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible3 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num % 3 === 0 || num % 5 === 0) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible4 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num % 3 === 0 || num % 5 === 0) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible5 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num % 3 === 0 || num % 5 === 0) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst removeDivisible6 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let num = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && num % 3 === 0 || num % 5 === 0) {\n      j++;\n    }\n    if (j < numbers.length) {\n      result.push(num);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that are divisible by 3 or 5.\n  Keep order of elements left the same as in the input.\n  >>> removeDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7,"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => match.toUpperCase());\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a given string, return a string with all uppercase letters replaced with their lowercase equivalents.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a given string, return a string with all lowercase letters replaced with their uppercase equivalents.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('Hello')\n  ['Hello']\n  >>> stringToWords('Hello, world')\n  ['Hello', 'world']\n  >>> stringToWords('Hello, world, this is a test')\n  ['Hello', 'world', 'this', 'is', 'a', 'test']\n  */\nconst stringToWords = (str) => {\n  if (str.length === 0) {\n    return [];\n  }\n  return str.split(/[,\\s]+/);\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToString = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommas = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommasAndSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithSpacesAndCommas = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommasAndSpacesAndSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommasAndSpacesAndSpacesAndSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommasAndSpacesAndSpacesAndSpacesAndSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommasAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['Hello', 'world'])\n  'Hello, world'\n  >>> wordsToString(['Hello', 'world', 'this', 'is', 'a', 'test'])\n  'Hello, world, this, is, a, test'\n  */\nconst wordsToStringWithCommasAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces = (words) => {\n  if (words.length === 0) {\n    return '';\n  }\n  return words.join(', ');\n};\n\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].indexOf(prefix) === 0) {\n      return [strings[0]];\n    } else {\n      return [];\n    }\n  }\n\n  const prefixLength = prefix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].indexOf(suffix) === strings[0].length - suffix.length) {\n      return [strings[0]];\n    } else {\n      return [];\n    }\n  }\n\n  const suffixLength = suffix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(suffix) === strings[i].length - suffixLength) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['cde', 'array']\n  */\nconst filterByContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].indexOf(substring)!== -1) {\n      return [strings[0]];\n    } else {\n      return [];\n    }\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].indexOf(substring) === -1) {\n      return [strings[0]];\n    } else {\n      return [];\n    }\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) === -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['cde', 'array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (strings[0].match(regex)) {\n      return [strings[0]];\n    } else {\n      return [];\n    }\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotRegex([], 'a')\n  []\n  >>> filterByNotRegex(['abc', 'bcd', 'cde', 'array'], 'de')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    if (!strings[0].match(regex)) {\n      return [strings[0]];\n    } else {\n      return [];\n    }\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (!strings[i].match(regex)) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterBySuffix,\n  filterByContains,\n  filterByNotContains,\n  filterByRegex,\n  filterByNotRegex,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst gottenNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return the sum of all the numbers in the list.\n  >>> gottenSum([-1, 2, -4, 5, 6])\n  7\n  >>> gottenSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst gottenSum = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/*Return the product of all the numbers in the list.\n  >>> gottenProduct([-1, 2, -4, 5, 6])\n  -6\n  >>> gottenProduct([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst gottenProduct = (l) => {\n  let result = 1;\n  for (let i = 0; i < l.length; i++) {\n    result *= l[i];\n  }\n  return result;\n};\n\n/*Return the average of all the numbers in the list.\n  >>> gottenAverage([-1, 2, -4, 5, 6])\n  -1.5\n  >>> gottenAverage([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1.5\n  */\nconst gottenAverage = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result / l.length;\n};\n\n/*Return the median of all the numbers in the list.\n  >>> gottenMedian([-1, 2, -4, 5, 6])\n  -4\n  >>> gottenMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst gottenMedian = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  result /= l.length;\n  return result;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> gottenMode([-1, 2, -4, 5, 6])\n  -4\n  >>> gottenMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst gottenMode = (l) => {\n  let result = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result) {\n      count++;\n    } else if (count > 1) {\n      return result;\n    }\n    result = l[i];\n    count = 1;\n  }\n  return result;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> gottenMode([-1, 2, -4, 5, 6])\n  -4\n  >>> gottenMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst gottenMode = (l) => {\n  let result = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result) {\n      count++;\n    } else if (count > 1) {\n      return result;\n    }\n    result = l[i];\n    count = 1;\n  }\n  return result;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> gottenMode([-1, 2, -4, 5, 6])\n  -4\n  >>> gottenMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst gottenMode = (l) => {\n  let result = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result) {\n      count++;\n    } else if (count > 1) {\n      return result;\n    }\n    result = l[i];\n    count = 1;\n  }\n  return result;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> gottenMode([-1, 2, -4, 5, 6])\n  -4\n  >>> gottenMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst gottenMode = (l) => {\n  let result = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === result) {\n      count++;\n    } else if (count > 1) {\n      return result;\n    }\n    result = l[i"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let xsIndex = 0;\n  let xsLength = xs.length;\n  let xsIndex2 = 0;\n  let xsLength2 = xs.length;\n  let xsIndex3 = 0;\n  let xsLength3 = xs.length;\n  let xsIndex4 = 0;\n  let xsLength4 = xs.length;\n  let xsIndex5 = 0;\n  let xsLength5 = xs.length;\n  let xsIndex6 = 0;\n  let xsLength6 = xs.length;\n  let xsIndex7 = 0;\n  let xsLength7 = xs.length;\n  let xsIndex8 = 0;\n  let xsLength8 = xs.length;\n  let xsIndex9 = 0;\n  let xsLength9 = xs.length;\n  let xsIndex10 = 0;\n  let xsLength10 = xs.length;\n  let xsIndex11 = 0;\n  let xsLength11 = xs.length;\n  let xsIndex12 = 0;\n  let xsLength12 = xs.length;\n  let xsIndex13 = 0;\n  let xsLength13 = xs.length;\n  let xsIndex14 = 0;\n  let xsLength14 = xs.length;\n  let xsIndex15 = 0;\n  let xsLength15 = xs.length;\n  let xsIndex16 = 0;\n  let xsLength16 = xs.length;\n  let xsIndex17 = 0;\n  let xsLength17 = xs.length;\n  let xsIndex18 = 0;\n  let xsLength18 = xs.length;\n  let xsIndex19 = 0;\n  let xsLength19 = xs.length;\n  let xsIndex20 = 0;\n  let xsLength20 = xs.length;\n  let xsIndex21 = 0;\n  let xsLength21 = xs.length;\n  let xsIndex22 = 0;\n  let xsLength22 = xs.length;\n  let xsIndex23 = 0;\n  let xsLength23 = xs.length;\n  let xsIndex24 = 0;\n  let xsLength24 = xs.length;\n  let xsIndex25 = 0;\n  let xsLength25 = xs.length;\n  let xsIndex26 = 0;\n  let xsLength26 = xs.length;\n  let xsIndex27 = 0;\n  let xsLength27 = xs.length;\n  let xsIndex28 = 0;\n  let xsLength28 = xs.length;\n  let xsIndex29 = 0;\n  let xsLength29 = xs.length;\n  let xsIndex30 = 0;\n  let xsLength30 = xs.length;\n  let xsIndex31 = 0;\n  let xsLength31 = xs.length;\n  let xsIndex32 = 0;\n  let xsLength32 = xs.length;\n  let xsIndex33 = 0;\n  let xsLength33 = xs.length;\n  let xsIndex34 = 0;\n  let xsLength34 = xs.length;\n  let xsIndex35 = 0;\n  let xsLength35 = xs.length;\n  let xsIndex36 = 0;\n  let xsLength36 = xs.length;\n  let xsIndex37 = 0;\n  let xsLength37 = xs.length;\n  let xsIndex38 = 0;\n  let xsLength38 = xs.length;\n  let xsIndex39 = 0;\n  let xsLength39 = xs.length;\n  let xsIndex40 = 0;\n  let xsLength40 = xs.length;\n  let xsIndex41 = 0;\n  let xsLength41 = xs.length;\n  let xsIndex42 = 0;\n  let xsLength42 = xs.length;\n  let xsIndex43 = 0;\n  let xsLength43 = xs.length;\n  let xsIndex44 = 0;\n  let xsLength44 = xs.length;\n  let xsIndex45 = 0;\n  let xsLength45 = xs.length;\n  let xsIndex46 = 0;\n  let xsLength46 = xs.length;\n  let xsIndex47 = 0;\n  let xsLength47 = xs.length;\n  let xsIndex48 = 0;\n  let xsLength48 = xs.length;\n  let xsIndex49 = 0;\n  let xsLength49 = xs.length;\n  let xsIndex50 = 0;\n  let xsLength50 = xs.length;\n  let xsIndex51 = 0;\n  let xsLength51 = xs.length;\n  let xsIndex52 = 0;\n  let xsLength52 = xs.length;\n  let xsIndex53 = 0;\n  let xsLength53 = xs.length;\n  let xsIndex54 = 0;\n  let xsLength54 = xs.length;\n  let x"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird2 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird3 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird4 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird5 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird6 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1], l[i + 2]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird7 = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let u = [];\n  while (i < l.length) {\n    if (j === k) {\n      u.push(l[i]);\n      i++;\n    } else {\n      if (l[i] === l[j]) {\n        j++;\n      } else {\n        k++;\n        j = k;\n        u.push(l[i]);\n        i++;\n      }\n    }\n  }\n  return u;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElements;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let result = 0;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      fizzBuzzes(n / 11);\n      fizzBuzzes(n / 13);\n      fizz = fizz + 1;\n      buzz = buzz + 1;\n    } else if (n % 11 === 0) {\n      fizzBuzzes(n / 11);\n      fizz = fizz + 1;\n    } else if (n % 13 === 0) {\n      fizzBuzzes(n / 13);\n      buzz = buzz + 1;\n    } else {\n      result = result + 1;\n    }\n    n = n - 1;\n  }\n  return [fizz, buzz, result];\n};\n\nmodule.exports = fizzBuzzes;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEvenOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEvenOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsEvenOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\nmodule.exports = {\n  sortsEven,\n  sortsOdd,\n  sortsEvenOdd,\n  sortsOddOdd,\n  sortsEvenOddOdd,\n  sortsOddOddOddOdd,\n  sortsEvenOddOddOddOdd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclic_2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_2 function. Returns decoded string.\n  */\nconst decodeCyclic_2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_3 function. Returns decoded string.\n  */\nconst decodeCyclic_3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_4 function. Returns decoded string.\n  */\nconst decodeCyclic_4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_5 function. Returns decoded string.\n  */\nconst decodeCyclic_5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_6 function. Returns decoded string.\n  */\nconst decodeCyclic_6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_7 function. Returns decoded string.\n  */\nconst decodeCyclic_7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  "}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  if (n <= 1) return n;\n  const fib = primeFibs(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFibs(n);\n};\n\nmodule.exports = primeFibs;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed2 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed3 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed4 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed5 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed6 = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed(["}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  const cars = [...Array(n).keys()].map((i) => {\n    return {\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      v: Math.random() * 100 - 50,\n      r: Math.random() * 100 - 50\n    }\n  })\n\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const dx = cars[i].x - cars[j].x\n      const dy = cars[i].y - cars[j].y\n      const dv = cars[i].v - cars[j].v\n      const dr = cars[i].r - cars[j].r\n\n      if (dx * dv > 0 && dy * dr > 0) {\n        collisions++\n      }\n    }\n  }\n\n  return collisions\n}\n\nconst carsRacesCollision2 = (n) => {\n  const cars = [...Array(n).keys()].map((i) => {\n    return {\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      v: Math.random() * 100 - 50,\n      r: Math.random() * 100 - 50\n    }\n  })\n\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const dx = cars[i].x - cars[j].x\n      const dy = cars[i].y - cars[j].y\n      const dv = cars[i].v - cars[j].v\n      const dr = cars[i].r - cars[j].r\n\n      if (dx * dv > 0 && dy * dr > 0) {\n        collisions++\n      }\n    }\n  }\n\n  return collisions\n}\n\nconst carsRacesCollision3 = (n) => {\n  const cars = [...Array(n).keys()].map((i) => {\n    return {\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      v: Math.random() * 100 - 50,\n      r: Math.random() * 100 - 50\n    }\n  })\n\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const dx = cars[i].x - cars[j].x\n      const dy = cars[i].y - cars[j].y\n      const dv = cars[i].v - cars[j].v\n      const dr = cars[i].r - cars[j].r\n\n      if (dx * dv > 0 && dy * dr > 0) {\n        collisions++\n      }\n    }\n  }\n\n  return collisions\n}\n\nconst carsRacesCollision4 = (n) => {\n  const cars = [...Array(n).keys()].map((i) => {\n    return {\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      v: Math.random() * 100 - 50,\n      r: Math.random() * 100 - 50\n    }\n  })\n\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const dx = cars[i].x - cars[j].x\n      const dy = cars[i].y - cars[j].y\n      const dv = cars[i].v - cars[j].v\n      const dr = cars[i].r - cars[j].r\n\n      if (dx * dv > 0 && dy * dr > 0) {\n        collisions++\n      }\n    }\n  }\n\n  return collisions\n}\n\nconst carsRacesCollision5 = (n) => {\n  const cars = [...Array(n).keys()].map((i) => {\n    return {\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      v: Math.random() * 100 - 50,\n      r: Math.random() * 100 - 50\n    }\n  })\n\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const dx = cars[i].x - cars[j].x\n      const dy = cars[i].y - cars[j].y\n      const dv = cars[i].v - cars[j].v\n      const dr = cars[i].r - cars[j].r\n\n      if (dx * dv > 0 && dy * dr > 0) {\n        collisions++\n      }\n    }\n  }\n\n  return collisions\n}\n\nconst carsRacesCollision6 = (n) => {\n  const cars = [...Array(n).keys()].map((i) => {\n    return {\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      v: Math.random() * 100 - 50,\n      r: Math.random() * 100 - 50\n    }\n  })\n\n  const collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const dx = cars[i].x - cars[j].x\n      const dy = cars[i].y - cars[j].y\n      const dv = cars[i].v - cars[j].v\n      const dr = cars[i].r - cars[j]."}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [0, 1, 2]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 2, 2, 8, 0, 122]\n  */\nconst decrLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 15, 45, 10, 30, 15, 60, 0, 210]\n  */\nconst multLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * 2);\n  }\n  return res;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst divLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] / 2);\n  }\n  return res;\n};\n\n/*Return list with elements squared.\n  >>> sqrLists([1, 2, 3])\n  [1, 4, 9]\n  >>> sqrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90, 45, 45, 180, 0, 729]\n  */\nconst sqrLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * l[i]);\n  }\n  return res;\n};\n\n/*Return list with elements cubed.\n  >>> cubLists([1, 2, 3])\n  [1, 8, 27]\n  >>> cubLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90, 45, 45, 180, 0, 729]\n  */\nconst cubLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] * l[i] * l[i]);\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 2.\n  >>> powLists([1, 2, 3])\n  [1, 4, 9]\n  >>> powLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90, 45, 45, 180, 0, 729]\n  */\nconst powLists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(Math.pow(l[i], 2));\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 3.\n  >>> pow3Lists([1, 2, 3])\n  [1, 8, 27]\n  >>> pow3Lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90, 45, 45, 180, 0, 729]\n  */\nconst pow3Lists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(Math.pow(l[i], 3));\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 4.\n  >>> pow4Lists([1, 2, 3])\n  [1, 16, 81]\n  >>> pow4Lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90, 45, 45, 180, 0, 729]\n  */\nconst pow4Lists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(Math.pow(l[i], 4));\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 5.\n  >>> pow5Lists([1, 2, 3])\n  [1, 32, 243]\n  >>> pow5Lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90, 45, 45, 180, 0, 729]\n  */\nconst pow5Lists = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(Math.pow(l[i], 5));\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 6.\n  >>> pow6Lists([1, 2, 3])\n  [1, 64, 243]\n  >>> pow6Lists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 90,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  let isPairSumToZero = false;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      isPairSumToZero = true;\n      while (i < l.length && sum === 0) {\n        sum += l[i];\n        i++;\n      }\n      if (sum!== 0) {\n        isPairSumToZero = false;\n      }\n    }\n    i++;\n  }\n  return isPairSumToZero;\n};\n\nmodule.exports = pairSumsToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases2 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases3 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases4 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases5 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases6 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases7 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases8 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases9 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases10 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    res += num % base;\n    num /= base;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base b.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = a / 2;\n  return h / 2 - area;\n};\n\nmodule.exports = trianglesAreas;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  if (n === 4) return 2;\n  if (n === 5) return 0;\n  if (n === 6) return 4;\n  if (n === 7) return 14;\n  if (n === 8) return 0;\n  if (n === 9) return 8;\n  if (n === 10) return 0;\n  if (n === 11) return 40;\n  if (n === 12) return 0;\n  if (n === 13) return 120;\n  if (n === 14) return 0;\n  if (n === 15) return 14;\n  if (n === 16) return 0;\n  if (n === 17) return 1728;\n  if (n === 18) return 0;\n  if (n === 19) return 34536;\n  if (n === 20) return 0;\n  if (n === 21) return 40320;\n  if (n === 22) return 0;\n  if (n === 23) return 61440;\n  if (n === 24) return 0;\n  if (n === 25) return 122880;\n  if (n === 26) return 0;\n  if (n === 27) return 176400;\n  if (n === 28) return 0;\n  if (n === 29) return 4026800;\n  if (n === 30) return 0;\n  if (n === 31) return 63280;\n  if (n === 32) return 0;\n  if (n === 33) return 121696;\n  if (n === 34) return 0;\n  if (n === 35) return 55920;\n  if (n === 36) return 0;\n  if (n === 37) return 524288;\n  if (n === 38) return 0;\n  if (n === 39) return 61440;\n  if (n === 40) return 0;\n  if (n === 41) return 6291456;\n  if (n === 42) return 0;\n  if (n === 43) return 56623104;\n  if (n === 44) return 0;\n  if (n === 45) return 63840;\n  if (n === 46) return 0;\n  if (n === 47) return 64896;\n  if (n === 48) return 0;\n  if (n === 49) return 62736;\n  if (n === 50) return 0;\n  if (n === 51) return 64544;\n  if (n === 52) return 0;\n  if (n === 53) return 6291456;\n  if (n === 54) return 0;\n  if (n === 55) return 64896;\n  if (n === 56) return 0;\n  if (n === 57) return 62736;\n  if (n === 58) return 0;\n  if (n === 59) return 64544;\n  if (n === 60) return 0;\n  if (n === 61) return 63840;\n  if (n === 62) return 0;\n  if (n === 63) return 6291456;\n  if (n === 64) return 0;\n  if (n === 65) return 64896;\n  if (n === 66) return 0;\n  if (n === 67) return 62736;\n  if (n === 68) return 0;\n  if (n === 69) return 64544;\n  if (n === 70) return 0;\n  if (n === 71) return 6291456;\n  if (n === 72) return 0;\n  if (n === 73) return 64896;\n  if (n === 74) return 0;\n  if (n === 75) return 62736;\n  if (n === 76) return 0;\n  if (n === 77) return 64544;\n  if (n === 78) return 0;\n  if (n === 79) return 6291456;\n  if (n === 80) return 0;\n  if (n === 81) return 64896;\n  if (n === 82) return 0;\n  if (n === 83) return 62736;\n  if (n === 84) return 0;\n  if (n === 85) return 64544;\n  if (n === 86) return 0;\n  if (n === 87) return 6291456;\n  if (n === 88) return 0;\n  if (n === 89) return 64896;\n  if (n === 90) return 0;\n  if (n === 91) return 62736;\n  if (n === 92) return 0;\n  if (n === 93) return 64544;\n  if (n === 94) return 0;\n  if (n === 95) return 6291456;\n  if (n === 96) return 0;\n  if (n === 97) return 64896;\n  if (n === 98) return 0;\n  if (n === 99) return 62736;\n  if (n === 100) return 0;\n  if (n === 101) return 64544;\n  if (n === 102) return 0;\n  if (n === 103) return 6291456;\n  if (n === 104) return 0;\n  if (n === 105) return 64896;\n  if (n === 106) return 0;\n  if (n === 107) return 62736;\n  if (n === 108) return 0;\n  if (n === 109) return 64544;\n  if (n === 110) return 0;\n  if (n === 111) return 6291456;\n  if (n === 112) return 0;\n  if (n === 113) return 64896"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n\n  const middle = Math.floor(l.length / 2);\n  const left = l.slice(0, middle);\n  const right = l.slice(middle);\n\n  return (left.length + right.length) % 2 === 0?\n    (left.reduce((a, b) => a + b) / 2) :\n    (right.reduce((a, b) => a + b) / 2);\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let left = 0;\n  let right = text.length - 1;\n  while (left < right) {\n    if (text[left]!== text[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) {\n    throw new Error(`n must be a positive integer less than p.`)\n  }\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return p - 1\n  }\n  const x = n % p\n  if (x === 0) {\n    return 1\n  }\n  if (x === 1) {\n    return 0\n  }\n  if (x === p - 1) {\n    return 1\n  }\n  if (x === p) {\n    return 0\n  }\n  if (x === p + 1) {\n    return 1\n  }\n  throw new Error(`n must be a positive integer less than p.`)\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode = (s) => {\n  return encodeShift(decodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(encodeShift(s)));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode = (s) => {\n  return decodeShift(encodeShift(decodeShift(s)));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(encodeShift(decodeShift(s))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode_decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(encodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode_decode_decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode_decode_decode_decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode_shift_encode_decode_decode_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return decodeShift(encodeShift(decodeShift(decodeShift(decodeShift(s)))));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst encode_shift_decode_decode_decode_decode_decode_decode_decode_decode_shift_encode = (s) => {\n  return encodeShift(decodeShift("}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let vowelsCount = 0;\n  let newText = '';\n\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char)!== -1) {\n      vowelsCount++;\n    } else {\n      newText += char;\n    }\n  }\n\n  if (vowelsCount === 0) {\n    return newText;\n  }\n\n  return newText;\n};\n\nmodule.exports = removeVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  let i = 0;\n  while (i < l.length && l[i] < t) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThresholds([1, 2, 4, 10], 100)\n  false\n  >>> aboveThresholds([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThresholds = (l, t) => {\n  let i = 0;\n  while (i < l.length && l[i] > t) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds2 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds3 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds4 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds5 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds6 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds7 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds8 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds9 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + t1) {\n    i++;\n  }\n  return i == l.length;\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 100)\n  false\n  */\nconst betweenThresholds10 = (l, t, t1"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n*/\nconst adding26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar2 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar3 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar4 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar5 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar6 = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar7 = (s0, s1) => {\n  if (s0.length!"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibs_recursive(n - 1) + fibs_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1, f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*Return n-th Fibonacci number using recursion.\n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsRegex = new RegExp(brackets, \"g\");\n  return bracketsRegex.test(brackets);\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    } else if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set1.has(l1[i])) {\n      if (set2.has(l2[i])) {\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  if (n < 2) {\n    throw new Error(`${n} is not a prime number.`)\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\nmodule.exports = {\n  largerPrimeFactor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return (n * (n + 1)) / 2;\n};\n\nmodule.exports = sumsToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketCount = brackets.split(/\\s+/).length - 1;\n  return bracketCount % 2 === 0;\n};\n\nmodule.exports = {\n  correctBracketing,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 1; i < n; i++) {\n    ys[i] = ys[i - 1] + xs[i];\n  }\n  return ys;\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum2 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum3 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum4 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum5 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum6 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum7 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum8 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum9 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    ys[i] += xs[i];\n  }\n  return ys[n];\n};\n\n/**\n  * Return the sum of the coefficients of a polynomial.\n  * @param {Array} xs\n  * @return {Number}\n  */\nconst sum10 = (xs) => {\n  const n = xs.length - 1;\n  const ys = [];\n  for (let i = 0; i <= n; i++) {\n    ys.push(0);\n  }\n  for (let i = 0; i < n; i++) {\n    "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (s[i] === 'y' && i < s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) {\n    return x;\n  }\n  let result = \"\";\n  let temp = x;\n  for (let i = 0; i < shift; i++) {\n    result += temp & 1;\n    temp >>= 1;\n  }\n  return result + temp;\n};\n\n/**\n  * Convert a string to a number.\n  *\n  * @param {string} s\n  * @return {number}\n  */\nconst stringToNumber = (s) => {\n  if (s === \"\") {\n    return 0;\n  }\n  let result = 0;\n  let i = 0;\n  while (i < s.length) {\n    result += parseInt(s.charAt(i), 10);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  *\n  * @param {number} n\n  * @return {string}\n  */\nconst numberToString = (n) => {\n  let result = \"\";\n  while (n > 0) {\n    result = String.fromCharCode(n % 10) + result;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a hexadecimal number.\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst stringToHex = (s) => {\n  if (s === \"\") {\n    return \"0\";\n  }\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    result += \"0123456789ABCDEF\".charAt(s.charCodeAt(i) / 16) + \"0123456789ABCDEF\".charAt(s.charCodeAt(i) % 16);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a hexadecimal number to a string.\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst hexToString = (s) => {\n  if (s === \"\") {\n    return \"\";\n  }\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    result += String.fromCharCode(parseInt(s.substr(i, 2), 16));\n    i += 2;\n  }\n  return result;\n};\n\n/**\n  * Convert a hexadecimal number to a number.\n  *\n  * @param {string} s\n  * @return {number}\n  */\nconst hexToNumber = (s) => {\n  if (s === \"\") {\n    return 0;\n  }\n  let result = 0;\n  let i = 0;\n  while (i < s.length) {\n    result += parseInt(s.substr(i, 2), 16);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a hexadecimal number.\n  *\n  * @param {number} n\n  * @return {string}\n  */\nconst numberToHex = (n) => {\n  if (n === 0) {\n    return \"0\";\n  }\n  let result = \"\";\n  let i = 0;\n  while (n > 0) {\n    result += String.fromCharCode(n % 16);\n    n = Math.floor(n / 16);\n  }\n  return result;\n};\n\n/**\n  * Convert a hexadecimal number to a number.\n  *\n  * @param {string} s\n  * @return {number}\n  */\nconst hexToNumber = (s) => {\n  if (s === \"\") {\n    return 0;\n  }\n  let result = 0;\n  let i = 0;\n  while (i < s.length) {\n    result += parseInt(s.substr(i, 2), 16);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  *\n  * @param {number} n\n  * @return {string}\n  */\nconst numberToString = (n) => {\n  if (n === 0) {\n    return \"\";\n  }\n  let result = \"\";\n  let i = 0;\n  while (n > 0) {\n    result += String.fromCharCode(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  *\n  * @param {string} s\n  * @return {number}\n  */\nconst stringToNumber = (s) => {\n  if (s === \"\") {\n    return 0;\n  }\n  let result = 0;\n  let i = 0;\n  while (i < s.length) {\n    result += parseInt(s.charAt(i), 10);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a hexadecimal number.\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst stringToHex = (s) => {\n  if (s === \"\") {\n    return \"0\";\n  }\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    result += String.fromCharCode(s.charCodeAt(i) / 16);\n    result += String.fromCharCode(s.charCodeAt(i) % 16);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a hexadecimal number to a string.\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst hexToString = (s) => {\n  if (s === \"\") {\n    return \"\";\n  }\n  let result = \"\";\n  let i = 0;\n  while (i"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nmodule.exports = digitSums;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  return [min, min_index];\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => a > b? a : b, -1);\n  const maxFreq = lst.reduce((a, b) => a > b? a : b, 0);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = lst[i];\n    }\n  }\n  return maxFreq > max? maxFreq : -1;\n};\n\nexport default search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const result = [];\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.unshift(max);\n      max = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangerSortsLists;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a === b && b === c) {\n    return a;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === c || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return -1;\n  } else if (a === b || b === c || c === a) {\n    return"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length === 0) return true;\n  const max = q.reduce((a, b) => a + b, 0);\n  if (max > w) return false;\n  return q.reduce((a, b) => a === b, true);\n};\n\nmodule.exports = willItFlied;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  if (arr.length < 2) {\n    return arr.length;\n  }\n\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let j = arr.length - 1 - i;\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i + 1);\n    }\n  }\n\n  return min;\n};\n\nmodule.exports = smallerChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length < lst2[i].length) {\n      total += lst1[i].length;\n    }\n  }\n  return lst1.filter(x => x.length < lst2[0].length);\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower2 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower3 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower4 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower5 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower6 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower7 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower8 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower9 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower10 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower11 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower12 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower13 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower14 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower15 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower16 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower17 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower18 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower19 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower20 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower21 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower22 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower23 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower24 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower25 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower26 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower27 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower28 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower29 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower30 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isSimplePower31 = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0;\n};\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  let hexes = 0;\n  let hexesKeys = [];\n  let hexesDigits = num.split('').map(e => parseInt(e, 16));\n  hexesDigits.forEach(e => {\n    if (e === 0) {\n      hexes++;\n    } else if (e === 1) {\n      hexes++;\n    } else if (e === 2) {\n      hexes++;\n    } else if (e === 3) {\n      hexes++;\n    } else if (e === 4) {\n      hexes++;\n    } else if (e === 5) {\n      hexes++;\n    } else if (e === 6) {\n      hexes++;\n    } else if (e === 7) {\n      hexes++;\n    } else if (e === 8) {\n      hexes++;\n    } else if (e === 9) {\n      hexes++;\n    } else if (e === 10) {\n      hexes++;\n    } else if (e === 11) {\n      hexes++;\n    } else if (e === 12) {\n      hexes++;\n    } else if (e === 13) {\n      hexes++;\n    } else if (e === 14) {\n      hexes++;\n    } else if (e === 15) {\n      hexes++;\n    } else if (e === 16) {\n      hexes++;\n    } else if (e === 17) {\n      hexes++;\n    } else if (e === 18) {\n      hexes++;\n    } else if (e === 19) {\n      hexes++;\n    } else if (e === 20) {\n      hexes++;\n    } else if (e === 21) {\n      hexes++;\n    } else if (e === 22) {\n      hexes++;\n    } else if (e === 23) {\n      hexes++;\n    } else if (e === 24) {\n      hexes++;\n    } else if (e === 25) {\n      hexes++;\n    } else if (e === 26) {\n      hexes++;\n    } else if (e === 27) {\n      hexes++;\n    } else if (e === 28) {\n      hexes++;\n    } else if (e === 29) {\n      hexes++;\n    } else if (e === 30) {\n      hexes++;\n    } else if (e === 31) {\n      hexes++;\n    } else if (e === 32) {\n      hexes++;\n    } else if (e === 33) {\n      hexes++;\n    } else if (e === 34) {\n      hexes++;\n    } else if (e === 35) {\n      hexes++;\n    } else if (e === 36) {\n      hexes++;\n    } else if (e === 37) {\n      hexes++;\n    } else if (e === 38) {\n      hexes++;\n    } else if (e === 39) {\n      hexes++;\n    } else if (e === 40) {\n      hexes++;\n    } else if (e === 41) {\n      hexes++;\n    } else if (e === 42) {\n      hexes++;\n    } else if (e === 43) {\n      hexes++;\n    } else if (e === 44) {\n      hexes++;\n    } else if (e === 45) {\n      hexes++;\n    } else if (e === 46) {\n      hexes++;\n    } else if (e === 47) {\n      hexes++;\n    } else if (e === 48) {\n      hexes++;\n    } else if (e === 49) {\n      hexes++;\n    } else if (e === 50) {\n      hexes++;\n    } else if (e === 51) {\n      hexes++;\n    } else if (e === 52) {\n      hexes++;\n    } else if (e === 53) {\n      hexes++;\n    } else if (e === 54) {\n      hexes++;\n    } else if (e === 55) {\n      hexes++;\n    } else if (e === 56) {\n      hexes++;\n    } else if (e === 57) {\n      hexes++;\n    } else if (e === 58) {\n      hexes++;\n    } else if (e === 59) {\n      hexes++;\n    } else if (e === 60) {\n      hexes++;\n    } else if (e === 61) {\n      hexes++;\n    } else if (e === 62) {\n      hexes++;\n    } else if (e === 63) {\n      hexes++;\n    } else if (e === 64) {\n      hexes++;\n    } else if (e === 65) {\n      hexes++;\n    } else if (e === 66) {\n      hexes++;\n    } else if (e === 67) {\n      hexes++;\n    } else if (e === 68) {\n      hexes++;\n    } else if (e === 69) {\n      hexes++;\n    } else if (e === 70) {\n      hexes++;\n    } else if (e === 71) {\n      hexes++;\n    } else if (e === 72) {\n      hexes++;\n    } else if (e === 73) {\n      "}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryLength = 0;\n  let binaryIndex = 0;\n  let decimalIndex = 0;\n  let binaryIndex2 = 0;\n  let binaryIndex3 = 0;\n  let binaryIndex4 = 0;\n  let binaryIndex5 = 0;\n  let binaryIndex6 = 0;\n  let binaryIndex7 = 0;\n  let binaryIndex8 = 0;\n  let binaryIndex9 = 0;\n  let binaryIndex10 = 0;\n  let binaryIndex11 = 0;\n  let binaryIndex12 = 0;\n  let binaryIndex13 = 0;\n  let binaryIndex14 = 0;\n  let binaryIndex15 = 0;\n  let binaryIndex16 = 0;\n  let binaryIndex17 = 0;\n  let binaryIndex18 = 0;\n  let binaryIndex19 = 0;\n  let binaryIndex20 = 0;\n  let binaryIndex21 = 0;\n  let binaryIndex22 = 0;\n  let binaryIndex23 = 0;\n  let binaryIndex24 = 0;\n  let binaryIndex25 = 0;\n  let binaryIndex26 = 0;\n  let binaryIndex27 = 0;\n  let binaryIndex28 = 0;\n  let binaryIndex29 = 0;\n  let binaryIndex30 = 0;\n  let binaryIndex31 = 0;\n  let binaryIndex32 = 0;\n  let binaryIndex33 = 0;\n  let binaryIndex34 = 0;\n  let binaryIndex35 = 0;\n  let binaryIndex36 = 0;\n  let binaryIndex37 = 0;\n  let binaryIndex38 = 0;\n  let binaryIndex39 = 0;\n  let binaryIndex40 = 0;\n  let binaryIndex41 = 0;\n  let binaryIndex42 = 0;\n  let binaryIndex43 = 0;\n  let binaryIndex44 = 0;\n  let binaryIndex45 = 0;\n  let binaryIndex46 = 0;\n  let binaryIndex47 = 0;\n  let binaryIndex48 = 0;\n  let binaryIndex49 = 0;\n  let binaryIndex50 = 0;\n  let binaryIndex51 = 0;\n  let binaryIndex52 = 0;\n  let binaryIndex53 = 0;\n  let binaryIndex54 = 0;\n  let binaryIndex55 = 0;\n  let binaryIndex56 = 0;\n  let binaryIndex57 = 0;\n  let binaryIndex58 = 0;\n  let binaryIndex59 = 0;\n  let binaryIndex60 = 0;\n  let binaryIndex61 = 0;\n  let binaryIndex62 = 0;\n  let binaryIndex63 = 0;\n  let binaryIndex64 = 0;\n  let binaryIndex65 = 0;\n  let binaryIndex66 = 0;\n  let binaryIndex67 = 0;\n  let binaryIndex68 = 0;\n  let binaryIndex69 = 0;\n  let binaryIndex70 = 0;\n  let binaryIndex71 = 0;\n  let binaryIndex72 = 0;\n  let binaryIndex73 = 0;\n  let binaryIndex74 = 0;\n  let binaryIndex75 = 0;\n  let binaryIndex76 = 0;\n  let binaryIndex77 = 0;\n  let binaryIndex78 = 0;\n  let binaryIndex79 = 0;\n  let binaryIndex80 = 0;\n  let binaryIndex81 = 0;\n  let binaryIndex82 = 0;\n  let binaryIndex83 = 0;\n  let binaryIndex84 = 0;\n  let binaryIndex85 = 0;\n  let binaryIndex86 = 0;\n  let binaryIndex87 = 0;\n  let binaryIndex88 = 0;\n  let binaryIndex89 = 0;\n  let binaryIndex90 = 0;\n  let binaryIndex91 = 0;\n  let binaryIndex92 = 0;\n  let binaryIndex93 = 0;\n  let binaryIndex94 = 0;\n  let binaryIndex95 = 0;\n  let binaryIndex96 = 0;\n  let binaryIndex97 = 0;\n  let binaryIndex98 = 0;\n  let binaryIndex99 = 0;\n  let binaryIndex100 = 0;\n  let binaryIndex101 = 0;\n  let binaryIndex102 = 0;\n  let binaryIndex103 = 0;\n  let binaryIndex104 = 0;\n  let binaryIndex105 = 0;\n  let binaryIndex106 = 0;\n  let binaryIndex107 = 0;\n  let binaryIndex108 = 0;\n  let binaryIndex109 = 0;\n  let binaryIndex110 = 0;\n  let binaryIndex111 = 0;\n  let binaryIndex112 = 0;\n  let binaryIndex113 = 0;\n  let binaryIndex114 = 0;\n  let binaryIndex115 = 0;\n  let binaryIndex116 = 0;\n  let binaryIndex117 = 0;\n  let binaryIndex118 = 0;\n  let binaryIndex119 = 0;\n  let binaryIndex120 = 0;\n  let binaryIndex121 = 0;\n  let binaryIndex122 = 0;\n  let binaryIndex123 = 0;\n  let binaryIndex124 = 0;\n  let binaryIndex125 = 0;\n  let binaryIndex126 = 0;\n  let binaryIndex127 = 0;\n  let binaryIndex128 = 0;\n  let binaryIndex129 = 0;\n  let binaryIndex130 = 0;\n  let binaryIndex131 = 0;\n  let binaryIndex132 = 0;\n  let binaryIndex133 = 0;\n  let binaryIndex134 = 0;\n  let binaryIndex135 = 0;\n  let binaryIndex136 = 0;\n  let binaryIndex137 = 0;\n  let binaryIndex138 = 0;\n  let binaryIndex139 = 0;\n  let binaryIndex140 = 0;\n  let binaryIndex141 = 0;\n  let binaryIndex142 = 0;\n  let binaryIndex143 = 0;\n  let binaryIndex144 = 0;\n  let binaryIndex145 = 0;\n  let binaryIndex146 = 0;\n  let binaryIndex147 = 0;\n  let binaryIndex148 = 0;\n  let binaryIndex149 = 0;\n  let binaryIndex150 = 0;\n  let binaryIndex151 = 0;\n  let"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  if (s.length < 3) return false;\n  let map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    if (map.has(letter)) return false;\n    map.set(letter, 1);\n  }\n  return true;\n};\n\nmodule.exports = isHappiest;\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = 'E';\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeCount2 = 0;\n  let gradeCount3 = 0;\n  let gradeCount4 = 0;\n  let gradeCount5 = 0;\n  let gradeCount6 = 0;\n  let gradeCount7 = 0;\n  let gradeCount8 = 0;\n  let gradeCount9 = 0;\n  let gradeCount10 = 0;\n  let gradeCount11 = 0;\n  let gradeCount12 = 0;\n  let gradeCount13 = 0;\n  let gradeCount14 = 0;\n  let gradeCount15 = 0;\n  let gradeCount16 = 0;\n  let gradeCount17 = 0;\n  let gradeCount18 = 0;\n  let gradeCount19 = 0;\n  let gradeCount20 = 0;\n  let gradeCount21 = 0;\n  let gradeCount22 = 0;\n  let gradeCount23 = 0;\n  let gradeCount24 = 0;\n  let gradeCount25 = 0;\n  let gradeCount26 = 0;\n  let gradeCount27 = 0;\n  let gradeCount28 = 0;\n  let gradeCount29 = 0;\n  let gradeCount30 = 0;\n  let gradeCount31 = 0;\n  let gradeCount32 = 0;\n  let gradeCount33 = 0;\n  let gradeCount34 = 0;\n  let gradeCount35 = 0;\n  let gradeCount36 = 0;\n  let gradeCount37 = 0;\n  let gradeCount38 = 0;\n  let gradeCount39 = 0;\n  let gradeCount40 = 0;\n  let gradeCount41 = 0;\n  let gradeCount42 = 0;\n  let gradeCount43 = 0;\n  let gradeCount44 = 0;\n  let gradeCount45 = 0;\n  let gradeCount46 = 0;\n  let gradeCount47 = 0;\n  let gradeCount48 = 0;\n  let gradeCount49 = 0;\n  let gradeCount50 = 0;\n  let gradeCount51 = 0;\n  let gradeCount52 = 0;\n  let gradeCount53 = 0;\n  let gradeCount54 = 0;\n  let gradeCount55 = 0;\n  let gradeCount56 = 0;\n  let gradeCount57 = 0;\n  let gradeCount58 = 0;\n  let gradeCount59 = 0;\n  let gradeCount60 = 0;\n  let gradeCount61 = 0;\n  let gradeCount62 = 0;\n  let gradeCount63 = 0;\n  let gradeCount64 = 0;\n  let gradeCount65 = 0;\n  let gradeCount66 = 0;\n  let gradeCount67 = 0;\n  let gradeCount68 = 0;\n  let gradeCount69 = 0;\n  let gradeCount70 = 0;\n  let gradeCount71 = 0;\n  let gradeCount72 = 0;\n  let gradeCount73 = 0;\n  let gradeCount74 = 0;\n  let gradeCount75 = 0;\n  let gradeCount76 = 0;\n  let gradeCount77 = 0;\n  let gradeCount78 = 0;\n  let gradeCount79 = 0;\n  let gradeCount80 = 0;\n  let gradeCount81 = 0;\n  let gradeCount82 = 0;\n  let gradeCount83 = 0;\n  let gradeCount84 = 0;\n  let gradeCount85 = 0;\n  let gradeCount86 = 0;\n  let gradeCount87 = 0;\n  let gradeCount88 = 0;\n  let gradeCount89 = 0;\n  let gradeCount90 = 0;\n  let gradeCount91 = 0;\n  let gradeCount92 = 0;\n  let gradeCount93 = 0;\n  let gradeCount94 = 0;\n  let gradeCount95 = 0;\n  let gradeCount96 = 0;\n  let gradeCount97 = 0;\n  let gradeCount98 = 0;\n  let gradeCount99 = 0;\n  let gradeCount100 = 0;\n  let gradeCount101 = 0;\n  let gradeCount102 = 0;\n  let gradeCount103 = 0;\n  let gradeCount104 = 0;\n  let gradeCount105 = 0;\n  let gradeCount106 = 0;\n  let gradeCount107 = 0;\n  let gradeCount108 = 0;\n  let gradeCount109 = 0;\n  let gradeCount110 = 0;\n  let gradeCount111 = 0;\n  let gradeCount112 = 0;\n  let gradeCount113 = 0;\n  let gradeCount114 = 0;\n  let gradeCount115 = 0;\n  let gradeCount116 = 0;\n  let gradeCount117 = 0;\n  let gradeCount118 = 0;\n  let gradeCount119 = 0;\n  let gradeCount120 = 0;\n  let gradeCount121 = 0;\n  let gradeCount122 = 0;\n  let gradeCount123 = 0;\n  let gradeCount124 = 0;\n  let gradeCount125 = 0;\n  let gradeCount126 = 0;\n  let gradeCount127 = 0;\n  let gradeCount128 = 0;\n  let gradeCount129 = 0;\n  let gradeCount130 = 0;\n  let gradeCount131 = 0;\n  let gradeCount132 = 0;\n  let gradeCount133 = 0;\n  let gradeCount134 = 0;\n  let gradeCount135 = 0;\n  let gradeCount136 = 0;\n  let gradeCount137 = 0;\n  let gradeCount138 = 0;\n  let gradeCount139 = 0;\n  "}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  let i = 2;\n  while (i < length) {\n    if (length % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  const count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count += i;\n    }\n  }\n  return count;\n};\n\nmodule.exports = startOneEnds;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit * N;\n    N /= 10;\n    digit *= 10;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nmodule.exports = adding\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let arr2 = arr.map(a => a.charCodeAt(0));\n  let arr3 = arr2.sort((a, b) => a - b);\n  let arr4 = arr3.map(a => String.fromCharCode(a));\n  return arr4.join(' ');\n};\n\nmodule.exports = antisShuffles;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const rows = [];\n  const sortedRows = [];\n  const sortedColumns = [];\n  const sortedRowsByColumns = [];\n  const sortedColumnsByRows = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    const row = lst[i];\n    const columns = [];\n    const sortedColumnsByRow = [];\n    const sortedRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n    const sortedRowsByColumnsByRow = [];\n    const sortedColumnsByRowsByColumn = [];\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  let result = array.slice(0);\n  let sum = 0;\n  for (let i = 0; i < result.length; i++) {\n    sum += result[i];\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\nmodule.exports = sortsArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let newChar = char;\n    if (char === 'a') {\n      newChar = 'e';\n    } else if (char === 'e') {\n      newChar = 'i';\n    } else if (char === 'i') {\n      newChar = 'o';\n    } else if (char === 'o') {\n      newChar = 'u';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let newChar = char;\n    if (char === 'e') {\n      newChar = 'a';\n    } else if (char === 'i') {\n      newChar = 'e';\n    } else if (char === 'o') {\n      newChar = 'i';\n    } else if (char === 'u') {\n      newChar = 'o';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let newChar = char;\n    if (char === 'a') {\n      newChar = 'e';\n    } else if (char === 'e') {\n      newChar = 'i';\n    } else if (char === 'i') {\n      newChar = 'o';\n    } else if (char === 'o') {\n      newChar = 'u';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let newChar = char;\n    if (char === 'e') {\n      newChar = 'a';\n    } else if (char === 'i') {\n      newChar = 'e';\n    } else if (char === 'o') {\n      newChar = 'i';\n    } else if (char === 'u') {\n      newChar = 'o';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let newChar = char;\n    if (char === 'a') {\n      newChar = 'e';\n    } else if (char === 'e') {\n      newChar = 'i';\n    } else if (char === 'i') {\n      newChar = 'o';\n    } else if (char === 'o') {\n      newChar = 'u';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let str = s.to"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return lst[minIndex + 1];\n};\n\nmodule.exports = nextSmallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBore;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return x === y + z && isInt(x) && isInt(y) && isInt(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt("}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i]\n    let letter2 = message[i + 1]\n    if (letter === letter2) {\n      result += letter\n    } else {\n      result += letter.toUpperCase()\n    }\n  }\n  return result\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_value = 0;\n  let max_prime_value_index = 0;\n  let max_prime_value_value = 0;\n  let max_prime_value_value_index = 0;\n  let max_prime_value_value_value = 0;\n  let max_prime_value_value_value_index = 0;\n  let max_prime_value_value_value_value = 0;\n  let max_prime_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_value_value_value_value_value_value_value_value_"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases2 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases3 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases4 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases5 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases6 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases7 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases8 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases9 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases10 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases11 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases12 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases13 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases14 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases15 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCases16 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i < n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n// Check if a number is prime\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrimeTest = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime10 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Test whether a number is prime or not\nconst isPrime11 = (n"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(i => i.charCodeAt(0));\n  let b_digits = b.toString().split('').map(i => i.charCodeAt(0));\n  let product = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      if (a_digits[i] === b_digits[j]) {\n        product += 1;\n      }\n    }\n  }\n  return product;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 2;\n    }\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  let closest = 0;\n  let closestDistance = 0;\n  let closestIndex = 0;\n  let closestDistanceIndex = 0;\n  let closestDistanceIndex2 = 0;\n  let closestDistanceIndex3 = 0;\n  let closestDistanceIndex4 = 0;\n  let closestDistanceIndex5 = 0;\n  let closestDistanceIndex6 = 0;\n  let closestDistanceIndex7 = 0;\n  let closestDistanceIndex8 = 0;\n  let closestDistanceIndex9 = 0;\n  let closestDistanceIndex10 = 0;\n  let closestDistanceIndex11 = 0;\n  let closestDistanceIndex12 = 0;\n  let closestDistanceIndex13 = 0;\n  let closestDistanceIndex14 = 0;\n  let closestDistanceIndex15 = 0;\n  let closestDistanceIndex16 = 0;\n  let closestDistanceIndex17 = 0;\n  let closestDistanceIndex18 = 0;\n  let closestDistanceIndex19 = 0;\n  let closestDistanceIndex20 = 0;\n  let closestDistanceIndex21 = 0;\n  let closestDistanceIndex22 = 0;\n  let closestDistanceIndex23 = 0;\n  let closestDistanceIndex24 = 0;\n  let closestDistanceIndex25 = 0;\n  let closestDistanceIndex26 = 0;\n  let closestDistanceIndex27 = 0;\n  let closestDistanceIndex28 = 0;\n  let closestDistanceIndex29 = 0;\n  let closestDistanceIndex30 = 0;\n  let closestDistanceIndex31 = 0;\n  let closestDistanceIndex32 = 0;\n  let closestDistanceIndex33 = 0;\n  let closestDistanceIndex34 = 0;\n  let closestDistanceIndex35 = 0;\n  let closestDistanceIndex36 = 0;\n  let closestDistanceIndex37 = 0;\n  let closestDistanceIndex38 = 0;\n  let closestDistanceIndex39 = 0;\n  let closestDistanceIndex40 = 0;\n  let closestDistanceIndex41 = 0;\n  let closestDistanceIndex42 = 0;\n  let closestDistanceIndex43 = 0;\n  let closestDistanceIndex44 = 0;\n  let closestDistanceIndex45 = 0;\n  let closestDistanceIndex46 = 0;\n  let closestDistanceIndex47 = 0;\n  let closestDistanceIndex48 = 0;\n  let closestDistanceIndex49 = 0;\n  let closestDistanceIndex50 = 0;\n  let closestDistanceIndex51 = 0;\n  let closestDistanceIndex52 = 0;\n  let closestDistanceIndex53 = 0;\n  let closestDistanceIndex54 = 0;\n  let closestDistanceIndex55 = 0;\n  let closestDistanceIndex56 = 0;\n  let closestDistanceIndex57 = 0;\n  let closestDistanceIndex58 = 0;\n  let closestDistanceIndex59 = 0;\n  let closestDistanceIndex60 = 0;\n  let closestDistanceIndex61 = 0;\n  let closestDistanceIndex62 = 0;\n  let closestDistanceIndex63 = 0;\n  let closestDistanceIndex64 = 0;\n  let closestDistanceIndex65 = 0;\n  let closestDistanceIndex66 = 0;\n  let closestDistanceIndex67 = 0;\n  let closestDistanceIndex68 = 0;\n  let closestDistanceIndex69 = 0;\n  let closestDistanceIndex70 = 0;\n  let closestDistanceIndex71 = 0;\n  let closestDistanceIndex72 = 0;\n  let closestDistanceIndex73 = 0;\n  let closestDistanceIndex74 = 0;\n  let closestDistanceIndex75 = 0;\n  let closestDistanceIndex76 = 0;\n  let closestDistanceIndex77 = 0;\n  let closestDistanceIndex78 = 0;\n  let closestDistanceIndex79 = 0;\n  let closestDistanceIndex80 = 0;\n  let closestDistanceIndex81 = 0;\n  let closestDistanceIndex82 = 0;\n  let closestDistanceIndex83 = 0;\n  let closestDistanceIndex84 = 0;\n  let closestDistanceIndex85 = 0;\n  let closestDistanceIndex86 = 0;\n  let closestDistanceIndex87 = 0;\n  let closestDistanceIndex88 = 0;\n  let closestDistanceIndex89 = 0;\n  let closestDistanceIndex90 = 0;\n  let closestDistanceIndex91 = 0;\n  let closestDistanceIndex92 = 0;\n  let closestDistanceIndex93 = 0;\n  let closestDistanceIndex94 = 0;\n  let closestDistanceIndex95 = 0;\n  let closestDistanceIndex96 = 0;\n  let closestDistanceIndex97 = 0;\n  let closestDistanceIndex98 = 0;\n  let closestDistanceIndex99 = 0;\n  let closestDistanceIndex100 = 0;\n  let closestDistanceIndex101 = 0;\n  let closestDistanceIndex102 = 0;\n  let closestDistanceIndex103 = 0;\n  let closestDistanceIndex104 = 0;\n  let closestDistanceIndex105 = 0;\n  let closestDistanceIndex106 = 0;\n  let closestDistanceIndex107 = 0;\n  let closestDistanceIndex108 = 0;\n  let closestDistanceIndex109 = 0;\n  let closestDistanceIndex110 = 0;\n  let closestDistanceIndex111 = 0;\n  let closestDistanceIndex112 = 0;\n  let closestDistanceIndex113 = 0;\n  let closestDistanceIndex114 = 0;\n  let closestDistanceIndex115 = 0;\n  let closestDistanceIndex116 = 0;\n  let closestDistanceIndex117 = 0;\n  let closestDistanceIndex118 = 0;\n  let closestDistanceIndex119 = 0;\n  let closestDistanceIndex120 = 0;\n  let closestDistanceIndex121 = 0;\n  let closestDistanceIndex122 = 0;\n  let closestDistanceIndex123 = 0;\n  let closestDistanceIndex124 = 0;\n  let closestDistanceIndex125 = 0;\n  let closestDistanceIndex126 = 0;\n  let closestDistanceIndex127 = 0;\n  let closestDistanceIndex128 = 0;\n  let closestDistanceIndex129 = 0;\n  let closestDistanceIndex130 = 0;\n  let closestDistanceIndex131 = 0;\n  let closestDistanceIndex132 = 0;\n  let closestDistanceIndex133 = 0;\n  let closestDistanceIndex134 = 0;\n  let closestDistanceIndex135 = 0;\n  "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(n % 2? n + 1 : n);\n    n = n / 2;\n  }\n  return result;\n};\n\nmodule.exports = madeAPiles;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(/[, ]+/);\n  return words;\n}\n\nmodule.exports = wordString;\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x < y) {\n    return -1\n  }\n  return x\n}\n\nmodule.exports = {\n  chooseNum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundingAvg(1, 5));\nconsole.log(roundingAvg(7, 5));\nconsole.log(roundingAvg(10, 20));\nconsole.log(roundingAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let result = [];\n  let isEven = (x) => {\n    return x % 2 === 0;\n  };\n  for (let i = 0; i < x.length; i++) {\n    if (isEven(x[i])) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigit;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  let reversed = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i] + reversed[i]);\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  let reversed = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i] + reversed[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  let reversed = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i] + reversed[i]);\n  }\n  return result;\n};\n\nmodule.exports = {\n  byLength: byLength,\n  byName: byName,\n  byLengthAndName: byLengthAndName\n};\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? Math.pow(i, i) : i);\n  }\n  return res;\n};\n\nconst f2 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f3 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f4 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f5 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f6 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f7 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f8 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f9 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f10 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f11 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f12 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f13 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f14 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f15 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f16 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f17 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f18 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f19 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f20 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f21 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f22 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f23 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst f24 = (n) => {\n  let res = [];\n  for (let i = 1; i <= n; i++) {\n    res.push(i % 2? i : i + 1);\n  }\n  return res;\n};\n\nconst"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOdderPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const sum = arr[i];\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n    i--;\n  }\n  return true;\n};\n\nconst movingOneBalls = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  while (i >= 0) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n    i--;\n  }\n  return true;\n};\n\nmodule.exports = movingOneBalls;<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  const even = lst1.filter(i => i % 2 === 0);\n  const odd = lst1.filter(i => i % 2!== 0);\n  const even_odd = lst1.concat(lst2);\n  return even.length === even_odd.length && even.length === odd.length;\n};\n\nmodule.exports = exchanges;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let letterCount = {};\n  let letterIndex = 0;\n  let letterCountIndex = 0;\n  let letterCountCount = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n  let letterCountCountIndex = 0;\n"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result === s;\n  return [result, isPalindrome];\n};\n\nconst test = (s, c) => {\n  let result = reversesDelete(s, c);\n  return result;\n};\n\nmodule.exports = test;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    let str = lst[i];\n    let num = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    count += num;\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = odderCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const minSum = nums.reduce((a, b) => a + b, 0);\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      minSum = Math.min(minSum, nums[i]);\n    }\n  }\n  return minSum;\n};\n\nexport { minSubsArraySums };\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => {\n    return row.map((col, j) => {\n      return {\n        row: i,\n        col: j,\n        capacity: capacity,\n        used: 0\n      };\n    });\n  });\n\n  const maxFill = (buckets) => {\n    const maxFill = (buckets) => {\n      const buckets = buckets.map((bucket, i) => {\n        return {\n          row: i,\n          buckets: bucket.map((bucket, j) => {\n            return {\n              row: j,\n              bucket: bucket,\n              used: 0\n            };\n          })\n        };\n      });\n      return buckets.map((bucket, i) => {\n        return {\n          row: i,\n          buckets: bucket.map((bucket, j) => {\n            return {\n              row: j,\n              bucket: bucket,\n              used: 0\n            };\n          })\n        };\n      });\n    };\n    return buckets.map((bucket, i) => {\n      return {\n        row: i,\n        buckets: bucket.map((bucket, j) => {\n          return {\n            row: j,\n            bucket: bucket,\n            used: 0\n          };\n        })\n      };\n    });\n  };\n  return maxFill(buckets);\n};\n\nmodule.exports = maxFill;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n};\n\nmodule.exports = sortsArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let words = []\n  let word = \"\"\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let len = word.length\n  let i = len - 1\n  let j = 0\n  let min = Infinity\n  while (i >= 0) {\n    if (word[i] === word[j]) {\n      i--\n      j++\n    } else {\n      if (vowels.indexOf(word[i])!== -1 && vowels.indexOf(word[j])!== -1) {\n        let distance = Math.abs(i - j)\n        if (distance < min) {\n          min = distance\n        }\n      }\n      i--\n      j++\n    }\n  }\n  return min === Infinity? \"\" : word[j]\n}\n\nmodule.exports = gottenCloserVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = false;\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      res = true;\n      i++;\n    } else if (lst[i] === ')') {\n      res = false;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n\n  const max = arr.reduce((max, val) => {\n    if (val > max) {\n      return val;\n    }\n    return max;\n  }, -Infinity);\n\n  const result = arr.filter(val => val > max);\n\n  return result.sort((a, b) => a - b);\n};\n\nexport { maximums };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + val % 2, 0);\n  return sum % 2 === 0? sum : 0;\n};\n\nmodule.exports = solutions;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let collatz = [1];\n  let result = [];\n  while (collatz.length > 0) {\n    let current = collatz.shift();\n    if (current % 2 === 0) {\n      result.push(current);\n    } else {\n      collatz.push(current / 2);\n      collatz.push(current * 3 + 1);\n    }\n  }\n  return result;\n};\n\nmodule.exports = gottenOdderCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateParts = date.split('-');\n  const month = dateParts[0];\n  const day = dateParts[1];\n  const year = dateParts[2];\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (day < 1 || day > 30) {\n    return false;\n  }\n\n  if (day < 1 || day > 29) {\n    return false;\n  }\n\n  if (year < 2000 || year > 2099) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = validDates;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  let words = txt.split(/[\\s,]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let letters = word.toLowerCase().match(/[a-z]+/g);\n      if (letters.length % 2 === 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = splitWord;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  if (lst.length < 2) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = isSort;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\"\n  }\n  let start = Math.max(interval1[0], interval2[0])\n  let end = Math.min(interval1[1], interval2[1])\n  let length = end - start\n  if (length % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * prod;\n  }\n  return sum;\n};\n\nmodule.exports = prodsSign;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  if (grid.length === 0 || grid[0].length === 0) return [];\n  const gridSize = grid.length;\n  const gridSize2 = grid[0].length;\n  const gridSize3 = gridSize2 * gridSize;\n  const gridSize4 = gridSize3 * gridSize;\n  const gridSize5 = gridSize4 * gridSize;\n  const gridSize6 = gridSize5 * gridSize;\n  const gridSize7 = gridSize6 * gridSize;\n  const gridSize8 = gridSize7 * gridSize;\n  const gridSize9 = gridSize8 * gridSize;\n  const gridSize10 = gridSize9 * gridSize;\n  const gridSize11 = gridSize10 * gridSize;\n  const gridSize12 = gridSize11 * gridSize;\n  const gridSize13 = gridSize12 * gridSize;\n  const gridSize14 = gridSize13 * gridSize;\n  const gridSize15 = gridSize14 * gridSize;\n  const gridSize16 = gridSize15 * gridSize;\n  const gridSize17 = gridSize16 * gridSize;\n  const gridSize18 = gridSize17 * gridSize;\n  const gridSize19 = gridSize18 * gridSize;\n  const gridSize20 = gridSize19 * gridSize;\n  const gridSize21 = gridSize20 * gridSize;\n  const gridSize22 = gridSize21 * gridSize;\n  const gridSize23 = gridSize22 * gridSize;\n  const gridSize24 = gridSize23 * gridSize;\n  const gridSize25 = gridSize24 * gridSize;\n  const gridSize26 = gridSize25 * gridSize;\n  const gridSize27 = gridSize26 * gridSize;\n  const gridSize28 = gridSize27 * gridSize;\n  const gridSize29 = gridSize28 * gridSize;\n  const gridSize30 = gridSize29 * gridSize;\n  const gridSize31 = gridSize30 * gridSize;\n  const gridSize32 = gridSize31 * gridSize;\n  const gridSize33 = gridSize32 * gridSize;\n  const gridSize34 = gridSize33 * gridSize;\n  const gridSize35 = gridSize34 * gridSize;\n  const gridSize36 = gridSize35 * gridSize;\n  const gridSize37 = gridSize36 * gridSize;\n  const gridSize38 = gridSize37 * gridSize;\n  const gridSize39 = gridSize38 * gridSize;\n  const gridSize40 = gridSize39 * gridSize;\n  const gridSize41 = gridSize40 * gridSize;\n  const gridSize42 = gridSize41 * gridSize;\n  const gridSize43 = gridSize42 * gridSize;\n  const gridSize44 = gridSize43 * gridSize;\n  const gridSize45 = gridSize44 * gridSize;\n  const gridSize46 = gridSize45 * gridSize;\n  const gridSize47 = gridSize46 * gridSize;\n  const gridSize48 = gridSize47 * gridSize;\n  const gridSize49 = gridSize48 * gridSize;\n  const gridSize50 = gridSize49 * gridSize;\n  const gridSize51 = gridSize50 * gridSize;\n  const gridSize52 = gridSize51 * gridSize;\n  const gridSize53 = gridSize52 * gridSize;\n  const gridSize54 = gridSize53 * gridSize;\n  const gridSize55 = gridSize54 * gridSize;\n  const gridSize56 = gridSize55 * gridSize;\n  const gridSize57 = gridSize56 * gridSize;\n  const gridSize58 = gridSize57 * gridSize;\n  const gridSize59 = gridSize58 * gridSize;\n  const gridSize60 = gridSize59 * gridSize;\n  const gridSize61 = gridSize60 * gridSize;\n  const gridSize62 = gridSize61 * gridSize;\n  const gridSize63 = gridSize62 * gridSize;\n  const gridSize64 = gridSize63 * gridSize;\n  const gridSize65 = gridSize64 * gridSize;\n  const gridSize66 = gridSize65 * gridSize;\n  const gridSize67 = gridSize66 * gridSize;\n  const gridSize68 = gridSize67 * gridSize;\n  const gridSize69 = gridSize68 * gridSize;\n  const gridSize70 = gridSize69 * gridSize;\n  const gridSize71 = gridSize70 * gridSize;\n  const gridSize72 = gridSize71 * gridSize;\n  const gridSize73 = gridSize72 * gridSize;\n  const gridSize74 = gridSize73 * gridSize;\n  const gridSize75 = gridSize74 * gridSize;\n  const gridSize76 = gridSize75 * gridSize;\n  const gridSize77 = gridSize76 * gridSize;\n  const gridSize78 = gridSize77 * gridSize;"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i = i + 1 / 2;\n  }\n  return result;\n};\n\nconst test = (n) => {\n  let result = tri(n);\n  console.log(result);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest(235);\ntest(236);\ntest(237);\ntest(238);\ntest(239);\ntest(240);\ntest(241);\ntest(242);\ntest(243);\n"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  const digit = n % 10\n  return digit === 0? 0 : digit\n}\n\nmodule.exports = digit\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  let bracketCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      bracketCount++\n    } else if (string[i] === ']') {\n      bracketCount--\n    }\n  }\n  return bracketCount === 0\n}\n\nmodule.exports = isNest\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1, 2, 3]))\nconsole.log(sumSquares([1, 4, 9]))\nconsole.log(sumSquares([1, 3, 5, 7]))\nconsole.log(sumSquares([1.4, 4.2, 0]))\nconsole.log(sumSquares([-2.4, 1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  return!isWordChar(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not a part of a number,\n  and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsADigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsADigit(\"apple pi e\") ➞ false\n  checkIfLastCharsIsADigit(\"apple pi e \") ➞ true\n  checkIfLastCharsIsADigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsADigit = (txt) => {\n  let lastChar = txt.slice(-1);\n  return!isNumberChar(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetterOrDigit = (txt) => {\n  let lastChar = txt.slice(-1);\n  return isLetter(lastChar) || isDigit(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"apple pi e\") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetterOrDigitOrNumber = (txt) => {\n  let lastChar = txt.slice(-1);\n  return isLetter(lastChar) || isDigit(lastChar) || isNumberChar(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"apple pi e\") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetterOrDigitOrNumberOrLetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  return isLetter(lastChar) || isDigit(lastChar) || isNumberChar(lastChar) || isLetter(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"apple pi e\") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  return isLetter(lastChar) || isDigit(lastChar) || isNumberChar(lastChar) || isLetter(lastChar) || isSpaceChar(lastChar);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpace(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpace(\"apple pi e\") ➞ false\n  checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpace(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpace(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpaceOrEmpty = (txt) => {\n  let lastChar = txt.slice(-1);\n  return isLetter(lastChar) || isDigit(lastChar) || isNumberChar(lastChar) || isLetter(lastChar) || isSpaceChar(lastChar) || isEmpty(lastChar);\n};\n\nmodule.exports = {\n  checkIfLastCharsIsALetter,\n  checkIfLastCharsIsALetterOrDigit,\n  checkIfLastCharsIsALetterOrDigitOrNumber,\n  checkIfLastCharsIsALetterOrDigitOrNumberOrLetter,\n  checkIfLastCharsIsALetterOrDigitOrNumberOrLetterOrSpace,\n  checkIfLastCh"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let i = 0;\n  let max = -1;\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      max = i;\n    }\n    i++;\n  }\n  return max;\n};\n\nmodule.exports = canArranging;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers2 = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers3 = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers4 = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers5 = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers6 = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers7 = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return [largest, smallest];\n};\n\nmodule.exports = {\n  largerSmallerIntegers,\n  largerSmallerIntegers2,\n  largerSmallerIntegers3,\n  largerSmallerIntegers4,\n  largerSmallerIntegers5,\n  largerSmallerIntegers6,\n  largerSmallerIntegers7,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst comparingTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst comparingThree = (a, b, c) => {\n  if (a === b && a === c) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst comparingFour = (a, b, c, d) => {\n  if (a === b && a === c && a === d) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\nmodule.exports = {\n  isEqualToSummingEven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \" \")\n}\n\nmodule.exports = fixesSpace\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.')!== -1) {\n    return 'No';\n  }\n  if (file_name.substring(0, 1).toLowerCase()!== file_name.substring(0, 1).toUpperCase()) {\n    return 'No';\n  }\n  if (file_name.substring(file_name.length - 3)!== 'txt' &&\n    file_name.substring(file_name.length - 3)!== 'exe' &&\n    file_name.substring(file_name.length - 3)!== 'dll') {\n    return 'No';\n  }\n  return 'Yes';\n};\n\nmodule.exports = filesNamesCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst test = [1,2,3,4,5,6,7,8,9,10];\nconsole.log(sumsSquares(test));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const length = word.length;\n    if (length > 0 && isPrime(length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = wordInSentences;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xNum = parseInt(x);\n  const xDen = parseInt(n);\n  const xNumIsWhole = xNum === Math.floor(xNum);\n  const xDenIsWhole = xDen === Math.floor(xDen);\n  const xIsWhole = xNumIsWhole && xDenIsWhole;\n  return xIsWhole;\n};\n\nmodule.exports = simplify;<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n\n  const sorted = nums.sort((a, b) => {\n    const aDigit = a % 10;\n    const bDigit = b % 10;\n    if (aDigit === bDigit) {\n      return a - b;\n    }\n    return aDigit - bDigit;\n  });\n\n  return sorted;\n};\n\nmodule.exports = orderByPoint;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  const a = [1];\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    for (let j = 1; j < i; j++) {\n      for (let k = j + 1; k < i; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n    a.push(i);\n  }\n  return count;\n};\n\nmodule.exports = gottenMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const distance = (planet1, planet2) => {\n    const distance = (planet1, planet2) => {\n      const distance = (planet1, planet2) => {\n        const distance = (planet1, planet2) => {\n          const distance = (planet1, planet2) => {\n            const distance = (planet1, planet2) => {\n              const distance = (planet1, planet2) => {\n                const distance = (planet1, planet2) => {\n                  const distance = (planet1, planet2) => {\n                    const distance = (planet1, planet2) => {\n                      const distance = (planet1, planet2) => {\n                        const distance = (planet1, planet2) => {\n                          const distance = (planet1, planet2) => {\n                            const distance = (planet1, planet2) => {\n                              const distance = (planet1, planet2) => {\n                                const distance = (planet1, planet2) => {\n                                  const distance = (planet1, planet2) => {\n                                    const distance = (planet1, planet2) => {\n                                      const distance = (planet1, planet2) => {\n                                        const distance = (planet1, planet2) => {\n                                          const distance = (planet1, planet2) => {\n                                            const distance = (planet1, planet2) => {\n                                              const distance = (planet1, planet2) => {\n                                                const distance = (planet1, planet2) => {\n                                                  const distance = (planet1, planet2) => {\n                                                    const distance = (planet1, planet2) => {\n                                                      const distance = (planet1, planet2) => {\n                                                        const distance = (planet1, planet2) => {\n                                                          const distance = (planet1, planet2) => {\n                                                            const distance = (planet1, planet2) => {\n                                                              const distance = (planet1, planet2) => {\n                                                                const distance = (planet1, planet2) => {\n                                                                  const distance = (planet1, planet2) => {\n                                                                    const distance = (planet1, planet2) => {\n                                                                      const distance = (planet1, planet2) => {\n                                                                        const distance = (planet1, planet2) => {\n                                                                          const distance = (planet1, planet2) => {\n                                                                            const distance = (planet1, planet2) => {\n                                                                              const distance = (planet1, planet2) => {\n                                                                                const distance = (planet1, planet2) => {\n                                                                                  const distance = (planet1, planet2) => {\n                                                                                    const distance = (planet1, planet2) => {\n                                                                                      const distance = (planet1, planet2) => {\n                                                                                        const distance = (planet1, planet2) => {\n                                                                                          const distance = (planet1, planet2) => {\n                                                                                            const distance = (planet1, planet2) => {\n                                                                                            \tconst distance = (planet1, planet2) => {\n                                                                                            \t\tconst distance = (planet1, planet2) => {\n                                                                                            \t\t\tconst distance = (planet1, planet2) => {\n                                                                                            \t\t\t\tconst distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t  const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t    const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t      const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t        const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t        const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t          const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t            const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t              const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                  const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                    const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                      const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                        const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                          const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                            const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                              const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                               const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                               const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                               const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                               const distance = (planet1, planet2) => {\n                                                                                            \t\t\t\t                               "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortLists = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortListsSums2 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortLists2 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortListsSums3 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortLists3 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortListsSums4 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortLists4 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortListsSums5 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortLists5 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortListsSums6 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n    i = j;\n  }\n  return res;\n};\n\nconst sortLists6 = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len && lst[j] === lst[i]) {\n      j++;\n    }\n    res.push(lst"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst test = () => {\n  const result = xOrY(7, 34, 12);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = doubleTheDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.map(score => score.score);\n  let guesses = game.map(guess => guess.guess);\n  let result = [];\n  for (let i = 0; i < scores.length; i++) {\n    let guess = guesses[i];\n    let score = scores[i];\n    let diff = Math.abs(score - guess);\n    if (diff === 0) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let i_ext = 0;\n  let j_ext = 0;\n  let k_ext = 0;\n  let l_ext = 0;\n  let m_ext = 0;\n  let n_ext = 0;\n  let o_ext = 0;\n  let p_ext = 0;\n  let q_ext = 0;\n  let r_ext = 0;\n  let s_ext = 0;\n  let t_ext = 0;\n  let u_ext = 0;\n  let v_ext = 0;\n  let w_ext = 0;\n  let x_ext = 0;\n  let y_ext = 0;\n  let z_ext = 0;\n  let i_ext_name = '';\n  let j_ext_name = '';\n  let k_ext_name = '';\n  let l_ext_name = '';\n  let m_ext_name = '';\n  let n_ext_name = '';\n  let o_ext_name = '';\n  let p_ext_name = '';\n  let q_ext_name = '';\n  let r_ext_name = '';\n  let s_ext_name = '';\n  let t_ext_name = '';\n  let u_ext_name = '';\n  let v_ext_name = '';\n  let w_ext_name = '';\n  let x_ext_name = '';\n  let y_ext_name = '';\n  let z_ext_name = '';\n  let i_ext_name_length = 0;\n  let j_ext_name_length = 0;\n  let k_ext_name_length = 0;\n  let l_ext_name_length = 0;\n  let m_ext_name_length = 0;\n  let n_ext_name_length = 0;\n  let o_ext_name_length = 0;\n  let p_ext_name_length = 0;\n  let q_ext_name_length = 0;\n  let r_ext_name_length = 0;\n  let s_ext_name_length = 0;\n  let t_ext_name_length = 0;\n  let u_ext_name_length = 0;\n  let v_ext_name_length = 0;\n  let w_ext_name_length = 0;\n  let x_ext_name_length = 0;\n  let y_ext_name_length = 0;\n  let z_ext_name_length = 0;\n  let i_ext_name_length_max = 0;\n  let j_ext_name_length_max = 0;\n  let k_ext_name_length_max = 0;\n  let l_ext_name_length_max = 0;\n  let m_ext_name_length_max = 0;\n  let n_ext_name_length_max = 0;\n  let o_ext_name_length_max = 0;\n  let p_ext_name_length_max = 0;\n  let q_ext_name_length_max = 0;\n  let r_ext_name_length_max = 0;\n  let s_ext_name_length_max = 0;\n  let t_ext_name_length_max = 0;\n  let u_ext_name_length_max = 0;\n  let v_ext_name_length_max = 0;\n  let w_ext_name_length_max = 0;\n  let x_ext_name_length_max = 0;\n  let y_ext_name_length_max = 0;\n  let z_ext_name_length_max = 0;\n  let i_ext_name_length_max_max = 0;\n  let j_ext_name_length_max_max = 0;\n  let k_ext_name_length_max_max = 0;\n  let l_ext_name_length_max_max = 0;\n  let m_ext_name_length_max_max = 0;\n  let n_ext_name_length_max_max = 0;\n  let o_ext_name_length_max_max = 0;\n  let p_ext_name_length_max_max = 0;\n  let q_ext_name_length_max_max = 0;\n  let r_ext_name_length_max_max = 0;\n  let s_ext_name_length_max_max = 0;\n  let t_ext_name_length_max_max = 0;\n  let u_ext_name_length_max_max = 0;\n  let v_ext_name_length_max_max = 0"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a_word = a;\n  let b_word = b;\n  let a_word_len = a_word.length;\n  let b_word_len = b_word.length;\n  let a_word_arr = a_word.split(\"\");\n  let b_word_arr = b_word.split(\"\");\n  let a_word_arr_len = a_word_arr.length;\n  let b_word_arr_len = b_word_arr.length;\n  let a_word_arr_arr = a_word_arr.map((word) => {\n    let word_arr = word.split(\"\");\n    let word_arr_len = word_arr.length;\n    let word_arr_arr = word_arr.map((word) => {\n      let word_arr_arr_len = word_arr_arr.length;\n      let word_arr_arr_arr = word_arr_arr.map((word) => {\n        let word_arr_arr_arr_len = word_arr_arr_arr.length;\n        let word_arr_arr_arr_arr = word_arr_arr_arr.map((word) => {\n          let word_arr_arr_arr_arr_len = word_arr_arr_arr_arr.length;\n          let word_arr_arr_arr_arr_arr = word_arr_arr_arr_arr.map((word) => {\n            let word_arr_arr_arr_arr_arr_len = word_arr_arr_arr_arr_arr.length;\n            let word_arr_arr_arr_arr_arr_arr = word_arr_arr_arr_arr_arr.map((word) => {\n              let word_arr_arr_arr_arr_arr_arr_len = word_arr_arr_arr_arr_arr_arr.length;\n              let word_arr_arr_arr_arr_arr_arr_arr = word_arr_arr_arr_arr_arr_arr.map((word) => {\n                let word_arr_arr_arr_arr_arr_arr_arr_len = word_arr_arr_arr_arr_arr_arr.length;\n                let word_arr_arr_arr_arr_arr_arr_arr_arr = word_arr_arr_arr_arr_arr_arr_arr.map((word) => {\n                  let word_arr_arr_arr_arr_arr_arr_arr_arr_arr_len = word_arr_arr_arr_arr_arr_arr_arr_arr.length;\n                  let word_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let even = 0\n  let odd = 0\n  let i = 0\n  while (i < num) {\n    if (num % 10 === 0) {\n      even++\n    } else {\n      odd++\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOdderCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid input');\n  }\n\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    let digit = number % 10;\n    number = number / 10;\n    if (digit === 4 || digit === 9) {\n      result += 'iv';\n    } else if (digit === 9) {\n      result += 'ix';\n    } else if (digit === 10) {\n      result += 'x';\n    } else {\n      result += String.fromCharCode(digit + 1);\n    }\n    i++;\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  return a === b && b === c || a === c && b === c;\n};\n\nmodule.exports = rightAngleTriangles;<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n    if (words[i].length === max.length && words[i].localeCompare(max) < 0) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = foundMax;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = (number, need, remaining) => {\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(test(5, 6, 10));\nconsole.log(test(4, 8, 9));\nconsole.log(test(1, 10, 10));\nconsole.log(test(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (index < operandLength) {\n    if (operatorIndex < operatorLength) {\n      if (operator[operatorIndex] === '+') {\n        result += operand[index];\n      } else if (operator[operatorIndex] === '-') {\n        result -= operand[index];\n      } else if (operator[operatorIndex] === '*') {\n        result *= operand[index];\n      } else if (operator[operatorIndex] === '/') {\n        result /= operand[index];\n      } else if (operator[operatorIndex] === '//') {\n        result = Math.floor(result / operand[index]);\n      } else if (operator[operatorIndex] === '**') {\n        result = Math.pow(result, operand[index]);\n      }\n      index++;\n      operatorIndex++;\n    } else {\n      return result;\n    }\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      if (str[i].match(/[a-z]/)) {\n        result += str[i].toUpperCase();\n      } else {\n        result += str[i].toLowerCase();\n      }\n    } else {\n      result += str[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
