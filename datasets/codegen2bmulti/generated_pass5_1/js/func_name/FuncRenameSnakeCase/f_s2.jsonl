{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const min_distance = sorted_numbers[0] - threshold;\n  const max_distance = sorted_numbers[sorted_numbers.length - 1] + threshold;\n  return sorted_numbers.some(number => number < min_distance || number > max_distance);\n};\n\nmodule.exports = has_close_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let last_open_paren = 0;\n  let last_open_paren_count = 0;\n  let current_paren_count = 0;\n  let current_paren = 0;\n  let current_paren_count = 0;\n  let current_char = '';\n  let current_char_count = 0;\n  let current_char_index = 0;\n  let current_char_index_count = 0;\n  let current_char_index_count_count = 0;\n  let current_char_index_count_count_count = 0;\n  let current_char_index_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_char_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  return decimals;\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part_and_decimal_part = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part_and_decimal_part_and_decimal_part = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part = (number) => {\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n  if (decimals < 0.5) {\n    return integerPart;\n  } else {\n    return integerPart + 1;\n  }\n};\n\n/*\n  Given a positive floating point number, it can be rounded to\n  the nearest integer.\n\n  Return the rounded number.\n  >>> round_number(3.5)\n  4\n  */\nconst round_number_to_nearest_integer_with_decimals_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part_and_decimal_part_and_"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  let is_below_zero = false;\n  operations.forEach((operation) => {\n    if (operation === 0) {\n      balance = 0;\n    } else {\n      balance += operation;\n    }\n    if (balance < 0) {\n      is_below_zero = true;\n    }\n  });\n  return is_below_zero;\n};\n\nmodule.exports = below_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  let sum = 0;\n  let mean = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n    mean += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this\n  dataset.\n  Standard deviation is the average of the square of the differences between\n  each element and a centerpoint (mean in this case):\n  STD = average | x - x_mean |^2\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation = (numbers) => {\n  let sum = 0;\n  let mean = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2);\n    mean += numbers[i];\n  }\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset.\n  Variance is the average of the square of the differences between each element\n  and a centerpoint (mean in this case):\n  VAR = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  let sum = 0;\n  let mean = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2);\n    mean += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_mean = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_mean_of_mean = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_mean_of_standard_deviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_standard_deviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_standard_deviation_of_standard_deviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_standard_deviation_of_standard_deviation_of_standard_deviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the variance of this dataset:\n  STD_ERR = sqrt(VAR)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error_of_standard_deviation_of_standard_deviation_of_standard_deviation_of_standard_deviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  const current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  let stack = [];\n  let current_level = 0;\n  let current_paren_level = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_index_length = 0;\n  let current_paren_string_index_index = 0;\n  let current_paren_string_index_index_length = 0;\n  let current_paren_string_index_index_index = 0;\n  let current_paren_string_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_string_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique_and_return = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique_and_return_unique = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique_and_return_unique_and_return = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique_and_return_unique_and_return = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique_and_return_unique_and_return = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.trim());\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and return a list of strings\n  *\n  * @param {Array} strings\n  * @param {String} substring\n  * @return {Array}\n  */\nconst filter_by_substring_and_return_unique_and_return_unique_and_return_unique_and_return = (strings, substring) => {\n  if (strings."}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0, product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sum_product_test = () => {\n  let [sum, product] = sum_product([1, 2, 3, 4]);\n  assert.equal(sum, 10);\n  assert.equal(product, 24);\n};\n\nmodule.exports = {\n  sum_product_test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  let max = numbers[0];\n  let max_index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(max_index);\n};\n\n/*\n  From a given list of integers, generate a list of rolling minimum element found until given moment in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 4]\n  */\nconst rolling_min = (numbers) => {\n  let min = numbers[0];\n  let min_index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      min_index = i;\n    }\n  }\n  return numbers.slice(min_index);\n};\n\n/*\n  From a given list of integers, generate a list of rolling sum element found until given moment in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 5, 6, 7, 8, 9]\n  */\nconst rolling_sum = (numbers) => {\n  let sum = numbers[0];\n  let sum_index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum > sum_index) {\n      sum_index = sum;\n    }\n  }\n  return numbers.slice(sum_index);\n};\n\n/*\n  From a given list of integers, generate a list of rolling product element found until given moment in the sequence.\n  >>> rolling_product([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 24, 120, 720, 5040]\n  */\nconst rolling_product = (numbers) => {\n  let product = numbers[0];\n  let product_index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product < 0) {\n      product = 0;\n    }\n    if (product > product_index) {\n      product_index = product;\n    }\n  }\n  return numbers.slice(product_index);\n};\n\n/*\n  From a given list of integers, generate a list of rolling average element found until given moment in the sequence.\n  >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 2.5, 3.5, 3.5, 3.5, 4.5, 4.5]\n  */\nconst rolling_average = (numbers) => {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  average = sum / numbers.length;\n  return numbers.slice(0, numbers.length - 1).map(x => x / average);\n};\n\n/*\n  From a given list of integers, generate a list of rolling variance element found until given moment in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rolling_variance = (numbers) => {\n  let sum = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    variance += (numbers[i] - sum) * (numbers[i] - sum);\n  }\n  return variance / numbers.length;\n};\n\n/*\n  From a given list of integers, generate a list of rolling standard deviation element found until given moment in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  let sum = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    variance += (numbers[i] - sum) * (numbers[i] - sum);\n  }\n  return Math.sqrt(variance / numbers.length);\n};\n\n/*\n  From a given list of integers, generate a list of rolling standard error element found until given moment in the sequence.\n  >>> rolling_standard_error([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rolling_standard_error = (numbers) => {\n  let sum = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    variance += (numbers[i] - sum) * (numbers[i] - sum);\n  }\n  return Math.sqrt(variance / numbers.length) / Math.sqrt(numbers.length);\n};\n\n/*\n  From a given list of integers, generate a list of rolling standard error element found until given moment in the sequence.\n  >>> rolling_standard_error([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rolling_standard_error_percentage = (numbers) => {\n  let sum = 0;\n  let variance = 0;\n  for (let i ="}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest_postfix = '';\n  let postfix = '';\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let zz = 0;\n  let zzz = 0;\n  let zzzz = 0;\n  let zzzzz = 0;\n  let zzzzzz = 0;\n  let zzzzzzz = 0;\n  let zzzzzzzz = 0;\n  let zzzzzzzzz = 0;\n  let zzzzzzzzzz = 0;\n  let zzzzzzzzzzz = 0;\n  let zzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz = 0;\n  let zzzzz"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor_8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let maxLength = 0;\n  let maxString = '';\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n  }\n  return maxString;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a < b) {\n    return greatest_common_divisor(b, a)\n  }\n  if (a === 0) {\n    return a\n  }\n  if (b === 0) {\n    return b\n  }\n  let gcd = 1\n  while (a!== 0) {\n    let temp = a % b\n    a = b\n    b = temp\n    if (b === 0) {\n      return gcd\n    }\n    gcd = b\n  }\n  return gcd\n}\n\nmodule.exports = greatest_common_divisor\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  const prefix = string.substring(0, 1);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== prefix) {\n      break;\n    }\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes_of_string = (string) => {\n  const prefixes = [];\n  const prefix = string.substring(0, 1);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== prefix) {\n      break;\n    }\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string_reverse = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string_reverse_reverse = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string_reverse_reverse_reverse = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string_reverse_reverse_reverse_reverse = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string_reverse_reverse_reverse_reverse_reverse = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/*\n  Returns a list of all suffixes of the input string\n  >>> all_suffixes('abc')\n  ['bc', 'bcd', 'cde']\n  */\nconst all_suffixes_of_string_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  const suffixes = [];\n  const suffix = string.substring(string.length - 1, string.length);\n  for (let i = 1; i < string.length; i++) {\n    if (string.substring(i, i + 1)!== suffix) {\n      break;\n    }\n    suffixes.push(suff"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter = (n, delimiter) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix = (n, delimiter, prefix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${suffix} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${suffix} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${suffix} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${suffix} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${suffix} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${suffix} `\n  }\n  return s.slice(0, -1)\n}\n\n/**\n  Returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_delimiter_and_prefix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix_and_suffix = (n, delimiter, prefix, suffix) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${prefix}${i}${delimiter} ${"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse_reverse_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse_reverse_reverse_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_set_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (string) => {\n  let count = 0;\n  let char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    if (char_set.has(string[i])) {\n      count++;\n    } else {\n      char_set.add(string[i]);\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split('|');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\nmodule.exports = parse_music;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in a given string.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('abc', 'a')\n  'a'\n  >>> longest_substring('abc', 'b')\n  'bc'\n  >>> longest_substring('abc', 'c')\n  'abc'\n  >>> longest_substring('abc', 'd')\n  ''\n  */\nconst longest_substring = (string, substring) => {\n  let max = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return string.substr(0, max);\n};\n\n/*\n  Find the longest substring in a given string.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('abc', 'a')\n  'a'\n  >>> longest_substring('abc', 'b')\n  'bc'\n  >>> longest_substring('abc', 'c')\n  'abc'\n  >>> longest_substring('abc', 'd')\n  ''\n  */\nconst longest_substring_2 = (string, substring) => {\n  let max = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return string.substr(0, max);\n};\n\n/*\n  Find the longest substring in a given string.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('abc', 'a')\n  'a'\n  >>> longest_substring('abc', 'b')\n  'bc'\n  >>> longest_substring('abc', 'c')\n  'abc'\n  >>> longest_substring('abc', 'd')\n  ''\n  */\nconst longest_substring_3 = (string, substring) => {\n  let max = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return string.substr(0, max);\n};\n\n/*\n  Find the longest substring in a given string.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('abc', 'a')\n  'a'\n  >>> longest_substring('abc', 'b')\n  'bc'\n  >>> longest_substring('abc', 'c')\n  'abc'\n  >>> longest_substring('abc', 'd')\n  ''\n  */\nconst longest_substring_4 = (string, substring) => {\n  let max = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return string.substr(0, max);\n};\n\n/*\n  Find the longest substring in a given string.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('abc', 'a')\n  'a'\n  >>> longest_substring('abc', 'b')\n  'bc'\n  >>> longest_substring('abc', 'c')\n  'abc'\n  >>> longest_substring('abc', 'd')\n  ''\n  */\nconst longest_substring_5 = (string, substring) => {\n  let max = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n  return string.substr(0, max);\n};\n\n/*\n  Find the longest substring in a given string.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('abc', 'a')\n  'a'\n  >>> longest_substring('abc', 'b')\n  'bc'\n  >>> longest_substring('abc', 'c')\n  'abc'\n  >>> longest_substring('abc', 'd')\n  ''\n  */\nconst longest_substring_6 = (string, substring) => {\n  let max = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substr(index, substring.length) === substring) {\n      if (string.length - index > max) {\n        max = string.length - index;\n      }\n      index += substring.length;\n    } else {\n      index++;\n    }\n  }"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_sorted = numbers.split(' ').sort((a, b) => {\n    const a_num = parseInt(a, 10);\n    const b_num = parseInt(b, 10);\n    if (a_num < b_num) {\n      return -1;\n    }\n    if (a_num > b_num) {\n      return 1;\n    }\n    return 0;\n  });\n  return numbers_sorted.join(' ');\n};\n\nmodule.exports = sort_numbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let min = Infinity;\n  let min_index = 0;\n  let max = -Infinity;\n  let max_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[min_index]);\n    if (diff < min) {\n      min = diff;\n      min_index = i;\n    }\n    const diff = Math.abs(numbers[i] - numbers[max_index]);\n    if (diff > max) {\n      max = diff;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n};\n\nmodule.exports = find_closest_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  const scale = (max - min) / (max + min)\n  return numbers.map((number) => {\n    return number * scale\n  })\n}\n\nmodule.exports = rescale_to_unit\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  [5]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_strings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [5]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_booleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter given list of any python values only for objects\n  >>> filter_objects(['a', 3.14, 5])\n  [5]\n  >>> filter_objects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_objects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter given list of any python values only for arrays\n  >>> filter_arrays(['a', 3.14, 5])\n  [5]\n  >>> filter_arrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_arrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  Filter given list of any python values only for functions\n  >>> filter_functions(['a', 3.14, 5])\n  [5]\n  >>> filter_functions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_functions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  Filter given list of any python values only for null\n  >>> filter_nulls(['a', 3.14, 5])\n  [5]\n  >>> filter_nulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_nulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  Filter given list of any python values only for undefined\n  >>> filter_undefineds(['a', 3.14, 5])\n  [5]\n  >>> filter_undefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_undefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python values only for numbers\n  >>> filter_numbers(['a', 3.14, 5])\n  [5]\n  >>> filter_numbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_numbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  [5]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_strings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [5]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_booleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter given list of any python values only for objects\n  >>> filter_objects(['a', 3.14, 5])\n  [5]\n  >>> filter_objects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_objects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter given list of any python values only for arrays\n  >>> filter_arrays(['a', 3.14, 5])\n  [5]\n  >>> filter_arrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_arrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  Filter given list of any python values only for functions\n  >>> filter_functions(['a', 3.14, 5])\n  [5]\n  >>> filter_functions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_functions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  Filter given list of any python values only for null\n  "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns the index of the first occurrence of a substring in a string\n  >>> index('abcabc', 'abc')\n  0\n  >>> index('abcabc', 'bc')\n  2\n  >>> index('abcabc', 'c')\n  -1\n  */\nconst index = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/*\n  Returns the index of the last occurrence of a substring in a string\n  >>> lastIndex('abcabc', 'abc')\n  3\n  >>> lastIndex('abcabc', 'bc')\n  1\n  >>> lastIndex('abcabc', 'c')\n  -1\n  */\nconst lastIndex = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of a substring in a string\n  >>> lastIndex('abcabc', 'abc')\n  3\n  >>> lastIndex('abcabc', 'bc')\n  1\n  >>> lastIndex('abcabc', 'c')\n  -1\n  */\nconst lastIndexOf = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the last occurrence of a substring in a string\n  >>> lastIndexOf('abcabc', 'abc')\n  3\n  >>> lastIndexOf('abcabc', 'bc')\n  1\n  >>> lastIndexOf('abcabc', 'c')\n  -1\n  */\nconst lastIndexOfSubstring = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of a substring in a string\n  >>> indexOf('abcabc', 'abc')\n  0\n  >>> indexOf('abcabc', 'bc')\n  2\n  >>> indexOf('abcabc', 'c')\n  -1\n  */\nconst indexOf = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/*\n  Returns the index of the last occurrence of a substring in a string\n  >>> lastIndexOf('abcabc', 'abc')\n  3\n  >>> lastIndexOf('abcabc', 'bc')\n  1\n  >>> lastIndexOf('abcabc', 'c')\n  -1\n  */\nconst lastIndexOfSubstring = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of a substring in a string\n  >>> lastIndexOf('abcabc', 'abc')\n  3\n  >>> lastIndexOf('abcabc', 'bc')\n  1\n  >>> lastIndexOf('abcabc', 'c')\n  -1\n  */\nconst lastIndexOfSubstring = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of a substring in a string\n  >>> indexOf('abcabc', 'abc')\n  0\n  >>> indexOf('abcabc', 'bc')\n  2\n  >>> indexOf('abcabc', 'c')\n  -1\n  */\nconst indexOfSubstring = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/*\n  Returns the index of the last occurrence of a substring in a string\n  >>> lastIndexOf('abcabc', 'abc')\n  3\n  >>> lastIndexOf('abcabc', 'bc')\n  1\n  >>> lastIndexOf('abcabc', 'c')\n  -1\n  */\nconst lastIndexOfSubstring = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/*\n  Returns the index of the first occurrence of a substring in a string\n  >>> lastIndexOf('abcabc', 'abc')\n  3\n  >>> lastIndexOf('abcabc', 'bc')\n  1\n  >>> lastIndexOf('abcabc', 'c')\n  -1\n  */\nconst lastIndexOfSubstring = (string, substring) => {\n  if (string === '' || substring === '') {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\nmodule.exports = {\n  strlen,\n  index,\n  lastIndex,\n  lastIndexOf,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  lastIndexOfSubstring,\n  last"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  if (n % 2 === 0) {\n    return n / 2\n  }\n  if (n % 3 === 0) {\n    return n / 3\n  }\n  if (n % 5 === 0) {\n    return n / 5\n  }\n  if (n % 7 === 0) {\n    return n / 7\n  }\n  if (n % 11 === 0) {\n    return n / 11\n  }\n  if (n % 13 === 0) {\n    return n / 13\n  }\n  if (n % 17 === 0) {\n    return n / 17\n  }\n  if (n % 19 === 0) {\n    return n / 19\n  }\n  if (n % 23 === 0) {\n    return n / 23\n  }\n  if (n % 29 === 0) {\n    return n / 29\n  }\n  if (n % 31 === 0) {\n    return n / 31\n  }\n  if (n % 37 === 0) {\n    return n / 37\n  }\n  if (n % 41 === 0) {\n    return n / 41\n  }\n  if (n % 43 === 0) {\n    return n / 43\n  }\n  if (n % 47 === 0) {\n    return n / 47\n  }\n  if (n % 53 === 0) {\n    return n / 53\n  }\n  if (n % 59 === 0) {\n    return n / 59\n  }\n  if (n % 61 === 0) {\n    return n / 61\n  }\n  if (n % 67 === 0) {\n    return n / 67\n  }\n  if (n % 71 === 0) {\n    return n / 71\n  }\n  if (n % 73 === 0) {\n    return n / 73\n  }\n  if (n % 79 === 0) {\n    return n / 79\n  }\n  if (n % 83 === 0) {\n    return n / 83\n  }\n  if (n % 89 === 0) {\n    return n / 89\n  }\n  if (n % 97 === 0) {\n    return n / 97\n  }\n  if (n % 101 === 0) {\n    return n / 101\n  }\n  if (n % 103 === 0) {\n    return n / 103\n  }\n  if (n % 109 === 0) {\n    return n / 109\n  }\n  if (n % 113 === 0) {\n    return n / 113\n  }\n  if (n % 127 === 0) {\n    return n / 127\n  }\n  if (n % 131 === 0) {\n    return n / 131\n  }\n  if (n % 137 === 0) {\n    return n / 137\n  }\n  if (n % 139 === 0) {\n    return n / 139\n  }\n  if (n % 149 === 0) {\n    return n / 149\n  }\n  if (n % 151 === 0) {\n    return n / 151\n  }\n  if (n % 157 === 0) {\n    return n / 157\n  }\n  if (n % 163 === 0) {\n    return n / 163\n  }\n  if (n % 167 === 0) {\n    return n / 167\n  }\n  if (n % 173 === 0) {\n    return n / 173\n  }\n  if (n % 179 === 0) {\n    return n / 179\n  }\n  if (n % 181 === 0) {\n    return n / 181\n  }\n  if (n % 191 === 0) {\n    return n / 191\n  }\n  if (n % 193 === 0) {\n    return n / 193\n  }\n  if (n % 197 === 0) {\n    return n / 197\n  }\n  if (n % 199 === 0) {\n    return n / 199\n  }\n  if (n % 211 === 0) {\n    return n / 211\n  }\n  if (n % 223 === 0) {\n    return n / 223\n  }\n  if (n % 227 === 0) {\n    return n / 227\n  }\n  if (n % 229 === 0) {\n    return n / 229\n  }\n  if (n % 233 === 0) {\n    return n / 233\n  }\n  if (n % 239 === 0) {\n    return n / 239\n  }\n  if (n % 241 === 0) {\n    return n / 241\n  }\n  if (n % 251 === 0) {\n    return n / 251\n  }\n  if (n % 257 === 0) {\n    return n / 257\n  }\n  if (n % 263 === 0) {\n    return n / 263\n  }\n  if (n % 269 === 0) {\n    return n / 269\n  }\n  if (n % 271 === 0) {\n    return n / 271\n  }\n  if (n % 277 === 0) {\n    return n / 277\n  }\n  if (n % 281 === 0) {\n    return n / 281\n  }\n  if (n % 283 === 0) {\n    return n / 283\n  }\n  if (n % 293 === 0) {\n    return n / 293\n  }\n  if (n % 307 === 0) {\n    return n / 307\n  }\n  if (n % 311 === 0) {\n    return n / 311\n  }\n  if (n % 313 === 0) {\n    return n / 313\n  }\n  if (n % 317 === 0) {\n    return n / 317\n  }\n  if (n % 331 === 0) {\n    return n / 331\n  }\n  if (n % 337 === 0) {\n    return n / 337\n  }\n  if (n % 347 === 0) {\n    return n / 347\n  }\n  if (n % 349 === 0) {\n    return n / 349\n  }\n  if (n % 353 === 0) {\n    return n / 353\n  }\n  if (n % 359 === 0) {\n    return n / 359\n  }\n  if (n % 367 === 0) {\n    return n / 367\n  }\n  if (n % 373 === 0) {\n    return n / 373\n  }\n  if (n % 379 === 0) {\n    return n / 379\n  }\n  if (n % 383"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst test = () => {\n  let n = 8;\n  let factors = factorize(n);\n  console.log(factors);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_2 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_3 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_4 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_5 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_6 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_7 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_8 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[j]);\n      j++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    k++;\n  }\n  return result;\n};\n\n/*\n  From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_9 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all lowercase letters replaced by\n  uppercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_upper = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_lower = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_title = (string) => {\n  return string.toTitleCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_sentence = (string) => {\n  return string.toSentenceCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_camel = (string) => {\n  return string.toCamelCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_snake = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_lower = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_upper = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_title = (string) => {\n  return string.toTitleCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_sentence = (string) => {\n  return string.toSentenceCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_camel = (string) => {\n  return string.toCamelCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_snake = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_pascal = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_pascal_lower = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by\n  lowercase letters.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst to_pascal_pascal_upper = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, cur) => acc + cur, '');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace\n  >>> split('a b c', /\\s+/)\n  ['a', 'b', 'c']\n  */\nconst splitIgnoreWhitespace = (str) => {\n  return str.split(/\\s+/g);\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string\n  >>> splitIgnoreWhitespace('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenate = (str) => {\n  return concatenate(splitIgnoreWhitespace(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenate('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenate(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim2 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim2('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim3 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim3('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim4 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim4('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim5 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim5('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim6 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim6('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim7 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim7('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim8 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim8('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim9 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim9('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim10 = (str) => {\n  return concatenate(splitIgnoreWhitespaceConcatenateTrim(str));\n};\n\n/*\n  Convert a string to a list of words, ignoring any whitespace and\n  concatenating the words into a single string, then trimming whitespace\n  >>> splitIgnoreWhitespaceConcatenateTrim10('a b c')\n  'abc'\n  */\nconst splitIgnoreWhitespaceConcatenateTrim11 = (str) => {\n  return concatenate(split"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['abc', 'array']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_contains([], 'a')\n  []\n  >>> filter_by_contains(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  ['bcd', 'array']\n  */\nconst filter_by_contains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_contains_any([], 'a')\n  []\n  >>> filter_by_contains_any(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  ['bcd', 'array']\n  */\nconst filter_by_contains_any = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains_any([], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_contains_any = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_contains_all([], 'a')\n  []\n  >>> filter_by_contains_all(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  ['bcd', 'array']\n  */\nconst filter_by_contains_all = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains_all([], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_contains_all = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_contains_any_all([], 'a')\n  []\n  >>> filter_by_contains_any_all(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  ['bcd', 'array']\n  */\nconst filter_by_contains_any_all = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains_any_all([], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_contains_any_all = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_contains_all_any([], 'a')\n  []\n  >>> filter_by_contains_all_any(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  ['bcd', 'array']\n  */\nconst filter_by_contains_all_any = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains_all_any([], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_contains_all_any = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(substring));\n};\n\nmodule.exports = {\n  filter_by_prefix"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let result = [];\n  while (i < j) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] < 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return result.reverse();\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([1, -2, 3, -4, 5, 6])\n  [-4, -3, -2]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let result = [];\n  while (i < j) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] > 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      k++;\n      i++;\n      j--;\n    }\n  }\n  return result.reverse();\n};\n\n/*Return the sum of all the numbers in the list.\n  >>> get_sum([1, -2, 3, -4, 5, 6])\n  7\n  >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst get_sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the product of all the numbers in the list.\n  >>> get_product([1, -2, 3, -4, 5, 6])\n  -6\n  >>> get_product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -120\n  */\nconst get_product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return the average of all the numbers in the list.\n  >>> get_average([1, -2, 3, -4, 5, 6])\n  -2.5\n  >>> get_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst get_average = (l) => {\n  return get_sum(l) / l.length;\n};\n\n/*Return the median of all the numbers in the list.\n  >>> get_median([1, -2, 3, -4, 5, 6])\n  -2\n  >>> get_median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst get_median = (l) => {\n  let sorted_list = get_sort(l);\n  let middle = Math.floor(sorted_list.length / 2);\n  return sorted_list[middle];\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> get_mode([1, -2, 3, -4, 5, 6])\n  -4\n  >>> get_mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst get_mode = (l) => {\n  let sorted_list = get_sort(l);\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < sorted_list.length; i++) {\n    if (sorted_list[i] === mode) {\n      count++;\n    } else if (sorted_list[i] === mode - 1) {\n      count--;\n    }\n    if (count === 0) {\n      mode = sorted_list[i];\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> get_mode([1, -2, 3, -4, 5, 6])\n  -4\n  >>> get_mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst get_mode_2 = (l) => {\n  let sorted_list = get_sort(l);\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < sorted_list.length; i++) {\n    if (sorted_list[i] === mode) {\n      count++;\n    } else if (sorted_list[i] === mode - 1) {\n      count--;\n    }\n    if (count === 0) {\n      mode = sorted_list[i];\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all the numbers in the list.\n  >>> get_mode([1, -2, 3, -4, 5, 6])\n  -4\n  >>> get_mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst get_mode_3 = (l) => {\n  let sorted_list = get_sort(l);\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < sorted_list"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 41 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 47 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 59 === 0) return false;\n  if (n % 61 === 0) return false;\n  if (n % 67 === 0) return false;\n  if (n % 71 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 79 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 89 === 0) return false;\n  if (n % 97 === 0) return false;\n  if (n % 101 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 107 === 0) return false;\n  if (n % 109 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 127 === 0) return false;\n  if (n % 131 === 0) return false;\n  if (n % 137 === 0) return false;\n  if (n % 139 === 0) return false;\n  if (n % 149 === 0) return false;\n  if (n % 151 === 0) return false;\n  if (n % 157 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 167 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 179 === 0) return false;\n  if (n % 181 === 0) return false;\n  if (n % 191 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 197 === 0) return false;\n  if (n % 199 === 0) return false;\n  if (n % 211 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 227 === 0) return false;\n  if (n % 229 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 239 === 0) return false;\n  if (n % 241 === 0) return false;\n  if (n % 251 === 0) return false;\n  if (n % 257 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 269 === 0) return false;\n  if (n % 271 === 0) return false;\n  if (n % 277 === 0) return false;\n  if (n % 281 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 307 === 0) return false;\n  if (n % 311 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 317 === 0) return false;\n  if (n % 331 === 0) return false;\n  if (n % 337 === 0) return false;\n  if (n % 347 === 0) return false;\n  if (n % 349 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 359 === 0) return false;\n  if (n % 367 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 379 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 389 === 0) return false;\n  if (n % 397 === 0) return false;\n  if (n % 401 === 0) return false;\n  if (n % 409 === 0) return false;\n  if (n % 419 === 0) return false;\n  if (n % 421 === 0) return false;\n  if (n % 431 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 439 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 449 === 0) return false;\n  if (n % 457 === 0) return false;\n  if (n % 461 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return false;\n  if (n % 479 === 0) return false;\n  if (n % 487 === 0) return false;\n  if (n % 491 === 0) return false;\n  if (n % 499 === 0) return false;\n  if (n % 503 === 0) return false;\n  if (n % 509 === 0) return false;\n  if (n % 521 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 541 === 0) return false;\n  if (n % 547 === 0) return false;\n  if (n % 557 === 0) return false;\n  if (n % 563 === 0) return false;\n  if (n % 569 === 0) return false;\n  if (n % 571 === 0) return false;\n  if (n % 577 === 0) return false;\n  if (n % 587 === 0) return false;"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n === 0) {\n    return 0;\n  }\n  const max = xs[n - 1];\n  if (max === 0) {\n    return xs[0];\n  }\n  const min = xs[0];\n  for (let i = 1; i < n; i += 2) {\n    if (xs[i] > 0) {\n      min = Math.min(min, xs[i]);\n    } else {\n      max = Math.max(max, xs[i]);\n    }\n  }\n  const diff = max - min;\n  if (diff === 0) {\n    return min;\n  }\n  const x = (min + max) / 2;\n  for (let i = 0; i < n; i += 2) {\n    if (xs[i] > 0) {\n      if (Math.abs(xs[i] - x) < diff / 2) {\n        return x;\n      }\n    } else {\n      if (Math.abs(xs[i] - x) < diff / 2) {\n        return x;\n      }\n    }\n  }\n  return x;\n}\n\nmodule.exports = {\n  poly,\n  findZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const l_new = [];\n  for (let i = 0; i < l.length; i += 3) {\n    const j = i + 2;\n    if (i % 3 === 0) {\n      l_new.push(l[i]);\n    } else {\n      l_new.push(l[j]);\n    }\n  }\n  return l_new;\n};\n\nexport default sort_third;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    const el = l[i];\n    if (seen[el]) continue;\n    seen[el] = true;\n    result.push(el);\n  }\n  return result;\n};\n\n/*\n  Return the index of the first element in the list that is not equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1\n  */\nconst firstNotEqual = (l, el) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the last element in the list that is not equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastNotEqual = (l, el) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i]!== el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the first element in the list that is equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst firstEqual = (l, el) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the last element in the list that is equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst lastEqual = (l, el) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] === el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the first element in the list that is greater than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst firstGreater = (l, el) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the last element in the list that is greater than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastGreater = (l, el) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] > el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the first element in the list that is less than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst firstLess = (l, el) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the last element in the list that is less than the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst lastLess = (l, el) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] < el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the first element in the list that is greater than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2\n  */\nconst firstGreaterEqual = (l, el) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the last element in the list that is greater than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastGreaterEqual = (l, el) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] >= el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the first element in the list that is less than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst firstLessEqual = (l, el) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= el) return i;\n  }\n  return l.length;\n};\n\n/*\n  Return the index of the last element in the list that is less than or equal to the given element\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst lastLessEqual = (l, el) => {\n  for (let i = l.length - 1; i >= 0; i--) {\n    if (l[i] <= el) return i;\n  }\n  return l.length;\n};\n\nmodule.exports = {\n  unique,\n  firstNotEqual,\n  lastNotEqual,\n  firstEqual,\n  lastEqual,\n  firstGreater,\n  lastGreater,\n  firstGreaterEqual,\n  lastGreaterEqual"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l.reduce((max, x) => {\n    if (x > max) {\n      return x;\n    }\n    return max;\n  }, l[0]);\n};\n\nmodule.exports = max_element;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizz_buzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i += 1;\n  }\n  return [...l_even,...l_odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_odd = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 1) {\n      l_odd.push(l[i]);\n    } else {\n      l_even.push(l[i]);\n    }\n    i += 1;\n  }\n  return [...l_even,...l_odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even_odd = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i += 1;\n  }\n  return [...l_even,...l_odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_odd_even = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 1) {\n      l_odd.push(l[i]);\n    } else {\n      l_even.push(l[i]);\n    }\n    i += 1;\n  }\n  return [...l_even,...l_odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_even_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even_odd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even_odd_even = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i += 1;\n  }\n  return [...l_even,...l_odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_odd_even_odd = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 1) {\n      l_odd.push(l[i]);\n    } else {\n      l_even.push(l[i]);\n    }\n    i += 1;\n  }\n  return [...l_even,...l_odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_even_odd_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even_odd_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even_odd_odd = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 0) {\n      l_even.push(l[i]);\n    } else"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i++) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if ("}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = prime_fib(n - 1)\n  const fib2 = prime_fib(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  prime_fib_prime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib_prime(1)\n  2\n  >>> prime_fib_prime(2)\n  3\n  >>> prime_fib_prime(3)\n  5\n  >>> prime_fib_prime(4)\n  13\n  >>> prime_fib_prime(5)\n  89\n  */\nconst prime_fib_prime = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = prime_fib_prime(n - 1)\n  const fib2 = prime_fib_prime(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  prime_fib_prime_prime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib_prime_prime(1)\n  2\n  >>> prime_fib_prime_prime(2)\n  3\n  >>> prime_fib_prime_prime(3)\n  5\n  >>> prime_fib_prime_prime(4)\n  13\n  >>> prime_fib_prime_prime(5)\n  89\n  */\nconst prime_fib_prime_prime = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = prime_fib_prime_prime(n - 1)\n  const fib2 = prime_fib_prime_prime(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  prime_fib_prime_prime_prime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib_prime_prime_prime(1)\n  2\n  >>> prime_fib_prime_prime_prime(2)\n  3\n  >>> prime_fib_prime_prime_prime(3)\n  5\n  >>> prime_fib_prime_prime_prime(4)\n  13\n  >>> prime_fib_prime_prime_prime(5)\n  89\n  */\nconst prime_fib_prime_prime_prime = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = prime_fib_prime_prime_prime(n - 1)\n  const fib2 = prime_fib_prime_prime_prime(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  prime_fib_prime_prime_prime_prime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib_prime_prime_prime_prime(1)\n  2\n  >>> prime_fib_prime_prime_prime_prime(2)\n  3\n  >>> prime_fib_prime_prime_prime_prime(3)\n  5\n  >>> prime_fib_prime_prime_prime_prime(4)\n  13\n  >>> prime_fib_prime_prime_prime_prime(5)\n  89\n  */\nconst prime_fib_prime_prime_prime_prime = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = prime_fib_prime_prime_prime_prime(n - 1)\n  const fib2 = prime_fib_prime_prime_prime_prime(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  prime_fib_prime_prime_prime_prime_prime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib_prime_prime_prime_prime_prime(1)\n  2\n  >>> prime_fib_prime_prime_prime_prime_prime(2)\n  3\n  >>> prime_fib_prime_prime_prime_prime_prime(3)\n  5\n  >>> prime_fib_prime_prime_prime_prime_prime(4)\n  13\n  >>> prime_fib_prime_prime_prime_prime_prime(5)\n  89\n  */\nconst prime_fib_prime_prime_prime_prime_prime = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = prime_fib_prime_prime_prime_prime_prime(n - 1)\n  const fib2 = prime_fib_prime_prime_prime_prime_prime(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  main() returns n-th number that is a Fibonacci number and it's also prime.\n  >>> main(1)\n  2\n  >>> main(2)\n  3\n  >>> main(3)\n  5\n  >>> main(4)\n  13\n  >>> main(5)\n  89\n  */\nconst main = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = main(n - 1)\n  const fib2 = main(n - 2)\n  if (fib2 < fib) {\n    return fib2\n  }\n  return fib\n}\n\n/*\n  main() returns n-th number that is a Fibonacci number and it's also prime.\n  >>> main(1)\n  2\n  >>> main(2)\n  3\n  >>> main(3)\n  5"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n    i++;\n  }\n  return count === 3;\n};\n\nmodule.exports = triples_sum_to_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collision_count = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        let car_i = cars[i];\n        let car_j = cars[j];\n        if (car_i.collision(car_j)) {\n          collision_count++;\n        }\n      }\n    }\n  }\n  return collision_count;\n};\n\nconst test_case_1 = [\n  [2, 2],\n  [3, 3],\n  [4, 4],\n  [5, 5],\n  [6, 6],\n  [7, 7],\n  [8, 8],\n  [9, 9],\n  [10, 10],\n  [11, 11],\n  [12, 12],\n  [13, 13],\n  [14, 14],\n  [15, 15],\n  [16, 16],\n  [17, 17],\n  [18, 18],\n  [19, 19],\n  [20, 20],\n  [21, 21],\n  [22, 22],\n  [23, 23],\n  [24, 24],\n  [25, 25],\n  [26, 26],\n  [27, 27],\n  [28, 28],\n  [29, 29],\n  [30, 30],\n  [31, 31],\n  [32, 32],\n  [33, 33],\n  [34, 34],\n  [35, 35],\n  [36, 36],\n  [37, 37],\n  [38, 38],\n  [39, 39],\n  [40, 40],\n  [41, 41],\n  [42, 42],\n  [43, 43],\n  [44, 44],\n  [45, 45],\n  [46, 46],\n  [47, 47],\n  [48, 48],\n  [49, 49],\n  [50, 50],\n  [51, 51],\n  [52, 52],\n  [53, 53],\n  [54, 54],\n  [55, 55],\n  [56, 56],\n  [57, 57],\n  [58, 58],\n  [59, 59],\n  [60, 60],\n  [61, 61],\n  [62, 62],\n  [63, 63],\n  [64, 64],\n  [65, 65],\n  [66, 66],\n  [67, 67],\n  [68, 68],\n  [69, 69],\n  [70, 70],\n  [71, 71],\n  [72, 72],\n  [73, 73],\n  [74, 74],\n  [75, 75],\n  [76, 76],\n  [77, 77],\n  [78, 78],\n  [79, 79],\n  [80, 80],\n  [81, 81],\n  [82, 82],\n  [83, 83],\n  [84, 84],\n  [85, 85],\n  [86, 86],\n  [87, 87],\n  [88, 88],\n  [89, 89],\n  [90, 90],\n  [91, 91],\n  [92, 92],\n  [93, 93],\n  [94, 94],\n  [95, 95],\n  [96, 96],\n  [97, 97],\n  [98, 98],\n  [99, 99],\n  [100, 100],\n  [101, 101],\n  [102, 102],\n  [103, 103],\n  [104, 104],\n  [105, 105],\n  [106, 106],\n  [107, 107],\n  [108, 108],\n  [109, 109],\n  [110, 110],\n  [111, 111],\n  [112, 112],\n  [113, 113],\n  [114, 114],\n  [115, 115],\n  [116, 116],\n  [117, 117],\n  [118, 118],\n  [119, 119],\n  [120, 120],\n  [121, 121],\n  [122, 122],\n  [123, 123],\n  [124, 124],\n  [125, 125],\n  [126, 126],\n  [127, 127],\n  [128, 128],\n  [129, 129],\n  [130, 130],\n  [131, 131],\n  [132, 132],\n  [133, 133],\n  [134, 134],\n  [135, 135],\n  [136, 136],\n  [137, 137],\n  [138, 138],\n  [139, 139],\n  [140, 140],\n  [141, 141],\n  [142, 142],\n  [143, 143],\n  [144, 144],\n  [145, 145],\n  [146, 146],\n  [147, 147],\n  [148, 148],\n  [149, 149],\n  [150, 150],\n  [151, 151],\n  [152, 152],\n  [153, 153],\n  [154, 154],\n  [155, 155],\n  [156, 156],\n  [157, 157],\n  [158, 158],\n  [159, 159],\n  [160, 160],\n  [161, 161],\n  [162, 162],\n  [163, 163],\n  [164, 164],\n  [165, 165],\n  [166, 166],\n  [167, 167],\n  [168, 168],\n  [169, 169],\n  [170, 170],\n  [171, 171],\n  [172, 172],\n  [173, 173],\n  [174, 174],\n  [175,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n  }\n  while (i < l.length) {\n    res.push(l[i] + 1);\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [0, 1, 2]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 2, 2, 8, 1, 122]\n  */\nconst decr_list = (l) => {\n  let i = l.length - 1;\n  let res = [];\n  while (i >= 0) {\n    res.push(l[i]);\n    i--;\n  }\n  while (i >= 0) {\n    res.push(l[i] - 1);\n    i--;\n  }\n  return res;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mul_list([1, 2, 3])\n  [2, 4, 6]\n  >>> mul_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 15, 45, 20, 15, 15, 60, 5, 150]\n  */\nconst mul_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] * 2);\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 1.5, 3.5, 1.5, 1.5, 1.5, 4.5, 0.5, 125]\n  */\nconst div_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] / 2);\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements squared.\n  >>> sqr_list([1, 2, 3])\n  [1, 4, 9]\n  >>> sqr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 81, 81, 81, 81, 81, 81, 125]\n  */\nconst sqr_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] * l[i]);\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements cubed.\n  >>> cube_list([1, 2, 3])\n  [1, 8, 27]\n  >>> cube_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 81, 81, 81, 81, 81, 125]\n  */\nconst cube_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(l[i] * l[i] * l[i]);\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 2.\n  >>> pow_list([1, 2, 3])\n  [1, 4, 9]\n  >>> pow_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 81, 81, 81, 81, 81, 125]\n  */\nconst pow_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(Math.pow(l[i], 2));\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 3.\n  >>> pow3_list([1, 2, 3])\n  [1, 8, 27]\n  >>> pow3_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 81, 81, 81, 81, 81, 125]\n  */\nconst pow3_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(Math.pow(l[i], 3));\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 5.\n  >>> pow5_list([1, 2, 3])\n  [1, 32, 243]\n  >>> pow5_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 81, 81, 81, 81, 81, 125]\n  */\nconst pow5_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l.length) {\n    res.push(Math.pow(l[i], 5));\n    i++;\n  }\n  return res;\n};\n\n/*Return list with elements raised to the power of 7.\n  >>> pow7_list([1, 2, 3])\n  [1, 128, 243]\n  >>> pow7_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 81, 243, 81, 81, 81, 81, 81, 125]\n  */\nconst pow7_list = (l) => {\n  let i = 0;\n  let res = [];\n  while (i < l."}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  const pairs = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.add([i, j]);\n      }\n    }\n  }\n  return pairs.size === 2;\n};\n\n/*\n  pairs_sum_to_zero_sum takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to a non-zero value, and false otherwise.\n  >>> pairs_sum_to_zero_sum([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sum([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sum([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sum([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sum([1])\n  false\n  */\nconst pairs_sum_to_zero_sum = (l) => {\n  const pairs = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]!== 0) {\n        pairs.add([i, j]);\n      }\n    }\n  }\n  return pairs.size === 2;\n};\n\n/*\n  pairs_sum_to_zero_sum_sum takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to a non-zero value, and false otherwise.\n  >>> pairs_sum_to_zero_sum_sum([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sum_sum([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sum_sum([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sum_sum([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sum_sum([1])\n  false\n  */\nconst pairs_sum_to_zero_sum_sum = (l) => {\n  const pairs = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]!== 0) {\n        pairs.add([i, j]);\n      }\n    }\n  }\n  return pairs.size === 2;\n};\n\n/*\n  pairs_sum_to_zero_sum_sum_sum takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to a non-zero value, and false otherwise.\n  >>> pairs_sum_to_zero_sum_sum_sum([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sum_sum_sum([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sum_sum_sum([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sum_sum_sum([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sum_sum_sum([1])\n  false\n  */\nconst pairs_sum_to_zero_sum_sum_sum = (l) => {\n  const pairs = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]!== 0) {\n        pairs.add([i, j]);\n      }\n    }\n  }\n  return pairs.size === 2;\n};\n\nmodule.exports = {\n  pairs_sum_to_zero,\n  pairs_sum_to_zero_sum,\n  pairs_sum_to_zero_sum_sum,\n  pairs_sum_to_zero_sum_sum_sum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let num = x;\n  let res = \"\";\n  let i = 0;\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n    i++;\n  }\n  res = num + res;\n  if (i > 0) {\n    res = \"0\" + res;\n  }\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_2 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_3 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_4 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_5 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_6 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_7 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_8 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_9 = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num >= base) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  res = num + res;\n  return res;\n};\n\n/*\n  Change base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given a side and high return area for a triangle,\n  returns the area of the triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_from_side_and_high_return_area = (side, high_return_area) => {\n  return side * high_return_area;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the side of the triangle.\n  >>> triangle_area_from_side_and_high_return_area(5, 3)\n  5\n  */\nconst triangle_side_from_side_and_high_return_area = (side, high_return_area) => {\n  return side / high_return_area;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the high return area of the triangle.\n  >>> triangle_area_from_side_and_high_return_area(5, 3)\n  3\n  */\nconst triangle_high_return_area_from_side_and_high_return_area = (side, high_return_area) => {\n  return high_return_area / side;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the area of the triangle.\n  >>> triangle_area_from_side_and_high_return_area(5, 3)\n  7.5\n  */\nconst triangle_area_from_side_and_high_return_area_and_side = (side, high_return_area, side_to_return) => {\n  return triangle_area_from_side_and_high_return_area(side, high_return_area) * side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the side of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side(5, 3, 2)\n  5\n  */\nconst triangle_side_from_side_and_high_return_area_and_side = (side, high_return_area, side_to_return) => {\n  return triangle_side_from_side_and_high_return_area(side, high_return_area) / side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the high return area of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side(5, 3, 2)\n  3\n  */\nconst triangle_high_return_area_from_side_and_high_return_area_and_side = (side, high_return_area, side_to_return) => {\n  return triangle_high_return_area_from_side_and_high_return_area(side, high_return_area) * side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the area of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side(5, 3, 2)\n  7.5\n  */\nconst triangle_area_from_side_and_high_return_area_and_side_and_side_to_return = (side, high_return_area, side_to_return) => {\n  return triangle_area_from_side_and_high_return_area_and_side(side, high_return_area, side_to_return) * side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the side of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side_and_side_to_return(5, 3, 2)\n  5\n  */\nconst triangle_side_from_side_and_high_return_area_and_side_and_side_to_return = (side, high_return_area, side_to_return) => {\n  return triangle_side_from_side_and_high_return_area_and_side(side, high_return_area, side_to_return) / side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the high return area of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side_and_side_to_return(5, 3, 2)\n  3\n  */\nconst triangle_high_return_area_from_side_and_high_return_area_and_side_and_side_to_return = (side, high_return_area, side_to_return) => {\n  return triangle_high_return_area_from_side_and_high_return_area_and_side(side, high_return_area, side_to_return) * side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the area of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side_and_side_to_return(5, 3, 2)\n  7.5\n  */\nconst triangle_area_from_side_and_high_return_area_and_side_and_side_to_return_and_side_to_return = (side, high_return_area, side_to_return) => {\n  return triangle_area_from_side_and_high_return_area_and_side_and_side_to_return(side, high_return_area, side_to_return) * side_to_return;\n};\n\n/*Given a side and high return area for a triangle,\n  returns the side of the triangle.\n  >>> triangle_area_from_side_and_high_return_area_and_side_and_side_to_return_and_side_to_return(5, 3, 2)\n  5\n  */\nconst triangle_side_from_side_and_high_return_area_and_side_and_side_to_return_and_side_to_return = (side, high_return_area, side_to"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Empty list');\n  }\n  let i = l.length / 2;\n  let j = l.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (l[i] > l[j]) {\n      i--;\n    } else if (l[i] < l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  return l[i + 1];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let str = text.split('');\n  let left = str.length - 1;\n  let right = 0;\n  while (left >= 0 && right < str.length) {\n    if (str[left]!== str[right]) {\n      return false;\n    }\n    left--;\n    right++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  is_palindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return modp(n / 2, p)\n  return modp(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst mod = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return mod(n / 2, p)\n  return mod(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return modp_inv(n / 2, p)\n  return modp_inv(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst mod_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return mod_inv(n / 2, p)\n  return mod_inv(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_inv_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return modp_inv_inv(n / 2, p)\n  return modp_inv_inv(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst mod_inv_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return mod_inv_inv(n / 2, p)\n  return mod_inv_inv(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_inv_inv_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return modp_inv_inv_inv(n / 2, p)\n  return modp_inv_inv_inv(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst mod_inv_inv_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return mod_inv_inv_inv(n / 2, p)\n  return mod_inv_inv_inv(n - 1, p)\n}\n\n/*Return n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_inv_inv_inv_inv = (n, p) => {\n  if (n < 0 || p < 0) return 0\n  if (n == 0) return 1\n  if (n == 1) return p\n  if (n % 2 == 0) return modp_inv_inv_inv_inv(n / 2,"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let vowels = 'aeiouy';\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = remove_vowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(v => v < t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  return l.every(v => v > t);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  */\nconst between_threshold = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold2 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold3 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold4 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold5 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold6 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold7 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold8 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold9 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold10 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold11 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  */\nconst between_threshold12 = (l, t, t2) => {\n  return l.every(v => v >= t && v <= t2);\n};\n\n/*Return true if all numbers in the list l are between threshold t and t+threshold.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> between"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const chars = s0.split('');\n  for (let i = 0; i < s0.length; i++) {\n    if (chars[i]!== chars[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = same_chars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) return n;\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  "}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_regex_compiled = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex_compiled = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex_compiled_regex_compiled = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex_compiled_regex_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex_compiled_regex_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_regex_compiled_regex_compiled_regex_compiled_regex_compiled_regex = (brackets) => {\n  const brackets_regex = brackets.split(\"<>\").join(\"<\");\n  const brackets_regex_compiled = new RegExp(brackets_regex);\n  return brackets_regex_compiled.test(brackets);\n};\n\nconst is_valid_bracketing_compiled_re"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return l[i] > l[i];\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const e of set1.values()) {\n    if (set2.has(e)) {\n      result.push(e);\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  if (n < 2) {\n    throw new Error('n must be greater than 1')\n  }\n  if (n % 2 === 0) {\n    return 2\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nmodule.exports = largest_prime_factor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sum_to_n\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let bracket_count = 0;\n  let i = 0;\n  while (i < brackets.length) {\n    if (brackets[i] === \"(\") {\n      bracket_count++;\n    } else if (brackets[i] === \")\") {\n      bracket_count--;\n    }\n    i++;\n  }\n  return bracket_count === 0;\n};\n\nmodule.exports = correct_bracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const ys = [];\n  for (let i = 0; i < xs.length; i++) {\n    ys[i] = xs[i];\n    for (let j = i; j > 0; j--) {\n      ys[j] = ys[j] - ys[j - 1] * xs[i];\n    }\n  }\n  return ys;\n};\n\n/*\n  Given a polynomial, find the roots of the polynomial.\n  >>> roots([1, 2, 3])\n  [-1, 1]\n  >>> roots([1, 2, 3, 4])\n  [-1, 1, 2]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, 1, 2, 3]\n  >>> roots([1, 2, 3, 4, 5, 6])\n  [-1, 1, 2, 3, 4]\n  >>> roots([1, 2, 3, 4, 5, 6, 7])\n  [-1, 1, 2, 3, 4, 5]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8])\n  [-1, 1, 2, 3, 4, 5, 6]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [-1, 1, 2, 3, 4, 5, 6, 7]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> roots([1, 2, 3, 4, 5, 6, 7, 8,"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 3;\n  if (n === 6) return 5;\n  if (n === 7) return 8;\n  if (n === 8) return 24;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function words_count which takes a string representing\n  a word as input and returns the number of words in the string.\n  Here, 'y' is also a word, but only when it is at the end of the given word.\n\n  Example:\n  >>> words_count(\"abcde\")\n  2\n  >>> words_count(\"ACEDY\")\n  3\n  */\nconst words_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    } else if (s[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function words_count which takes a string representing\n  a word as input and returns the number of words in the string.\n  Here, 'y' is also a word, but only when it is at the end of the given word.\n\n  Example:\n  >>> words_count(\"abcde\")\n  2\n  >>> words_count(\"ACEDY\")\n  3\n  */\nconst words_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    } else if (s[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function words_count which takes a string representing\n  a word as input and returns the number of words in the string.\n  Here, 'y' is also a word, but only when it is at the end of the given word.\n\n  Example:\n  >>> words_count(\"abcde\")\n  2\n  >>> words_count(\"ACEDY\")\n  3\n  */\nconst words_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    } else if (s[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function words_count which takes a string representing\n  a word as input and returns the number of words in the string.\n  Here, 'y' is also a word, but only when it is at the end of the given word.\n\n  Example:\n  >>> words_count(\"abcde\")\n  2\n  >>> words_count(\"ACEDY\")\n  3\n  */\nconst words_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    } else if (s[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function words_count which takes a string representing\n  a word as input and returns the number of words in the string.\n  Here, 'y' is also a word, but only when it is at the end of the given word.\n\n  Example:\n  >>> words_count(\"abcde\")\n  2\n  >>> words_count(\"ACEDY\")\n  3\n  */\nconst words_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    } else if (s[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function words_count which takes a string representing\n  a word as input and returns the number of words in the string.\n  Here, 'y' is also a word, but only when it is at the end of the given word.\n\n  Example:\n  >>> words_count(\"abcde\")\n  2\n  >>> words_count(\"ACEDY\")\n  3"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const digits = x.toString();\n  const digits_len = digits.length;\n  const digits_shift = digits.length - shift;\n  const digits_reverse = digits.split('').reverse();\n  const digits_reverse_len = digits_reverse.length;\n  const digits_reverse_shift = digits_reverse_len - shift;\n  const digits_reverse_shift_str = digits_reverse_shift.toString();\n  const digits_reverse_shift_str_len = digits_reverse_shift_str.length;\n  const digits_reverse_shift_str_reverse = digits_reverse_shift_str.split('').reverse();\n  const digits_reverse_shift_str_reverse_len = digits_reverse_shift_str_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse = digits_reverse_shift_str_reverse.split('').reverse();\n  const digits_reverse_shift_str_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse = digits_reverse_shift_str_reverse_reverse.split('').reverse();\n  const digits_reverse_shift_str_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse = digits_reverse_shift_str_reverse_reverse_reverse.split('').reverse();\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse = digits_reverse_shift_str_reverse_reverse_reverse_reverse.split('').reverse();\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse.split('').reverse();\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_len = digits_reverse_shift_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.length;\n  const digits_reverse_shift_str_reverse_reverse_reverse_"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n}\n\nconsole.log(digit_sum(\"\"));\nconsole.log(digit_sum(\"abAB\"));\nconsole.log(digit_sum(\"abcCd\"));\nconsole.log(digit_sum(\"helloE\"));\nconsole.log(digit_sum(\"woArBld\"));\nconsole.log(digit_sum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution2 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution3 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution4 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution5 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution6 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution7 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution8 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution9 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution10 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution11 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution12 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution13 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution14 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution15 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution16 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\nconst fruit_distribution17 = (s, n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (s.charAt(i) === 'a') {\n      count += 1;\n    }\n    i += 1;"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const minIndex = arr.indexOf(min);\n\n  if (minIndex === -1) {\n    return [];\n  }\n\n  return [min, minIndex];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    let freq = lst[i]\n    if (freq > maxFreq) {\n      max = i\n      maxFreq = freq\n    }\n  }\n  return max\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(max);\n      max = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strange_sort_list;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  if (s > a && s > b && s > c) {\n    return s;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = triangle_area;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = will_it_fly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const len = arr.length;\n  if (len < 2) {\n    return 0;\n  }\n\n  const min = arr[0];\n  const max = arr[0];\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n\n  const diff = max - min;\n  const result = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] - min < diff) {\n      result++;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = smallest_change;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) return lst1;\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length < lst2[i].length) {\n      total += lst1[i].length;\n    }\n  }\n  return lst1.filter(item => item.length < lst2[0].length);\n};\n\nmodule.exports = total_match;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_2 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_3 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_4 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_5 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_6 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_7 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_8 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_9 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_10 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_11 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_12 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_13 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_14 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_15 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_16 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_17 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_18 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_19 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_20 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_21 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_multiply_prime_22 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = is_simple_power;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0 && a % 67 === 0 && a % 71 === 0 && a % 73 === 0 && a % 79 === 0 && a % 83 === 0 && a % 89 === 0 && a % 97 === 0 && a % 101 === 0 && a % 103 === 0 && a % 107 === 0 && a % 109 === 0 && a % 113 === 0 && a % 127 === 0 && a % 131 === 0 && a % 137 === 0 && a % 139 === 0 && a % 149 === 0 && a % 151 === 0 && a % 157 === 0 && a % 163 === 0 && a % 167 === 0 && a % 173 === 0 && a % 179 === 0 && a % 181 === 0 && a % 191 === 0 && a % 193 === 0 && a % 197 === 0 && a % 199 === 0 && a % 211 === 0 && a % 223 === 0 && a % 227 === 0 && a % 229 === 0 && a % 233 === 0 && a % 239 === 0 && a % 241 === 0 && a % 251 === 0 && a % 257 === 0 && a % 263 === 0 && a % 269 === 0 && a % 271 === 0 && a % 277 === 0 && a % 281 === 0 && a % 283 === 0 && a % 293 === 0 && a % 307 === 0 && a % 311 === 0 && a % 313 === 0 && a % 317 === 0 && a % 319 === 0 && a % 331 === 0 && a % 337 === 0 && a % 347 === 0 && a % 349 === 0 && a % 353 === 0 && a % 359 === 0 && a % 367 === 0 && a % 373 === 0 && a % 379 === 0 && a % 383 === 0 && a % 389 === 0 && a % 397 === 0 && a % 401 === 0 && a % 409 === 0 && a % 419 === 0 && a % 421 === 0 && a % 431 === 0 && a % 433 === 0 && a % 439 === 0 && a % 443 === 0 && a % 449 === 0 && a % 457 === 0 && a % 461 === 0 && a % 463 === 0 && a % 467 === 0 && a % 479 === 0 && a % 487 === 0 && a % 491 === 0 && a % 499 === 0 && a % 503 === 0 && a % 509 === 0 && a % 521 === 0 && a % 523 === 0 && a % 541 === 0 && a % 547 === 0 && a % 557 === 0 && a % 563 === 0 && a % 569 === 0 && a % 571 === 0 && a % 577 === 0 && a % 587 === 0 && a % 593 === 0 && a % 599 === 0 && a % 601 === 0 && a % 607 === 0 && a % 613 === 0 && a % 617 === 0 && a % 619 === 0 && a % 631 === 0 && a % 641 === 0 && a % 643 === 0 && a % 647 === 0 && a % 653 === 0 && a % 659 === 0 && a % 661 === 0 && a % 673 === 0 && a % 677 === 0 && a % 683 === 0 && a % 691 === 0 && a % 701 === 0 && a % 709 === 0 && a % 719 === 0 && a % 727 === 0 && a % 733 === 0 && a % 739 === 0 && a % 743 === 0 && a % 751 === 0 && a % 757 === 0 && a % 761 === 0 && a % 769 === 0 && a % 773 === 0 && a % 787 === 0 && a % 797 === 0 && a % 809 === 0 && a % 811 === 0 && a % 821 === 0 && a % 823 === 0 && a % 827 === 0 && a % 829 === 0 && a % 839 === 0 && a % 853 === 0 && a % 857 === 0 && a % 859 === 0 && a % 863 === 0 && a % 867 === 0 && a % 871 === 0 && a % 877 === 0 && a % 881 === 0 && a % 883 === 0 && a % 887 === 0 && a % 907 === 0 && a % 917 === 0 && a % 919 === 0 && a % 929 === 0 && a % 931 === 0 && a % 941 === 0 && a % 947 === 0 && a % 953 === 0 && a % 967 === 0 && a % 971 === 0 && a % 977 === 0 && a % 983 === 0 && a % 991 === 0 && a % 997 === 0 && a % 1009 === 0 && a % 1013 === 0 && a % 1019 === 0 && a % 1021 === 0 && a % 1031 === 0 && a % 1033 === 0 && a % 1039 === 0 && a % 1049 === 0 && a % 1051 === 0 && a % 1061 === 0 && a % 1063 === 0 && a % 1069 === 0 && a % 1087 === 0 && a % 1091 === 0 && a % 1093 === 0 && a % 1097 === 0 && a % 1103 === 0 && a % 1109 === 0 && a % 1117 === 0 && a % 1123 === 0 && a % 1129 === 0 && a % 1151 === 0 && a % 1161 === 0 && a % 1163 === 0 && a % 1171 === 0 && a % 1181 === 0 && a % 1187 === 0 && a % 1193 === 0 && a % 1201 === 0 && a % 1213 === 0 && a % 1217 === 0 && a % 1231 === 0 && a % 1237 === 0 && a % 1249 === 0 && a % 1259 === 0 && a % 1277 === 0 && a % 1279 === 0 && a % 1283 === 0 && a % 1289 === 0 && a % 1297 === 0 && a % 1301 === 0 && a % 1303 === 0 && a % 1307 === 0 && a % 1319 === 0 && a % 1321 ==="}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let result = 0;\n  let i = 0;\n  let len = num.length;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 2);\n  let binary_part = decimal % 2;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst binary_to_decimal = (binary) => {\n  let decimal = 0;\n  let binary_length = binary.length;\n  for (let i = 0; i < binary_length; i++) {\n    decimal += binary[i] * Math.pow(2, binary_length - i - 1);\n  }\n  return decimal;\n};\n\nconst binary_to_decimal_with_db = (binary) => {\n  let decimal = 0;\n  let binary_length = binary.length;\n  for (let i = 0; i < binary_length; i++) {\n    decimal += binary[i] * Math.pow(2, binary_length - i - 1);\n  }\n  return decimal;\n};\n\nconst decimal_to_binary_with_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 2);\n  let binary_part = decimal % 2;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst binary_to_decimal_with_db_and_db = (binary) => {\n  let decimal = 0;\n  let binary_length = binary.length;\n  for (let i = 0; i < binary_length; i++) {\n    decimal += binary[i] * Math.pow(2, binary_length - i - 1);\n  }\n  return decimal;\n};\n\nconst decimal_to_binary_with_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 2);\n  let binary_part = decimal % 2;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 3);\n  let binary_part = decimal % 3;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 4);\n  let binary_part = decimal % 4;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 5);\n  let binary_part = decimal % 5;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 6);\n  let binary_part = decimal % 6;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db_and_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 7);\n  let binary_part = decimal % 7;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 8);\n  let binary_part = decimal % 8;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db_and_db = (decimal) => {\n  let binary = \"\";\n  let binary_length = Math.floor(decimal / 9);\n  let binary_part = decimal % 9;\n  for (let i = 0; i < binary_length; i++) {\n    binary += \"0\";\n  }\n  binary += binary_part;\n  return binary;\n};\n\nconst decimal_to_binary_with_db_and_db_and_db_and_db_and_db_and"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let count = 0;\n  let prev = s[0];\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] === prev) {\n      count++;\n    } else {\n      count = 0;\n      prev = s[i];\n    }\n  }\n  return count >= 3;\n};\n\nmodule.exports = is_happy;\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let letter_grades = []\n  grades.forEach((grade) => {\n    if (grade >= 3.7) {\n      letter_grades.push('A+')\n    } else if (grade >= 3.3) {\n      letter_grades.push('A')\n    } else if (grade >= 3.0) {\n      letter_grades.push('A-')\n    } else if (grade >= 2.7) {\n      letter_grades.push('B+')\n    } else if (grade >= 2.3) {\n      letter_grades.push('B')\n    } else if (grade >= 2.0) {\n      letter_grades.push('B-')\n    } else if (grade >= 1.7) {\n      letter_grades.push('C+')\n    } else if (grade >= 1.3) {\n      letter_grades.push('C')\n    } else if (grade >= 1.0) {\n      letter_grades.push('C-')\n    } else if (grade >= 0.7) {\n      letter_grades.push('D+')\n    } else if (grade >= 0.3) {\n      letter_grades.push('D')\n    } else if (grade >= 0.0) {\n      letter_grades.push('D-')\n    }\n  })\n  return letter_grades\n}\n\nmodule.exports = numerical_letter_grade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i = 2;\n  while (i < length) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange') == false\n  */\nconst vowel_contains = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange') == false\n  */\nconst vowel_contains = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange') == false\n  */\nconst vowel_contains = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange') == false\n  */\nconst vowel_contains = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange') == false\n  */\nconst vowel_contains = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange') == false\n  */\nconst vowel_contains = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains a vowel or false otherwise\n  Examples\n  vowel_contains('Hello') == true\n  vowel_contains('abcdcba') == true\n  vowel_contains('kittens') == true\n  vowel_contains('orange')"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  const count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = starts_one_ends;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N /= 2;\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const even = lst.filter((e) => e % 2 === 0);\n  return even.concat(lst.filter((e) => e % 2 === 1));\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const arr = s.split(' ');\n  const arr_new = arr.map((s, i) => {\n    return s.charCodeAt(0).toString(36).toUpperCase();\n  });\n  return arr_new.join(' ');\n};\n\nmodule.exports = anti_shuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_2 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_3 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_4 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_5 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_6 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_7 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_8 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_9 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_10 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort((a, b) => a[x] - b[x]);\n  let sorted_rows_by_col = sorted_rows.map(row => row.map(col => col[x]));\n  return sorted_rows_by_col.map(row => row.map(col => col[x]));\n};\n\nconst get_row_11 = (lst, x) => {\n  let rows = lst.map(row => row.map(col => col[x]));\n  let sorted_rows = rows.sort(("}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n\n  let sum = array[0];\n  let i = 1;\n  while (i < array.length) {\n    sum += array[i];\n    i++;\n  }\n\n  if (sum % 2 === 0) {\n    return sort_array(array.slice().sort((a, b) => a - b));\n  } else {\n    return sort_array(array.slice().sort((a, b) => b - a));\n  }\n};\n\nmodule.exports = sort_array;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst rotate = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst decrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst rotate2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst decrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst rotate3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst encrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst decrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst rotate4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst encrypt5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst decrypt5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    r = r * 2;\n    r = r + c / 26;\n    result += String.fromCharCode(r);\n  }\n  return result;\n};\n\nconst rotate5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let min_index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      min_index = i;\n    }\n  }\n  return lst[min_index + 1];\n};\n\nmodule.exports = next_smallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith('I')) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = is_bored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_float = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_string = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_array = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_boolean = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_function = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined_or_null = (x, y, z) => {\n  return x + y === z;\n};\n\nconst any_object_or_array_or_boolean_or_null_or_undefined_or_function_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined_or_null_or_undefined"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = 'aeiou'\n  const letters = 'abcdefghijklmnopqrstuvwxyz'\n  const letters2 = letters.slice(0, letters.length - 1)\n  const message = message.toLowerCase()\n  const encoded = message.split('').map((letter, index) => {\n    if (letters.indexOf(letter)!== -1) {\n      return letters2[letters.indexOf(letter) + 1]\n    }\n    if (vowels.indexOf(letter)!== -1) {\n      return letters2[letters.indexOf(letter) + 2]\n    }\n    return letter\n  }).join('')\n  return encoded\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitIndex = 0;\n  let maxDigitIndex2 = 0;\n  let maxDigitIndex3 = 0;\n  let maxDigitIndex4 = 0;\n  let maxDigitIndex5 = 0;\n  let maxDigitIndex6 = 0;\n  let maxDigitIndex7 = 0;\n  let maxDigitIndex8 = 0;\n  let maxDigitIndex9 = 0;\n  let maxDigitIndex10 = 0;\n  let maxDigitIndex11 = 0;\n  let maxDigitIndex12 = 0;\n  let maxDigitIndex13 = 0;\n  let maxDigitIndex14 = 0;\n  let maxDigitIndex15 = 0;\n  let maxDigitIndex16 = 0;\n  let maxDigitIndex17 = 0;\n  let maxDigitIndex18 = 0;\n  let maxDigitIndex19 = 0;\n  let maxDigitIndex20 = 0;\n  let maxDigitIndex21 = 0;\n  let maxDigitIndex22 = 0;\n  let maxDigitIndex23 = 0;\n  let maxDigitIndex24 = 0;\n  let maxDigitIndex25 = 0;\n  let maxDigitIndex26 = 0;\n  let maxDigitIndex27 = 0;\n  let maxDigitIndex28 = 0;\n  let maxDigitIndex29 = 0;\n  let maxDigitIndex30 = 0;\n  let maxDigitIndex31 = 0;\n  let maxDigitIndex32 = 0;\n  let maxDigitIndex33 = 0;\n  let maxDigitIndex34 = 0;\n  let maxDigitIndex35 = 0;\n  let maxDigitIndex36 = 0;\n  let maxDigitIndex37 = 0;\n  let maxDigitIndex38 = 0;\n  let maxDigitIndex39 = 0;\n  let maxDigitIndex40 = 0;\n  let maxDigitIndex41 = 0;\n  let maxDigitIndex42 = 0;\n  let maxDigitIndex43 = 0;\n  let maxDigitIndex44 = 0;\n  let maxDigitIndex45 = 0;\n  let maxDigitIndex46 = 0;\n  let maxDigitIndex47 = 0;\n  let maxDigitIndex48 = 0;\n  let maxDigitIndex49 = 0;\n  let maxDigitIndex50 = 0;\n  let maxDigitIndex51 = 0;\n  let maxDigitIndex52 = 0;\n  let maxDigitIndex53 = 0;\n  let maxDigitIndex54 = 0;\n  let maxDigitIndex55 = 0;\n  let maxDigitIndex56 = 0;\n  let maxDigitIndex57 = 0;\n  let maxDigitIndex58 = 0;\n  let maxDigitIndex59 = 0;\n  let maxDigitIndex60 = 0;\n  let maxDigitIndex61 = 0;\n  let maxDigitIndex62 = 0;\n  let maxDigitIndex63 = 0;\n  let maxDigitIndex64 = 0;\n  let maxDigitIndex65 = 0;\n  let maxDigitIndex66 = 0;\n  let maxDigitIndex67 = 0;\n  let maxDigitIndex68 = 0;\n  let maxDigitIndex69 = 0;\n  let maxDigitIndex70 = 0;\n  let maxDigitIndex71 = 0;\n  let maxDigitIndex72 = 0;\n  let maxDigitIndex73 = 0;\n  let maxDigitIndex74 = 0;\n  let maxDigitIndex75 = 0;\n  let maxDigitIndex76 = 0;\n  let maxDigitIndex77 = 0;\n  let maxDigitIndex78 = 0;\n  let maxDigitIndex79 = 0;\n  let maxDigitIndex80 = 0;\n  let maxDigitIndex81 = 0;\n  let maxDigitIndex82 = 0;\n  let maxDigitIndex83 = 0;\n  let maxDigitIndex84 = 0;\n  let maxDigitIndex85 = 0;\n  let maxDigitIndex86 = 0;\n  let maxDigitIndex87 = 0;\n  let maxDigitIndex88 = 0;\n  let maxDigitIndex89 = 0;\n  let maxDigitIndex90 = 0;\n  let maxDigitIndex91 = 0;\n  let maxDigitIndex92 = 0;\n  let maxDigitIndex93 = 0;\n  let maxDigitIndex94 = 0;\n  let maxDigitIndex95 = 0;\n  let maxDigitIndex96 = 0;\n  let maxDigitIndex97 = 0;\n  let maxDigitIndex98 = 0;\n  let maxDigitIndex99 = 0;\n  let maxDigitIndex100 = 0;\n  let maxDigitIndex101 = 0;\n  let maxDigitIndex102 = 0;\n  let maxDigitIndex103 = 0;\n  let maxDigitIndex104 = 0;\n  let maxDigitIndex105 = 0;\n  let maxDigitIndex106 = 0;\n  let maxDigitIndex107 = 0;\n  let maxDigitIndex108 = 0;\n  let maxDigitIndex109 = 0;\n  let maxDigitIndex110 = 0;\n  let maxDigitIndex111 = 0;\n  let maxDigitIndex112 = 0;"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_2 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_3 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_4 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_5 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_6 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_7 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_8 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_9 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_10 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst check_dict_case_11 = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i <= n) {\n    if (is_prime(i)) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\nconst is_prime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = count_up_to;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let aDigit = a % 10;\n  let bDigit = b % 10;\n  let product = 0;\n  while (aDigit!== 0 && bDigit!== 0) {\n    if (aDigit < bDigit) {\n      product += aDigit;\n      aDigit = a % 10;\n    } else {\n      product += bDigit;\n      bDigit = b % 10;\n    }\n  }\n  if (aDigit!== 0) {\n    product += aDigit;\n  }\n  if (bDigit!== 0) {\n    product += bDigit;\n  }\n  return product;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 2;\n    } else {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = count_upper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const int = parseInt(value, 10);\n  if (isNaN(int)) {\n    return value;\n  }\n  const diff = Math.abs(int - Math.round(int));\n  if (diff <= 0.5) {\n    return Math.round(int);\n  }\n  return Math.round(int - diff);\n};\n\nmodule.exports = closest_integer;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(n % 2 === 0? n / 2 : n / 2 + 1)\n    n = n / 2\n  }\n  return result\n}\n\nmodule.exports = make_a_pile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/,| |\\s+/g);\n  return words;\n};\n\nmodule.exports = words_string;\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let num = x;\n  while (num <= y) {\n    if (num % 2 === 0) {\n      return num;\n    }\n    num++;\n  }\n  return -1;\n};\n\nconst test = () => {\n  let result = choose_num(12, 15);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  const avg = (n + m) / 2;\n  const binary = avg.toString(2);\n  if (binary.length < m) {\n    return -1;\n  }\n  return binary.substr(binary.length - m);\n};\n\nmodule.exports = rounded_avg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique_digits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_digit = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name_and_digit = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name_and_digit_and_length = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name_and_digit_and_length_and_digit = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name_and_digit_and_length_and_digit_and_length = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name_and_digit_and_length_and_digit_and_length_and_digit = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst by_name_and_digit_and_length_and_digit_and_length_and_digit_and_length = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nmodule.exports = {\n  by_length,\n  by_name,\n  by_digit,\n  by_name_and_digit,\n  by_name_and_digit_and_length,\n  by_name_and_digit_and_length_and_digit,\n  by_name"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f2 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f3 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f4 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f5 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f6 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f7 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f8 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f9 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f10 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f11 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f12 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f13 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f14 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f15 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f16 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f17 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f18 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f19 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f20 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f21 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f22 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f23 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f24 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f25 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f26 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f27 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f28 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f += i;\n  }\n  return f;\n};\n\nconst f29 = (n) => {"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const even = () => {\n    const evens = [...Array(n).keys()].filter((i) => i % 2 === 0);\n    return evens.length;\n  };\n  const odd = () => {\n    const odds = [...Array(n).keys()].filter((i) => i % 2!== 0);\n    return odds.length;\n  };\n  return { even, odd };\n};\n\nexport { even_odd_palindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = count_nums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let result = false;\n  let arr_copy = arr.slice();\n  arr_copy.sort((a, b) => a - b);\n  for (let i = 0; i < arr_copy.length; i++) {\n    if (arr_copy[i]!== arr_copy[i + 1]) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = move_one_ball;\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] % 2 === 0) {\n      lst1.splice(i, 1);\n      lst2.splice(i, 1);\n    } else {\n      lst1.splice(i, 1);\n      lst2.splice(i, 1);\n      i++;\n    }\n  }\n  return lst1.length === 0 && lst2.length === 0? \"YES\" : \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3,"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let letterCount = {};\n  let letterCounts = [];\n  let letterCountsLength = 0;\n  let letterCountsLengthLength = 0;\n  let letterCountsLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let letterCountsLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result === s;\n  return [result, isPalindrome];\n};\n\nmodule.exports = reverse_delete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let result = []\n  let num = 0\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i]\n    let len = str.length\n    let num_odd = 0\n    for (let j = 0; j < len; j++) {\n      if (str[j] % 2 === 1) {\n        num_odd++\n      }\n    }\n    num += num_odd\n    result.push(`the number of odd elements ${num_odd}n the str${num_odd}ng ${num_odd} of the ${num_odd}nput.`)\n  }\n  return result\n}\n\nmodule.exports = odd_count\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  const min_sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return min_sum;\n};\n\nmodule.exports = min_sub_array_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    buckets.push([]);\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i].push(j);\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    let bucket = buckets[i];\n    while (bucket.length > 0) {\n      let bucket_capacity = bucket.length;\n      let bucket_index = 0;\n      while (bucket_index < bucket.length) {\n        let bucket_capacity_left = bucket_capacity;\n        let bucket_index_left = bucket_index;\n        while (bucket_capacity_left > 0 && bucket_index_left < bucket.length) {\n          let bucket_capacity_right = bucket_capacity_left;\n          let bucket_index_right = bucket_index_left + 1;\n          while (bucket_capacity_right > 0 && bucket_index_right < bucket.length) {\n            if (bucket[bucket_index_right] < bucket[bucket_index_left]) {\n              bucket_capacity_right = bucket_capacity_right - 1;\n              bucket_index_right++;\n            } else {\n              break;\n            }\n          }\n          if (bucket_capacity_right > 0) {\n            bucket_capacity_left = bucket_capacity_left - bucket_capacity_right;\n            bucket_index_left = bucket_index_left + bucket_capacity_right;\n          } else {\n            break;\n          }\n        }\n        if (bucket_capacity_left > 0) {\n          bucket_capacity = bucket_capacity_left;\n          bucket_index = bucket_index_left;\n        } else {\n          break;\n        }\n      }\n      if (bucket_capacity > 0) {\n        count++;\n      }\n      bucket = buckets[i];\n      while (bucket_index < bucket.length) {\n        bucket[bucket_index] = 0;\n        bucket_index++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = max_fill;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a === 0) {\n      return 1;\n    }\n    if (b === 0) {\n      return -1;\n    }\n    if (a === 1) {\n      return -1;\n    }\n    if (b === 1) {\n      return 1;\n    }\n    if (a === 2) {\n      return -1;\n    }\n    if (b === 2) {\n      return 1;\n    }\n    if (a === 3) {\n      return -1;\n    }\n    if (b === 3) {\n      return 1;\n    }\n    if (a === 4) {\n      return -1;\n    }\n    if (b === 4) {\n      return 1;\n    }\n    if (a === 5) {\n      return -1;\n    }\n    if (b === 5) {\n      return 1;\n    }\n    if (a === 6) {\n      return -1;\n    }\n    if (b === 6) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;\n    }\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n      i++;\n      continue;"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let len = word.length;\n  let i = len - 1;\n  let j = len - 1;\n  let result = \"\";\n  while (i >= 0 && j >= 0) {\n    if (word[i] === word[j]) {\n      if (word[i] === \"a\" || word[i] === \"e\" || word[i] === \"i\" || word[i] === \"o\" || word[i] === \"u\") {\n        result = word[i];\n        break;\n      }\n      else {\n        result = \"\";\n        break;\n      }\n    }\n    else {\n      if (word[i] === \"a\" || word[i] === \"e\" || word[i] === \"i\" || word[i] === \"o\") {\n        result = word[i];\n        break;\n      }\n      else {\n        if (word[j] === \"a\" || word[j] === \"e\" || word[j] === \"i\" || word[j] === \"o\") {\n          result = word[j];\n          break;\n        }\n        else {\n          if (word[i] === \"u\" && word[j] === \"y\") {\n            result = word[i];\n            break;\n          }\n          else {\n            if (word[i] === \"y\" && word[j] === \"u\") {\n              result = word[j];\n              break;\n            }\n            else {\n              if (word[i] === \"y\" && word[j] === \"o\") {\n                result = word[i];\n                break;\n              }\n              else {\n                if (word[i] === \"y\" && word[j] === \"u\") {\n                  result = word[j];\n                  break;\n                }\n                else {\n                  if (word[i] === \"y\" && word[j] === \"a\") {\n                    result = word[i];\n                    break;\n                  }\n                  else {\n                    if (word[i] === \"y\" && word[j] === \"e\") {\n                      result = word[i];\n                      break;\n                    }\n                    else {\n                      if (word[i] === \"y\" && word[j] === \"i\") {\n                        result = word[i];\n                        break;\n                      }\n                      else {\n                        if (word[i] === \"y\" && word[j] === \"o\") {\n                          result = word[i];\n                          break;\n                        }\n                        else {\n                          if (word[i] === \"y\" && word[j] === \"u\") {\n                            result = word[i];\n                            break;\n                          }\n                          else {\n                            if (word[i] === \"y\" && word[j] === \"u\") {\n                              result = word[i];\n                              break;\n                            }\n                            else {\n                              if (word[i] === \"y\" && word[j] === \"y\") {\n                                result = word[i];\n                                break;\n                              }\n                              else {\n                                result = \"\";\n                                break;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    i--;\n    j--;\n  }\n  return result;\n}\n\nmodule.exports = get_closest_vowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let left = 0, right = 0, i = 0, j = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      left++;\n    } else if (lst[i] === ')') {\n      right++;\n    }\n    i++;\n  }\n  if (left === 0 && right === 0) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\nmodule.exports = match_parens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, val) => {\n    if (val > max) {\n      return val\n    } else {\n      return max\n    }\n  }, -Infinity)\n\n  const result = arr.filter((val) => {\n    if (val > max) {\n      return true\n    } else {\n      return false\n    }\n  })\n\n  return result.sort()\n}\n\nmodule.exports = maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  const k_digits = k > 0? k : 0;\n  return sum + arr.slice(0, k_digits).reduce((acc, curr) => acc + curr, 0);\n};\n\nmodule.exports = add_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let arr = [];\n  let curr = 1;\n  while (curr <= n) {\n    arr.push(curr);\n    if (curr % 2 === 0) {\n      curr = curr / 2;\n    } else {\n      curr = 3 * curr + 1;\n    }\n  }\n  arr.reverse();\n  return arr;\n};\n\nmodule.exports = get_odd_collatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  let days = 0;\n  let months = 0;\n  let year = 0;\n\n  let month = date.substring(0, 2);\n  let day = date.substring(2, 4);\n  let year_str = date.substring(4, 6);\n\n  if (month.length!== 2) {\n    return false;\n  }\n\n  if (day.length!== 2) {\n    return false;\n  }\n\n  if (year_str.length!== 4) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      if (day > 31) {\n        return false;\n      }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n      if (day > 30) {\n        return false;\n      }\n    } else {\n      if (day > 29) {\n        return false;\n      }\n    }\n  }\n\n  if (month === 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n\n  if (year_str.length === 4) {\n    year = parseInt(year_str, 10);\n  } else {\n    year = parseInt(year_str.substring(2, 4), 10);\n  }\n\n  if (year === 0) {\n    return false;\n  }\n\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n\n  if (year < 2000) {\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      if (day > 31) {\n        return false;\n      }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n      if (day > 30) {\n        return false;\n      }\n    } else {\n      if (day > 29) {\n        return false;\n      }\n    }\n  }\n\n  if (year === 2000) {\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      if (day > 31) {\n        return false;\n      }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n      if (day > 30) {\n        return false;\n      }\n    } else {\n      if (day > 29) {\n        return false;\n      }\n    }\n  }\n\n  if (year === 2100) {\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      if (day > 31) {\n        return false;\n      }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n      if (day > 30) {\n        return false;\n      }\n    } else {\n      if (day > 29) {\n        return false;\n      }\n    }\n  }\n\n  days = day - 1;\n  months = month - 1;\n\n  if (months > 0) {\n    if (days > 0) {\n      if (months === 1) {\n        if (days > 31) {\n          return false;\n        }\n      } else if (months === 3) {\n        if (days > 30) {\n          return false;\n        }\n      } else if (months === 5) {\n        if (days > 29) {\n          return false;\n        }\n      } else if (months === 7) {\n        if (days > 28) {\n          return false;\n        }\n      } else if (months === 8) {\n        if (days > 31) {\n          return false;\n        }\n      } else if (months === 10) {\n        if (days > 30) {\n          return false;\n        }\n      } else if (months === 12) {\n        if (days > 31) {\n          return false;\n        }\n      }\n    } else {\n      if (months === 1) {\n        if (days > 31) {\n          return false;\n        }\n      } else if (months === 3) {\n        if (days > 30) {\n          return false;\n        }\n      } else if (months === 5) {\n        if (days > 29) {\n          return false;\n        }\n      } else if (months === 7) {\n        if (days > 28) {\n          return false;\n        }\n      } else if (months === 8) {\n        if (days > 31) {\n          return false;\n        }\n      } else if (months === 10) {\n        if (days > 30) {\n          return false;\n        }\n      } else if (months === 12) {\n        if (days > 31) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = valid_date"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  let words = txt.split(/[\\s,]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      let letters = word.toLowerCase().match(/[a-z]+/g);\n      if (letters) {\n        let count = letters.length;\n        if (count % 2 === 1) {\n          result.push(word);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = split_words;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev === lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = is_sorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) return \"NO\"\n  if (interval1[1] < interval2[0]) return \"NO\"\n  if (interval1[0] < interval2[0] || interval1[1] > interval2[1]) return \"NO\"\n  return \"YES\"\n}\n\nconst test = [\n  [(1, 2), (2, 3)],\n  [(-1, 1), (0, 4)],\n  [(-3, -1), (-5, 5)],\n]\n\nconsole.log(test.map(intersection))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prod_signs;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const visited = new Array(m)\n  const min_path_lst = []\n  for (let i = 0; i < m; i++) {\n    visited[i] = new Array(n)\n    for (let j = 0; j < n; j++) {\n      visited[i][j] = -1\n    }\n  }\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 0) {\n        continue\n      }\n      const curr_path = [i, j]\n      const curr_path_lst = []\n      let curr_path_lst_len = 1\n      let curr_path_lst_idx = 0\n      let curr_path_lst_idx_prev = -1\n      while (curr_path_lst_idx < curr_path_lst_len) {\n        if (visited[curr_path[curr_path_lst_idx]] === -1) {\n          visited[curr_path[curr_path_lst_idx]] = curr_path_lst_idx\n          curr_path_lst.push(curr_path[curr_path_lst_idx])\n          curr_path_lst_idx++\n        } else {\n          curr_path_lst_idx_prev = curr_path_lst_idx\n          curr_path_lst_idx++\n        }\n      }\n      if (curr_path_lst_idx === curr_path_lst_len) {\n        min_path_lst.push(curr_path_lst)\n      } else {\n        let curr_path_lst_idx_prev_next = curr_path_lst_idx_prev + 1\n        while (curr_path_lst_idx_prev_next < curr_path_lst_len) {\n          if (visited[curr_path[curr_path_lst_idx_prev_next]] === -1) {\n            visited[curr_path[curr_path_lst_idx_prev_next]] = curr_path_lst_idx_prev_next\n            curr_path_lst.push(curr_path[curr_path_lst_idx_prev_next])\n            curr_path_lst_idx_prev_next++\n          } else {\n            curr_path_lst_idx_prev_next++\n          }\n        }\n        min_path_lst.push(curr_path_lst)\n      }\n    }\n  }\n  return min_path_lst\n}\n\nmodule.exports = min_path\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  let result = [];\n  let i = 1;\n  while (i < n) {\n    result.push(i);\n    i = i + 1 / 2;\n  }\n  i = 1;\n  while (i < n) {\n    result.push(i + result[i - 1] + result[i - 2]);\n    i = i + 1;\n  }\n  return result;\n};\n\nconst test = (n) => {\n  console.log(tri(n));\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  while (n > 0) {\n    digits[n % 10] += 1\n    n = Math.floor(n / 10)\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  let index = 0;\n  let bracket_count = 0;\n  let bracket_open = false;\n  let bracket_close = false;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      bracket_count++;\n      bracket_open = true;\n    } else if (string[index] === ']') {\n      bracket_count--;\n      bracket_close = true;\n    }\n    index++;\n  }\n  return bracket_count === 0 && bracket_open && bracket_close;\n};\n\nmodule.exports = is_nested;\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum_squares_21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sum"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  let last_char = txt.slice(-1);\n  let is_alphabetic = /[a-zA-Z]/.test(last_char);\n  let is_not_a_word = /[^a-zA-Z]/.test(last_char);\n  return is_alphabetic &&!is_not_a_word;\n};\n\n/**\n  Create a function that returns true if the last character\n  of a given string is a digit and is not a part of a number,\n  and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e \") ➞ true\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  let last_char = txt.slice(-1);\n  let is_digit = /[0-9]/.test(last_char);\n  let is_not_a_number = /[^0-9]/.test(last_char);\n  return is_digit &&!is_not_a_number;\n};\n\n/**\n  Create a function that returns true if the last character\n  of a given string is a space and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ true\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  let last_char = txt.slice(-1);\n  let is_space = /[ ]/.test(last_char);\n  let is_not_a_word = /[^ ]/.test(last_char);\n  return is_space &&!is_not_a_word;\n};\n\n/**\n  Create a function that returns true if the last character\n  of a given string is a space and is not a part of a number,\n  and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ true\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  let last_char = txt.slice(-1);\n  let is_space = /[ ]/.test(last_char);\n  let is_not_a_number = /[^ ]/.test(last_char);\n  return is_space &&!is_not_a_number;\n};\n\n/**\n  Create a function that returns true if the last character\n  of a given string is a space and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ true\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  let last_char = txt.slice(-1);\n  let is_space = /[ ]/.test(last_char);\n  let is_not_a_word = /[^ ]/.test(last_char);\n  return is_space &&!is_not_a_word;\n};\n\nexport {\n  check_if_last_char_is_a_letter,\n  check_if_last_char_is_a_digit,\n  check_if_last_char_is_a_space,\n  check_if_last_char_is_a_number,\n  check_if_last_char_is_a_word\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      return j;\n    }\n    if (arr[i] < arr[j]) {\n      return i;\n    }\n    i++;\n    j--;\n  }\n  return -1;\n};\n\nmodule.exports = can_arrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n\n  const largest = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    } else if (b === null) {\n      return a;\n    } else if (a < b) {\n      return a;\n    } else {\n      return b;\n    }\n  }, null);\n\n  const smallest = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    } else if (b === null) {\n      return a;\n    } else if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  }, null);\n\n  return [largest, smallest];\n};\n\nmodule.exports = largest_smallest_integers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst compare_two = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst compare_three = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst compare_four = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst compare_five = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst compare_six = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst compare_seven = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  return n % 2 === 0 && n % 4 === 1 && n % 8 === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd = (n) => {\n  return is_equal_to_sum_even(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_equal_to_sum_odd(n);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_or_odd_or_odd_or_odd_or_odd_or_odd = (n) => {\n  return is_equal_to_sum_even_or_odd_or_odd(n) || is_"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n < 0) {\n    throw new Error('The number of terms must be greater than 0.');\n  }\n\n  if (n === 0) {\n    return 1;\n  }\n\n  return n * special_factorial(n - 1);\n};\n\nexport default special_factorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n   .replace(/\\s+/g, \"-\")\n   .replace(/\\s+/g, \" \")\n}\n\nconst fix_spaces_test = () => {\n  const text = \"Example 1\"\n  const expected = \"Example_1\"\n  const actual = fix_spaces(text)\n  console.log(\"fix_spaces(\\\"\" + text + \"\\\") == \\\"\" + actual + \"\\\"\")\n  console.log(\"expected == \\\"\" + expected + \"\\\"\")\n  console.log(\"actual == \\\"\" + actual + \"\\\"\")\n}\n\nfix_spaces_test()\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let file_name_length = file_name.length\n  if (file_name_length > 3) {\n    return 'No'\n  }\n  let file_name_substring = file_name.substring(0, file_name_length)\n  if (file_name_substring.length === 0) {\n    return 'No'\n  }\n  let file_name_substring_first_letter = file_name_substring.charAt(0)\n  if (file_name_substring_first_letter < 'a' || file_name_substring_first_letter > 'z') {\n    return 'No'\n  }\n  let file_name_substring_after_dot = file_name_substring.substring(1)\n  if (file_name_substring_after_dot!== 'txt' && file_name_substring_after_dot!== 'exe' && file_name_substring_after_dot!== 'dll') {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_2 = (file_name) => {\n  let file_name_length = file_name.length\n  if (file_name_length > 3) {\n    return 'No'\n  }\n  let file_name_substring = file_name.substring(0, file_name_length)\n  if (file_name_substring.length === 0) {\n    return 'No'\n  }\n  let file_name_substring_first_letter = file_name_substring.charAt(0)\n  if (file_name_substring_first_letter < 'a' || file_name_substring_first_letter > 'z') {\n    return 'No'\n  }\n  let file_name_substring_after_dot = file_name_substring.substring(1)\n  if (file_name_substring_after_dot!== 'txt' && file_name_substring_after_dot!== 'exe' && file_name_substring_after_dot!== 'dll') {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_3 = (file_name) => {\n  let file_name_length = file_name.length\n  if (file_name_length > 3) {\n    return 'No'\n  }\n  let file_name_substring = file_name.substring(0, file_name_length)\n  if (file_name_substring.length === 0) {\n    return 'No'\n  }\n  let file_name_substring_first_letter = file_name_substring.charAt(0)\n  if (file_name_substring_first_letter < 'a' || file_name_substring_first_letter > 'z') {\n    return 'No'\n  }\n  let file_name_substring_after_dot = file_name_substring.substring(1)\n  if (file_name_substring_after_dot!== 'txt' && file_name_substring_after_dot!== 'exe' && file_name_substring_after_dot!== 'dll') {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// Test Cases\nconst testCases = [\n  [\n    [\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2, 3],\n      [1, 2"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (is_prime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = words_in_sentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [xN, nN] = x.split('/');\n  const [nNumerator, nDenominator] = n.split('/');\n\n  if (nNumerator === nN && nDenominator === 1) {\n    return true;\n  }\n\n  if (nNumerator === nN && nDenominator === 0) {\n    return false;\n  }\n\n  if (nNumerator === nN && nDenominator === nN) {\n    return true;\n  }\n\n  if (nNumerator === nN && nDenominator === nNumerator) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = simplify;\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sum_digits = (num) => {\n    let sum = 0\n    while (num > 0) {\n      sum += num % 10\n      num /= 10\n    }\n    return sum\n  }\n  const sorted_nums = nums.sort((a, b) => {\n    const a_sum = sum_digits(a)\n    const b_sum = sum_digits(b)\n    if (a_sum === b_sum) {\n      return a - b\n    }\n    return a_sum - b_sum\n  })\n  return sorted_nums\n}\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12]\n  const expected = [-1, -11, 1, -12, 11]\n  console.log(order_by_points(nums))\n  console.log(expected)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = special_filter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  return arr.length;\n};\n\nconst get_max_triples = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet1_orbit = planets[i].split(\" \")[0];\n    const planet2_orbit = planets[i].split(\" \")[1];\n    if (planet1_orbit === planet2) {\n      result.push(planet1);\n    } else if (planet2_orbit === planet1) {\n      result.push(planet2);\n    } else if (planet1_orbit > planet2_orbit) {\n      result.push(planet1);\n    } else if (planet1_orbit < planet2_orbit) {\n      result.push(planet2);\n    }\n  }\n  return result;\n};\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Venus\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Venus\"));\nconsole.log(bf(\"Jupiter\", \"Earth\"));\nconsole.log(bf(\"Jupiter\", \"Mars\"));\nconsole.log(bf(\"Jupiter\", \"Saturn\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Uranus\"));\nconsole.log(bf(\"Earth\", \"Venus\"));\nconsole.log(bf(\"Earth\", \"Mars\"));\nconsole.log(bf(\"Earth\", \"Jupiter\"));\nconsole.log(bf(\"Earth\", \"Saturn\"));\nconsole.log(bf(\"Earth\", \"Uranus\"));\nconsole.log(bf(\"Earth\", \"Neptune\"));\nconsole.log(bf(\"Mars\", \"Neptune\"));\nconsole.log(bf(\"Mars\", \"Uranus\"));\nconsole.log(bf(\"Mars\", \"Venus\"));\nconsole.log(bf(\"Mars\", \"Earth\"));\nconsole.log(bf(\"Mars\", \"Jupiter\"));\nconsole.log(bf(\"Mars\", \"Saturn\"));\nconsole.log(bf(\"Mars\", \"Uranus\"));\nconsole.log(bf(\"Mars\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Venus\"));\nconsole.log(bf(\"Jupiter\", \"Earth\"));\nconsole.log(bf(\"Jupiter\", \"Mars\"));\nconsole.log(bf(\"Jupiter\", \"Saturn\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Uranus\"));\nconsole.log(bf(\"Earth\", \"Venus\"));\nconsole.log(bf(\"Earth\", \"Mars\"));\nconsole.log(bf(\"Earth\", \"Jupiter\"));\nconsole.log(bf(\"Earth\", \"Saturn\"));\nconsole.log(bf(\"Earth\", \"Uranus\"));\nconsole.log(bf(\"Earth\", \"Neptune\"));\nconsole.log(bf(\"Mars\", \"Neptune\"));\nconsole.log(bf(\"Mars\", \"Uranus\"));\nconsole.log(bf(\"Mars\", \"Venus\"));\nconsole.log(bf(\"Mars\", \"Earth\"));\nconsole.log(bf(\"Mars\", \"Jupiter\"));\nconsole.log(bf(\"Mars\", \"Saturn\"));\nconsole.log(bf(\"Mars\", \"Uranus\"));\nconsole.log(bf(\"Mars\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Venus\"));\nconsole.log(bf(\"Jupiter\", \"Earth\"));\nconsole.log(bf(\"Jupiter\", \"Mars\"));\nconsole.log(bf(\"Jupiter\", \"Saturn\"));\nconsole.log(bf(\"Jupiter\", \"Uranus\"));\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Uranus\"));\nconsole.log(bf(\"Earth\", \"Venus\"));\nconsole.log(bf(\"Earth\", \"Mars\"));\nconsole.log(bf(\"Earth\", \"Jupiter\"));\nconsole.log(bf(\"Earth\", \"Saturn\"));\nconsole.log(bf(\"Earth\", \"Uranus\"));\nconsole.log(bf(\"Earth\", \"Neptune"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_2 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_3 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_4 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_5 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_6 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_7 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_8 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_9 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_10 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_11 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[j].length === sum) {\n        result.push(lst[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconst sorted_list_sum_12 = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const sum = lst[i].length;\n    for (let j = i + 1; j < lst"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst x_or_y_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = (n, x, y) => {\n  if (n % 2 == 0) {\n    "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) return 0\n  const sum = lst.reduce((sum, num) => {\n    if (num % 2 === 1) return sum + num\n    return sum\n  }, 0)\n  return sum\n}\n\nconst test = [1, 3, 2, 0]\nconsole.log(double_the_difference(test))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let i = 0;\n  while (i < game.length) {\n    let score = game[i];\n    let guessScore = guess[i];\n    if (score === guessScore) {\n      result[i] = 0;\n    } else {\n      result[i] = Math.abs(score - guessScore);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const [first_cap, rest] = extension.split('.');\n    return acc + first_cap.length - rest.length;\n  }, 0);\n  const extension = extensions.find(extension => strength === extension.split('.').length);\n  return class_name + '.' + extension;\n};\n\nmodule.exports = {\n  strongest_extension\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let a_length = a.length;\n  let b_length = b.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a_word = a;\n  let b_word = b;\n  let a_word_length = a_word.length;\n  let b_word_length = b_word.length;\n  let a_word_index = 0;\n  let b_word_index = 0;\n  let a_word_index_length = 0;\n  let b_word_index_length = 0;\n  let a_word_index_length_max = 0;\n  let b_word_index_length_max = 0;\n  let a_word_index_length_max_max = 0;\n  let b_word_index_length_max_max = 0;\n  let a_word_index_length_max_max_max = 0;\n  let b_word_index_length_max_max_max = 0;\n  let a_word_index_length_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let b_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let a_word_index_length_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even_count = 0\n  let odd_count = 0\n  let temp = num\n  while (temp > 0) {\n    if (temp % 10 % 2 === 0) {\n      even_count++\n    } else {\n      odd_count++\n    }\n    temp = temp / 10\n  }\n  return [even_count, odd_count]\n}\n\nmodule.exports = even_odd_count\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    let digit = number % 10\n    number = number / 10\n    result = (digit === 9)? result + 'X' : (digit === 4)? result + 'IV' : (digit === 3)? result + 'III' : (digit === 2)? result + 'II' : (digit === 1)? result + 'I' : result\n    i++\n  }\n  return result\n}\n\nmodule.exports = {\n  int_to_mini_roman\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a obtuse triangle, false otherwise.\n  An obtuse triangle is a triangle in which one side is shorter than the other\n  two.\n  Example:\n  obtuse_triangle(3, 4, 5) == true\n  obtuse_triangle(1, 2, 3) == false\n  */\nconst obtuse_triangle = (a, b, c) => {\n  return (a + b < c || a + c < b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  An equilateral triangle is a triangle in which all three sides are equal.\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  return (a === b && b === c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all three sides are equal.\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  return (a === b && b === c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a obtuse triangle, false otherwise.\n  An obtuse triangle is a triangle in which one side is shorter than the other\n  two.\n  Example:\n  obtuse_triangle(3, 4, 5) == true\n  obtuse_triangle(1, 2, 3) == false\n  */\nconst obtuse_triangle = (a, b, c) => {\n  return (a + b < c || a + c < b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  An equilateral triangle is a triangle in which all three sides are equal.\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  return (a === b && b === c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all three sides are equal.\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  return (a === b && b === c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a obtuse triangle, false otherwise.\n  An obtuse triangle is a triangle in which one side is shorter than the other\n  two.\n  Example:\n  obtuse_triangle(3, 4, 5) == true\n  obtuse_triangle(1, 2, 3) == false\n  */\nconst obtuse_triangle = (a, b, c) => {\n  return (a + b < c || a + c < b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  An equilateral triangle is a triangle in which all three sides are equal.\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  return (a === b && b === c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all three sides are equal.\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  return ("}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const max = words.reduce((max, word) => {\n    if (word.length === 0) {\n      return max;\n    }\n    const chars = word.split('').reduce((acc, char) => {\n      if (acc.indexOf(char) === -1) {\n        acc.push(char);\n      }\n      return acc;\n    }, []);\n    return chars.length === max? word : max;\n  }, '');\n  return max;\n};\n\nmodule.exports = find_max;\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) return [0, 0];\n  if (need < 0 || need > 1000) return [0, 0];\n  if (remaining < 0 || remaining > 1000) return [0, 0];\n\n  let total = 0;\n  let left = 0;\n  let i = 0;\n  while (i < number) {\n    if (remaining < need) {\n      total += need - remaining;\n      left = need;\n      break;\n    }\n    total += remaining;\n    left -= remaining;\n    i++;\n    remaining = 0;\n  }\n  return [total, left];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < operator.length && j < operand.length) {\n    if (operator[i] === '+') {\n      result += operand[j];\n    } else if (operator[i] === '-') {\n      result -= operand[j];\n    } else if (operator[i] === '*') {\n      result *= operand[j];\n    } else if (operator[i] === '/') {\n      result /= operand[j];\n    } else if (operator[i] === '//') {\n      result = result / operand[j];\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[j]);\n    }\n    i++;\n    j++;\n  }\n  return result;\n};\n\nmodule.exports = do_algebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  let str = s.split('');\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  result = str.join('');\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  string_to_md5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\nmodule.exports = generate_integers;\n<|endoftext|>"}
