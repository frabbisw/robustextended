{"task_id": "JavaScript/0", "prompt": "/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let found = false\n  let found2 = false\n  let found3 = false\n  let found4 = false\n  let found5 = false\n  let found6 = false\n  let found7 = false\n  let found8 = false\n  let found9 = false\n  let found10 = false\n  let found11 = false\n  let found12 = false\n  let found13 = false\n  let found14 = false\n  let found15 = false\n  let found16 = false\n  let found17 = false\n  let found18 = false\n  let found19 = false\n  let found20 = false\n  let found21 = false\n  let found22 = false\n  let found23 = false\n  let found24 = false\n  let found25 = false\n  let found26 = false\n  let found27 = false\n  let found28 = false\n  let found29 = false\n  let found30 = false\n  let found31 = false\n  let found32 = false\n  let found33 = false\n  let found34 = false\n  let found35 = false\n  let found36 = false\n  let found37 = false\n  let found38 = false\n  let found39 = false\n  let found40 = false\n  let found41 = false\n  let found42 = false\n  let found43 = false\n  let found44 = false\n  let found45 = false\n  let found46 = false\n  let found47 = false\n  let found48 = false\n  let found49 = false\n  let found50 = false\n  let found51 = false\n  let found52 = false\n  let found53 = false\n  let found54 = false\n  let found55 = false\n  let found56 = false\n  let found57 = false\n  let found58 = false\n  let found59 = false\n  let found60 = false\n  let found61 = false\n  let found62 = false\n  let found63 = false\n  let found64 = false\n  let found65 = false\n  let found66 = false\n  let found67 = false\n  let found68 = false\n  let found69 = false\n  let found70 = false\n  let found71 = false\n  let found72 = false\n  let found73 = false\n  let found74 = false\n  let found75 = false\n  let found76 = false\n  let found77 = false\n  let found78 = false\n  let found79 = false\n  let found80 = false\n  let found81 = false\n  let found82 = false\n  let found83 = false\n  let found84 = false\n  let found85 = false\n  let found86 = false\n  let found87 = false\n  let found88 = false\n  let found89 = false\n  let found90 = false\n  let found91 = false\n  let found92 = false\n  let found93 = false\n  let found94 = false\n  let found95 = false\n  let found96 = false\n  let found97 = false\n  let found98 = false\n  let found99 = false\n  let found100 = false\n  let found101 = false\n  let found102 = false\n  let found103 = false\n  let found104 = false\n  let found105 = false\n  let found106 = false\n  let found107 = false\n  let found108 = false\n  let found109 = false\n  let found110 = false\n  let found111 = false\n  let found112 = false\n  let found113 = false\n  let found114 = false\n  let found115 = false\n  let found116 = false\n  let found117 = false\n  let found118 = false\n  let found119 = false\n  let found120 = false\n  let found121 = false\n  let found122 = false\n  let found123 = false\n  let found124 = false\n  let found125 = false\n  let found126 = false\n  let found127 = false\n  let found128 = false\n  let found129 = false\n  let found130 = false\n  let found131 = false\n  let found132 = false\n  let found133 = false\n  let found134 = false\n  let found135 = false\n  let found136 = false\n  let found137 = false\n  let found138 = false\n  let found139 = false\n  let found140 = false\n  let found141 = false\n  let found142 = false\n  let found143 = false\n  let found144 = false\n  let found145 = false\n  let found146 = false\n  let found147 = false\n  let found148 = false\n  let found149 = false\n  let found150 = false\n  let found151 = false\n  let found152 = false\n  let found153 = false\n  let found154 = false\n  let found155 = false\n  let found156 = false\n  let found157 = false\n  let found158 = false\n  let found159 = false\n  let found160 = false\n  let found161 = false\n  let found162 = false\n  let found163 = false\n  let found164 = false\n  let found165 = false\n  let found166 = false\n  let found167 = false\n  let found168 = false\n  let found169 = false\n  let found170 = false\n  let found171 = false\n  let found172 = false\n  let found173 = false\n  let found174 = false\n  let found175 = false\n  let found176 = false\n  let found177 = false\n  let found178 = false\n  let found179 = false\n  let found180 = false\n  let found181 = false\n  let found182 = false\n  let found183 = false\n  let found184 = false\n  let found185 = false\n  let found186 = false\n  let found187 = false\n  let found188 = false\n  let found189 = false\n  let found190 = false\n  let found191 = false\n  let found192 = false\n  let found193 = false\n  let found194 = false\n  let found195 = false\n  let found196 = false\n  let found197 = false\n  let found198 = false\n  let found"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let close_paren = 0;\n  let open_paren_count = 0;\n  let close_paren_count = 0;\n  let open_paren_index = 0;\n  let close_paren_index = 0;\n  let open_paren_count_max = 0;\n  let close_paren_count_max = 0;\n  let open_paren_index_max = 0;\n  let close_paren_index_max = 0;\n  let open_paren_count_max_index = 0;\n  let close_paren_count_max_index = 0;\n  let open_paren_count_max_index_max = 0;\n  let close_paren_count_max_index_max = 0;\n  let open_paren_count_max_index_max_index = 0;\n  let close_paren_count_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max = 0;\n  let close_paren_count_max_index_max_index_max = 0;\n  let open_paren_count_max_index_max_index_max_index = 0;\n  let close_paren_count_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max = 0;\n  let close_paren_count_max_index_max_index_max_index_max = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index_max = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let close_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let open_paren_count_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true . Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, op) => acc + op, 0);\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    sumOfSquares += numbers[i] * numbers[i];\n  }\n  let mean = sum / numbers.length;\n  let variance = sumOfSquares / numbers.length - mean * mean;\n  let mad = Math.sqrt(variance);\n  return mad;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const intersperse = (numbers, delimeter) => {\n    const intersperse = (numbers, delimeter) => {\n      const intersperse = (numbers, delimeter) => {\n        const intersperse = (numbers, delimeter) => {\n          const intersperse = (numbers, delimeter) => {\n            const intersperse = (numbers, delimeter) => {\n              const intersperse = (numbers, delimeter) => {\n                const intersperse = (numbers, delimeter) => {\n                  const intersperse = (numbers, delimeter) => {\n                    const intersperse = (numbers, delimeter) => {\n                      const intersperse = (numbers, delimeter) => {\n                        const intersperse = (numbers, delimeter) => {\n                          const intersperse = (numbers, delimeter) => {\n                            const intersperse = (numbers, delimeter) => {\n                              const intersperse = (numbers, delimeter) => {\n                                const intersperse = (numbers, delimeter) => {\n                                  const intersperse = (numbers, delimeter) => {\n                                    const intersperse = (numbers, delimeter) => {\n                                      const intersperse = (numbers, delimeter) => {\n                                        const intersperse = (numbers, delimeter) => {\n                                          const intersperse = (numbers, delimeter) => {\n                                            const intersperse = (numbers, delimeter) => {\n                                              const intersperse = (numbers, delimeter) => {\n                                                const intersperse = (numbers, delimeter) => {\n                                                  const intersperse = (numbers, delimeter) => {\n                                                    const intersperse = (numbers, delimeter) => {\n                                                      const intersperse = (numbers, delimeter) => {\n                                                        const intersperse = (numbers, delimeter) => {\n                                                          const intersperse = (numbers, delimeter) => {\n                                                            const intersperse = (numbers, delimeter) => {\n                                                              const intersperse = (numbers, delimeter) => {\n                                                                const intersperse = (numbers, delimeter) => {\n                                                                  const intersperse = (numbers, delimeter) => {\n                                                                    const intersperse = (numbers, delimeter) => {\n                                                                      const intersperse = (numbers, delimeter) => {\n                                                                        const intersperse = (numbers, delimeter) => {\n                                                                          const intersperse = (numbers, delimeter) => {\n                                                                            const intersperse = (numbers, delimeter) => {\n                                                                              const intersperse = (numbers, delimeter) => {\n                                                                                const intersperse = (numbers, delimeter) => {\n                                                                                  const intersperse = (numbers, delimeter) => {\n                                                                                    const intersperse = (numbers, delimeter) => {\n                                                                                      const intersperse = (numbers, delimeter) => {\n                                                                                        const intersperse = (numbers, delimeter) => {\n                                                                                          const intersperse = (numbers, delimeter) => {\n                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                              const intersperse = (numbers, delimeter) => {\n                                                                                                const intersperse = (numbers, delimeter) => {\n                                                                                                  const intersperse = (numbers, delimeter) => {\n                                                                                                    const intersperse = (numbers, delimeter) => {\n                                                                                                      const intersperse = (numbers, delimeter) => {\n                                                                                                        const intersperse = (numbers, delimeter) => {\n                                                                                                          const intersperse = (numbers, delimeter) => {\n                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                              const intersperse = (numbers, delimeter) => {\n                                                                                                                  const intersperse = (numbers, delimeter) => {\n                                                                                                                    const intersperse = (numbers, delimeter) => {\n                                                                                                                      const intersperse = (numbers, delimeter) => {\n                                                                                                                        const intersperse = (numbers, delimeter) => {\n                                                                                                                          const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter) => {\n                                                                                                                            const intersperse = (numbers, delimeter)"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_array = [];\n  let paren_string_array_length = 0;\n  let paren_string_array_index = 0;\n  let paren_string_array_last_index = 0;\n  let paren_string_array_last_index_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = 0;\n  let paren_string_array_last_index_plus"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  filterBySubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0, product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence .\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') return string;\n  let stringprefix = string. split( '' ).rever se( ).join ('');\n  let stringpostfix = string. split( '' ).rever se( ).join ('');\n  let palindrome = stringprefix + stringpostfix;\n  let palindromeprefix = stringprefix. split( '' ).rever se( ).join ('');\n  let palindromepostfix = stringpostfix. split( '' ).rever se( ).join ('');\n  let palindrome = palindromeprefix + palindromepostfix;\n  return palindrome;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = ("}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      if (a[i] === b[j]) {\n        result.push(a[i]);\n      }\n    }\n  }\n  return result.join('');\n};\n\nconst test = () => {\n  const a}
{"task_id": "JavaScript/12", "prompt": "/* Outof list of string s , return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Outof list of string s, return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  let c = a;\n  while (c!== 1) {\n    if (a % c === 0) {\n      return c;\n    }\n    c = c - 1;\n  }\n  return 1;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string) => {\n  const prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substring(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0${i} `;\n  }\n  return s;\n};\n\n/*\n  Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    "}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === string[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last .\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music = music_string.split('').map(note => {\n    if (note === 'o') {\n      return 4;\n    } else if (note === 'o|') {\n      return 2;\n    } else if (note === '.') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return music;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (string.length === 0 || substring.length === 0) {\n    return 0;\n  }\n\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n    i++;\n  }\n\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee' , 'fou r', 'five', 'six', 'seve n','eight' and 'nine' . \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let i = 0;\n  let j = numbers.length - 1;\n  while (i < j) {\n    let temp = numbers[i];\n    numbers[i] = numbers[j];\n    numbers[j] = temp;\n    i++;\n    j--;\n  }\n  for (let k = 0; k < numbers.length; k++) {\n    result += numbers[k];\n  }\n  return result;\n};\n\n// Test Cases\n\n// Test Case 1\nconsole.log(sortNumbers('three one five'));\n\n// Test Case 2\nconsole.log(sortNumbers('three one two four'));\n\n// Test Case 3\nconsole.log(sortNumbers('three one two three four'));\n\n// Test Case 4\nconsole.log(sortNumbers('three one two three four five'));\n\n// Test Case 5\nconsole.log(sortNumbers('three one two three four five six'));\n\n// Test Case 6\nconsole.log(sortNumbers('three one two three four five six seven'));\n\n// Test Case 7\nconsole.log(sortNumbers('three one two three four five six seven eight'));\n\n// Test Case 8\nconsole.log(sortNumbers('three one two three four five six seven eight nine'));\n\n// Test Case 9\nconsole.log(sortNumbers('three one two three four five six seven eight nine zero'));\n\n// Test Case 10\nconsole.log(sortNumbers('three one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four five six seven eight nine zero one two three four 5 six seven eight nine zero one two three 4 five 6 seven 8 nine 0 one 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ) .\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = Math.abs(numbers[i] - numbers[0]);\n    if (distance < min) {\n      min = distance;\n      minIndex = i;\n    }\n    if (distance > max) {\n      max = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0."}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value);\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter given list of a ny pytho n values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen20 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen21 = (string) => {\n  if (string.length === 0) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('"}
{"task_id": "JavaScript/24", "prompt": "/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nconst largestDivisor = (n) => {\n  let div"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1];\n  let [h, i] = [1, 1];\n  let [j, k] = [1, 1];\n  let [l, m] = [1, 1];\n  let [n, o] = [1, 1];\n  let [p, q] = [1, 1];\n  let [r, s] = [1, 1];\n  let [t, u] = [1, 1];\n  let [v, w] = [1, 1];\n  let [x, y] = [1, 1];\n  let [z, a] = [1, 1];\n  let [b, c] = [1, 1];\n  let [d, e] = [1, 1];\n  let [f, g] = [1, 1"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      numbers[i] = temp[j];\n      j++;\n    }\n    i++;\n  }\n  return numbers;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      temp[k] = numbers[i];\n      k++;\n    } else {\n      "}
{"task_id": "JavaScript/27", "prompt": "/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase2('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase3('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase4('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase5('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase6('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase7('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase8('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase9('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase10('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase11('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/g,'');\n};\n\n/**\n  Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase and\n  replace all spaces with a single space.\n  >>> flipCase12('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  }).replace(/\\s+/"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s, '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithSpaces = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithSpacesAndNulls = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithNulls = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithNullsAndSpaces = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithNullsAndSpacesAndNulls = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithNullsAndSpacesAndNullsAndSpaces = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\n/*\n  Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateWithNullsAndSpacesAndNullsAndSpacesAndNulls = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  return strings.reduce((acc, s) => acc + s +'', '');\n};\n\nmodule.exports = {\n  concatenate,\n  concatenateWithSpaces,\n  concatenateWithSpacesAndNulls,\n  concatenateWithNulls,\n  concatenateWithNullsAndSpaces,\n  concatenateWithNullsAndSpacesAndNulls,\n  concatenateWithNullsAndSpacesAndNullsAndSpaces,\n  concatenateWithNullsAndSpacesAndNullsAndSpacesAndNulls\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that start with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(suffix) === strings[i].length - suffix.length) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(suffix) === strings[i].length - suffix.length) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByRegex = (strings, regex) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings;\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/* Filter an input listo f string s only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/**\n  Return only negative n u mbers in  the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/**\n  Return only the n u mbers in  the list.\n  >>> getN(['-1', '2', '-4', '5', '6'])\n  ['-1', '2', '-4', '5', '6']\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 123, 1, -10]\n  */\nconst getN = (l) => {\n  const n = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      n.push(l[i]);\n    }\n  }\n  return n;\n};\n\n/**\n  Return the n u mbers in  the list.\n  >>> getN(['-1', '2', '-4', '5', '6'])\n  ['-1', '2', '-4', '5', '6']\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 123, 1, -10]\n  */\nconst getN2 = (l) => {\n  const n = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      n.push(l[i]);\n    }\n  }\n  return n;\n};\n\n/**\n  Return the n u mbers in  the list.\n  >>> getN(['-1', '2', '-4', '5', '6'])\n  ['-1', '2', '-4', '5', '6']\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 123, 1, -10]\n  */\nconst getN3 = (l) => {\n  const n = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      n.push(l[i]);\n    }\n  }\n  return n;\n};\n\n/**\n  Return the n u mbers in  the list.\n  >>> getN(['-1', '2', '-4', '5', '6'])\n  ['-1', '2', '-4', '5', '6']\n  >>> getN([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 123, 1, -10]\n  */\nconst getN4 = (l) => {\n  const n = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      n.push(l[i]);\n    }\n  }\n  return n;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getN,\n  getN2,\n  getN3,\n  getN4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + ....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution .\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let s = 0;\n  let x = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n"}
{"task_id": "JavaScript/33", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortFourth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 4 === 0 && b % 4 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortFifth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 5 === 0 && b % 5 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortSixth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 6 === 0 && b % 6 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortSeventh = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 7 === 0 && b % 7 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortEigth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 8 === 0 && b % 8 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortNinth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 9 === 0 && b % 9 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortNinth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 11 === 0 && b % 11 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nconst sortTenth = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 10 === 0 && b % 10 === 0) {\n      return a - b;"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort();\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(l[i])) {\n      continue;\n    }\n    set.add(l[i]);\n  }\n  return Array.from(set).sort((a, b) => a - b);\n};\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13 .\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      count += 2;\n      n = Math.floor(n / 10);\n    } else if (n % 11 === 0) {\n      count += 1;\n      n = Math.floor(n / 10);\n    } else if (n % 13 === 0) {\n      count += 3;\n      n = Math.floor(n / 10);\n    } else {\n      count += 1;\n      n = Math.floor(n / 10);\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortOdd = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd2 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd3 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd4 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd5 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd6 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd7 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd8 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1) {\n      l2.splice(i, j - i,...l.slice(i, j));\n    }\n    i = j;\n  }\n  return l2;\n};\n\nconst sortEvenOdd9 = (l) => {\n  const l2 = l.slice(0);\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] === l[i]) {\n      j++;\n    }\n    if (j - i > 1)"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic2 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic3 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic4 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic5 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic6 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic7 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic8 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic9 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic10 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic11 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic12 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic13 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic14 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic15 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic16 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic17 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */const decodeCyclic18 = (s) => {\n  const decod = decodeCyclic(s);\n  return decod.s lice(1) +decod[0];\n}\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib2(n - 1) + primeFib2(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib3(n - 1) + primeFib3(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib4(n - 1) + primeFib4(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib5(n - 1) + primeFib5(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib6(n - 1) + primeFib6(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib7(n - 1) + primeFib7(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib8(n - 1) + primeFib8(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib9(n - 1) + primeFib9(n - 2)\n  if (fib % 2 === 0) {\n    return fib\n  }\n  return fib + 1\n}\n\n/*\n  primeFib returns n-th number t hat is a Fibonacci"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously , a  diffe rent set of n cars\n  are  dri ving right to left .    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let collision = 0;\n  let car1 = 0;\n  let car2 = 0;\n  let car3 = 0;\n  let car4 = 0;\n  let car5 = 0;\n  let car6 = 0;\n  let car7 = 0;\n  let car8 = 0;\n  let car9 = 0;\n  let car10 = 0;\n  let car11 = 0;\n  let car12 = 0;\n  let car13 = 0;\n  let car14 = 0;\n  let car15 = 0;\n  let car16 = 0;\n  let car17 = 0;\n  let car18 = 0;\n  let car19 = 0;\n  let car20 = 0;\n  let car21 = 0;\n  let car22 = 0;\n  let car23 = 0;\n  let car24 = 0;\n  let car25 = 0;\n  let car26 = 0;\n  let car27 = 0;\n  let car28 = 0;\n  let car29 = 0;\n  let car30 = 0;\n  let car31 = 0;\n  let car32 = 0;\n  let car33 = 0;\n  let car34 = 0;\n  let car35 = 0;\n  let car36 = 0;\n  let car37 = 0;\n  let car38 = 0;\n  let car39 = 0;\n  let car40 = 0;\n  let car41 = 0;\n  let car42 = 0;\n  let car43 = 0;\n  let car44 = 0;\n  let car45 = 0;\n  let car46 = 0;\n  let car47 = 0;\n  let car48 = 0;\n  let car49 = 0;\n  let car50 = 0;\n  let car51 = 0;\n  let car52 = 0;\n  let car53 = 0;\n  let car54 = 0;\n  let car55 = 0;\n  let car56 = 0;\n  let car57 = 0;\n  let car58 = 0;\n  let car59 = 0;\n  let car60 = 0;\n  let car61 = 0;\n  let car62 = 0;\n  let car63 = 0;\n  let car64 = 0;\n  let car65 = 0;\n  let car66 = 0;\n  let car67 = 0;\n  let car68 = 0;\n  let car69 = 0;\n  let car70 = 0;\n  let car71 = 0;\n  let car72 = 0;\n  let car73 = 0;\n  let car74 = 0;\n  let car75 = 0;\n  let car76 = 0;\n  let car77 = 0;\n  let car78 = 0;\n  let car79 = 0;\n  let car80 = 0;\n  let car81 = 0;\n  let car82 = 0;\n  let car83 = 0;\n  let car84 = 0;\n  let car85 = 0;\n  let car86 = 0;\n  let car87 = 0;\n  let car88 = 0;\n  let car89 = 0;\n  let car90 = 0;\n  let car91 = 0;\n  let car92 = 0;\n  let car93 = 0;\n  let car94 = 0;\n  let car95 = 0;\n  let car96 = 0;\n  let car97 = 0;\n  let car98 = 0;\n  let car99 = 0;\n  let car100 = 0;\n  let car101 = 0;\n  let car102 = 0;\n  let car103 = 0;\n  let car104 = 0;\n  let car105 = 0;\n  let car106 = 0;\n  let car107 = 0;\n  let car108 = 0;\n  let car109 = 0;\n  let car110 = 0;\n  let car111 = 0;\n  let car112 = 0;\n  let car113 = 0;\n  let car114 = 0;\n  let car115 = 0;\n  let car116 = 0;\n  let car117 = 0;\n  let car118 = 0;\n  let car119 = 0;\n  let car120 = 0;\n  let car121 = 0;\n  let car122 = 0;\n  let car123 = 0;\n  let car124 = 0;\n  let car125 = 0;\n  let car126 = 0;\n  let car127 = 0;\n  let car128 = 0;\n  let car129 = 0;\n  let car130 = 0;\n  let car131 = 0;\n  let car132 = 0;\n  let car133 = 0;\n  let car134 = 0;\n  let car135 = 0;\n  let car136 = 0;\n  let car137 = 0;\n  let car138 = 0;\n  let car139 = 0;\n  let car140 = 0;\n  let car141 = 0;\n  let car142 = 0;\n  let car143 = 0;\n  let car144 = 0;\n  let car145 = 0;\n  let car146 = 0;\n  let car147 = 0;\n  let car148 = 0;\n  let car149 = 0;\n  let car150 = 0;\n  let car151 = 0;\n  let car152 = 0;\n  let car153 = 0;\n  let car154 = 0;\n  let car155 = 0;\n  let car156 = 0;\n  let car157 = 0;\n  let car158 = 0;\n  let car159 = 0;\n  let car160 = 0;\n  let car161 = 0;\n  let car162 = 0;\n  let car163 = 0;\n  let car164 = 0;\n  let car165 = 0;\n  let car166 = 0;\n  let car167 = 0;\n  let car168 = 0;\n  let"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\nconst printList = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList2 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList3 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList4 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList5 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList6 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList7 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList8 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList9 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList10 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList11 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList12 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList13 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList14 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList15 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList16 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList17 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList18 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList19 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList20 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList21 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList22 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList23 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList24 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList25 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList26 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList27 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList28 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList29 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList30 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n};\n\nconst printList31 = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    console.log(l[i]);\n  }\n"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < l.length) {\n    sum += l[i];\n    if (sum === 0) {\n      while (j < l.length && l[j]!== l[i]) {\n        sum += l[j];\n        j++;\n      }\n      if (sum === 0) {\n        return false;\n      }\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 2) {\n    throw new Error('base must be greater than 1')\n  }\n  if (base > 10) {\n    throw new Error('base must be less than 10')\n  }\n  if (x < 0) {\n    throw new Error('x must be greater than 0')\n  }\n  let result = ''\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\nmodule.exports = {\n  changeBase,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return h * (a / 2);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea"}
{"task_id": "JavaScript/46", "prompt": "/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  if (n === 8) {\n    return 7;\n  }\n  if (n === 9) {\n    return 8;\n  }\n  if (n === 10) {\n    return 9;\n  }\n  if (n === 11) {\n    return 10;\n  }\n  if (n === 12) {\n    return 11;\n  }\n  if (n === 13) {\n    return 12;\n  }\n  if (n === 14) {\n    return 13;\n  }\n  if (n === 15) {\n    return 14;\n  }\n  if (n === 16) {\n    return 15;\n  }\n  if (n === 17) {\n    return 16;\n  }\n  if (n === 18) {\n    return 17;\n  }\n  if (n === 19) {\n    return 18;\n  }\n  if (n === 20) {\n    return 19;\n  }\n  if (n === 21) {\n    return 20;\n  }\n  if (n === 22) {\n    return 21;\n  }\n  if (n === 23) {\n    return 22;\n  }\n  if (n === 24) {\n    return 23;\n  }\n  if (n === 25) {\n    return 24;\n  }\n  if (n === 26) {\n    return 25;\n  }\n  if (n === 27) {\n    return 26;\n  }\n  if (n === 28) {\n    return 27;\n  }\n  if (n === 29) {\n    return 28;\n  }\n  if (n === 30) {\n    return 29;\n  }\n  if (n === 31) {\n    return 30;\n  }\n  if (n === 32) {\n    return 31;\n  }\n  if (n === 33) {\n    return 32;\n  }\n  if (n === 34) {\n    return 33;\n  }\n  if (n === 35) {\n    return 34;\n  }\n  if (n === 36) {\n    return 35;\n  }\n  if (n === 37) {\n    return 36;\n  }\n  if (n === 38) {\n    return 37;\n  }\n  if (n === 39) {\n    return 38;\n  }\n  if (n === 40) {\n    return 39;\n  }\n  if (n === 41) {\n    return 40;\n  }\n  if (n === 42) {\n    return 41;\n  }\n  if (n === 43) {\n    return 42;\n  }\n  if (n === 44) {\n    return 43;\n  }\n  if (n === 45) {\n    return 44;\n  }\n  if (n === 46) {\n    return 45;\n  }\n  if (n === 47) {\n    return 46;\n  }\n  if (n === 48) {\n    return 47;\n  }\n  if (n === 49) {\n    return 48;\n  }\n  if (n === 50) {\n    return 49;\n  }\n  if (n === 51) {\n    return 50;\n  }\n  if (n === 52) {\n    return 51;\n  }\n  if (n === 53) {\n    return 52;\n  }\n  if (n === 54) {\n    return 53;\n  }\n  if (n === 55) {\n    return 54;\n  }\n  if (n === 56) {\n    return 55;\n  }\n  if (n === 57) {\n    return 56;\n  }\n  if (n === 58) {\n    return 57;\n  }\n  if (n === 59) {\n    return 58;\n  }\n  if (n === 60) {\n    return 59;\n  }\n  if (n === 61) {\n    return 60;\n  }\n  if (n === 62) {\n    return 61;\n  }\n  if (n === 63) {\n    return 62;\n  }\n  if (n === 64) {\n    return 63;\n  }\n  if (n === 65) {\n    return 64;\n  }\n  if (n === 66) {\n    return 65;\n  }\n  if (n === 67) {\n    return 66;\n  }\n  if (n === 68) {\n    return 67;\n  }\n  if (n === 69) {\n    return 68;\n  }\n  if (n === 70) {\n    return 69;\n  }\n  if (n === 71) {\n    return 70;\n  }\n  if (n === 72) {\n    return 71;\n  }\n  if (n === 73) {\n    return 72;\n  }\n  if (n === 74) {\n    return 73;\n  }\n  if (n === 75) {\n    return 74;\n  }\n  if (n === 76) {\n    return 75;\n  }\n  if (n === 77) {\n"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Empty list');\n  }\n  let n = l.length;\n  let m = n / 2;\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let k = (i + j) >> 1;\n    if (l[k] < l[j]) {\n      i = k + 1;\n    } else if (l[k] > l[j]) {\n      j = k;\n    } else {\n      break;\n    }\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let str = text.split('').reverse().join('');\n  return str === text;\n};\n\nmodule.exports = {\n  isPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) return 1\n  let i = 0\n  while (n > 0) {\n    n = n % p\n    i++\n  }\n  return i\n}\n\nmodule.exports = modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) - 5 + \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst decodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\nconst encodeShift = (s) => { \n  return returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = text.toLowerCase();\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all num b ers in t he list l are between threshold t and threshold t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  for (let i = 0; i <"}
{"task_id": "JavaScript/53", "prompt": "/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*\n  Return n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsCount = brackets.split('').length;\n  const bracketsCounts = brackets.split('').map((bracket) => {\n    return bracket.length;\n  });\n  return bracketsCounts.every((count) => {\n    return count === bracketsCount;\n  });\n};\n\nmodule.exports = {\n  correctBracketing,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    } else if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const res = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      res.push(l1[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return res;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i++\n  }\n  return n\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketChar = \"\";\n  let bracketCharIndex = 0;\n  let bracketCharCount = 0;\n  let bracketCharCountIndex = 0;\n  let bracketCharCountIndex2 = 0;\n  let bracketCharCountIndex3 = 0;\n  let bracketCharCountIndex4 = 0;\n  let bracketCharCountIndex5 = 0;\n  let bracketCharCountIndex6 = 0;\n  let bracketCharCountIndex7 = 0;\n  let bracketCharCountIndex8 = 0;\n  let bracketCharCountIndex9 = 0;\n  let bracketCharCountIndex10 = 0;\n  let bracketCharCountIndex11 = 0;\n  let bracketCharCountIndex12 = 0;\n  let bracketCharCountIndex13 = 0;\n  let bracketCharCountIndex14 = 0;\n  let bracketCharCountIndex15 = 0;\n  let bracketCharCountIndex16 = 0;\n  let bracketCharCountIndex17 = 0;\n  let bracketCharCountIndex18 = 0;\n  let bracketCharCountIndex19 = 0;\n  let bracketCharCountIndex20 = 0;\n  let bracketCharCountIndex21 = 0;\n  let bracketCharCountIndex22 = 0;\n  let bracketCharCountIndex23 = 0;\n  let bracketCharCountIndex24 = 0;\n  let bracketCharCountIndex25 = 0;\n  let bracketCharCountIndex26 = 0;\n  let bracketCharCountIndex27 = 0;\n  let bracketCharCountIndex28 = 0;\n  let bracketCharCountIndex29 = 0;\n  let bracketCharCountIndex30 = 0;\n  let bracketCharCountIndex31 = 0;\n  let bracketCharCountIndex32 = 0;\n  let bracketCharCountIndex33 = 0;\n  let bracketCharCountIndex34 = 0;\n  let bracketCharCountIndex35 = 0;\n  let bracketCharCountIndex36 = 0;\n  let bracketCharCountIndex37 = 0;\n  let bracketCharCountIndex38 = 0;\n  let bracketCharCountIndex39 = 0;\n  let bracketCharCountIndex40 = 0;\n  let bracketCharCountIndex41 = 0;\n  let bracketCharCountIndex42 = 0;\n  let bracketCharCountIndex43 = 0;\n  let bracketCharCountIndex44 = 0;\n  let bracketCharCountIndex45 = 0;\n  let bracketCharCountIndex46 = 0;\n  let bracketCharCountIndex47 = 0;\n  let bracketCharCountIndex48 = 0;\n  let bracketCharCountIndex49 = 0;\n  let bracketCharCountIndex50 = 0;\n  let bracketCharCountIndex51 = 0;\n  let bracketCharCountIndex52 = 0;\n  let bracketCharCountIndex53 = 0;\n  let bracketCharCountIndex54 = 0;\n  let bracketCharCountIndex55 = 0;\n  let bracketCharCountIndex56 = 0;\n  let bracketCharCountIndex57 = 0;\n  let bracketCharCountIndex58 = 0;\n  let bracketCharCountIndex59 = 0;\n  let bracketCharCountIndex60 = 0;\n  let bracketCharCountIndex61 = 0;\n  let bracketCharCountIndex62 = 0;\n  let bracketCharCountIndex63 = 0;\n  let bracketCharCountIndex64 = 0;\n  let bracketCharCountIndex65 = 0;\n  let bracketCharCountIndex66 = 0;\n  let bracketCharCountIndex67 = 0;\n  let bracketCharCountIndex68 = 0;\n  let bracketCharCountIndex69 = 0;\n  let bracketCharCountIndex70 = 0;\n  let bracketCharCountIndex71 = 0;\n  let bracketCharCountIndex72 = 0;\n  let bracketCharCountIndex73 = 0;\n  let bracketCharCountIndex74 = 0;\n  let bracketCharCountIndex75 = 0;\n  let bracketCharCountIndex76 = 0;\n  let bracketCharCountIndex77 = 0;\n  let bracketCharCountIndex78 = 0;\n  let bracketCharCountIndex79 = 0;\n  let bracketCharCountIndex80 = 0;\n  let bracketCharCountIndex81 = 0;\n  let bracketCharCountIndex82 = 0;\n  let bracketCharCountIndex83 = 0;\n  let bracketCharCountIndex84 = 0;\n  let bracketCharCountIndex85 = 0;\n  let bracketCharCountIndex86 = 0;\n  let bracketCharCountIndex87 = 0;\n  let bracketCharCountIndex88 = 0;\n  let bracketCharCountIndex89 = 0;\n  let bracketCharCountIndex90 = 0;\n  let bracketCharCountIndex91 = 0;\n  let bracketCharCountIndex92 = 0;\n  let bracketCharCountIndex93 = 0;\n  let bracketCharCountIndex94 = 0;\n  let bracketCharCountIndex95 = 0;\n  let bracketCharCountIndex96 = 0;\n  let bracketCharCountIndex97 = 0;\n  let bracketCharCountIndex98 = 0;\n  let bracketCharCountIndex99 = 0;\n  let bracketCharCountIndex100 = 0;\n  let bracketCharCountIndex101 = 0;\n  let bracketCharCountIndex102 = 0;\n  let bracketCharCountIndex103 = 0;\n  let bracketCharCountIndex104 = 0;\n  let bracketCharCountIndex105 = 0;\n  let bracketCharCountIndex106 = 0;\n  let bracketCharCountIndex107 = 0;\n  let bracketCharCountIndex108 = 0;\n  let bracketCharCountIndex109 = 0;\n  let bracketCharCountIndex110 = 0;\n  let bracketCharCountIndex111 = 0;\n  let bracketCharCountIndex112 = 0;\n  let bracketCharCountIndex113 = 0;\n  let bracketCharCountIndex114 = 0;\n  let bracketCharCountIndex115 = 0;\n  let bracketCharCountIndex116 = 0;\n  let bracketCharCountIndex117 = 0;\n  let bracketCharCountIndex118 = 0;\n  let bracketCharCountIndex119 = 0;\n  let bracketCharCountIndex120 = 0;\n  let bracketCharCountIndex121 = 0;\n  let bracketCharCountIndex122 = 0;\n  let bracketCharCountIndex123 = 0;\n  let bracketCharCountIndex124 = 0;\n  let bracketCharCountIndex125 = 0;\n  let bracketCharCountIndex126 = 0;\n  "}
{"task_id": "JavaScript/62", "prompt": "/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    res.push(xs[i] * (i + 1));\n  }\n  return res;\n};\n\n/*\n  x^2 + x + 1\n  x^3 + x^2 + x + 1\n  x^4 + x^3 + x^2 + x + 1\n  x^5 + x^4 + x^3 + x^2 + x + 1\n  x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^26 + x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 +"}
{"task_id": "JavaScript/63", "prompt": "/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return 0;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ' , 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ', 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  while (i > 0) {\n    result += x % 10;\n    x = Math.floor(x / 10);\n    i--;\n  }\n  return result;\n};\n\nconst getDigits = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits;\n};\n\nconst getDigit = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits;\n};\n\nconst getDigitCount = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum2 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum3 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum4 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum5 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum6 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum7 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum8 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum9 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum10 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum11 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum12 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum13 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum14 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum15 = (x) => {\n  let digits = \"\";\n  let i = 0;\n  while (i < x) {\n    digits += x % 10;\n    x = Math.floor(x / 10);\n    i++;\n  }\n  return digits.length;\n};\n\nconst getDigitSum16 = (x) => {\n  let digits = \"\";\n"}
{"task_id": "JavaScript/66", "prompt": "/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconst test = () => {\n  console.log(digitSum(\"abcCd\"));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\" ,3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\",3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n  let total = 0;\n  let count = 0;\n  let totalFruits = 0;\n  let totalOranges = 0;\n  let totalApples = 0;\n  let totalMangos = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let minIndex = 0;\n  let result = [];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min === arr[0]) {\n    result.push([min, minIndex]);\n  } else {\n    result.push([min, minIndex]);\n    result.push([arr[0], 0]);\n  }\n  return result;\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max && lst[i] > 0) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integer s , return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = minIndex; i < maxIndex; i++) {\n    result.push(lst[i]);\n  }\n  for (let i = maxIndex; i < lst.length; i++) {\n    result.push(lst[i]);\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  return area === a || area === b || area === c? area : -1;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n  for (let i = 0; i < q.length; i++) {\n    if (q[i]!== q[q.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers , find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) {\n    return 0;\n  }\n\n  let min = arr.length;\n  let minIndex = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    let currMin = arr.length;\n    let currMinIndex = 0;\n\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === arr[j] + arr[i]) {\n        currMin = Math.min(currMin, j - i);\n        currMinIndex = j;\n      }\n    }\n\n    if (currMin < min) {\n      min = currMin;\n      minIndex = currMinIndex;\n    }\n  }\n\n  return minIndex + 1;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars , return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let totalMatch = [];\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      totalMatch.push(lst1[i]);\n    }\n    i++;\n  }\n  return totalMatch;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise .\n Knowi ng that (a) is less then  100 .\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }"}
{"task_id": "JavaScript/76", "prompt": "/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\nconsole.log(isSimplePower(5, 4));\nconsole.log(isSimplePower(5, 5));\nconsole.log(isSimplePower(5, 6));\nconsole.log(isSimplePower(5, 7));\nconsole.log(isSimplePower(5, 8));\nconsole.log(isSimplePower(5, 9));\nconsole.log(isSimplePower(5, 10));\nconsole.log(isSimplePower(5, 11));\nconsole.log(isSimplePower(5, 12));\nconsole.log(isSimplePower(5, 13));\nconsole.log(isSimplePower(5, 14));\nconsole.log(isSimplePower(5, 15));\nconsole.log(isSimplePower(5, 16));\nconsole.log(isSimplePower(5, 17));\nconsole.log(isSimplePower(5, 18));\nconsole.log(isSimplePower(5, 19));\nconsole.log(isSimplePower(5, 20));\nconsole.log(isSimplePower(5, 21));\nconsole.log(isSimplePower(5, 22));\nconsole.log(isSimplePower(5, 23));\nconsole.log(isSimplePower(5, 24));\nconsole.log(isSimplePower(5, 25));\nconsole.log(isSimplePower(5, 26));\nconsole.log(isSimplePower(5, 27));\nconsole.log(isSimplePower(5, 28));\nconsole.log(isSimplePower(5, 29));\nconsole.log(isSimplePower(5, 30));\nconsole.log(isSimplePower(5, 31));\nconsole.log(isSimplePower(5, 32));\nconsole.log(isSimplePower(5, 33));\nconsole.log(isSimplePower(5, 34));\nconsole.log(isSimplePower(5, 35));\nconsole.log(isSimplePower(5, 36));\nconsole.log(isSimplePower(5, 37));\nconsole.log(isSimplePower(5, 38));\nconsole.log(isSimplePower(5, 39));\nconsole.log(isSimplePower(5, 40));\nconsole.log(isSimplePower(5, 41));\nconsole.log(isSimplePower(5, 42));\nconsole.log(isSimplePower(5, 43));\nconsole.log(isSimplePower(5, 44));\nconsole.log(isSimplePower(5, 45));\nconsole.log(isSimplePower(5, 46));\nconsole.log(isSimplePower(5, 47));\nconsole.log(isSimplePower(5, 48));\nconsole.log(isSimplePower(5, 49));\nconsole.log(isSimplePower(5, 50));\nconsole.log(isSimplePower(5, 51));\nconsole.log(isSimplePower(5, 52));\nconsole.log(isSimplePower(5, 53));\nconsole.log(isSimplePower(5, 54));\nconsole.log(isSimplePower(5, 55));\nconsole.log(isSimplePower(5, 56));\nconsole.log(isSimplePower(5, 57));\nconsole.log(isSimplePower(5, 58));\nconsole.log(isSimplePower(5, 59));\nconsole.log(isSimplePower(5, 60));\nconsole.log(isSimplePower(5, 61));\nconsole.log(isSimplePower(5, 62));\nconsole.log(isSimplePower(5, 63));\nconsole.log(isSimplePower(5, 64));\nconsole.log(isSimplePower(5, 65));\nconsole.log(isSimplePower(5, 66));\nconsole.log(isSimplePower(5, 67));\nconsole.log(isSimplePower(5, 68));\nconsole.log(isSimplePower(5, 69));\nconsole.log(isSimplePower(5, 70));\nconsole.log(isSimplePower(5, 71));\nconsole.log(isSimplePower(5, 72));\nconsole.log(isSimplePower(5, 73));\nconsole.log(isSimplePower(5, 74));\nconsole.log(isSimplePower(5, 75));\nconsole.log(isSimplePower(5, 76));\nconsole.log(isSimplePower(5, 77));\nconsole.log(isSimplePower(5, 78));\nconsole.log(isSimplePower(5, 79));\nconsole.log(isSimplePower(5, 80));\nconsole.log(isSimplePower(5, 81));\nconsole.log(isSimplePower(5, 82));\nconsole.log(isSimplePower(5, 83));\nconsole.log(isSimplePower(5, 84));\nconsole.log(isSimplePower(5, 85));\nconsole.log(isSimplePower(5, 86));\nconsole.log(isSimplePower(5, 87));\nconsole.log(isSimplePower(5, 88));\nconsole.log(isSimplePower(5, 89));\nconsole.log(isSimplePower(5, 90));\nconsole.log(isSimplePower(5, 91));\nconsole.log(isSimplePower(5, 92));\nconsole.log(isSimplePower(5, 93));\nconsole.log(isSimplePower(5, 94));\nconsole.log(isSimplePower(5, 95));\nconsole.log(isSimplePower(5, 96));\nconsole.log(isSimplePower(5, 97));\nconsole.log(isSimplePower(5, 98));\nconsole.log(isSimple"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a % 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59 == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 == 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0 && a % 101 == 0 && a % 103 == 0 && a % 107 == 0 && a % 109 == 0 && a % 113 == 0 && a % 127 == 0 && a % 131 == 0 && a % 137 == 0 && a % 139 == 0 && a % 149 == 0 && a % 151 == 0 && a % 157 == 0 && a % 163 == 0 && a % 167 == 0 && a % 173 == 0 && a % 179 == 0 && a % 181 == 0 && a % 191 == 0 && a % 193 == 0 && a % 197 == 0 && a % 199 == 0 && a % 211 == 0 && a % 223 == 0 && a % 227 == 0 && a % 229 == 0 && a % 233 == 0 && a % 239 == 0 && a % 241 == 0 && a % 251 == 0 && a % 257 == 0 && a % 263 == 0 && a % 269 == 0 && a % 271 == 0 && a % 277 == 0 && a % 281 == 0 && a % 283 == 0 && a % 293 == 0 && a % 307 == 0 && a % 311 == 0 && a % 313 == 0 && a % 317 == 0 && a % 331 == 0 && a % 337 == 0 && a % 347 == 0 && a % 349 == 0 && a % 353 == 0 && a % 359 == 0 && a % 367 == 0 && a % 373 == 0 && a % 379 == 0 && a % 383 == 0 && a % 389 == 0 && a % 397 == 0 && a % 401 == 0 && a % 409 == 0 && a % 419 == 0 && a % 421 == 0 && a % 431 == 0 && a % 433 == 0 && a % 439 == 0 && a % 443 == 0 && a % 449 == 0 && a % 457 == 0 && a % 461 == 0 && a % 463 == 0 && a % 467 == 0 && a % 479 == 0 && a % 487 == 0 && a % 491 == 0 && a % 499 == 0 && a % 503 == 0 && a % 509 == 0 && a % 521 == 0 && a % 523 == 0 && a % 541 == 0 && a % 547 == 0 && a % 557 == 0 && a % 563 == 0 && a % 569 == 0 && a % 571 == 0 && a % 577 == 0 && a % 587 == 0 && a % 593 == 0 && a % 599 == 0 && a % 601 == 0 && a % 607 == 0 && a % 613 == 0 && a % 617 == 0 && a % 619 == 0 && a % 631 == 0 && a % 641 == 0 && a % 643 == 0 && a % 647 == 0 && a % 653 == 0 && a % 659 == 0 && a % 661 == 0 && a % 673 == 0 && a % 677 == 0 && a % 683 == 0 && a % 691 == 0 && a % 701 == 0 && a % 709 == 0 && a % 719 == 0 && a % 727 == 0 && a % 733 == 0 && a % 739 == 0 && a % 743 == 0 && a % 751 == 0 && a % 757 == 0 && a % 761 == 0 && a % 769 == 0 && a % 773 == 0 && a % 787 == 0 && a % 797 == 0 && a % 809 == 0 && a % 811 == 0 && a % 821 == 0 && a % 823 == 0 && a % 827 == 0 && a % 829 == 0 && a % 839 == 0 && a % 853 == 0 && a % 857 == 0 && a % 859 == 0 && a % 863 == 0 && a % 867 == 0 && a % 871 == 0 && a % 877 == 0 && a % 881 == 0 && a % 883 == 0 && a % 887 == 0 && a % 907 == 0 && a % 917 == 0 && a % 919 == 0 && a % 929 == 0 && a % 937 == 0 && a % 941 == 0 && a % 947 == 0 && a % 953 == 0 && a % 967 == 0 && a % 971 == 0 && a % 977 == 0 && a % 983 == 0 && a % 991 == 0 && a % 997 == 0 && a % 1009 == 0 && a % 1013 == 0 && a % 1019 == 0 && a % 1021 == 0 && a % 1031 == 0 && a % 1033 == 0 && a % 1039 == 0 && a % 1049 == 0 && a % 1051 == 0 && a % 1061 == 0 && a % 1063 == 0 && a % 1069 == 0 && a % 1087 == 0 && a % 1091 == 0 && a % 1093 == 0 && a % 1097 == 0 && a % 1103 == 0 && a % 1109 == 0 && a % 1117 == 0 && a % 1123 == 0 && a % 1129 == 0 && a % 1151 == 0 && a % 1163 == 0 && a % 1169 == 0 && a % 1179 == 0 && a % 1187 == 0 && a % 1193 == 0 && a % 1201 == 0 && a % 1213 == 0 && a % 1217 == 0 && a % 1223 == 0 && a % 1229 == 0 && a % 1231 == 0 && a % 1237 == 0 && a % 1249 == 0 && a % 1259 == 0 && a % 1277 == 0 && a % 1279 == 0 && a % 1283 == 0 && a % 1289 == 0 && a % 1297 == 0 && a % 1301 == 0 && a % 1303 == 0 && a % 1307 == 0"}
{"task_id": "JavaScript/78", "prompt": "/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      result += 1;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers2 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers3 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers4 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers5 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers6 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers7 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48 && digit <= 57) {\n      let prime = true;\n      let j = 0;\n      while (j < result.length) {\n        if (result[j] === digit) {\n          prime = false;\n          break;\n        }\n        j++;\n      }\n      if (prime) {\n        result.push(digit);\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\nconst primeNumbers8 = (num) => {\n  let result = [];\n  let i = 0;\n  while (i < num.length) {\n    let digit = num.charCodeAt(i);\n    if (digit >= 48"}
{"task_id": "JavaScript/79", "prompt": "/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryStringTemp = \"\";\n  let binaryStringTempTemp = \"\";\n  let binaryStringTempTempTemp = \"\";\n  let binaryStringTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = \"\";\n  let binaryStringTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp"}
{"task_id": "JavaScript/80", "prompt": "/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      count++;\n    }\n  }\n  return count >= 3;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = (grades[0] + grades[1] + grades[2] + grades[3] + grades[4]) / 5;\n  return letterGrade.toString().split('').map((grade, index) => {\n    if (index === 0) {\n      return `${grade}+`;\n    }\n    if (index === 1) {\n      return `${grade}-`;\n    }\n    if (index === 2) {\n      return `${grade}+`;\n    }\n    if (index === 3) {\n      return `${grade}-`;\n    }\n    if (index === 4) {\n      return `${grade}+`;\n    }\n  });\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsOneEnds(n - 1) + startsOneEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 2. \n */\ncon st startsTwoEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsTwoEnds(n - 1) + startsTwoEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 3. \n */\ncon st startsThreeEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsThreeEnds(n - 1) + startsThreeEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 4. \n */\ncon st startsFourEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsFourEnds(n - 1) + startsFourEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 5. \n */\ncon st startsFiveEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsFiveEnds(n - 1) + startsFiveEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 6. \n */\ncon st startsSixEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsSixEnds(n - 1) + startsSixEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 7. \n */\ncon st startsSevenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsSevenEnds(n - 1) + startsSevenEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 8. \n */\ncon st startsEightEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsEightEnds(n - 1) + startsEightEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 9. \n */\ncon st startsNineEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsNineEnds(n - 1) + startsNineEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 10. \n */\ncon st startsTenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsTenEnds(n - 1) + startsTenEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 11. \n */\ncon st startsElevenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsElevenEnds(n - 1) + startsElevenEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 12. \n */\ncon st startsTwelveEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsTwelveEnds(n - 1) + startsTwelveEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 13. \n */\ncon st startsThirteenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsThirteenEnds(n - 1) + startsThirteenEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 14. \n */\ncon st startsFourteenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsFourteenEnds(n - 1) + startsFourteenEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 15. \n */\ncon st startsFifteenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsFifteenEnds(n - 1) + startsFifteenEnds(n - 2);\n};\n\n/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 16. \n */\ncon st startsSixteenEnds = (n) = > {\n  if (n < 1) {\n    return 0;\n  }\n  return startsSixteenEnds(n"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  return even.concat(lst.filter((x) => x % 2 === 1));\n};\n\nconst add2 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  return even.concat(odd);\n};\n\nconst add3 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add4 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add5 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add6 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add7 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add8 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add9 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add10 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add11 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add12 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add13 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add14 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add15 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add16 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add17 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add18 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add19 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add20 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even.concat(odd);\n  return evenOdd;\n};\n\nconst add21 = (lst) => {\n  const even = lst.filter((x) => x % 2 === 0);\n  const odd = lst.filter((x) => x % 2 === 1);\n  const evenOdd = even."}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = ''\n  let words = s.split(' ')\n  let len = words.length\n  let i = 0\n  while (i < len) {\n    let word = words[i]\n    let j = i\n    while (j < len) {\n      let nextWord = words[j]\n      if (word === nextWord) {\n        words.splice(j, 1)\n        len--\n      } else {\n        j++\n      }\n    }\n    i++\n  }\n  for (let k = 0; k < len; k++) {\n    let word = words[k]\n    result += word.charAt(0).toUpperCase() + word.slice(1)\n  }\n  return result\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es ,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2) ...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2)...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n      cols.push(0);\n      i++;\n    } else {\n      while (j < lst[i].length) {\n        if (lst[i][j] === x) {\n          res.push([i, j]);\n          break;\n        } else {\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n  rows.sort((a, b) => cols[a] - cols[b]);\n  cols.sort();\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n      cols.push(0);\n      i++;\n    } else {\n      while (j < lst[i].length) {\n        if (lst[i][j] === x) {\n          res.push([i, j]);\n          break;\n        } else {\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n  rows.sort((a, b) => cols[a] - cols[b]);\n  cols.sort();\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n      cols.push(0);\n      i++;\n    } else {\n      while (j < lst[i].length) {\n        if (lst[i][j] === x) {\n          res.push([i, j]);\n          break;\n        } else {\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n  rows.sort((a, b) => cols[a] - cols[b]);\n  cols.sort();\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n      cols.push(0);\n      i++;\n    } else {\n      while (j < lst[i].length) {\n        if (lst[i][j] === x) {\n          res.push([i, j]);\n          break;\n        } else {\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n  rows.sort((a, b) => cols[a] - cols[b]);\n  cols.sort();\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n      cols.push(0);\n      i++;\n    } else {\n      while (j < lst[i].length) {\n        if (lst[i][j] === x) {\n          res.push([i, j]);\n          break;\n        } else {\n          j++;\n        }\n      }\n      i++;\n    }\n  }\n  rows.sort((a, b) => cols[a] - cols[b]);\n  cols.sort();\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  let res = [];\n  let rows = [];\n  let cols = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      rows.push(i);\n      cols.push(0);\n      i++;\n    } else {\n      while (j < lst[i].length) {\n        if (lst[i][j] === x) {\n          res.push([i, j]);\n          break;\n        } else {\n          j++;\n        }"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  let i = 0;\n  let j = array.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (array[i] + array[j] > 0) {\n      if (array[i] + array[j] % 2 === 0) {\n        array[k] = array[i];\n        i++;\n      } else {\n        array[k] = array[j];\n        j--;\n      }\n    } else {\n      if (array[i] + array[j] % 2 === 1) {\n        array[k] = array[i];\n        i++;\n      } else {\n        array[k] = array[j];\n        j--;\n      }\n    }\n    k++;\n  }\n  return array;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < s.length) {\n    temp = s.charAt(i);\n    if (temp >= 'a' && temp <= 'z') {\n      temp = temp.toUpperCase();\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < s.length) {\n    temp = s.charAt(i);\n    if (temp >= 'a' && temp <= 'z') {\n      temp = temp.toLowerCase();\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  console.log(encrypt('hi'));\n  console.log(decrypt('lm'));\n  console.log(decrypt('ewhjklnop'));\n  console.log(decrypt('kj'));\n  console.log(decrypt('ix'));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (lst[mid] < lst[j]) {\n      i = mid + 1;\n    } else if (lst[mid] > lst[j]) {\n      j = mid;\n    } else {\n      return lst[mid];\n    }\n  }\n  return null;\n};\n\nconst test = () => {\n  let lst = [1, 2, 3, 4, 5];\n  console.log(nextSmallest(lst));\n  lst = [5, 1, 4, 3, 2];\n  console.log(nextSmallest(lst));\n  lst = [];\n  console.log(nextSmallest(lst));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by' .', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt43 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt44 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt45 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt46 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt47 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt48 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt49 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt50 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt51 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt52 = (x, y, z) => {\n  return x + y === z;\n};\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters , repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let messageLength = message.length;\n  for (let i = 0; i < messageLength; i++) {\n    let letter = message[i];\n    let letterLength = letter.length;\n    let letterUpper = letter.toUpperCase();\n    let letterLower = letter.toLowerCase();\n    let letterSwap = '';\n    for (let j = 0; j < letterLength; j++) {\n      let letterSwap = letter.charAt(j);\n      if (letterSwap === letterLower) {\n        letterSwap = letterUpper;\n      } else if (letterSwap === letterUpper) {\n        letterSwap = letterLower;\n      }\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0).toUpperCase() + letterSwap.charAt(1).toLowerCase();\n      letterSwap = letterSwap.charAt(0"}
{"task_id": "JavaScript/94", "prompt": "/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let isPrime = true;\n    for (let j = 2; j < num; j++) {\n      if (num % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      max = Math.max(max, num);\n      sum += num;\n    }\n  }\n  return max;\n};\n\nconst test = (lst) => {\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length} ${lst}`);\n  console.log(`${lst.length}"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let keysLength = keys.length;\n  let i = 0;\n  while (i < keysLength) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value!== \"string\") {\n      return false;\n    }\n    let lowerCaseValue = value.toLowerCase();\n    let upperCaseValue = value.toUpperCase();\n    if (lowerCaseValue!== upperCaseValue) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [2, 3];\n  if (n === 3) return [2, 3, 5, 7];\n  if (n === 4) return [2, 3, 5, 7, 11, 13, 17, 19];\n  if (n === 5) return [2, 3, 5, 7, 11, 13, 17];\n  if (n === 6) return [2, 3, 5, 7, 11, 13, 17, 19];\n  if (n === 7) return [2, 3, 5, 7, 11, 13, 17, 19];\n  if (n === 8) return [2, 3, 5, 7, 11, 13, 17, 19, 23];\n  if (n === 9) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n  if (n === 10) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37];\n  if (n === 11) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49];\n  if (n === 12) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61];\n  if (n === 13) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73];\n  if (n === 14) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89];\n  if (n === 15) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117];\n  if (n === 16) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137];\n  if (n === 17) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151];\n  if (n === 18) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181];\n  if (n === 19) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217];\n  if (n === 20) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289];\n  if (n === 21) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433];\n  if (n === 22) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617];\n  if (n === 23) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861];\n  if (n === 24) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261];\n  if (n === 25) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261, 1789];\n  if (n === 26) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261, 1789, 2189];\n  if (n === 27) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261, 1789, 2189, 4189];\n  if (n === 28) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261, 1789, 2189, 4189, 6561];\n  if (n === 29) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261, 1789, 2189, 4189, 6561, 10935];\n  if (n === 30) return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 49, 61, 73, 89, 117, 137, 151, 181, 217, 289, 433, 617, 861, 1261, 1789, 2189, 4189, 6561, 12961];\n  if (n === 31) return [2, 3, 5, 7, 11, 13, 17, 19"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = parseInt(a, 10)\n  let b_int = parseInt(b, 10)\n  let a_unit = a_int % 10\n  let b_unit = b_int % 10\n  let a_mult = a_int / 10\n  let b_mult = b_int / 10\n  let a_mult_b = a_mult * b_mult\n  let a_mult_b_unit = a_mult_b % 10\n  let b_mult_a = b_mult * a_mult\n  let b_mult_a_unit = b_mult_a % 10\n  let a_mult_b_unit_mult = a_mult_b_unit * b_mult_a_unit\n  let a_mult_b_unit_mult_unit = a_mult_b_unit_mult % 10\n  return a_mult_b_unit_mult_unit\n}\n\nmodule.exports = multiply\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit .If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseFloat(value);\n  let num2 = num;\n  let num3 = num;\n  let num4 = num;\n  let num5 = num;\n  let num6 = num;\n  let num7 = num;\n  let num8 = num;\n  let num9 = num;\n  let num10 = num;\n  let num11 = num;\n  let num12 = num;\n  let num13 = num;\n  let num14 = num;\n  let num15 = num;\n  let num16 = num;\n  let num17 = num;\n  let num18 = num;\n  let num19 = num;\n  let num20 = num;\n  let num21 = num;\n  let num22 = num;\n  let num23 = num;\n  let num24 = num;\n  let num25 = num;\n  let num26 = num;\n  let num27 = num;\n  let num28 = num;\n  let num29 = num;\n  let num30 = num;\n  let num31 = num;\n  let num32 = num;\n  let num33 = num;\n  let num34 = num;\n  let num35 = num;\n  let num36 = num;\n  let num37 = num;\n  let num38 = num;\n  let num39 = num;\n  let num40 = num;\n  let num41 = num;\n  let num42 = num;\n  let num43 = num;\n  let num44 = num;\n  let num45 = num;\n  let num46 = num;\n  let num47 = num;\n  let num48 = num;\n  let num49 = num;\n  let num50 = num;\n  let num51 = num;\n  let num52 = num;\n  let num53 = num;\n  let num54 = num;\n  let num55 = num;\n  let num56 = num;\n  let num57 = num;\n  let num58 = num;\n  let num59 = num;\n  let num60 = num;\n  let num61 = num;\n  let num62 = num;\n  let num63 = num;\n  let num64 = num;\n  let num65 = num;\n  let num66 = num;\n  let num67 = num;\n  let num68 = num;\n  let num69 = num;\n  let num70 = num;\n  let num71 = num;\n  let num72 = num;\n  let num73 = num;\n  let num74 = num;\n  let num75 = num;\n  let num76 = num;\n  let num77 = num;\n  let num78 = num;\n  let num79 = num;\n  let num80 = num;\n  let num81 = num;\n  let num82 = num;\n  let num83 = num;\n  let num84 = num;\n  let num85 = num;\n  let num86 = num;\n  let num87 = num;\n  let num88 = num;\n  let num89 = num;\n  let num90 = num;\n  let num91 = num;\n  let num92 = num;\n  let num93 = num;\n  let num94 = num;\n  let num95 = num;\n  let num96 = num;\n  let num97 = num;\n  let num98 = num;\n  let num99 = num;\n  let num100 = num;\n  let num101 = num;\n  let num102 = num;\n  let num103 = num;\n  let num104 = num;\n  let num105 = num;\n  let num106 = num;\n  let num107 = num;\n  let num108 = num;\n  let num109 = num;\n  let num110 = num;\n  let num111 = num;\n  let num112 = num;\n  let num113 = num;\n  let num114 = num;\n  let num115 = num;\n  let num116 = num;\n  let num117 = num;\n  let num118 = num;\n  let num119 = num;\n  let num120 = num;\n  let num121 = num;\n  let num122 = num;\n  let num123 = num;\n  let num124 = num;\n  let num125 = num;\n  let num126 = num;\n  let num127 = num;\n  let num128 = num;\n  let num129 = num;\n  let num130 = num;\n  let num131 = num;\n  let num132 = num;\n  let num133 = num;\n  let num134 = num;\n  let num135 = num;\n  let num136 = num;\n  let num137 = num;\n  let num138 = num;\n  let num139 = num;\n  let num140 = num;\n  let num141 = num;\n  let num142 = num;\n  let num143 = num;\n  let num144 = num;\n  let num145 = num;\n  let num146 = num;\n  let num147 = num;\n  let num148 = num;\n  let num149 = num;\n  let num150 = num;\n  let num151 = num;\n  let num152 = num;\n  let num153 = num;\n  let num154 = num;\n  let num155 = num;\n  let num156 = num;\n  let num157 = num;\n  let num158 = num;\n  let num159 = num;\n  let num160 = num;\n  let num161 = num;\n  let num162 = num;\n  let num163 = num;\n  let num164 = num;\n  let num165 = num;\n  let num166 = num;\n  let num167 = num;\n  let num168 = num;\n  let num169 = num;\n  let num170 = num;\n  let num"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile16 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile17 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile18 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile19 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n};\n\nconst makeAPile20 = (n) => {\n  let pile = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(n);\n    n = n - 1;\n    i = i + 1;\n  }\n  return pile;\n"}
{"task_id": "JavaScript/101", "prompt": "/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,| |\\s+/g);\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString12 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString13 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString14 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString15 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString16 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString17 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString18 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString19 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString20 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString21 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString22 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString23 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString24 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString25 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString26 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString27 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString28 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString29 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString30 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString31 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString32 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString33 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString34 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString35 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString36 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString37 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString38 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString39 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString40 = (s) => {\n  let words = s.split(/\\s+/g);\n  return words;\n};\n\nconst wordsString41 = (s) => {\n  let words ="}
{"task_id": "JavaScript/102", "prompt": "/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let i = x;\n  let j = y;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let x6 = 0;\n  let y6 = 0;\n  let x7 = 0;\n  let y7 = 0;\n  let x8 = 0;\n  let y8 = 0;\n  let x9 = 0;\n  let y9 = 0;\n  let x10 = 0;\n  let y10 = 0;\n  let x11 = 0;\n  let y11 = 0;\n  let x12 = 0;\n  let y12 = 0;\n  let x13 = 0;\n  let y13 = 0;\n  let x14 = 0;\n  let y14 = 0;\n  let x15 = 0;\n  let y15 = 0;\n  let x16 = 0;\n  let y16 = 0;\n  let x17 = 0;\n  let y17 = 0;\n  let x18 = 0;\n  let y18 = 0;\n  let x19 = 0;\n  let y19 = 0;\n  let x20 = 0;\n  let y20 = 0;\n  let x21 = 0;\n  let y21 = 0;\n  let x22 = 0;\n  let y22 = 0;\n  let x23 = 0;\n  let y23 = 0;\n  let x24 = 0;\n  let y24 = 0;\n  let x25 = 0;\n  let y25 = 0;\n  let x26 = 0;\n  let y26 = 0;\n  let x27 = 0;\n  let y27 = 0;\n  let x28 = 0;\n  let y28 = 0;\n  let x29 = 0;\n  let y29 = 0;\n  let x30 = 0;\n  let y30 = 0;\n  let x31 = 0;\n  let y31 = 0;\n  let x32 = 0;\n  let y32 = 0;\n  let x33 = 0;\n  let y33 = 0;\n  let x34 = 0;\n  let y34 = 0;\n  let x35 = 0;\n  let y35 = 0;\n  let x36 = 0;\n  let y36 = 0;\n  let x37 = 0;\n  let y37 = 0;\n  let x38 = 0;\n  let y38 = 0;\n  let x39 = 0;\n  let y39 = 0;\n  let x40 = 0;\n  let y40 = 0;\n  let x41 = 0;\n  let y41 = 0;\n  let x42 = 0;\n  let y42 = 0;\n  let x43 = 0;\n  let y43 = 0;\n  let x44 = 0;\n  let y44 = 0;\n  let x45 = 0;\n  let y45 = 0;\n  let x46 = 0;\n  let y46 = 0;\n  let x47 = 0;\n  let y47 = 0;\n  let x48 = 0;\n  let y48 = 0;\n  let x49 = 0;\n  let y49 = 0;\n  let x50 = 0;\n  let y50 = 0;\n  let x51 = 0;\n  let y51 = 0;\n  let x52 = 0;\n  let y52 = 0;\n  let x53 = 0;\n  let y53 = 0;\n  let x54 = 0;\n  let y54 = 0;\n  let x55 = 0;\n  let y55 = 0;\n  let x56 = 0;\n  let y56 = 0;\n  let x57 = 0;\n  let y57 = 0;\n  let x58 = 0;\n  let y58 = 0;\n  let x59 = 0;\n  let y59 = 0;\n  let x60 = 0;\n  let y60 = 0;\n  let x61 = 0;\n  let y61 = 0;\n  let x62 = 0;\n  let y62 = 0;\n  let x63 = 0;\n  let y63 = 0;\n  let x64 = 0;\n  let y64 = 0;\n  let x65 = 0;\n  let y65 = 0;\n  let x66 = 0;\n  let y66 = 0;\n  let x67 = 0;\n  let y67 = 0;\n  let x68 = 0;\n  let y68 = 0;\n  let x69 = 0;\n  let y69 = 0;\n  let x70 = 0;\n  let y70 = 0;\n  let x71 = 0;\n  let y71 = 0;\n  let x72 = 0;\n  let y72 = 0;\n  let x73 = 0;\n  let y73 = 0;\n  let x74 = 0;\n  let y74 = 0;\n  let x75 = 0;\n  let y75 = 0;\n  let x76 = 0;\n  let y76 = 0;\n  let x77 = 0;\n  let y77 = 0;\n  let x78 = 0;\n  let y78 = 0;\n  let x79 = 0;\n  let y79 = 0;\n  let x80 = 0;\n  let y80 = 0;\n  let x81 = 0;\n  let y81 = 0;\n  let x82 = 0;\n  let y82 = 0;\n  let x83 = 0;\n  let y83"}
{"task_id": "JavaScript/103", "prompt": "/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits2 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits3 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits4 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits5 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits6 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits7 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits8 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits9 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits10 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits11 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits12 = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nconst uniqueDigits13 = (x"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\" , \"Six\", \"Seven\", \"Eight\" , \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    let numStr = String(num);\n    let numLen = numStr.length;\n    let numName = numStr.charAt(0);\n    let numNameLen = numName.length;\n    let numNameStr = numName.toUpperCase();\n    let numNameStrLen = numNameStr.length;\n    let numNameStr2 = numNameStr.charAt(0);\n    let numNameStrLen2 = numNameStr2.length;\n    let numNameStr3 = numNameStr2.charAt(0);\n    let numNameStrLen3 = numNameStr3.length;\n    let numNameStr4 = numNameStr3.charAt(0);\n    let numNameStrLen4 = numNameStr4.length;\n    let numNameStr5 = numNameStr4.charAt(0);\n    let numNameStrLen5 = numNameStr5.length;\n    let numNameStr6 = numNameStr5.charAt(0);\n    let numNameStrLen6 = numNameStr6.length;\n    let numNameStr7 = numNameStr6.charAt(0);\n    let numNameStrLen7 = numNameStr7.length;\n    let numNameStr8 = numNameStr7.charAt(0);\n    let numNameStrLen8 = numNameStr8.length;\n    let numNameStr9 = numNameStr8.charAt(0);\n    let numNameStrLen9 = numNameStr9.length;\n    let numNameStr10 = numNameStr9.charAt(0);\n    let numNameStrLen10 = numNameStr10.length;\n    let numNameStr11 = numNameStr10.charAt(0);\n    let numNameStrLen11 = numNameStr11.length;\n    let numNameStr12 = numNameStr11.charAt(0);\n    let numNameStrLen12 = numNameStr12.length;\n    let numNameStr13 = numNameStr12.charAt(0);\n    let numNameStrLen13 = numNameStr13.length;\n    let numNameStr14 = numNameStr13.charAt(0);\n    let numNameStrLen14 = numNameStr14.length;\n    let numNameStr15 = numNameStr14.charAt(0);\n    let numNameStrLen15 = numNameStr15.length;\n    let numNameStr16 = numNameStr15.charAt(0);\n    let numNameStrLen16 = numNameStr16.length;\n    let numNameStr17 = numNameStr16.charAt(0);\n    let numNameStrLen17 = numNameStr17.length;\n    let numNameStr18 = numNameStr17.charAt(0);\n    let numNameStrLen18 = numNameStr18.length;\n    let numNameStr19 = numNameStr18.charAt(0);\n    let numNameStrLen19 = numNameStr19.length;\n    let numNameStr20 = numNameStr19.charAt(0);\n    let numNameStrLen20 = numNameStr20.length;\n    let numNameStr21 = numNameStr20.charAt(0);\n    let numNameStrLen21 = numNameStr21.length;\n    let numNameStr22 = numNameStr21.charAt(0);\n    let numNameStrLen22 = numNameStr22.length;\n    let numNameStr23 = numNameStr22.charAt(0);\n    let numNameStrLen23 = numNameStr23.length;\n    let numNameStr24 = numNameStr23.charAt(0);\n    let numNameStrLen24 = numNameStr24.length;\n    let numNameStr25 = numNameStr24.charAt(0);\n    let numNameStrLen25 = numNameStr25.length;\n    let numNameStr26 = numNameStr25.charAt(0);\n    let numNameStrLen26 = numNameStr26.length;\n    let numNameStr27 = numNameStr26.charAt(0);\n    let numNameStrLen27 = numNameStr27.length;\n    let numNameStr28 = numNameStr27.charAt(0);\n    let numNameStrLen28 = numNameStr28.length;\n    let numNameStr29 = numNameStr28.charAt(0);\n    let numNameStrLen29 = numNameStr29.length;\n    let numNameStr30 = numNameStr29.charAt(0);\n    let numNameStrLen30 = numNameStr30.length;\n    let numNameStr31 = numNameStr30.charAt(0);\n    let numNameStrLen31 = numNameStr31.length;\n    let numNameStr32 = numNameStr31.charAt(0);\n    let numNameStrLen32 = numNameStr32.length;\n    let numNameStr33 = numNameStr32.charAt(0);\n    let numNameStrLen33 = numNameStr33.length;\n    let numNameStr34 = numNameStr33.charAt(0);\n    let numNameStrLen34 = numNameStr34.length;\n    let numNameStr35 = numNameStr34.charAt(0"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 * ... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive ,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2 , and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N int egers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N int egers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall2 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall3 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall4 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall5 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall6 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall7 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall8 = (arr) => {\n  let last = arr[arr.length - 1];\n  let first = arr[0];\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > last) {\n      last = arr[i];\n      i++;\n    } else if (arr[i] < first) {\n      first = arr[i];\n      i++;\n    } else {\n      break;\n    }\n  }\n  if (i === arr.length) {\n    return true;\n  }\n  return false;\n};\n\nconst moveOneBall9 = (arr) => {\n  "}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1Len = lst1.length;\n  let lst2Len = lst2.length;\n  let i = 0;\n  let j = 0;\n  while (i < lst1Len && j < lst2Len) {\n    if (lst1[i] % 2 === 0) {\n      lst1[i] = lst2[j];\n      lst2[j] = lst1[i];\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return lst1.length === lst2.length? \"YES\" : \"NO\";\n};\n\nconst test = exchange([1, 2, 3, 4], [1, 5, 3, 4]);\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letters = test.split('');\n  let len = letters.length;\n  let i = 0;\n  while (i < len) {\n    let letter = letters[i];\n    if (histogram[letter]) {\n      histogram[letter] += 1;\n    } else {\n      histogram[letter] = 1;\n    }\n    count += 1;\n    i += 1;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  if (check === c) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = result.split('').reverse().join('');\n  "}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of string s , whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let num = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const result = nums.reduce((a, b) => a + b, 0);\n  return result;\n};\n\nmodule.exports = minSubArraySum;<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const grid_length = grid.length;\n  const grid_height = grid[0].length;\n\n  const buckets = [];\n  for (let i = 0; i < grid_length; i++) {\n    const bucket_height = grid[i].length;\n    buckets.push([]);\n    for (let j = 0; j < bucket_height; j++) {\n      buckets[i].push(0);\n    }\n  }\n\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1;\n      }\n    }\n  }\n\n  let max_bucket_height = 0;\n  let max_bucket_index = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_height = Math.max(max_bucket_height, j);\n        max_bucket_index = i;\n      }\n    }\n  }\n\n  let max_bucket_capacity = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity = Math.max(max_bucket_capacity, buckets[i][j]);\n      }\n    }\n  }\n\n  let max_bucket_capacity_index = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_index = i;\n      }\n    }\n  }\n\n  let max_bucket_capacity_index_height = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_index_height = Math.max(max_bucket_capacity_index_height, j);\n      }\n    }\n  }\n\n  let max_bucket_capacity_height = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_height = Math.max(max_bucket_capacity_height, j);\n      }\n    }\n  }\n\n  let max_bucket_capacity_height_index = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_height_index = i;\n      }\n    }\n  }\n\n  let max_bucket_capacity_height_index_height = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_height_index_height = Math.max(max_bucket_capacity_height_index_height, j);\n      }\n    }\n  }\n\n  let max_bucket_capacity_height_index_height_index = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_height_index_height_index = i;\n      }\n    }\n  }\n\n  let max_bucket_capacity_height_index_height_index_height = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] === 1) {\n        max_bucket_capacity_height_index_height_index_height = Math.max(max_bucket_capacity_height_index_height_index_height, j);\n      }\n    }\n  }\n\n  let max_bucket_capacity_height_index_height_index_height_index = 0;\n  for (let i = 0; i < grid_length; i++) {\n    for (let j = 0; j < grid_height; j++) {\n      if (buckets[i][j] ==="}
{"task_id": "JavaScript/116", "prompt": "/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let temp = arr.slice(0);\n  let result = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    if (temp[i] === 0) {\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] === 0) {\n        i++;\n      }\n    } else {\n      while (j < count && temp[i] > temp[j]) {\n        j++;\n      }\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] > temp[j]) {\n        temp[i] = temp[j];\n        i++;\n        while (i < temp.length && temp[i] > temp[j]) {\n          temp[i] = temp[j];\n          i++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst sortArray2 = (arr) => {\n  let temp = arr.slice(0);\n  let result = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    if (temp[i] === 0) {\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] === 0) {\n        i++;\n      }\n    } else {\n      while (j < count && temp[i] > temp[j]) {\n        j++;\n      }\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] > temp[j]) {\n        temp[i] = temp[j];\n        i++;\n        while (i < temp.length && temp[i] > temp[j]) {\n          temp[i] = temp[j];\n          i++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst sortArray3 = (arr) => {\n  let temp = arr.slice(0);\n  let result = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    if (temp[i] === 0) {\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] === 0) {\n        i++;\n      }\n    } else {\n      while (j < count && temp[i] > temp[j]) {\n        j++;\n      }\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] > temp[j]) {\n        temp[i] = temp[j];\n        i++;\n        while (i < temp.length && temp[i] > temp[j]) {\n          temp[i] = temp[j];\n          i++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst sortArray4 = (arr) => {\n  let temp = arr.slice(0);\n  let result = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    if (temp[i] === 0) {\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] === 0) {\n        i++;\n      }\n    } else {\n      while (j < count && temp[i] > temp[j]) {\n        j++;\n      }\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] > temp[j]) {\n        temp[i] = temp[j];\n        i++;\n        while (i < temp.length && temp[i] > temp[j]) {\n          temp[i] = temp[j];\n          i++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst sortArray5 = (arr) => {\n  let temp = arr.slice(0);\n  let result = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    if (temp[i] === 0) {\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] === 0) {\n        i++;\n      }\n    } else {\n      while (j < count && temp[i] > temp[j]) {\n        j++;\n      }\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] > temp[j]) {\n        temp[i] = temp[j];\n        i++;\n        while (i < temp.length && temp[i] > temp[j]) {\n          temp[i] = temp[j];\n          i++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst sortArray6 = (arr) => {\n  let temp = arr.slice(0);\n  let result = [];\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < temp.length) {\n    if (temp[i] === 0) {\n      result.push(temp[i]);\n      count++;\n      while (i < temp.length && temp[i] === 0) {\n        i++;\n      }\n    } else {\n      while (j < count && temp[i] > temp[j]) {\n        j++;\n      }\n"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants ,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n  let words = [];\n  let word = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] ==='') {\n      i++;\n      continue;\n    }\n    if (s[i].match(/[a-zA-Z]/)) {\n      word += s[i];\n      i++;\n      continue;\n    }\n    if (word.length === n) {\n      words.push(word);\n      word = '';\n    }\n    word += s[i];\n    i++;\n  }\n  if (word.length === n) {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowel = \"\";\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let c = word[i];\n    let j = i + 1;\n    while (j < len) {\n      let d = word[j];\n      if (vowels.indexOf(c)!== -1 && vowels.indexOf(d)!== -1) {\n        vowel = c;\n        break;\n      }\n      j++;\n    }\n    if (vowel!== \"\") {\n      break;\n    }\n    i++;\n  }\n  return vowel;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]!== lst[i][lst[i].length - 1]) {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  if (k === 1) {\n    return [max];\n  }\n  let result = [];\n  let start = maxIndex;\n  while (start + k - 1 < arr.length) {\n    result.push(arr[start + k - 1]);\n    start += k;\n  }\n  return result;\n};\n\nexport { maximum };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(i * 3 + 1);\n    }\n    i = i * 2 + 1;\n  }\n  return arr.sort((a, b) => a - b);\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse .\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const day = parseInt(dateArray[1]);\n  const month = parseInt(dateArray[0]);\n  const year = parseInt(dateArray[2]);\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth3 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth4 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth5 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth6 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth7 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth8 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth9 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth10 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth11 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth12 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth[month - 1]) {\n    return false;\n  }\n  if (year < 2000 || year > 2099) {\n    return false;\n  }\n  if (day > daysInMonth[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > daysInMonth2[month - 1]) {\n    return false;\n  }\n  if (month == 4 && day > daysInMonth3[month - 1]) {\n    return false;\n  }\n  if (month == 6 && day > daysInMonth4[month - 1]) {\n    return false;\n  }\n  if (month == 9 && day > daysInMonth5[month - 1]) {\n    return false;\n  }\n  if (month == 11 && day > daysInMonth6[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > daysInMonth7[month - 1]) {\n    return false;\n  }\n  if (month == 4 && day > daysInMonth8[month - 1]) {\n    return false;\n  }\n  if (month == 6 && day > daysInMonth9[month - 1]) {\n    return false;\n  }\n  if (month == 9 && day > daysInMonth10[month - 1]) {\n    return false;\n  }\n  if (month == 11 && day > daysInMonth11[month - 1]) {\n    return false;\n  }\n  if (month == 2 && day > daysInMonth12[month - 1]) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords2 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords3 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords4 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords5 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords6 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords7 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords8 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);\n        word = \"\";\n      }\n    } else {\n      word += ch;\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nconst splitWords9 = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  let c = 0;\n  let ch = \"\";\n  while (i < len) {\n    ch = txt[i];\n    if (ch === \" \") {\n      if (word!== \"\") {\n        words.push(word);"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse .Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev < lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev < lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev < lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev < lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev < lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev < lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev > lst[i]) {\n      return false;\n"}
{"task_id": "JavaScript/127", "prompt": "/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 > start2) {\n    const tmp = start1\n    start1 = start2\n    start2 = tmp\n  }\n  if (end1 < end2) {\n    const tmp = end1\n    end1 = end2\n    end2 = tmp\n  }\n  if (start1 >= end2) return \"NO\"\n  if (end1 <= start2) return \"NO\"\n  const length = end1 - start1\n  if (length % 2 === 0) return \"YES\"\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let prod = 0;\n  for (let i = 0; i < arr.length; i++) {\n    prod += arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const result = [];\n  const visited = new Set();\n  const dfs = (grid, k, i, j) => {\n    if (i === k) {\n      result.push(grid[i]);\n      return;\n    }\n    if (visited.has(i)) return;\n    visited.add(i);\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        dfs(grid, k, i + 1, j);\n        dfs(grid, k, i - 1, j);\n        dfs(grid, k, i, j + 1);\n        dfs(grid, k, i, j - 1);\n      }\n    }\n  };\n  dfs(grid, k, 0, 0);\n  return result;\n};\n\nmodule.exports = minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [a, b, c] = [1, 2, 1];\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = result[i - 1] + result[i - 2] + result[i - 3];\n  }\n  return result;\n};\n\nmodule.exports = tri;\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nconst digits = (n) => {\n  const digits = [];\n  while (n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested2 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested3 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested4 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested5 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested6 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested7 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested8 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested9 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j++;\n      }\n      if (j < string.length && string[j] === ']') {\n        isNested = true;\n      }\n    }\n    i++;\n  }\n  return isNested;\n};\n\nconst isNested10 = (string) => {\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      j = i + 1;\n      while (j < string.length && string[j]!== ']') {\n        j"}
{"task_id": "JavaScript/133", "prompt": "/*Youare given a list o f  numbers .\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabet = /[a-zA-Z]/.test(lastChar);\n  return!isAlphabet;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a digit acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsADigit(\"apple pie\") ➞ false\n  checkIfLastCharIsADigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsADigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsADigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isDigit = /[0-9]/.test(lastChar);\n  return!isDigit;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return!isSpace;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return!isSpace;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return!isSpace;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return!isSpace;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return!isSpace;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no t\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isSpace = /\\s/.test(lastChar);\n  return!isSpace;\n};\n\n/*\n  Create a function tha t  returns  true if the last character\n  of a given string is a space acteran d is no"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values .\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let result = -1;\n  while (i < j) {\n    k = i;\n    l = j;\n    m = arr[i];\n    n = arr[j];\n    while (k < l) {\n      if (arr[k] < m && arr[k] < n) {\n        result = k;\n        break;\n      }\n      if (arr[k] > m && arr[k] > n) {\n        result = k;\n        break;\n      }\n      k++;\n    }\n    if (result === -1) {\n      result = k;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\nexport default canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and ' b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be . or ,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareThree = (a, b, c) => {\n  if (a === b && a === c) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\") {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a === b && a === c && a === d) {\n    return null;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"string\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\" && typeof d ==="}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh en>0')\n  }\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  if (n === 3) {\n    return 6\n  }\n  if (n === 4) {\n    return 24\n  }\n  if (n === 5) {\n    return 120\n  }\n  if (n === 6) {\n    return 720\n  }\n  if (n === 7) {\n    return 5040\n  }\n  if (n === 8) {\n    return 40320\n  }\n  if (n === 9) {\n    return 362880\n  }\n  if (n === 10) {\n    return 3628800\n  }\n  if (n === 11) {\n    return 39916800\n  }\n  if (n === 12) {\n    return 479001600\n  }\n  if (n === 13) {\n    return 6227020800\n  }\n  if (n === 14) {\n    return 87178291200\n  }\n  if (n === 15) {\n    return 1307674368000\n  }\n  if (n === 16) {\n    return 20922789888000\n  }\n  if (n === 17) {\n    return 355687428096000\n  }\n  if (n === 18) {\n    return 6402373705728000\n  }\n  if (n === 19) {\n    return 121645100408832000\n  }\n  if (n === 20) {\n    return 2432902008176640000\n  }\n  if (n === 21) {\n    return 51090942171709440000\n  }\n  if (n === 22) {\n    return 1124000727777607680000\n  }\n  if (n === 23) {\n    return 25852016738884976640000\n  }\n  if (n === 24) {\n    return 620448401733239439360000\n  }\n  if (n === 25) {\n    return 122070312516273708832000\n  }\n  if (n === 26) {\n    return 3027034703823461658240000\n  }\n  if (n === 27) {\n    return 60414031627943520000\n  }\n  if (n === 28) {\n    return 121645100408832000\n  }\n  if (n === 29) {\n    return 3027034703823461658240000\n  }\n  if (n === 30) {\n    return 60414031627943520000\n  }\n  if (n === 31) {\n    return 122070312516273708832000\n  }\n  if (n === 32) {\n    return 25852016738884976640000\n  }\n  if (n === 33) {\n    return 620448401733239439360000\n  }\n  if (n === 34) {\n    return 1124000727777607680000\n  }\n  if (n === 35) {\n    return 2432902008176640000\n  }\n  if (n === 36) {\n    return 51090942171709440000\n  }\n  if (n === 37) {\n    return 1083706888374412800000\n  }\n  if (n === 38) {\n    return 21783034805967497600000\n  }\n  if (n === 39) {\n    return 4398046511104\n  }\n  if (n === 40) {\n    return 8796093022208\n  }\n  if (n === 41) {\n    return 17592186044416\n  }\n  if (n === 42) {\n    return 35184372088832\n  }\n  if (n === 43) {\n    return 70368744177664\n  }\n  if (n === 44) {\n    return 140737488355328\n  }\n  if (n === 45) {\n    return 281474976710656\n  }\n  if (n === 46) {\n    return 562949953421312\n  }\n  if (n === 47) {\n    return 1125899906842624\n  }\n  if (n === 48) {\n    return 2251799813685248\n  }\n  if (n === 49) {\n    return 4503599627370496\n  }\n  if (n === 50) {\n    return 9007199254740992\n  }\n  if (n === 51) {\n    return 18014398509481984\n  }\n  if (n === 52) {\n    return 36028797018963968\n  }\n  if (n === 53) {\n    return 72057594037927936\n  }\n  if (n === 54) {\n    return 144115188075855872\n  }\n  if (n === 55) {\n    return 288230376151711744\n  }\n  if (n === 56) {\n    return 576460752303423488\n  }\n  if (n === 57) {\n    return 1152921504606846976\n  }\n  if (n === 58) {\n    return 2305843009213693952\n  }\n  if (n === 59) {\n    return 4611686018427387904\n  }\n  if (n === 60) {\n    return 9223372036854775808\n  }\n  if (n === 61) {\n    return 18446744073709551616\n  }\n  if (n === 62) {\n    return 36028797018963968\n  }\n"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces4 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces7 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces9 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces10 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces11 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces12 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces13 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces14 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces15 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces16 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces17 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces18 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces19 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces20 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces21 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces22 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces23 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces24 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces25 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces26 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces27 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces28 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces29 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces30 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces31 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces32 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces33 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces34 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces35 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces36 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces37 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces38 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces39 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces40 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces41 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces42 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces43 = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpaces44 = (text) => {\n  return text.replace(/\\s+/g, '-');\n};\n\nconst fixSpaces45 = (text) => {"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file 's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return false;\n  }\n  if (file_name.indexOf('.') === -1) {\n    return false;\n  }\n  if (file_name.substring(0, 1).toUpperCase() === file_name.substring(0, 1).toLowerCase()) {\n    return false;\n  }\n  if (file_name.substring(file_name.length - 3, file_name.length)!== '.exe' &&\n    file_name.substring(file_name.length - 3, file_name.length)!== '.dll' &&\n    file_name.substring(file_name.length - 3, file_name.length)!== '.txt') {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = fileNameCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence2 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence3 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence4 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence5 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence6 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence7 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence8 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence9 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence10 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = result[index] + word;\n    }\n  }\n  return result.join('');\n};\n\nconst wordsInSentence11 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = result.indexOf(word);\n    if (index === -1) {"}
{"task_id": "JavaScript/144", "prompt": "/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n  let xn = x.split('/');\n  let nn = n.split('/');\n  let xnumerator = xn[0];\n  let xdenominator = xn[1];\n  let nnumerator = nn[0];\n  let ndenominator = nn[1];\n  let xnumerator_is_whole = xnumerator.match(/^\\d+$/);\n  let xdenominator_is_whole = xdenominator.match(/^\\d+$/);\n  let nnumerator_is_whole = nnumerator.match(/^\\d+$/);\n  let ndenominator_is_whole = ndenominator.match(/^\\d+$/);\n  if (xnumerator_is_whole && xdenominator_is_whole && nnumerator_is_whole && ndenominator_is_whole) {\n    return xnumerator === nnumerator && xdenominator === ndenominator;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/ 10\", \"10/2 \"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0\n  let index = 0\n  let sorted = []\n  let i = 0\n  while (i < nums.length) {\n    sum += nums[i]\n    if (sum > 0) {\n      sorted.push(nums[i])\n      sum = 0\n      index++\n    }\n    i++\n  }\n  return sorted\n}\n\nmodule.exports = orderByPoints\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 10!== 0 && nums[i] % 10!== 1 && nums[i] % 10!== 3 && nums[i] % 10!== 5 && nums[i] % 10!== 7 && nums[i] % 10!== 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth , M ars, J upiter, Saturn,\n  Uranus , Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth, M ars, J upiter, Saturn,\n  Uranus, Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    {name: \"Mercury\", orbit: [\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00, z: 0.00},\n      {x: 0.00, y: 0.00,"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted;\n};\n\nmodule.exports = {\n  sortedListSum,\n  list_sort\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n\n  } else if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY2 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY3 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY4 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY5 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY6 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY7 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY8 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY9 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY10 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY11 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY12 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY13 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY14 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY15 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY16 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY17 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY18 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY19 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY20 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY21 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY22 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else {\n    return n\n  }\n}\n\nconst xOrY23 = (n, x, y) => {\n  if (n % x === 0) {\n    return y\n  } else if (n % y === 0) {\n    return x\n  } else"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3 ,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length , where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length, where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const s = game.slice();\n  const g = guess.slice();\n  const result = [];\n  let i = 0;\n  while (i < g.length) {\n    if (s[i] === g[i]) {\n      result[i] = 0;\n      i++;\n    } else {\n      result[i] = Math.abs(s[i] - g[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_lower = class_name.toLowerCase();\n  const extensions_lower = extensions.map(extension => extension.toLowerCase());\n  const class_name_upper = class_name_lower.charAt(0).toUpperCase() + class_name_lower.slice(1);\n  const extensions_upper = extensions_lower.map(extension => extension.charAt(0).toUpperCase() + extension.slice(1));\n  const class_name_extensions = class_name_lower.split('.');\n  const extensions_extensions = extensions_lower.split('.');\n  const class_name_extensions_upper = class_name_extensions.map(extension => extension.charAt(0).toUpperCase() + extension.slice(1));\n  const extensions_extensions_upper = extensions_extensions.map(extension => extension.charAt(0).toUpperCase() + extension.slice(1));\n  const class_name_extensions_extensions = class_name_extensions_upper.join('.');\n  const extensions_extensions_extensions = extensions_extensions_upper.join('.');\n  const class_name_extensions_extensions_upper = class_name_extensions_extensions.map(extension => extension.charAt(0).toUpperCase() + extension.slice(1));\n  const extensions_extensions_extensions_upper = extensions_extensions_extensions.map(extension => extension.charAt(0).toUpperCase() + extension.slice(1));\n  const class_name_extensions_extensions_extensions_upper = class_name_extensions_extensions_upper.join('.');\n  const extensions_extensions_extensions_extensions_upper = extensions_extensions_extensions_upper.join('.');\n  const class_name_extensions_extensions_extensions_upper_upper = class_name_extensions_extensions_extensions_upper.toUpperCase();\n  const extensions_extensions_extensions_extensions_upper_upper = extensions_extensions_extensions_extensions_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_extensions_upper_upper_upper = extensions_extensions_extensions_extensions_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions_upper_upper_upper_upper = class_name_extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const extensions_extensions_extensions_upper_upper_upper_upper = extensions_extensions_extensions_upper_upper_upper.toUpperCase();\n  const class_name_extensions_extensions_extensions"}
{"task_id": "JavaScript/154", "prompt": "/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] === bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c === aa.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i <"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 10 % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];\n  const result = [];\n  let i = 0;\n  while (number > 0) {\n    result.push(roman[number % 10]);\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\nexport default intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && c === b;\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax5 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax6 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax7 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax8 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax9 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax10 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax11 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax12 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax13 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax14 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax15 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax16 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbi t , and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code in JS\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    i++;\n  }\n  return result;\n};\n\n//  @number = 5, need = 6, remaining = 10\n//  @number = 4, need = 8, remaining = 9\n//  @number = 1, need = 10, remaining = 10\n//  @number = 2, need = 11, remaining = 5\n//  @number = 3, need = 12, remaining = 1\n//  @number = 7, need = 10, remaining = 9\n//  @number = 8, need = 11, remaining = 1\n//  @number = 9, need = 12, remaining = 0\n//  @number = 11, need = 12, remaining = 0\n//  @number = 12, need = 12, remaining = 0\n//  @number = 13, need = 12, remaining = 0\n//  @number = 14, need = 12, remaining = 0\n//  @number = 15, need = 12, remaining = 0\n//  @number = 16, need = 12, remaining = 0\n//  @number = 17, need = 12, remaining = 0\n//  @number = 18, need = 12, remaining = 0\n//  @number = 19, need = 12, remaining = 0\n//  @number = 20, need = 12, remaining = 0\n//  @number = 21, need = 12, remaining = 0\n//  @number = 22, need = 12, remaining = 0\n//  @number = 23, need = 12, remaining = 0\n//  @number = 24, need = 12, remaining = 0\n//  @number = 25, need = 12, remaining = 0\n//  @number = 26, need = 12, remaining = 0\n//  @number = 27, need = 12, remaining = 0\n//  @number = 28, need = 12, remaining = 0\n//  @number = 29, need = 12, remaining = 0\n//  @number = 30, need = 12, remaining = 0\n//  @number = 31, need = 12, remaining = 0\n//  @number = 32, need = 12, remaining = 0\n//  @number = 33, need = 12, remaining = 0\n//  @number = 34, need = 12, remaining = 0\n//  @number = 35, need = 12, remaining = 0\n//  @number = 36, need = 12, remaining = 0\n//  @number = 37, need = 12, remaining = 0\n//  @number = 38, need = 12, remaining = 0\n//  @number = 39, need = 12, remaining = 0\n//  @number = 40, need = 12, remaining = 0\n//  @number = 41, need = 12, remaining = 0\n//  @number = 42, need = 12, remaining = 0\n//  @number = 43, need = 12, remaining = 0\n//  @number = 44, need = 12, remaining = 0\n//  @number = 45, need = 12, remaining = 0\n//  @number = 46, need = 12, remaining = 0\n//  @number = 47, need = 12, remaining = 0\n//  @number = 48, need = 12, remaining = 0\n//  @number = 49, need = 12, remaining = 0\n//  @number = 50, need = 12, remaining = 0\n//  @number = 51, need = 12, remaining = 0\n//  @number = 52, need = 12, remaining = 0\n//  @number = 53, need = 12, remaining = 0\n//  @number = 54, need = 12, remaining = 0\n//  @number = 55, need = 12, remaining = 0\n//  @number = 56, need = 12, remaining = 0\n//  @number = 57, need = 12, remaining = 0\n//  @number = 58, need = 12, remaining = 0\n//  @number = 59, need = 12, remaining = 0\n//  @number = 60, need = 12, remaining = 0\n//  @number = 61, need = 12, remaining = 0\n//  @number = 62, need = 12, remaining = 0\n//  @number = 63, need = 12, remaining = 0\n//  @number = 64, need = 12, remaining = 0\n//  @number = 65, need = 12, remaining = 0\n//  @number = 66, need = 12, remaining = 0\n//  @number = 67, need = 12, remaining = 0\n//  @number = 68, need = 12, remaining = 0\n//  @number = 69, need = 12, remaining = 0\n//  @number = 70, need = 12, remaining = 0\n//  @number = 71, need = 12, remaining = 0\n//  @number = 72, need = 12, remaining = 0\n//  @number = 73, need = 12, remaining = 0\n//  @number = 74, need = 12, remaining = 0\n//  @number = 75, need = 12, remaining = 0\n//  @number = 76, need = 12, remaining = 0\n//  @number = 77, need = 12, remaining = 0\n//  @number = 78, need = 12, remaining = 0\n//  @number = 79, need = 12"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  let i = 0;\n  while (i < operator.length) {\n    if (operator[i] === '+') {\n      result.push(operand[0] + operand[1]);\n      operand.splice(0, 2);\n    } else if (operator[i] === '-') {\n      result.push(operand[0] - operand[1]);\n      operand.splice(0, 2);\n    } else if (operator[i] === '*') {\n      result.push(operand[0] * operand[1]);\n      operand.splice(0, 2);\n    } else if (operator[i] === '/') {\n      result.push(operand[0] / operand[1]);\n      operand.splice(0, 2);\n    } else if (operator[i] === '//') {\n      result.push(operand[0] / operand[1]);\n      operand.splice(0, 2);\n    } else if (operator[i] === '**') {\n      result.push(Math.pow(operand[0], operand[1]));\n      operand.splice(0, 2);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst getOperand = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperator = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperatorList = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperatorList2 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList2 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList3 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList3 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList4 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList4 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList5 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList5 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList6 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList6 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList7 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList7 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList8 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList8 = (operator) => {\n  let result = [];\n  while (operator.length) {\n    result.push(operator.pop());\n  }\n  return result;\n};\n\nconst getOperandList9 = (operand) => {\n  let result = [];\n  while (operand.length) {\n    result.push(operand.pop());\n  }\n  return result;\n};\n\nconst getOperandList9 = (operator) => {\n  let result = [];\n  while (operator.length) {\n"}
{"task_id": "JavaScript/161", "prompt": "/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string .\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    let c = s[i];\n    if (c.match(/[a-z]/)) {\n      result += c.toUpperCase();\n    } else if (c.match(/[A-Z]/)) {\n      result += c.toLowerCase();\n    } else {\n      result += c;\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text' ,  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
