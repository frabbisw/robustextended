{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const min = sortedNumbers[0];\n  const max = sortedNumbers[sortedNumbers.length - 1];\n  const range = max - min;\n  const thresholdSquared = threshold * threshold;\n  const thresholdSquaredToRange = thresholdSquared / range;\n  const thresholdSquaredToMin = thresholdSquaredToRange * min;\n  const thresholdSquaredToMax = thresholdSquaredToRange * max;\n  const hasCloseElements = (a, b) => {\n    const aSquared = a * a;\n    const bSquared = b * b;\n    const aSquaredToRange = aSquared / range;\n    const bSquaredToRange = bSquared / range;\n    const aSquaredToMin = aSquaredToRange * min;\n    const bSquaredToMin = bSquaredToRange * min;\n    const aSquaredToMax = aSquaredToRange * max;\n    const bSquaredToMax = bSquaredToRange * max;\n    const aSquaredToThresholdSquared = aSquaredToRange * thresholdSquared;\n    const bSquaredToThresholdSquared = bSquaredToRange * thresholdSquared;\n    const aSquaredToThresholdSquaredToRange = aSquaredToThresholdSquared / range;\n    const bSquaredToThresholdSquaredToRange = bSquaredToThresholdSquared / range;\n    const aSquaredToThresholdSquaredToMin = aSquaredToThresholdSquaredToRange * min;\n    const bSquaredToThresholdSquaredToMin = bSquaredToThresholdSquaredToRange * min;\n    const aSquaredToThresholdSquaredToMax = aSquaredToThresholdSquaredToRange * max;\n    const bSquaredToThresholdSquaredToMax = bSquaredToThresholdSquaredToRange * max;\n    return aSquaredToThresholdSquaredToMin < thresholdSquaredToMin &&\n      bSquaredToThresholdSquaredToMin < thresholdSquaredToMin &&\n      aSquaredToThresholdSquaredToMax < thresholdSquaredToMax &&\n      bSquaredToThresholdSquaredToMax < thresholdSquaredToMax;\n  };\n  return numbers.some(hasCloseElements);\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_parens = 0;\n  let last_open_paren = 0;\n  let last_close_paren = 0;\n  let current_open_paren = 0;\n  let current_close_paren = 0;\n  let current_char = 0;\n  let current_char_index = 0;\n  let current_char_length = 0;\n  let current_char_string = '';\n  let current_char_string_length = 0;\n  let current_char_string_index = 0;\n  let current_char_string_length_index = 0;\n  let current_char_string_length_index_end = 0;\n  let current_char_string_length_index_end_end = 0;\n  let current_char_string_length_index_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_char_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('');\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t1 = 0;\n  let t2 = 0;\n  let t3 = 0;\n  let t4 = 0;\n  let t5 = 0;\n  let t6 = 0;\n  let t7 = 0;\n  let t8 = 0;\n  let t9 = 0;\n  let t10 = 0;\n  let t11 = 0;\n  let t12 = 0;\n  let t13 = 0;\n  let t14 = 0;\n  let t15 = 0;\n  let t16 = 0;\n  let t17 = 0;\n  let t18 = 0;\n  let t19 = 0;\n  let t20 = 0;\n  let t21 = 0;\n  let t22 = 0;\n  let t23 = 0;\n  let t24 = 0;\n  let t25 = 0;\n  let t26 = 0;\n  let t27 = 0;\n  let t28 = 0;\n  let t29 = 0;\n  let t30 = 0;\n  let t31 = 0;\n  let t32 = 0;\n  let t33 = 0;\n  let t34 = 0;\n  let t35 = 0;\n  let t36 = 0;\n  let t37 = 0;\n  let t38 = 0;\n  let t39 = 0;\n  let t40 = 0;\n  let t41 = 0;\n  let t42 = 0;\n  let t43 = 0;\n  let t44 = 0;\n  let t45 = 0;\n  let t46 = 0;\n  let t47 = 0;\n  let t48 = 0;\n  let t49 = 0;\n  let t50 = 0;\n  let t51 = 0;\n  let t52 = 0;\n  let t53 = 0;\n  let t54 = 0;\n  let t55 = 0;\n  let t56 = 0;\n  let t57 = 0;\n  let t58 = 0;\n  let t59 = 0;\n  let t60 = 0;\n  let t61 = 0;\n  let t62 = 0;\n  let t63 = 0;\n  let t64 = 0;\n  let t65 = 0;\n  let t66 = 0;\n  let t67 = 0;\n  let t68 = 0;\n  let t69 = 0;\n  let t70 = 0;\n  let t71 = 0;\n  let t72 = 0;\n  let t73 = 0;\n  let t74 = 0;\n  let t75 = 0;\n  let t76 = 0;\n  let t77 = 0;\n  let t78 = 0;\n  let t79 = 0;\n  let t80 = 0;\n  let t81 = 0;\n  let t82 = 0;\n  let t83 = 0;\n  let t84 = 0;\n  let t85 = 0;\n  let t86 = 0;\n  let t87 = 0;\n  let t88 = 0;\n  let t89 = 0;\n  let t90 = 0;\n  let t91 = 0;\n  let t92 = 0;\n  let t93 = 0;\n  let t94 = 0;\n  let t95 = 0;\n  let t96 = 0;\n  let t97 = 0;\n  let t98 = 0;\n  let t99 = 0;\n  let t100 = 0;\n  let t101 = 0;\n  let t102 = 0;\n  let t103 = 0;\n  let t104 = 0;\n  let t105 = 0;\n  let t106 = 0;\n  let t107 = 0;\n  let t108 = 0;\n  let t109 = 0;\n  let t110 = 0;\n  let t111 = 0;\n  let t112 = 0;\n  let t113 = 0;\n  let t114 = 0;\n  let t115 = 0;\n  let t116 = 0;\n  let t117 = 0;\n  let t118 = 0;\n  let t119 = 0;\n  let t120 = 0;\n  let t121 = 0;\n  let t122 = 0;\n  let t123 = 0;\n  let t124 = 0;\n  let t125 = 0;\n  let t126 = 0;\n  let t127 = 0;\n  let t128 = 0;\n  let t129 = 0;\n  let t130 = 0;\n  let t131 = 0;\n  let t132 = 0;\n  let t133 = 0;\n  let t134 = 0;\n  let t135 = 0;\n  let t136 = 0;\n  let t137 = 0;\n  let t138 = 0;\n  let t139 = 0;\n  let t140 = 0;\n  let t141 = 0;\n  let t142 = 0;\n  let t143 = 0;\n  let t144 = 0;\n  let t145 = 0;\n  let t146 = 0;\n  let t147 = 0;\n  let t148 = 0;\n  let t149 = 0;\n  let t150 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [n];\n  let nextLevel = [];\n  let i = 1;\n  while (i < n) {\n    let nextLevelSize = pile.length;\n    let nextLevelSizeMinusOne = nextLevelSize - 1;\n    let nextLevelSizeMinusTwo = nextLevelSize - 2;\n    let nextLevelSizeMinusThree = nextLevelSize - 3;\n    let nextLevelSizeMinusFour = nextLevelSize - 4;\n    let nextLevelSizeMinusFive = nextLevelSize - 5;\n    let nextLevelSizeMinusSix = nextLevelSize - 6;\n    let nextLevelSizeMinusSeven = nextLevelSize - 7;\n    let nextLevelSizeMinusEight = nextLevelSize - 8;\n    let nextLevelSizeMinusNine = nextLevelSize - 9;\n    let nextLevelSizeMinusTen = nextLevelSize - 10;\n    let nextLevelSizeMinusEleven = nextLevelSize - 11;\n    let nextLevelSizeMinusTwelve = nextLevelSize - 12;\n    let nextLevelSizeMinusThirteen = nextLevelSize - 13;\n    let nextLevelSizeMinusFourteen = nextLevelSize - 14;\n    let nextLevelSizeMinusFifteen = nextLevelSize - 15;\n    let nextLevelSizeMinusSixteen = nextLevelSize - 16;\n    let nextLevelSizeMinusSeventeen = nextLevelSize - 17;\n    let nextLevelSizeMinusEighteen = nextLevelSize - 18;\n    let nextLevelSizeMinusNineteen = nextLevelSize - 19;\n    let nextLevelSizeMinusTwenty = nextLevelSize - 20;\n    let nextLevelSizeMinusTwentyOne = nextLevelSize - 21;\n    let nextLevelSizeMinusTwentyTwo = nextLevelSize - 22;\n    let nextLevelSizeMinusTwentyThree = nextLevelSize - 23;\n    let nextLevelSizeMinusTwentyFour = nextLevelSize - 24;\n    let nextLevelSizeMinusTwentyFive = nextLevelSize - 25;\n    let nextLevelSizeMinusTwentySix = nextLevelSize - 26;\n    let nextLevelSizeMinusTwentySeven = nextLevelSize - 27;\n    let nextLevelSizeMinusTwentyEight = nextLevelSize - 28;\n    let nextLevelSizeMinusTwentyNine = nextLevelSize - 29;\n    let nextLevelSizeMinusThirty = nextLevelSize - 30;\n    let nextLevelSizeMinusThirtyOne = nextLevelSize - 31;\n    let nextLevelSizeMinusThirtyTwo = nextLevelSize - 32;\n    let nextLevelSizeMinusThirtyThree = nextLevelSize - 33;\n    let nextLevelSizeMinusThirtyFour = nextLevelSize - 34;\n    let nextLevelSizeMinusThirtyFive = nextLevelSize - 35;\n    let nextLevelSizeMinusThirtySix = nextLevelSize - 36;\n    let nextLevelSizeMinusThirtySeven = nextLevelSize - 37;\n    let nextLevelSizeMinusThirtyEight = nextLevelSize - 38;\n    let nextLevelSizeMinusThirtyNine = nextLevelSize - 39;\n    let nextLevelSizeMinusForty = nextLevelSize - 40;\n    let nextLevelSizeMinusFortyOne = nextLevelSize - 41;\n    let nextLevelSizeMinusFortyTwo = nextLevelSize - 42;\n    let nextLevelSizeMinusFortyThree = nextLevelSize - 43;\n    let nextLevelSizeMinusFortyFour = nextLevelSize - 44;\n    let nextLevelSizeMinusFortyFive = nextLevelSize - 45;\n    let nextLevelSizeMinusFortySix = nextLevelSize - 46;\n    let nextLevelSizeMinusFortySeven = nextLevelSize - 47;\n    let nextLevelSizeMinusFortyEight = nextLevelSize - 48;\n    let nextLevelSizeMinusFortyNine = nextLevelSize - 49;\n    let nextLevelSizeMinusFifty = nextLevelSize - 50;\n    let nextLevelSizeMinusFiftyOne = nextLevelSize - 51;\n    let nextLevelSizeMinusFiftyTwo = nextLevelSize - 52;\n    let nextLevelSizeMinusFiftyThree = nextLevelSize - 53;\n    let nextLevelSizeMinusFiftyFour = nextLevelSize - 54;\n    let nextLevelSizeMinusFiftyFive = nextLevelSize - 55;\n    let nextLevelSizeMinusFiftySix = nextLevelSize - 56;\n    let nextLevelSizeMinusFiftySeven = nextLevelSize - 57;\n    let nextLevelSizeMinusFiftyEight = nextLevelSize - 58;\n    let nextLevelSizeMinusFiftyNine = nextLevelSize - 59;\n    let nextLevelSizeMinusSixty = nextLevelSize - 60;\n    let nextLevelSizeMinusSixtyOne = nextLevelSize - 61;\n    let nextLevelSizeMinusSixtyTwo = nextLevelSize - 62;\n    let nextLevelSizeMinusSixtyThree = nextLevelSize - 63;\n    let nextLevelSizeMinusSixtyFour = nextLevelSize - 64;\n    let nextLevelSizeMinusSixtyFive = nextLevelSize - 65;\n    let nextLevelSizeMinusSixtySix = nextLevelSize - 66;\n    let nextLevelSizeMinusSixtySeven = nextLevelSize - 67;\n    let nextLevelSizeMinusSixtyEight = nextLevelSize - 68;\n    let nextLevelSizeMinusSixtyNine = nextLevelSize - 69;\n    let nextLevelSizeMinusSeventy = nextLevelSize - 70;\n    let nextLevelSizeMinusSeventyOne = nextLevelSize - 71;\n    let nextLevelSizeMinusSeventyTwo = nextLevelSize - 72;\n    let nextLevelSizeMinusSeventyThree = nextLevelSize - 73;\n    let nextLevelSizeMinusSeventyFour = nextLevelSize - 74;\n    let nextLevelSizeMinusSeventyFive = nextLevelSize - 75;\n    let nextLevelSizeMinusSeventySix = nextLevelSize - 76;\n    let nextLevelSizeMinusSeventySeven = nextLevelSize - 77;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  const range = x - y + 1\n  const result = Math.floor(Math.pow(2, range) - 1)\n  return result\n}\n\nconst test = () => {\n  console.log(chooseNum(12, 15))\n  console.log(chooseNum(13, 12))\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const sum = n + m;\n  const avg = sum / 2;\n  const binary = `0b${avg.toString(2)}`;\n  return binary;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits2 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits3 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits4 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits5 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits6 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits7 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits8 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits9 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits10 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits11 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits12 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits13 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits14 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits15 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits16 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits17 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits18 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits19 = (x) => {\n  const list = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      list.push(x[i]);\n    }\n  }\n  return list;\n};\n\nconst uniqueDigits20 = (x) => {\n  const list = [];\n  for (let i = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n    i++;\n  }\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n    i++;\n  }\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byName2 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n    i++;\n  }\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byName3 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n    i++;\n  }\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byName4 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n    i++;\n  }\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nconst byName5 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] < 0) {\n      j = mid;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (arr[i] < 0) {\n    result.push(arr[i]);\n    i++;\n  }\n  while (i < j) {\n    let mid = (i + j) >> 1;\n    if (arr[mid] <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * (i + 1));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        even++\n      } else {\n        odd++\n      }\n    }\n  }\n  return [even, odd]\n}\n\nconst isPalindrome = (n) => {\n  let str = String(n)\n  return str === str.split('').reverse().join('')\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLen = arr.length;\n  let arrArr = [];\n  for (let i = 0; i < arrLen; i++) {\n    arrArr.push(arr[i]);\n  }\n  let arrArrLen = arrArr.length;\n  let arrArrArr = [];\n  for (let i = 0; i < arrArrLen; i++) {\n    arrArrArr.push(arrArr[i]);\n  }\n  let arrArrArrLen = arrArrArr.length;\n  let arrArrArrArr = [];\n  for (let i = 0; i < arrArrArrLen; i++) {\n    arrArrArrArr.push(arrArrArr[i]);\n  }\n  let arrArrArrArrLen = arrArrArrArr.length;\n  let arrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrLen; i++) {\n    arrArrArrArrArr.push(arrArrArrArr[i]);\n  }\n  let arrArrArrArrArrLen = arrArrArrArrArr.length;\n  let arrArrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrArrLen; i++) {\n    arrArrArrArrArrArr.push(arrArrArrArrArr[i]);\n  }\n  let arrArrArrArrArrArrLen = arrArrArrArrArrArr.length;\n  let arrArrArrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrArrArrLen; i++) {\n    arrArrArrArrArrArrArr.push(arrArrArrArrArrArr[i]);\n  }\n  let arrArrArrArrArrArrArrLen = arrArrArrArrArrArrArr.length;\n  let arrArrArrArrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrArrArrArrLen; i++) {\n    arrArrArrArrArrArrArrArr.push(arrArrArrArrArrArrArrArr[i]);\n  }\n  let arrArrArrArrArrArrArrArrLen = arrArrArrArrArrArrArrArrArr.length;\n  let arrArrArrArrArrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrArrArrArrArrLen; i++) {\n    arrArrArrArrArrArrArrArrArr.push(arrArrArrArrArrArrArrArrArrArr[i]);\n  }\n  let arrArrArrArrArrArrArrArrArrLen = arrArrArrArrArrArrArrArrArrArrArr.length;\n  let arrArrArrArrArrArrArrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrArrArrArrArrArrArrLen; i++) {\n    arrArrArrArrArrArrArrArrArrArrArrArr.push(arrArrArrArrArrArrArrArrArrArrArrArr[i]);\n  }\n  let arrArrArrArrArrArrArrArrArrArrArrArrLen = arrArrArrArrArrArrArrArrArrArrArrArrArrArrArr.length;\n  let arrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = [];\n  for (let i = 0; i < arrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrLen; i++) {\n    arrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        res += '0';\n      } else {\n        res += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        res += '1';\n      } else {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let apassed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  let i = 0;\n  let j = 0;\n  while (i < lst1Len && j < lst2Len) {\n    if (lst1[i] === lst2[j]) {\n      i++;\n      j++;\n    } else if (lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return (i === lst1Len && j === lst2Len)? \"YES\" : \"NO\";\n};\n\nconst test = () => {\n  const lst1 = [1, 2, 3, 4];\n  const lst2 = [1, 5, 3, 4];\n  console.log(exchange(lst1, lst2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letter = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[0]) {\n      result += s.substr(i, 1);\n      i++;\n    } else if (s[i]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    i++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDeleteTest = () => {\n  let result = reverseDelete('abcde', 'ae');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest2 = () => {\n  let result = reverseDelete('abcdef', 'b');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest3 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest4 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest5 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest6 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest7 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest8 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest9 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest10 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest11 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest12 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest13 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest14 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest15 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest16 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest17 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest18 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest19 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest20 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest21 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest22 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n  console.log(result[1]);\n  return result;\n};\n\nconst reverseDeleteTest23 = () => {\n  let result = reverseDelete('abcdedcba', 'ab');\n  console.log(result[0]);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let n = 0;\n  let i = 0;\n  while (i < lst.length) {\n    let str = lst[i];\n    let len = str.length;\n    let num = 0;\n    while (i < len) {\n      if (str[i] % 2 === 1) {\n        num++;\n      }\n      i++;\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n    n += num;\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n    if (sum > min) {\n      break;\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(i * cols + j);\n      }\n    }\n  }\n  return buckets.length;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    let c = s[i];\n    let j = i + 1;\n    while (j < len && s[j] === c) {\n      j++;\n    }\n    if (j - i === n) {\n      words.push(s.slice(i, j));\n    }\n    i = j;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let result = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let wordLength = word.length;\n  let i = 0;\n  let j = 0;\n  while (i < wordLength) {\n    if (vowels.indexOf(word[i])!== -1) {\n      i++;\n      continue;\n    }\n    if (j === 0) {\n      result = word[i];\n      j++;\n    } else {\n      if (word[i] === word[j - 1]) {\n        result = word[i];\n        j++;\n      } else {\n        result = '';\n        j = 0;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length\n  if (len < 2) return 'No'\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (lst[i] === '(') {\n      j++\n    } else if (lst[i] === ')') {\n      j--\n    }\n    i++\n  }\n  if (j === 0) return 'No'\n  return 'Yes'\n}\n\nconst test = () => {\n  console.log(matchParens(['()(', ')']) === 'Yes')\n  console.log(matchParens([')', ')']) === 'No')\n  console.log(matchParens(['(())', '()']) === 'Yes')\n  console.log(matchParens(['()', '()']) === 'No')\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return null;\n  let l = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > l.length) {\n      l = strings[i];\n    }\n  }\n  return l;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0];\n  const maxIndex = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\nexport { maximum };\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let l = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      l.push(i);\n    } else {\n      l.push(i / 2);\n      l.push(i + 1);\n    }\n    i += 1;\n  }\n  return l;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[2], 10);\n  const year = parseInt(dateParts[0], 10);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = [1, 3, 5, 7, 8, 10, 12];\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth3 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth4 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth5 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth6 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth7 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth8 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth9 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth10 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth11 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth12 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth13 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth14 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth15 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth16 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth17 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth18 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth19 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth20 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth21 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth22 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth23 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth24 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth25 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth26 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth27 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth28 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth29 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth30 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth31 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth32 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth33 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth34 = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    if (txt[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  if (word!== \"\") {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 >= start2 && start1 <= end2) return \"YES\"\n  if (end1 >= start2 && end1 <= end2) return \"YES\"\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const dp = new Array(grid.length).fill(0);\n  const result = new Array(k).fill(0);\n  for (let i = 0; i < k; i++) {\n    const min = Infinity;\n    for (let j = 0; j < grid.length; j++) {\n      const val = grid[j][i];\n      if (dp[j] < min) {\n        min = dp[j];\n      }\n      if (val < min) {\n        min = val;\n      }\n    }\n    result[i] = min;\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[j][i] === min) {\n        dp[j] = min;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = minPath;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  let gcd = 1;\n  while (a!== 0 && b!== 0) {\n    if (a < b) {\n      a = a % b;\n    } else {\n      b = b % a;\n    }\n    gcd = gcd % a;\n  }\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 2, c = 3,\n      ans = [],\n      i = 1;\n  while (i < n) {\n    ans.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    i++;\n  }\n  return ans;\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    result += Math.floor(n / i) % 10\n  }\n  return result\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 'a' && txt[txt.length - 1] <= 'z' && txt[txt.length - 1]!=='';\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s e", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] > arr[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n\n  const largest = lst[0];\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareThree = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareFour = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareFive = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareSix = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareSeven = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareEight = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareNine = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareTen = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareEleven = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareTwelve = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareThirteen = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareFourteen = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareFifteen = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareSixteen = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  return a > b? a : b;\n};\n\nconst compareSeventeen = (a, b) => {\n  if (a === b) {\n    return null", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_13 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_14 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_15 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_16 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_17 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_18 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_19 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum % 2 === 0;\n};\n\nconst isEqualToSumEven_20 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The input must be a positive integer.');\n  }\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(0, current.length - 1)\n    prefixes.push(next)\n    current = next\n  }\n  return prefixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length > 0) {\n    let next = current.substr(current.length - 1, current.length)\n    suffixes.push(next)\n    current = next\n  }\n  return suffixes\n}\n\n/*\n  Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'bcde']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let current = string\n  while (current.length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.length > 2) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces2 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces3 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces4 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces5 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces6 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces7 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces8 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces9 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces10 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces11 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces12 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces13 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces14 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces15 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces16 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces17 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces18 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces19 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces20 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces21 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces22 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces23 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces24 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces25 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces26 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces27 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces28 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces29 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces30 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces31 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces32 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces33 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces34 = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  return result;\n};\n\nconst fixSpaces35 = (text) => {\n  let result = text.replace(/\\s+/g, '-');\n  return result;\n};\n\nconst fixSpaces36 = (text) => {\n  let result = text.replace(/\\s+", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase();\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_letters = file_name_check.match(/[a-zA-Z]/g);\n  let file_name_check_letters_length = file_name_check_letters.length;\n  let file_name_check_dot = file_name_check.match(/\\./g);\n  let file_name_check_dot_length = file_name_check_dot.length;\n  let file_name_check_letters_dot = file_name_check.match(/\\./g);\n  let file_name_check_letters_dot_length = file_name_check_letters_dot.length;\n  let file_name_check_letters_dot_dot = file_name_check.match(/\\.\\./g);\n  let file_name_check_letters_dot_dot_length = file_name_check_letters_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_length = file_name_check_letters_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_letters_dot_dot_dot_dot_dot_dot_dot.length;\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = file_name_check.match(/\\.\\.\\./g);\n  let file_name_check_letters_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares2([1,2,3]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n  if (x == \"0\") return false;\n  if (x == \"1\") return true;\n  if (x == n) return true;\n  if (x.length == 1) return simplify(x[0], n);\n  if (x.length == 2) return simplify(x[0], n) || simplify(x[1], n);\n  if (x.length == 3) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n);\n  if (x.length == 4) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n);\n  if (x.length == 5) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n);\n  if (x.length == 6) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n);\n  if (x.length == 7) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n);\n  if (x.length == 8) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n);\n  if (x.length == 9) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n);\n  if (x.length == 10) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n) || simplify(x[9], n);\n  if (x.length == 11) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n) || simplify(x[9], n) || simplify(x[10], n);\n  if (x.length == 12) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n) || simplify(x[9], n) || simplify(x[10], n) || simplify(x[11], n);\n  if (x.length == 13) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n) || simplify(x[9], n) || simplify(x[10], n) || simplify(x[11], n) || simplify(x[12], n);\n  if (x.length == 14) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n) || simplify(x[9], n) || simplify(x[10], n) || simplify(x[11], n) || simplify(x[12], n) || simplify(x[13], n);\n  if (x.length == 15) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n) || simplify(x[7], n) || simplify(x[8], n) || simplify(x[9], n) || simplify(x[10], n) || simplify(x[11], n) || simplify(x[12], n) || simplify(x[13], n) || simplify(x[14], n);\n  if (x.length == 16) return simplify(x[0], n) || simplify(x[1], n) || simplify(x[2], n) || simplify(x[3], n) || simplify(x[4], n) || simplify(x[5], n) || simplify(x[6], n)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let aDigit = a % 10,\n        bDigit = b % 10;\n    if (aDigit < bDigit) {\n      return -1;\n    }\n    if (aDigit > bDigit) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 10!== 0 && nums[i] % 10!== 1) {\n      continue;\n    }\n    if (nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    const [i, j, k] = curr.split('');\n    const [i1, j1, k1] = [i, j, k].map(Number);\n    const [i2, j2, k2] = [i1, j1, k1].map(Number);\n    const [i3, j3, k3] = [i2, j2, k2].map(Number);\n    const [i4, j4, k4] = [i3, j3, k3].map(Number);\n    const [i5, j5, k5] = [i4, j4, k4].map(Number);\n    const [i6, j6, k6] = [i5, j5, k5].map(Number);\n    const [i7, j7, k7] = [i6, j6, k6].map(Number);\n    const [i8, j8, k8] = [i7, j7, k7].map(Number);\n    const [i9, j9, k9] = [i8, j8, k8].map(Number);\n    const [i10, j10, k10] = [i9, j9, k9].map(Number);\n    const [i11, j11, k11] = [i10, j10, k10].map(Number);\n    const [i12, j12, k12] = [i11, j11, k11].map(Number);\n    const [i13, j13, k13] = [i12, j12, k12].map(Number);\n    const [i14, j14, k14] = [i13, j13, k13].map(Number);\n    const [i15, j15, k15] = [i14, j14, k14].map(Number);\n    const [i16, j16, k16] = [i15, j15, k15].map(Number);\n    const [i17, j17, k17] = [i16, j16, k16].map(Number);\n    const [i18, j18, k18] = [i17, j17, k17].map(Number);\n    const [i19, j19, k19] = [i18, j18, k18].map(Number);\n    const [i20, j20, k20] = [i19, j19, k19].map(Number);\n    const [i21, j21, k21] = [i20, j20, k20].map(Number);\n    const [i22, j22, k22] = [i21, j21, k21].map(Number);\n    const [i23, j23, k23] = [i22, j22, k22].map(Number);\n    const [i24, j24, k24] = [i23, j23, k23].map(Number);\n    const [i25, j25, k25] = [i24, j24, k24].map(Number);\n    const [i26, j26, k26] = [i25, j25, k25].map(Number);\n    const [i27, j27, k27] = [i26, j26, k26].map(Number);\n    const [i28, j28, k28] = [i27, j27, k27].map(Number);\n    const [i29, j29, k29] = [i28, j28, k28].map(Number);\n    const [i30, j30, k30] = [i29, j29, k29].map(Number);\n    const [i31, j31, k31] = [i30, j30, k30].map(Number);\n    const [i32, j32, k32] = [i31, j31, k31].map(Number);\n    const [i33, j33, k33] = [i32, j32, k32].map(Number);\n    const [i34, j34, k34] = [i33, j33, k33].map(Number);\n    const [i35, j35, k35] = [i34, j34, k34].map(Number);\n    const [i36, j36, k36] = [i35, j35, k35].map(Number);\n    const [i37, j37, k37] = [i36, j36, k36].map(Number);\n    const [i38, j38, k38] = [i37, j37, k37].map(Number);\n    const [i39, j39, k39] = [i38, j38, k38].map(Number);\n    const [i40, j40, k40] = [i39, j39, k39].map(Number);\n    const [i41, j41, k41] = [i40, j40, k40].map(Number);\n    const [i42, j42, k42] = [i41, j41, k41].map(Number);\n    const [i43, j43, k43] = [i42, j42, k42].map(Number);\n    const [i44, j44, k44] = [i43, j43, k43].map(Number);\n    const [i45, j45, k45] = [i44, j44, k44].map(Number);\n    const [i46, j46, k46] = [i45, j45, k45].map(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = [],\n    planet2Orbit = [],\n    planet1OrbitIndex = 0,\n    planet2OrbitIndex = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n    planet1OrbitLength = 0,\n    planet2OrbitLength = 0,\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted;\n};\n\nmodule.exports = {\n  sortedListSum,\n  list_sort,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `0 ${i + 1}`;\n  }\n  return s;\n};\n\n/*\n  Return a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst test = () => {\n  console.log(xOrY(7, 34, 12));\n  console.log(xOrY(15, 8, 5));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map(guess => {\n    const guessScore = guess.reduce((a, b) => a + b, 0);\n    return guessScore;\n  });\n  const result = game.map(guess => {\n    const guessScore = guess.reduce((a, b) => a + b, 0);\n    const guessDiff = Math.abs(guessScore - score[guess.index]);\n    return guessDiff;\n  });\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_lower = class_name.toLowerCase()\n  let class_name_upper = class_name.toUpperCase()\n  let class_name_lower_extensions = class_name_lower.split('.')\n  let class_name_upper_extensions = class_name_upper.split('.')\n  let class_name_lower_extensions_length = class_name_lower_extensions.length\n  let class_name_upper_extensions_length = class_name_upper_extensions.length\n  let class_name_lower_extensions_length_equal = class_name_lower_extensions_length === class_name_upper_extensions_length\n  let class_name_lower_extensions_equal = class_name_lower_extensions.every((extension, index) => extension === class_name_upper_extensions[index])\n  let class_name_upper_extensions_equal = class_name_upper_extensions.every((extension, index) => extension === class_name_lower_extensions[index])\n  let class_name_lower_extensions_equal_equal = class_name_lower_extensions_equal && class_name_upper_extensions_equal\n  let class_name_lower_extensions_length_equal_equal = class_name_lower_extensions_length_equal && class_name_upper_extensions_length_equal\n  let class_name_lower_extensions_length_equal_equal_equal = class_name_lower_extensions_length_equal_equal && class_name_upper_extensions_length_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_length_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_upper_extensions_length_equal_equal_equal_equal_equal_equal_equal\n  let class_name_lower_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      odd++;\n    } else {\n      even++;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let num = number\n  let i = 0\n  while (num > 0) {\n    let digit = num % 10\n    result += (digit < 4)? 'iv' : (digit < 9)? 'ix' : 'x'\n    num = num / 10\n    i++\n  }\n  return result.toLowerCase()\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c;\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    i++;\n  }\n  let j = 0;\n  while (j < need) {\n    if (remaining > 0) {\n      result.push(remaining);\n      remaining--;\n    } else {\n      result.push(0);\n    }\n    j++;\n  }\n  return result;\n};\n\nconst test = () => {\n  let result = eat(5, 6, 10);\n  console.log(result);\n  result = eat(4, 8, 9);\n  console.log(result);\n  result = eat(1, 10, 10);\n  console.log(result);\n  result = eat(2, 11, 5);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels2 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels3 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels4 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels5 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels6 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels7 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('Jerry')\n  2\n  */\nconst countVowels8 = (string) => {\n  let vowels = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a' || string.charAt(i) === 'e' || string.charAt(i) === 'i' || string.charAt(i) === 'o' || string.charAt(i) === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/* Given a string, find out how many vowels are in it\n  >>> countVowels('xyzXYZ')\n  3\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let index = 0;\n  while (index < operand.length) {\n    let operatorIndex = index;\n    while (operatorIndex < operator.length && operator[operatorIndex] === operand[index]) {\n      operatorIndex++;\n    }\n    if (operatorIndex === operator.length) {\n      result += operand[index];\n      index++;\n    } else {\n      result += operator[operatorIndex] * operand[index];\n      index++;\n      operatorIndex++;\n      while (operatorIndex < operator.length && operator[operatorIndex] === operand[index]) {\n        result += operator[operatorIndex];\n        index++;\n        operatorIndex++;\n      }\n    }\n  }\n  return result;\n};\n\nconst test = [\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['//', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['**', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['+', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['-', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['*', [2, 3, 4, 5], [2, 3, 4, 5]],\n  ['/', [2, 3, 4, 5], [2, 3, 4, 5]],\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let res = \"\";\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] >= 65 && str[i] <= 90) {\n      res += str[i].toUpperCase();\n    } else {\n      res += str[i];\n    }\n    i++;\n  }\n  return res;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i = i + 1;\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_2 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_3 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_4 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_5 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_6 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_7 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_8 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1) {\n      music_list.push(music_note);\n    } else if (music_note.length === 2) {\n      music_list.push(music_note.charCodeAt(0));\n      music_list.push(music_note.charCodeAt(1));\n    }\n  }\n  return music_list;\n};\n\nconst parseMusic_9 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_list = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i];\n    if (music_note.length === 1)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n      i += substring.length;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a, 10);\n    let bNum = parseInt(b, 10);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    throw new Error('number must be positive');\n  }\n\n  if (number === 0) {\n    return 0;\n  }\n\n  const integerPart = Math.floor(number);\n  const decimals = number - integerPart;\n\n  if (decimals < 0) {\n    throw new Error('number must be positive');\n  }\n\n  return integerPart;\n};\n\nmodule.exports = truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [min, max];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const range = max - min;\n  const scale = 1 / range;\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value);\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given list of any python valu es on ly for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  Filter given", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns the index of the first occurrence of a substring within a string.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @returns {Number} The index of the first occurrence of the substring, or -1 if not found.\n  */\nconst strpos = (string, substring) => {\n  if (string.indexOf(substring) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring);\n};\n\n/**\n  Returns the index of the last occurrence of a substring within a string.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @returns {Number} The index of the last occurrence of the substring, or -1 if not found.\n  */\nconst strrpos = (string, substring) => {\n  if (string.lastIndexOf(substring) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(substring);\n};\n\n/**\n  Returns the index of the first occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the first occurrence of the substring, or -1 if not found.\n  */\nconst strpos_start = (string, substring, start) => {\n  if (string.indexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the last occurrence of the substring, or -1 if not found.\n  */\nconst strrpos_start = (string, substring, start) => {\n  if (string.lastIndexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(substring, start);\n};\n\n/**\n  Returns the index of the first occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the first occurrence of the substring, or -1 if not found.\n  */\nconst strpos_end = (string, substring, start) => {\n  if (string.indexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the last occurrence of the substring, or -1 if not found.\n  */\nconst strrpos_end = (string, substring, start) => {\n  if (string.lastIndexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(substring, start);\n};\n\n/**\n  Returns the index of the first occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the first occurrence of the substring, or -1 if not found.\n  */\nconst strpos_end_start = (string, substring, start) => {\n  if (string.indexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the last occurrence of the substring, or -1 if not found.\n  */\nconst strrpos_end_start = (string, substring, start) => {\n  if (string.lastIndexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.lastIndexOf(substring, start);\n};\n\n/**\n  Returns the index of the first occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to start searching at.\n  @returns {Number} The index of the first occurrence of the substring, or -1 if not found.\n  */\nconst strpos_end_end = (string, substring, start) => {\n  if (string.indexOf(substring, start) === -1) {\n    return -1;\n  }\n  return string.indexOf(substring, start);\n};\n\n/**\n  Returns the index of the last occurrence of a substring within a string, starting at a given index.\n  @param {String} string The string to search in.\n  @param {String} substring The substring to search for.\n  @param {Number} start The index to", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*\n  For a given number n, find the smallest st nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*\n  For a given number n, find the largest st nu mber that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*\n  For a given number n, find the smallest st nu mber that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\nmodule.exports = {\n  largestDivisor,\n  smallestDivisor,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factors_count = [];\n  const factors_count_count = [];\n  const factors_count_count_count = [];\n  const factors_count_count_count_count = [];\n  const factors_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = [];\n  const factors_count_count_count_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n    } else if (numbers[i] === numbers[counter - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n      result.push(numbers", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  For a given string, return a string that is all uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> titleCase('Hello')\n  'Hello'\n  */\nconst titleCase = (string) => {\n  return string.toUpperCase().replace(/^[a-z]/, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> camelCase('Hello')\n  'hello'\n  */\nconst camelCase = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> snakeCase('Hello')\n  'hello'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> kebabCase('Hello')\n  'hello'\n  */\nconst kebabCase = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase2 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase3 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase4 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase5 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase6 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase7 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase8 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase9 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase10 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase11 = (string) => {\n  return string.replace(/[-_]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  For a given string, return a string that is all lowercase and uppercase.\n  >>> dashCase('Hello')\n  'hello'\n  */\nconst dashCase12 = (string) => {\n  return string.replace(/[-_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, s) => acc + s, '')\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\s+/)\n}\n\n/*\n  Convert a string to a list of words\n  >>> words('a b c')\n  ['a', 'b', 'c']\n  */\nconst words = (str) => {\n  return str.split(/\\", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (!strings ||!prefix) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only  forones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (!strings ||!suffix) {\n    return [];\n  }\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContains = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.endsWith(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAny = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContainsAny([], 'a')\n  []\n  >>> filterByContainsAny(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAll = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAllAny = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAllAnyAny = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAllAnyAnyAny = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAllAnyAnyAnyAny = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only  forones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAllAnyAnyAnyAnyAny = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterBySuffix,\n  filterByCont", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation;\n  });\n  return balance < 0;\n};\n\nmodule.exports = {\n  aboveZero,\n  belowZero\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return only negative numbers in the l ist.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return only numbers in the l ist.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return only numbers in the l ist.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 123, 1]\n  */\nconst getNumbersInRange = (l, min, max) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= min && l[i] <= max) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return only numbers in the l ist.\n  >>> getNumbersInRange([-1, 2, -4, 5, 6], 0, 10)\n  [-1, 2, 4, 5, 6]\n  >>> getNumbersInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10)\n  [5, 3, -5, 2, -3, 3, 9, 123, 1]\n  */\nconst getNumbersInRangeInclusive = (l, min, max) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= min && l[i] <= max) {\n      result.push(l[i]);\n    } else if (l[i] > max) {\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Return only numbers in the l ist.\n  >>> getNumbersInRange([-1, 2, -4, 5, 6], 0, 10)\n  [-1, 2, 4, 5, 6]\n  >>> getNumbersInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10)\n  [5, 3, -5, 2, -3, 3, 9, 123, 1]\n  */\nconst getNumbersInRangeExclusive = (l, min, max) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= min && l[i] <= max) {\n      result.push(l[i]);\n    } else if (l[i] > max) {\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Return only numbers in the l ist.\n  >>> getNumbersInRange([-1, 2, -4, 5, 6], 0, 10)\n  [-1, 2, 4, 5, 6]\n  >>> getNumbersInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10)\n  [5, 3, -5, 2, -3, 3, 9, 123, 1]\n  */\nconst getNumbersInRangeExclusiveInclusive = (l, min, max) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= min && l[i] <= max) {\n      result.push(l[i]);\n    } else if (l[i] > max) {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getNumbers,\n  getNumbersInRange,\n  getNumbersInRangeInclusive,\n  getNumbersInRangeExclusive,\n  getNumbersInRangeExclusiveInclusive\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst getPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  let prev = 0;\n  let item = 0;\n  let index = 0;\n  let x = 0;\n  let xs2 = [];\n  let xs3 = [];\n  let xs4 = [];\n  let xs5 = [];\n  let xs6 = [];\n  let xs7 = [];\n  let xs8 = [];\n  let xs9 = [];\n  let xs10 = [];\n  let xs11 = [];\n  let xs12 = [];\n  let xs13 = [];\n  let xs14 = [];\n  let xs15 = [];\n  let xs16 = [];\n  let xs17 = [];\n  let xs18 = [];\n  let xs19 = [];\n  let xs20 = [];\n  let xs21 = [];\n  let xs22 = [];\n  let xs23 = [];\n  let xs24 = [];\n  let xs25 = [];\n  let xs26 = [];\n  let xs27 = [];\n  let xs28 = [];\n  let xs29 = [];\n  let xs30 = [];\n  let xs31 = [];\n  let xs32 = [];\n  let xs33 = [];\n  let xs34 = [];\n  let xs35 = [];\n  let xs36 = [];\n  let xs37 = [];\n  let xs38 = [];\n  let xs39 = [];\n  let xs40 = [];\n  let xs41 = [];\n  let xs42 = [];\n  let xs43 = [];\n  let xs44 = [];\n  let xs45 = [];\n  let xs46 = [];\n  let xs47 = [];\n  let xs48 = [];\n  let xs49 = [];\n  let xs50 = [];\n  let xs51 = [];\n  let xs52 = [];\n  let xs53 = [];\n  let xs54 = [];\n  let xs55 = [];\n  let xs56 = [];\n  let xs57 = [];\n  let xs58 = [];\n  let xs59 = [];\n  let xs60 = [];\n  let xs61 = [];\n  let xs62 = [];\n  let xs63 = [];\n  let xs64 = [];\n  let xs65 = [];\n  let xs66 = [];\n  let xs67 = [];\n  let xs68 = [];\n  let xs69 = [];\n  let xs70 = [];\n  let xs71 = [];\n  let xs72 = [];\n  let xs73 = [];\n  let xs74 = [];\n  let xs75 = [];\n  let xs76 = [];\n  let xs77 = [];\n  let xs78 = [];\n  let xs79 = [];\n  let xs80 = [];\n  let xs81 = [];\n  let xs82 = [];\n  let xs83 = [];\n  let xs84 = [];\n  let xs85 = [];\n  let xs86 = [];\n  let xs87 = [];\n  let xs88 = [];\n  let xs89 = [];\n  let xs90 = [];\n  let xs91 = [];\n  let xs92 = [];\n  let xs93 = [];\n  let xs94 = [];\n  let xs95 = [];\n  let xs96 = [];\n  let xs97 = [];\n  let xs98 = [];\n  let xs99 = [];\n  let xs100 = [];\n  let xs101 = [];\n  let xs102 = [];\n  let xs103 = [];\n  let xs104 = [];\n  let xs105 = [];\n  let xs106 = [];\n  let xs107 = [];\n  let xs108 = [];\n  let xs109 = [];\n  let xs110 = [];\n  let xs111 = [];\n  let xs112 = [];\n  let xs113 = [];\n  let xs114 = [];\n  let xs115 = [];\n  let xs116 = [];\n  let xs117 = [];\n  let xs118 = [];\n  let xs119 = [];\n  let xs120 = [];\n  let xs121 = [];\n  let xs122 = [];\n  let xs123 = [];\n  let xs124 = [];\n  let xs125 = [];\n  let xs126 = [];\n  let xs127 = [];\n  let xs128 = [];\n  let xs129 = [];\n  let xs130 = [];\n  let xs131 = [];\n  let xs132 = [];\n  let xs133 = [];\n  let xs134 = [];\n  let xs135 = [];\n  let xs136 = [];\n  let xs137 = [];\n  let xs138 = [];\n  let xs139 = [];\n  let xs140 = [];\n  let xs141 = [];\n  let xs142 = [];\n  let xs143 = [];\n  let xs144 = [];\n  let xs145 = [];\n  let xs146 = [];\n  let xs147 = [];\n  let xs148 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let tmp = [];\n  let tmp2 = [];\n  while (i < l.length) {\n    if (j === k) {\n      tmp.push(l[i]);\n      tmp2.push(l[i]);\n      i++;\n      j++;\n    } else if (l[i] === l[j]) {\n      i++;\n      j++;\n    } else if (l[i] < l[j]) {\n      tmp.push(l[i]);\n      tmp2.push(l[i]);\n      i++;\n      j++;\n    } else {\n      k++;\n      tmp.push(l[j]);\n      tmp2.push(l[j]);\n      j++;\n    }\n  }\n  return [tmp, tmp2];\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 13 === 0) {\n      buzz++;\n    }\n    if (i % 11 === 0) {\n      fizz++;\n    }\n    i++;\n  }\n  return fizz + buzz;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven7 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i], l[i + 1]);\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic2 = (s) => {\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic2 = (s) => {\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic3 = (s) => {\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic3 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic4 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic4 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic5 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic5 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic6 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic6 = (s) =>{\n  let deco = s.split(' ');\n  let deco2 = [];\n  for(let i = 0; i < deco.length; i++ ) {\n    deco2.push(deco [i].slice(0,3));\n  }\n  return decodeCyclic(deco2);\n}\n\n/*\n  takes as input string enc o", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = true;\n  while (prime) {\n    fib = fib + fib;\n    prime = isPrime(fib);\n  }\n  return fib;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime returns true if n is prime and false otherwise.\n  >>> isPrime(1)\n  True\n  >>> isPrime(2)\n  True\n  >>> isPrime(3)\n  True\n  >>> isPrime(4)\n  False\n  >>> isPrime(5)\n  False\n  */\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n\n/*\n  isPrime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(subtract(numbers, mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero2 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero3 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero4 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero5 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero6 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero7 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero8 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero9 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero10 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero11 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero12 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero13 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero14 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero15 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero16 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nconst triplesSumToZero17 = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a,b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let tmp = l[j];\n  l[j] = l[i];\n  l[i] = tmp;\n  while (i < j) {\n    tmp = l[i];\n    l[i] = l[j];\n    l[j] = tmp;\n    i++;\n    j--;\n  }\n  return l;\n};\n\nconst printList = (l) => {\n  console.log(l);\n};\n\nconst main = () => {\n  const l = [1, 2, 3, 4, 5];\n  incrList(l);\n  printList(l);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      sum += l[i];\n      i++;\n      j++;\n      k++;\n    } else {\n      if (k > 0) {\n        sum += k;\n        i++;\n        j++;\n        k = 0;\n      } else {\n        sum += l[i];\n        i++;\n        j++;\n      }\n    }\n  }\n  return sum === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  while (i > 0) {\n    result = '0' + result;\n    i--;\n  }\n  return result;\n};\n\nconst changeBase2 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase3 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase4 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase5 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase6 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase7 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase8 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase9 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase10 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase11 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase12 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase13 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase14 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase15 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase16 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase17 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);\n    i++;\n  }\n  return result;\n};\n\nconst changeBase18 = (x, base) => {\n  let result = '';\n  let i = 0;\n  while (x > 0) {\n    result = String.fromCharCode(x % base) + result;\n    x = Math.floor(x / base);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a2 = a * a\n  const h2 = h * h\n  return Math.sqrt(a2 - h2)\n}\n\nmodule.exports = triangleArea\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib4_test = () => {\n  console.log(fib4(5));\n  console.log(fib4(6));\n  console.log(fib4(7));\n};\n\nfib4_test();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let mid = Math.floor(l.length / 2);\n  let left = l.slice(0, mid);\n  let right = l.slice(mid, l.length);\n  return (left.length > right.length)?\n    median(left) :\n    median(right);\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text[0];\n  let last = text[text.length - 1];\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    return modp(-n, p)\n  }\n  if (n % p === 0) {\n    return 1\n  }\n  let res = 1\n  while (n > 0) {\n    if (n % p === 0) {\n      res = (res * 2) % p\n    }\n    n = n / p\n  }\n  return res\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  const current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  return s. split(\"\").map(c => Stri ng.fromCharCode(\n    ((Stri ng.fromCharCode(c.charCodeAt(0) - 5) + \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift = (s) => {\n  return encodeShift(s);\n}\n\nconst decode_shift = (s) => {\n  return decodeShift(s);\n}\n\nconst encode_shift_str = (s) => {\n  return encode_shift(s);\n}\n\nconst decode_shift_str = (s) => {\n  return decode_shift(s);\n}\n\nconst encode_shift_str_to_str = (s) => {\n  return encode_shift_str(s);\n}\n\nconst decode_shift_str_to_str = (s) => {\n  return decode_shift_str(s);\n}\n\nconst encode_shift_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {\n  return decode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str(s);\n}\n\nconst encode_shift_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str_to_str = (s) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that takes s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that takes s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that takes s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that takes s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that takes s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that takes s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiou]/g, '').replace(/[^aeiou]/g, '');\n};\n\n/*\n  removeVowels is a function that", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold10 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold11 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst betweenThreshold12 = (l, t, t1) => {\n  return l.every(x => x > t && x < t1);\n};\n\n/**\n  Returns true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0\n  while (i < s0.length && i < s1.length) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Check if two words have the same length.\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  return s0.length === s1.length\n}\n\n/*\n  Check if two words have the same number of letters.\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetters('abcd', 'dddddddabc')\n  true\n  >>> sameLetters('dddddddabc', 'abcd')\n  true\n  >>> sameLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameLetters('abcd', 'dddddddabce')\n  false\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetters = (s0, s1) => {\n  return s0.length === s1.length\n}\n\n/*\n  Check if two words have the same number of letters.\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetters('abcd', 'dddddddabc')\n  true\n  >>> sameLetters('dddddddabc', 'abcd')\n  true\n  >>> sameLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameLetters('abcd', 'dddddddabce')\n  false\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLettersCount = (s0, s1) => {\n  return s0.length === s1.length\n}\n\n/*\n  Check if two words have the same number of letters.\n  >>> sameLettersCount('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLettersCount('abcd', 'dddddddabc')\n  true\n  >>> sameLettersCount('dddddddabc', 'abcd')\n  true\n  >>> sameLettersCount('eabcd', 'dddddddabc')\n  false\n  >>> sameLettersCount('abcd', 'dddddddabce')\n  false\n  >>> sameLettersCount('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLettersCounts = (s0, s1) => {\n  return s0.length === s1.length\n}\n\n/*\n  Check if two words have the same number of letters.\n  >>> sameLettersCounts('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLettersCounts('abcd', 'dddddddabc')\n  true\n  >>> sameLettersCounts('dddddddabc', 'abcd')\n  true\n  >>> sameLettersCounts('eabcd', 'dddddddabc')\n  false\n  >>> sameLettersCounts('abcd', 'dddddddabce')\n  false\n  >>> sameLettersCounts('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLettersCountsCount = (s0, s1) => {\n  return s0.length === s1.length\n}\n\n/*\n  Check if two words have the same number of letters.\n  >>> sameLettersCountsCount('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLettersCountsCount('abcd', 'dddddddabc')\n  true\n  >>> sameLettersCountsCount('dddddddabc', 'abcd')\n  true\n  >>> sameLettersCountsCount('eabcd', 'dddddddabc')\n  false\n  >>> sameLettersCountsCount('abcd', 'dddddddabce')\n  false\n  >>> sameLettersCountsCount('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLettersCountsCounts = (s0, s1) => {\n  return s0.length === s1.length\n}\n\n/*\n  Check if two words have the same number of letters.\n  >>> sameLettersCountsCount('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLettersCountsCount('abcd', 'dddddddabc')\n  true\n  >>> sameLettersCountsCount('dddddddabc', 'abcd')\n  true\n  >>> sameLettersCountsCount('eabcd', 'dddddddabc')\n  false\n  >>> sameLettersCountsCount('abcd', 'dddddddabce')\n  false\n  >>> sameLettersCountsCount('eabcdzzzz', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) return n;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) return n;\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) return n;\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) return n;\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) return n;\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) return n;\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) return n;\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) return n;\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) return n;\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) return n;\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) return n;\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) return n;\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) return n;\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) return n;\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) return n;\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n < 2) return n;\n  return fib18(n - 1) + fib18", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 1) {\n    return true;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    }\n    if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...set1.values()].filter(v => set2.has(v));\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    throw new Error('n must be greater than 1')\n  }\n  if (n % 2 === 0) {\n    return 2\n  }\n  let i = 3\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let current_paren = 0;\n  let nested_paren_count = 0;\n  let nested_paren_level = 0;\n  let nested_paren_string = '';\n  let nested_paren_string_length = 0;\n  let nested_paren_string_index = 0;\n  let nested_paren_string_last_index = 0;\n  let nested_paren_string_last_length = 0;\n  let nested_paren_string_last_index_length = 0;\n  let nested_paren_string_last_index_length_length = 0;\n  let nested_paren_string_last_index_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let nested_paren_string_last_index_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const dxs = [];\n  for (let i = 0; i < n; i++) {\n    dxs[i] = xs[i + 1] - xs[i];\n  }\n  return dxs;\n};\n\n/*\n  x^2 + x + 1\n  x^3 + x^2 + x + 1\n  x^4 + x^3 + x^2 + x + 1\n  x^5 + x^4 + x^3 + x^2 + x + 1\n  x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^26 + x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2);\n};\n\nconst fibfib2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib2(n - 1) + fibfib2(n - 2);\n};\n\nconst fibfib3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  return fibfib3(n - 1) + fibfib3(n - 2) + fibfib3(n - 3);\n};\n\nconst fibfib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  if (n === 5) {\n    return 4;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 6;\n  }\n  if (n === 8) {\n    return 7;\n  }\n  if (n === 9) {\n    return 8;\n  }\n  if (n === 10) {\n    return 9;\n  }\n  if (n === 11) {\n    return 10;\n  }\n  if (n === 12) {\n    return 11;\n  }\n  if (n === 13) {\n    return 12;\n  }\n  if (n === 14) {\n    return 13;\n  }\n  if (n === 15) {\n    return 14;\n  }\n  if (n === 16) {\n    return 15;\n  }\n  if (n === 17) {\n    return 16;\n  }\n  if (n === 18) {\n    return 17;\n  }\n  if (n === 19) {\n    return 18;\n  }\n  if (n === 20) {\n    return 19;\n  }\n  if (n === 21) {\n    return 20;\n  }\n  if (n === 22) {\n    return 21;\n  }\n  if (n === 23) {\n    return 22;\n  }\n  if (n === 24) {\n    return 23;\n  }\n  if (n === 25) {\n    return 24;\n  }\n  if (n === 26) {\n    return 25;\n  }\n  if (n === 27) {\n    return 26;\n  }\n  if (n === 28) {\n    return 27;\n  }\n  if (n === 29) {\n    return 28;\n  }\n  if (n === 30) {\n    return 29;\n  }\n  if (n === 31) {\n    return 30;\n  }\n  if (n === 32) {\n    return 31;\n  }\n  if (n === 33) {\n    return 32;\n  }\n  if (n === 34) {\n    return 33;\n  }\n  if (n === 35) {\n    return 34;\n  }\n  if (n === 36) {\n    return 35;\n  }\n  if (n === 37) {\n    return 36;\n  }\n  if (n === 38) {\n    return 37;\n  }\n  if (n === 39) {\n    return 38;\n  }\n  if (n === 40) {\n    return 39;\n  }\n  if (n === 41) {\n    return 40;\n  }\n  if (n === 42) {\n    return 41;\n  }\n  if (n === 43) {\n    return 42;\n  }\n  if (n === 44) {\n    return 43;\n  }\n  if (n === 45) {\n    return 44;\n  }\n  if (n === 46) {\n    return 45;\n  }\n  if (n === 47) {\n    return 46;\n  }\n  if (n === 48) {\n    return 47;\n  }\n  if (n === 49) {\n    return 48;\n  }\n  if (n === 50) {\n    return 49;\n  }\n  if (n === 51) {\n    return 50;\n  }\n  if (n === 52) {\n    return 51;\n  }\n  if (n === 53) {\n    return 52;\n  }\n  if (n === 54) {\n    return 53;\n  }\n  if (n === 55) {\n    return 54;\n  }\n  if (n === 56) {\n    return 55;\n  }\n  if (n === 57) {\n    return 56;\n  }\n  if (n === 58) {\n    return 57;\n  }\n  if (n === 59) {\n    return 58;\n  }\n  if (n === 60) {\n    return 59;\n  }\n  if (n === 61) {\n    return 60;\n  }\n  if (n === 62) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit = (x, shift) => {\n  return circularShift(x, shift);\n};\n\nconst getDigit2 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit3 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit4 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit5 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit6 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit7 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit8 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit9 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit10 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit11 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit12 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit13 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit14 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit15 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit16 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += digits[length - i - 1] + digits[i];\n  }\n  return result;\n};\n\nconst getDigit17 = (x, shift) => {\n  const digits = x.toString(10);\n  const length = digits.length;\n  const result = \"\";\n  for (let i = 0; i < length; i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n  let sum = 0;\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const index = arr.indexOf(min);\n  if (index === -1) {\n    return result;\n  }\n  result.push([min, index]);\n  return result;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let arr = lst.slice(0);\n  let len = arr.length;\n  let min = arr[0];\n  let max = arr[0];\n  let i = 0;\n  while (i < len) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  let result = [];\n  for (let j = 0; j < len; j++) {\n    if (arr[j] < min) {\n      result.push(min);\n      min = arr[j];\n    }\n    if (arr[j] > max) {\n      result.push(max);\n      max = arr[j];\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s = a + b + c;\n  return s > 0? s / 2 : -1;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let lst1Len = lst1.length;\n  let lst2Len = lst2.length;\n  if (lst1Len === lst2Len) {\n    return lst1;\n  }\n  for (let i = 0; i < lst1Len; i++) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n  }\n  return total === lst1Len? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x < 0) {\n    return false;\n  }\n  if (x === 0) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return isSimplePower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\nconsole.log(isSimplePower(5, 4));\nconsole.log(isSimplePower(5, 5));\nconsole.log(isSimplePower(5, 6));\nconsole.log(isSimplePower(5, 7));\nconsole.log(isSimplePower(5, 8));\nconsole.log(isSimplePower(5, 9));\nconsole.log(isSimplePower(5, 10));\nconsole.log(isSimplePower(5, 11));\nconsole.log(isSimplePower(5, 12));\nconsole.log(isSimplePower(5, 13));\nconsole.log(isSimplePower(5, 14));\nconsole.log(isSimplePower(5, 15));\nconsole.log(isSimplePower(5, 16));\nconsole.log(isSimplePower(5, 17));\nconsole.log(isSimplePower(5, 18));\nconsole.log(isSimplePower(5, 19));\nconsole.log(isSimplePower(5, 20));\nconsole.log(isSimplePower(5, 21));\nconsole.log(isSimplePower(5, 22));\nconsole.log(isSimplePower(5, 23));\nconsole.log(isSimplePower(5, 24));\nconsole.log(isSimplePower(5, 25));\nconsole.log(isSimplePower(5, 26));\nconsole.log(isSimplePower(5, 27));\nconsole.log(isSimplePower(5, 28));\nconsole.log(isSimplePower(5, 29));\nconsole.log(isSimplePower(5, 30));\nconsole.log(isSimplePower(5, 31));\nconsole.log(isSimplePower(5, 32));\nconsole.log(isSimplePower(5, 33));\nconsole.log(isSimplePower(5, 34));\nconsole.log(isSimplePower(5, 35));\nconsole.log(isSimplePower(5, 36));\nconsole.log(isSimplePower(5, 37));\nconsole.log(isSimplePower(5, 38));\nconsole.log(isSimplePower(5, 39));\nconsole.log(isSimplePower(5, 40));\nconsole.log(isSimplePower(5, 41));\nconsole.log(isSimplePower(5, 42));\nconsole.log(isSimplePower(5, 43));\nconsole.log(isSimplePower(5, 44));\nconsole.log(isSimplePower(5, 45));\nconsole.log(isSimplePower(5, 46));\nconsole.log(isSimplePower(5, 47));\nconsole.log(isSimplePower(5, 48));\nconsole.log(isSimplePower(5, 49));\nconsole.log(isSimplePower(5, 50));\nconsole.log(isSimplePower(5, 51));\nconsole.log(isSimplePower(5, 52));\nconsole.log(isSimplePower(5, 53));\nconsole.log(isSimplePower(5, 54));\nconsole.log(isSimplePower(5, 55));\nconsole.log(isSimplePower(5, 56));\nconsole.log(isSimplePower(5, 57));\nconsole.log(isSimplePower(5, 58));\nconsole.log(isSimplePower(5, 59));\nconsole.log(isSimplePower(5, 60));\nconsole.log(isSimplePower(5, 61));\nconsole.log(isSimplePower(5, 62));\nconsole.log(isSimplePower(5, 63));\nconsole.log(isSimplePower(5, 64));\nconsole.log(isSimplePower(5, 65));\nconsole.log(isSimplePower(5, 66));\nconsole.log(isSimplePower(5, 67));\nconsole.log(isSimplePower(5, 68));\nconsole.log(isSimplePower(5, 69));\nconsole.log(isSimplePower(5, 70));\nconsole.log(isSimplePower(5, 71));\nconsole.log(isSimplePower(5, 72));\nconsole.log(isSimplePower(5, 73));\nconsole.log(isSimplePower(5, 74));\nconsole.log(isSimplePower(5, 75));\nconsole.log(isSimplePower(5, 76));\nconsole.log(isSimplePower(5, 77));\nconsole.log(isSimplePower(5, 78));\nconsole.log(isSimplePower(5, 79));\nconsole.log(isSimplePower(5, 80));\nconsole.log(isSimplePower(5, 81));\nconsole.log(isSimplePower(5, 82));\nconsole.log(isSimplePower(5, 83));\nconsole.log(isSimplePower(5, 84));\nconsole.log(isSimplePower(5, 85));\nconsole.log(isSimplePower(5, 86));\nconsole.log(isSimplePower(5, 87));\nconsole.log(isSimplePower(5, 88));\nconsole.log(isSimplePower(5, 89));\nconsole.log(isSimplePower(5, 90));\nconsole.log(isSimplePower(5, 91));\nconsole.log(isSimplePower(5, 92));\nconsole.log(isSimplePower(5, 93));\nconsole.log(isSimplePower(5, 94));\nconsole.log(isSimplePower(5, 95));\nconsole.log(isSimplePower(5, 96));\nconsole.log(isSimplePower(5, 97));\nconsole.log(isSimplePower(5, 98));\nconsole.log(isSimplePower(5", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0;\n};\n\nconst iscube2 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0;\n};\n\nconst iscube3 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0;\n};\n\nconst iscube4 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0;\n};\n\nconst iscube5 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0;\n};\n\nconst iscube6 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0;\n};\n\nconst iscube7 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0;\n};\n\nconst iscube8 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0;\n};\n\nconst iscube9 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0;\n};\n\nconst iscube10 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0;\n};\n\nconst iscube11 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0;\n};\n\nconst iscube12 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0;\n};\n\nconst iscube13 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0;\n};\n\nconst iscube14 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0;\n};\n\nconst iscube15 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0 && a % 67 === 0;\n};\n\nconst iscube16 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0 && a % 67 === 0 && a % 71 === 0;\n};\n\nconst iscube17 = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    let nums = num.split(\"\");\n    let res = 0;\n    for (let j = 0; j < nums.length; j++) {\n      let num = nums[j];\n      if (num.length === 1) {\n        res += parseInt(num, 10);\n      } else if (num.length === 2) {\n        res += parseInt(num, 16);\n      } else {\n        res += parseInt(num, 10);\n      }\n    }\n  }\n  return res;\n};\n\nconst getPrime = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime2 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime3 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime4 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime5 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime6 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime7 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n      res += parseInt(num, 16);\n    } else {\n      res += parseInt(num, 10);\n    }\n  }\n  return res;\n};\n\nconst getPrime8 = (num) => {\n  let nums = num.split(\"\");\n  let res = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num.length === 1) {\n      res += parseInt(num, 10);\n    } else if (num.length === 2) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = decimal.length;\n  let binaryIndex = 0;\n  let binaryIndex2 = 0;\n  let binaryIndex3 = 0;\n  let binaryIndex4 = 0;\n  let binaryIndex5 = 0;\n  let binaryIndex6 = 0;\n  let binaryIndex7 = 0;\n  let binaryIndex8 = 0;\n  let binaryIndex9 = 0;\n  let binaryIndex10 = 0;\n  let binaryIndex11 = 0;\n  let binaryIndex12 = 0;\n  let binaryIndex13 = 0;\n  let binaryIndex14 = 0;\n  let binaryIndex15 = 0;\n  let binaryIndex16 = 0;\n  let binaryIndex17 = 0;\n  let binaryIndex18 = 0;\n  let binaryIndex19 = 0;\n  let binaryIndex20 = 0;\n  let binaryIndex21 = 0;\n  let binaryIndex22 = 0;\n  let binaryIndex23 = 0;\n  let binaryIndex24 = 0;\n  let binaryIndex25 = 0;\n  let binaryIndex26 = 0;\n  let binaryIndex27 = 0;\n  let binaryIndex28 = 0;\n  let binaryIndex29 = 0;\n  let binaryIndex30 = 0;\n  let binaryIndex31 = 0;\n  let binaryIndex32 = 0;\n  let binaryIndex33 = 0;\n  let binaryIndex34 = 0;\n  let binaryIndex35 = 0;\n  let binaryIndex36 = 0;\n  let binaryIndex37 = 0;\n  let binaryIndex38 = 0;\n  let binaryIndex39 = 0;\n  let binaryIndex40 = 0;\n  let binaryIndex41 = 0;\n  let binaryIndex42 = 0;\n  let binaryIndex43 = 0;\n  let binaryIndex44 = 0;\n  let binaryIndex45 = 0;\n  let binaryIndex46 = 0;\n  let binaryIndex47 = 0;\n  let binaryIndex48 = 0;\n  let binaryIndex49 = 0;\n  let binaryIndex50 = 0;\n  let binaryIndex51 = 0;\n  let binaryIndex52 = 0;\n  let binaryIndex53 = 0;\n  let binaryIndex54 = 0;\n  let binaryIndex55 = 0;\n  let binaryIndex56 = 0;\n  let binaryIndex57 = 0;\n  let binaryIndex58 = 0;\n  let binaryIndex59 = 0;\n  let binaryIndex60 = 0;\n  let binaryIndex61 = 0;\n  let binaryIndex62 = 0;\n  let binaryIndex63 = 0;\n  let binaryIndex64 = 0;\n  let binaryIndex65 = 0;\n  let binaryIndex66 = 0;\n  let binaryIndex67 = 0;\n  let binaryIndex68 = 0;\n  let binaryIndex69 = 0;\n  let binaryIndex70 = 0;\n  let binaryIndex71 = 0;\n  let binaryIndex72 = 0;\n  let binaryIndex73 = 0;\n  let binaryIndex74 = 0;\n  let binaryIndex75 = 0;\n  let binaryIndex76 = 0;\n  let binaryIndex77 = 0;\n  let binaryIndex78 = 0;\n  let binaryIndex79 = 0;\n  let binaryIndex80 = 0;\n  let binaryIndex81 = 0;\n  let binaryIndex82 = 0;\n  let binaryIndex83 = 0;\n  let binaryIndex84 = 0;\n  let binaryIndex85 = 0;\n  let binaryIndex86 = 0;\n  let binaryIndex87 = 0;\n  let binaryIndex88 = 0;\n  let binaryIndex89 = 0;\n  let binaryIndex90 = 0;\n  let binaryIndex91 = 0;\n  let binaryIndex92 = 0;\n  let binaryIndex93 = 0;\n  let binaryIndex94 = 0;\n  let binaryIndex95 = 0;\n  let binaryIndex96 = 0;\n  let binaryIndex97 = 0;\n  let binaryIndex98 = 0;\n  let binaryIndex99 = 0;\n  let binaryIndex100 = 0;\n  let binaryIndex101 = 0;\n  let binaryIndex102 = 0;\n  let binaryIndex103 = 0;\n  let binaryIndex104 = 0;\n  let binaryIndex105 = 0;\n  let binaryIndex106 = 0;\n  let binaryIndex107 = 0;\n  let binaryIndex108 = 0;\n  let binaryIndex109 = 0;\n  let binaryIndex110 = 0;\n  let binaryIndex111 = 0;\n  let binaryIndex112 = 0;\n  let binaryIndex113 = 0;\n  let binaryIndex114 = 0;\n  let binaryIndex115 = 0;\n  let binaryIndex116 = 0;\n  let binaryIndex117 = 0;\n  let binaryIndex118 = 0;\n  let binaryIndex119 = 0;\n  let binaryIndex120 = 0;\n  let binaryIndex121 = 0;\n  let binaryIndex122 = 0;\n  let binaryIndex123 = 0;\n  let binaryIndex124 = 0;\n  let binaryIndex125 = 0;\n  let binaryIndex126 = 0;\n  let binaryIndex127 = 0;\n  let binaryIndex128 = 0;\n  let binaryIndex129 = 0;\n  let binaryIndex130 = 0;\n  let binaryIndex131 = 0;\n  let binaryIndex132 = 0;\n  let binaryIndex133 = 0;\n  let binaryIndex134 = 0;\n  let binaryIndex135 = 0;\n  let binaryIndex136 = 0;\n  let binaryIndex137 = 0;\n  let binaryIndex138 = 0;\n  let binaryIndex139 = 0;\n  let binaryIndex140 = 0;\n  let binaryIndex141 = 0;\n  let binaryIndex142 = 0;\n  let binaryIndex143 = 0;\n  let binaryIndex144 = 0;\n  let binaryIndex145 = 0;\n  let binaryIndex146 = 0;\n  let binaryIndex147 = 0;\n  let binaryIndex148 = 0;\n  let binaryIndex149 = 0;\n  let binaryIndex150 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let emptyProduct = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    emptyProduct *= numbers[i]\n  }\n  return [sum, product, emptyProduct]\n}\n\nconst test = () => {\n  let numbers = [1, 2, 3, 4]\n  let result = sumProduct(numbers, 1)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  if (len < 3) return false;\n  let cnt = 0;\n  for (let i = 0; i < len; i++) {\n    let c = s[i];\n    if (c === c) {\n      cnt++;\n      if (cnt > 2) return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = '';\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeList = [];\n  let gradeListLength = 0;\n  let gradeListLengthMax = 0;\n  let gradeListLengthMin = 0;\n  let gradeListLengthAverage = 0;\n  let gradeListLengthAverageMax = 0;\n  let gradeListLengthAverageMin = 0;\n  let gradeListLengthAverageAverage = 0;\n  let gradeListLengthAverageAverageMax = 0;\n  let gradeListLengthAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMax = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageMin = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverageAverage = 0;\n  let gradeListLengthAverageAverageAverageAverageAverageAverageAverage", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '1') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  0.\ncon s t start sZeroEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '0') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  2.\ncon s t start sTwoEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '2') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  3.\ncon s t start sThreeEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '3') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  4.\ncon s t start sFourEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '4') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  5.\ncon s t start sFiveEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '5') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  6.\ncon s t start sSixEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '6') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  7.\ncon s t start sSevenEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '7') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  8.\ncon s t start sEightEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '8') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  9.\ncon s t start sNineEnds= (n) => {\n  let result = 0;\n  let nDigits = n.toString().length;\n  let nDigitsMinusOne = nDigits - 1;\n  for (let i = 1; i <= nDigitsMinusOne; i++) {\n    let digit = n.toString().charAt(i);\n    if (digit === '9') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n//  Given a positive integer n, return t he co unt of", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    res += lst[i];\n    if (i % 2 === 1) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const arr = s.split('');\n  let result = '';\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr.indexOf(arr[i]);\n    if (index > -1) {\n      result += arr[i];\n      arr.splice(index, 1);\n    }\n  }\n  return result;\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow7 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow8 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow9 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i].length === x) {\n      res.push([lst[i][0], lst[i][x]]);\n      i++;\n    } else {\n      res.push([lst[i][0], lst[i][0]]);\n      i++;\n    }\n  }\n  return res;\n};\n\nconst getRow10 = (lst, x) => {\n  if (lst.length === 0) return [];\n  let res = [];\n  let i = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  let sortedArray = array.slice();\n  let sortedArrayLength = sortedArray.length;\n  let sum = 0;\n  for (let i = 0; i < sortedArrayLength; i++) {\n    sum += sortedArray[i];\n  }\n  let oddSum = sum % 2;\n  let descendingSum = sum % 2;\n  if (oddSum) {\n    sortedArray.sort((a, b) => {\n      return a - b;\n    });\n    descendingSum =!descendingSum;\n  }\n  if (descendingSum) {\n    sortedArray.reverse();\n  }\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest2 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest3 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest4 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest5 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest6 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest7 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest8 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest9 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest10 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest11 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest12 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest13 = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconstnex tNextSmallest14 = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let nd = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt43 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt44 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt45 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt46 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt47 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt48 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt49 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt50 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt51 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt52 = (x, y, z) => {\n  return x + y === z;\n};\n\nconst anyInt53 = (x,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter.toUpperCase() === nextLetter.toUpperCase()) {\n      encoded += letter;\n      i++;\n    } else {\n      encoded += letter.toLowerCase();\n      i++;\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    if (letter.toLowerCase() === nextLetter.toLowerCase()) {\n      decoded += letter;\n      i++;\n    } else {\n      decoded += letter.toUpperCase();\n      i++;\n    }\n  }\n  return decoded;\n};\n\nconst test = () => {\n  let message = 'This is a message';\n  let encoded = encode(message);\n  console.log(message);\n  console.log(encoded);\n  console.log(decode(encoded));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitIndex = 0;\n  let maxDigitIndex2 = 0;\n  let maxDigitIndex3 = 0;\n  let maxDigitIndex4 = 0;\n  let maxDigitIndex5 = 0;\n  let maxDigitIndex6 = 0;\n  let maxDigitIndex7 = 0;\n  let maxDigitIndex8 = 0;\n  let maxDigitIndex9 = 0;\n  let maxDigitIndex10 = 0;\n  let maxDigitIndex11 = 0;\n  let maxDigitIndex12 = 0;\n  let maxDigitIndex13 = 0;\n  let maxDigitIndex14 = 0;\n  let maxDigitIndex15 = 0;\n  let maxDigitIndex16 = 0;\n  let maxDigitIndex17 = 0;\n  let maxDigitIndex18 = 0;\n  let maxDigitIndex19 = 0;\n  let maxDigitIndex20 = 0;\n  let maxDigitIndex21 = 0;\n  let maxDigitIndex22 = 0;\n  let maxDigitIndex23 = 0;\n  let maxDigitIndex24 = 0;\n  let maxDigitIndex25 = 0;\n  let maxDigitIndex26 = 0;\n  let maxDigitIndex27 = 0;\n  let maxDigitIndex28 = 0;\n  let maxDigitIndex29 = 0;\n  let maxDigitIndex30 = 0;\n  let maxDigitIndex31 = 0;\n  let maxDigitIndex32 = 0;\n  let maxDigitIndex33 = 0;\n  let maxDigitIndex34 = 0;\n  let maxDigitIndex35 = 0;\n  let maxDigitIndex36 = 0;\n  let maxDigitIndex37 = 0;\n  let maxDigitIndex38 = 0;\n  let maxDigitIndex39 = 0;\n  let maxDigitIndex40 = 0;\n  let maxDigitIndex41 = 0;\n  let maxDigitIndex42 = 0;\n  let maxDigitIndex43 = 0;\n  let maxDigitIndex44 = 0;\n  let maxDigitIndex45 = 0;\n  let maxDigitIndex46 = 0;\n  let maxDigitIndex47 = 0;\n  let maxDigitIndex48 = 0;\n  let maxDigitIndex49 = 0;\n  let maxDigitIndex50 = 0;\n  let maxDigitIndex51 = 0;\n  let maxDigitIndex52 = 0;\n  let maxDigitIndex53 = 0;\n  let maxDigitIndex54 = 0;\n  let maxDigitIndex55 = 0;\n  let maxDigitIndex56 = 0;\n  let maxDigitIndex57 = 0;\n  let maxDigitIndex58 = 0;\n  let maxDigitIndex59 = 0;\n  let maxDigitIndex60 = 0;\n  let maxDigitIndex61 = 0;\n  let maxDigitIndex62 = 0;\n  let maxDigitIndex63 = 0;\n  let maxDigitIndex64 = 0;\n  let maxDigitIndex65 = 0;\n  let maxDigitIndex66 = 0;\n  let maxDigitIndex67 = 0;\n  let maxDigitIndex68 = 0;\n  let maxDigitIndex69 = 0;\n  let maxDigitIndex70 = 0;\n  let maxDigitIndex71 = 0;\n  let maxDigitIndex72 = 0;\n  let maxDigitIndex73 = 0;\n  let maxDigitIndex74 = 0;\n  let maxDigitIndex75 = 0;\n  let maxDigitIndex76 = 0;\n  let maxDigitIndex77 = 0;\n  let maxDigitIndex78 = 0;\n  let maxDigitIndex79 = 0;\n  let maxDigitIndex80 = 0;\n  let maxDigitIndex81 = 0;\n  let maxDigitIndex82 = 0;\n  let maxDigitIndex83 = 0;\n  let maxDigitIndex84 = 0;\n  let maxDigitIndex85 = 0;\n  let maxDigitIndex86 = 0;\n  let maxDigitIndex87 = 0;\n  let maxDigitIndex88 = 0;\n  let maxDigitIndex89 = 0;\n  let maxDigitIndex90 = 0;\n  let maxDigitIndex91 = 0;\n  let maxDigitIndex92 = 0;\n  let maxDigitIndex93 = 0;\n  let maxDigitIndex94 = 0;\n  let maxDigitIndex95 = 0;\n  let maxDigitIndex96 = 0;\n  let maxDigitIndex97 = 0;\n  let maxDigitIndex98 = 0;\n  let maxDigitIndex99 = 0;\n  let maxDigitIndex100 = 0;\n  let maxDigitIndex101 = 0;\n  let maxDigitIndex102 = 0;\n  let maxDigitIndex103 = 0;\n  let maxDigitIndex104 = 0;\n  let maxDigitIndex105 = 0;\n  let maxDigitIndex106 = 0;\n  let maxDigitIndex107 = 0;\n  let maxDigitIndex108 = 0;\n  let maxDigitIndex109 = 0;\n  let maxDigitIndex110 = 0;\n  let maxDigitIndex111 = 0;\n  let maxDigitIndex112", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let len = keys.length;\n  let i = 0;\n  let key;\n  let isUpper = true;\n  let isLower = true;\n  while (i < len) {\n    key = keys[i];\n    if (key.length > 1) {\n      isUpper = key.toUpperCase() === key;\n      isLower = key.toLowerCase() === key;\n    }\n    if (isUpper && isLower) {\n      return true;\n    }\n    if (isUpper &&!isLower) {\n      return false;\n    }\n    if (!isUpper && isLower) {\n      return false;\n    }\n    i++;\n  }\n  return false;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_id = a.toString();\n  let b_id = b.toString();\n  let a_id_length = a_id.length;\n  let b_id_length = b_id.length;\n  let a_id_unit = a_id.substring(a_id_length - 1);\n  let b_id_unit = b_id.substring(b_id_length - 1);\n  let a_id_unit_length = a_id_unit.length;\n  let b_id_unit_length = b_id_unit.length;\n  let a_id_unit_digit = a_id_unit.charAt(0);\n  let b_id_unit_digit = b_id_unit.charAt(0);\n  let a_id_unit_digit_length = a_id_unit_digit.length;\n  let b_id_unit_digit_length = b_id_unit_digit.length;\n  let a_id_unit_digit_value = parseInt(a_id_unit_digit);\n  let b_id_unit_digit_value = parseInt(b_id_unit_digit);\n  let a_id_unit_digit_value_length = a_id_unit_digit_value.toString().length;\n  let b_id_unit_digit_value_length = b_id_unit_digit_value.toString().length;\n  let a_id_unit_digit_value_value = a_id_unit_digit_value.toString();\n  let b_id_unit_digit_value_value = b_id_unit_digit_value.toString();\n  let a_id_unit_digit_value_value_length = a_id_unit_digit_value_value.length;\n  let b_id_unit_digit_value_value_length = b_id_unit_digit_value_value.length;\n  let a_id_unit_digit_value_value_value = a_id_unit_digit_value_value.toString();\n  let b_id_unit_digit_value_value_value = b_id_unit_digit_value_value.toString();\n  let a_id_unit_digit_value_value_value_length = a_id_unit_digit_value_value_value.length;\n  let b_id_unit_digit_value_value_value_length = b_id_unit_digit_value_value_value.length;\n  let a_id_unit_digit_value_value_value_value = a_id_unit_digit_value_value_value.toString();\n  let b_id_unit_digit_value_value_value_value = b_id_unit_digit_value_value_value.toString();\n  let a_id_unit_digit_value_value_value_value_length = a_id_unit_digit_value_value_value_value.length;\n  let b_id_unit_digit_value_value_value_value_length = b_id_unit_digit_value_value_value_value.length;\n  let a_id_unit_digit_value_value_value_value_value = a_id_unit_digit_value_value_value_value.toString();\n  let b_id_unit_digit_value_value_value_value_value = b_id_unit_digit_value_value_value_value.toString();\n  let a_id_unit_digit_value_value_value_value_value_length = a_id_unit_digit_value_value_value_value_value.length;\n  let b_id_unit_digit_value_value_value_value_value_length = b_id_unit_digit_value_value_value_value_value.length;\n  let a_id_unit_digit_value_value_value_value_value_value = a_id_unit_digit_value_value_value_value_value.toString();\n  let b_id_unit_digit_value_value_value_value_value_value = b_id_unit_digit_value_value_value_value_value.toString();\n  let a_id_unit_digit_value_value_value_value_value_value_length = a_id_unit_digit_value_value_value_value_value_value.length;\n  let b_id_unit_digit_value_value_value_value_value_value_length = b_id_unit_digit_value_value_value_value_value_value.length;\n  let a_id_unit_digit_value_value_value_value_value_value_value = a_id_unit_digit_value_value_value_value_value_value.toString();\n  let b_id_unit_digit_value_value_value_value_value_value_value = b_id_unit_digit_value_value_value_value_value_value.toString();\n  let a_id_unit_digit_value_value_value_value_value_value_value_length = a_id_unit_digit_value_value_value_value_value_value_value.length;\n  let b_id_unit_digit_value_value_value_value_value_value_value_length = b_id_unit_digit_value_value_value_value_value_value_value.length;\n  let a_id_unit_digit_value_value_value_value_value_value_value_value = a_id_unit_digit_value_value_value_value_value_value_value.toString();\n  let b_id_unit_digit_value_value_value_value_value_value_value_value = b_id_unit_digit_value_value_value_value_value_value_value.toString();\n  let a_id_unit_digit_value_value_value_value_value_value_value_value_length = a_id_unit_digit", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === s[i].toUpperCase()) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let integer = parseInt(value, 10);\n  if (isNaN(integer)) {\n    throw new Error(\"Value must be a number\");\n  }\n  if (integer === 0) {\n    return 0;\n  }\n  let diff = Math.abs(integer - Math.round(integer));\n  if (diff < 1e-6) {\n    return integer;\n  }\n  return Math.round(integer);\n};\n\nmodule.exports = {\n  closestInteger\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
