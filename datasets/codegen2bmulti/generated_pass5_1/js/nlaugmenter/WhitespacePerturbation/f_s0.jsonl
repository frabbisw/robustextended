{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let i = 0\n  let j = 0\n  let min = numbers[0]\n  let max = numbers[0]\n  for (i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  for (i = 0; i < numbers.length; i++) {\n    for (j = 0; j < numbers.length; j++) {\n      if (i!== j && numbers[i] - numbers[j] < threshold * (max - min)) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = hasCloseElements\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_string_array = paren_string.split('');\n  let paren_string_array_length = paren_string_array.length;\n  let paren_string_array_output = [];\n  let paren_string_array_output_length = 0;\n  let paren_string_array_output_index = 0;\n  let paren_string_array_output_index_end = 0;\n  let paren_string_array_output_index_end_end = 0;\n  let paren_string_array_output_index_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_output_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return integerPart;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return decimals;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return integerPart;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return decimals;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return integerPart;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return decimals;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return integerPart;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return decimals;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return integerPart;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return decimals;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber11 = (number) => {\n  const [integerPart, decimals] = number.toString().split('.');\n  return integerPart;\n};\n\n/*\n  Given a positive floating point numb e r, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber12"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = operations.reduce((acc, op) => acc + op.amount, 0);\n  return sum < 0;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    if (i + 1 < numbers.length) {\n      result.push(delimeter);\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  ### intersperse([1, 2, 3], 4)\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4, '-')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4, 2, 4, 3]\n  ### intersperse([1, 2, 3], 4,'')\n  # => [1, 4,"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_array = [];\n  let paren_string_array_length = 0;\n  let paren_string_array_index = 0;\n  let paren_string_array_last_index = 0;\n  let paren_string_array_last_index_end = 0;\n  let paren_string_array_last_index_end_end = 0;\n  let paren_string_array_last_index_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let paren_string_array_last_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only forones that contain given substring\n * and return a list of strings\n *\n * @param {Array} strings\n * @param {String} substring\n * @return {Array}\n */\nconst filterBySubstringAndReturn = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only forones that contain given substring\n * and return a list of strings\n *\n * @param {Array} strings\n * @param {String} substring\n * @return {Array}\n */\nconst filterBySubstringAndReturnWithIndex = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only forones that contain given substring\n * and return a list of strings\n *\n * @param {Array} strings\n * @param {String} substring\n * @return {Array}\n */\nconst filterBySubstringAndReturnWithIndexAndReturn = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only forones that contain given substring\n * and return a list of strings\n *\n * @param {Array} strings\n * @param {String} substring\n * @return {Array}\n */\nconst filterBySubstringAndReturnWithIndexAndReturnAndReturn = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only forones that contain given substring\n * and return a list of strings\n *\n * @param {Array} strings\n * @param {String} substring\n * @return {Array}\n */\nconst filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturn = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n * Filter an input list of strings only forones that contain given substring\n * and return a list of strings\n *\n * @param {Array} strings\n * @param {String} substring\n * @return {Array}\n */\nconst filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturn = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstringAndReturn,\n  filterBySubstringAndReturnWithIndex,\n  filterBySubstringAndReturnWithIndexAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturn,\n  filterBySubstringAndReturnWithIndexAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAndReturnAnd"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const [sum, product] = sumProduct(numbers.slice(1), int);\n  return [sum + numbers[0], product * numbers[0]];\n};\n\nconst test = () => {\n  const [numbers, int] = [\n    [],\n    [1, 2, 3, 4],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a given list of integers, gener ate a  list of rolling minimum element found until given moment\n  in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 4]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  return numbers.slice(minIndex);\n};\n\n/*\n  From a given list of integers, gener ate a  list of rolling sum element found until given moment\n  in the seque nce.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 5, 5, 5, 7, 9]\n  */\nconst rollingSum = (numbers) => {\n  let sum = numbers[0];\n  let sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > sumIndex) {\n      sumIndex = sum;\n    }\n  }\n  return numbers.slice(sumIndex);\n};\n\n/*\n  From a given list of integers, gener ate a  list of rolling average element found until given moment\n  in the seque nce.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 3, 3.5, 4]\n  */\nconst rollingAverage = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > sumIndex) {\n      sumIndex = sum;\n    }\n  }\n  return sum / numbers.length;\n};\n\n/*\n  From a given list of integers, gener ate a  list of rolling median element found until given moment\n  in the seque nce.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 3, 3, 3, 4]\n  */\nconst rollingMedian = (numbers) => {\n  let median = numbers[0];\n  let medianIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < median) {\n      median = numbers[i];\n      medianIndex = i;\n    }\n  }\n  return numbers.slice(medianIndex);\n};\n\n/*\n  From a given list of integers, gener ate a  list of rolling standard deviation element found until given moment\n  in the seque nce.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 1, 1, 1, 1, 1, 1]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - median, 2);\n    if (sum > sumIndex) {\n      sumIndex = sum;\n    }\n  }\n  return Math.sqrt(sumIndex / numbers.length);\n};\n\n/*\n  From a given list of integers, gener ate a  list of rolling variance element found until given moment\n  in the seque nce.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 1, 1, 1, 1, 1, 1]\n  */\nconst rollingVariance = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - median, 2);\n    if (sum > sumIndex) {\n      sumIndex = sum;\n    }\n  }\n  return sumIndex / numbers.length;\n};\n\nmodule.exports = {\n  rollingMax,\n  rollingMin,\n  rollingSum,\n  rollingAverage,\n  rollingMedian,\n  rollingStandardDeviation,\n  rollingVariance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('').reverse().join('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1' && b[i] === '1') {\n      res += '1';\n    } else if (a[i] === '1' && b[i] === '0') {\n      res += '0';\n    } else if (a[i] === '0' && b[i] === '1') {\n      res += '0';\n    } else if (a[i] === '0' && b[i] === '0') {\n      res += '1';\n    }\n  }\n  return res;\n};\n\nconst stringXorTest = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest2 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest3 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest4 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest5 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest6 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest7 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest8 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest9 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest10 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest11 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest12 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest13 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest14 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest15 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest16 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest17 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest18 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest19 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest20 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest21 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest22 = () => {\n  let res = '';\n  for (let i = 0; i < 10; i++) {\n    res += stringXor('010', '110');\n  }\n  return res;\n};\n\nconst stringXorTest23 = () => {\n  let res = '';\n  for (let i"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  let longestLength = strings[0].length;\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longest = strings[i];\n      longestLength = strings[i].length;\n    }\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  let gcd = a;\n  while (b!== 0) {\n    let temp = a % b;\n    a = b;\n    b = temp;\n  }\n  return gcd;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let result = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    if (string.substr(0, prefix.length) === prefix) {\n      result.push(prefix);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allPrefixesFrom,\n  allPrefixesTo,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPrefixesToFrom,\n  allPrefixesFromTo,\n  allPrefixesToFrom,\n  allPref"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let str = '';\n  for (let i"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    } else if (char === char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_arr = music_string.split('');\n  const music_arr = [];\n  for (let i = 0; i < music_string_arr.length; i++) {\n    if (music_string_arr[i] === 'o') {\n      music_arr.push(music_string_arr[i] + music_string_arr[i + 1]);\n      i++;\n    } else if (music_string_arr[i] === 'o|') {\n      music_arr.push(music_string_arr[i] + music_string_arr[i + 1] + music_string_arr[i + 2]);\n      i += 2;\n    } else if (music_string_arr[i] === '.') {\n      music_arr.push(music_string_arr[i] + music_string_arr[i + 1] + music_string_arr[i + 2] + music_string_arr[i + 3]);\n      i += 3;\n    } else if (music_string_arr[i] === 'o') {\n      music_arr.push(music_string_arr[i] + music_string_arr[i + 1]);\n      i++;\n    } else if (music_string_arr[i] === '|') {\n      music_arr.push(music_string_arr[i] + music_string_arr[i + 1] + music_string_arr[i + 2]);\n      i += 2;\n    } else if (music_string_arr[i] === 'o') {\n      music_arr.push(music_string_arr[i] + music_string_arr[i + 1]);\n      i++;\n    }\n  }\n  return music_arr;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let nums = numbers.split(' ');\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    let num = nums[i];\n    let numsArr = num.split(' ');\n    let len = numsArr.length;\n    for (let j = 0; j < len; j++) {\n      let numArr = numsArr[j].split(' ');\n      let num = numArr[0];\n      let numArr = numArr[1];\n      let numArrLen = numArr.length;\n      let numArrArr = numArr.split(' ');\n      let numArrArrLen = numArrArr.length;\n      if (numArrLen === 1) {\n        result += numArrArr[0] +'';\n      } else if (numArrLen === 2) {\n        result += numArrArr[0] +'' + numArrArr[1] +'';\n      } else if (numArrLen === 3) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'';\n      } else if (numArrLen === 4) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'' + numArrArr[3] +'';\n      } else if (numArrLen === 5) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'' + numArrArr[3] +'' + numArrArr[4] +'';\n      } else if (numArrLen === 6) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'' + numArrArr[3] +'' + numArrArr[4] +'' + numArrArr[5] +'';\n      } else if (numArrLen === 7) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'' + numArrArr[3] +'' + numArrArr[4] +'' + numArrArr[5] +'' + numArrArr[6] +'';\n      } else if (numArrLen === 8) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'' + numArrArr[3] +'' + numArrArr[4] +'' + numArrArr[5] +'' + numArrArr[6] +'' + numArrArr[7] +'';\n      } else if (numArrLen === 9) {\n        result += numArrArr[0] +'' + numArrArr[1] +'' + numArrArr[2] +'' + numArrArr[3] +'' + numArrArr[4] +'' + numArrArr[5] +'' + numArrArr[6] +'' + numArrArr[7] +'' + numArrArr[8] +'';\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements2 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements3 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements4 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements5 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements6 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements7 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\nconst findClosestElements8 = (numbers) => {\n  let min = Infinity;\n  let minIndex = -1;\n  let minDistance = Infinity;\n  let max = -Infinity;\n  let maxIndex = -1;\n  let maxDistance = Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - min);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    "}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let i = 0;\n  for (i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let range = max - min;\n  let scale = 1.0 / range;\n  let result = [];\n  for (i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\n/**\n  Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  let i = 0;\n  for (i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let range = max - min;\n  let scale = 1.0 / range;\n  let result = [];\n  for (i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * scale);\n  }\n  return result;\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnit2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python valu es on only strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value)"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns true if the given string is empty\n  >>> isEmpty('abc')\n  false\n  >>> isEmpty('')\n  true\n  */\nconst isEmpty = (string) => {\n  return string === null || string === undefined || string.length === 0;\n};\n\n/*\n  Returns true if the given string is not empty\n  >>> isNotEmpty('abc')\n  true\n  >>> isNotEmpty('')\n  false\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/*\n  Returns true if the given string is a number\n  >>> isNumber('abc')\n  false\n  >>> isNumber(1)\n  true\n  */\nconst isNumber = (string) => {\n  return!isNaN(parseFloat(string));\n};\n\n/*\n  Returns true if the given string is a boolean\n  >>> isBoolean('abc')\n  false\n  >>> isBoolean(true)\n  true\n  */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean';\n};\n\n/*\n  Returns true if the given string is a string\n  >>> isString('abc')\n  false\n  >>> isString(1)\n  false\n  */\nconst isString = (string) => {\n  return typeof string ==='string';\n};\n\n/*\n  Returns true if the given string is a function\n  >>> isFunction('abc')\n  false\n  >>> isFunction(1)\n  false\n  */\nconst isFunction = (string) => {\n  return typeof string === 'function';\n};\n\n/*\n  Returns true if the given string is a date\n  >>> isDate('abc')\n  false\n  >>> isDate(new Date())\n  true\n  */\nconst isDate = (string) => {\n  return string instanceof Date;\n};\n\n/*\n  Returns true if the given string is a number\n  >>> isDate('abc')\n  false\n  >>> isDate(new Date())\n  true\n  */\nconst isDateTime = (string) => {\n  return isDate(string) && isTime(string);\n};\n\n/*\n  Returns true if the given string is a time\n  >>> isDateTime('abc')\n  false\n  >>> isDateTime(new Date())\n  true\n  */\nconst isTime = (string) => {\n  return string instanceof Date && isDate(string);\n};\n\n/*\n  Returns true if the given string is a number\n  >>> isDateTime('abc')\n  false\n  >>> isDateTime(new Date())\n  true\n  */\nconst isTimezone = (string) => {\n  return isDateTime(string) && isTimezone(string);\n};\n\n/*\n  Returns true if the given string is a timezone\n  >>> isTimezone('abc')\n  false\n  >>> isTimezone(new Date())\n  true\n  */\nconst isTimezoneOffset = (string) => {\n  return isDateTime(string) && isTimezoneOffset(string);\n};\n\n/*\n  Returns true if the given string is a timezone offset\n  >>> isTimezoneOffset('abc')\n  false\n  >>> isTimezoneOffset(new Date())\n  true\n  */\nconst isTimezoneName = (string) => {\n  return isDateTime(string) && isTimezoneName(string);\n};\n\n/*\n  Returns true if the given string is a timezone name\n  >>> isTimezoneName('abc')\n  false\n  >>> isTimezoneName(new Date())\n  true\n  */\nconst isTimezoneOffsetName = (string) => {\n  return isDateTime(string) && isTimezoneOffsetName(string);\n};\n\n/*\n  Returns true if the given string is a timezone name\n  >>> isTimezoneName('abc')\n  false\n  >>> isTimezoneName(new Date())\n  true\n  */\nconst isTimezoneAbbr = (string) => {\n  return isDateTime(string) && isTimezoneAbbr(string);\n};\n\n/*\n  Returns true if the given string is a timezone abbr\n  >>> isTimezoneAbbr('abc')\n  false\n  >>> isTimezoneAbbr(new Date())\n  true\n  */\nconst isTimezoneOffsetAbbr = (string) => {\n  return isDateTime(string) && isTimezoneOffsetAbbr(string);\n};\n\n/*\n  Returns true if the given string is a timezone abbreviation\n  >>> isTimezoneAbbr('abc')\n  false\n  >>> isTimezoneAbbr(new Date())\n  true\n  */\nconst isTimezoneNameAbbr = (string) => {\n  return isDateTime(string) && isTimezoneNameAbbr(string);\n};\n\n/*\n  Returns true if the given string is a timezone abbreviation\n  >>> isTimezoneNameAbbr('abc')\n  false\n  >>> isTimezoneNameAbbr(new Date())\n  true\n  */\nconst isTimezoneOffsetNameAbbr = (string) => {\n  return isDateTime(string) && isTimezoneOffsetNameAbbr(string);\n};\n\n/*\n  Returns true if the given string is a timezone abbreviation\n  >>> isTimezoneNameAbbr('abc')\n  false\n  >>> isTimezoneNameAbbr(new Date())\n  true\n  */\nconst isTimezoneAbbr = (string) => {\n  return isDateTime(string) && isTimezoneAbbr(string);\n};\n\n/*\n  Returns true if the given string is a timezone offset abbreviation\n  >>> isTimezoneOffsetAbbr('abc')\n  false\n  >>> isTimezoneOffsetAbbr(new Date())\n  true\n  */\nconst isTimezoneOffsetAbbr = (string) => {\n  return isDateTime(string) && isTimezoneOffsetAbbr(string);\n};\n\n/*\n  Returns true if the given string is a timezone offset\n  >>> isTimezoneOffset('abc')\n  false\n  >>> isTimezoneOffset(new Date())\n  true\n  */\nconst isTimezoneOffset = (string) => {\n  return isDateTime(string) && isTimezoneOffset(string);\n};\n\n/*\n  Returns"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the small st nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the largest nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the largest nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the largest nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the largest nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the largest nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given number n, find the smallest nu mber that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let m = 1;\n  while (n % m === 0) {\n    m++;\n  }\n  return m;\n};\n\n/*\n  For a given"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize2 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize3 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize4 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize5 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize6 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize7 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize8 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize9 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize10 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize11 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize12 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize13 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nconst factorize14 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [1, 3, 4]\n  */\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (letter) => letter.toUpperCase());\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAll = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAll('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the characters in the string\n  flipped to the opposite case.\n  >>> flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace('Hello')\n  'hELLO'\n  */\nconst flipCaseAllWithSpaceWithSpaceWithSpaceWithSpace = (string) => {\n  return string.split('').map((letter) => {\n    return letter.toLowerCase().toUpperCase();\n  }).join('');\n};\n\n/*\n  For a given string, return a string with all the"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (str) => {\n  return str.split(/\\s+/);\n};\n\n/*\n  Convert a string to a list of words\n  >>> split('a b c')\n  ['a', 'b',"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  const prefixLength = prefix.length;\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length >= prefixLength && strings[i].substr(0, prefixLength) === prefix) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((v) => v > 0);\n};\n\n/*Return only negative numbers in the l ist.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((v) => v < 0);\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAll = (l) => {\n  return l.concat(l.filter((v) => v === 0));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAllPositive = (l) => {\n  return getAll(getPositive(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAllNegative = (l) => {\n  return getAll(getNegative(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAll = (l) => {\n  return getAllPositive(getAllNegative(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAllPositive = (l) => {\n  return getAll(getPositive(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAllNegative = (l) => {\n  return getAll(getNegative(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAll = (l) => {\n  return getAllPositive(getAllNegative(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAllPositive = (l) => {\n  return getAll(getPositive(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAllNegative = (l) => {\n  return getAll(getNegative(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, 9, 123, 1]\n  */\nconst getAll = (l) => {\n  return getAllPositive(getAllNegative(l));\n};\n\n/*Return a list of all numbers in the l ist.\n  >>> getAll([-1, 2, -4, 5, 6])\n"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let prev = 0;\n  let item = 1;\n  let index = 0;\n  let zer = -1;\n  let max = 0;\n  let maxIndex = 0;\n  let maxItem = 0;\n  let maxIndexItem = 0;\n  let maxItemIndex = 0;\n  let maxItemIndexItem = 0;\n  let maxItemIndexItem2 = 0;\n  let maxItemIndexItem3 = 0;\n  let maxItemIndexItem4 = 0;\n  let maxItemIndexItem5 = 0;\n  let maxItemIndexItem6 = 0;\n  let maxItemIndexItem7 = 0;\n  let maxItemIndexItem8 = 0;\n  let maxItemIndexItem9 = 0;\n  let maxItemIndexItem10 = 0;\n  let maxItemIndexItem11 = 0;\n  let maxItemIndexItem12 = 0;\n  let maxItemIndexItem13 = 0;\n  let maxItemIndexItem14 = 0;\n  let maxItemIndexItem15 = 0;\n  let maxItemIndexItem16 = 0;\n  let maxItemIndexItem17 = 0;\n  let maxItemIndexItem18 = 0;\n  let maxItemIndexItem19 = 0;\n  let maxItemIndexItem20 = 0;\n  let maxItemIndexItem21 = 0;\n  let maxItemIndexItem22 = 0;\n  let maxItemIndexItem23 = 0;\n  let maxItemIndexItem24 = 0;\n  let maxItemIndexItem25 = 0;\n  let maxItemIndexItem26 = 0;\n  let maxItemIndexItem27 = 0;\n  let maxItemIndexItem28 = 0;\n  let maxItemIndexItem29 = 0;\n  let maxItemIndexItem30 = 0;\n  let maxItemIndexItem31 = 0;\n  let maxItemIndexItem32 = 0;\n  let maxItemIndexItem33 = 0;\n  let maxItemIndexItem34 = 0;\n  let maxItemIndexItem35 = 0;\n  let maxItemIndexItem36 = 0;\n  let maxItemIndexItem37 = 0;\n  let maxItemIndexItem38 = 0;\n  let maxItemIndexItem39 = 0;\n  let maxItemIndexItem40 = 0;\n  let maxItemIndexItem41 = 0;\n  let maxItemIndexItem42 = 0;\n  let maxItemIndexItem43 = 0;\n  let maxItemIndexItem44 = 0;\n  let maxItemIndexItem45 = 0;\n  let maxItemIndexItem46 = 0;\n  let maxItemIndexItem47 = 0;\n  let maxItemIndexItem48 = 0;\n  let maxItemIndexItem49 = 0;\n  let maxItemIndexItem50 = 0;\n  let maxItemIndexItem51 = 0;\n  let maxItemIndexItem52 = 0;\n  let maxItemIndexItem53 = 0;\n  let maxItemIndexItem54 = 0;\n  let maxItemIndexItem55 = 0;\n  let maxItemIndexItem56 = 0;\n  let maxItemIndexItem57 = 0;\n  let maxItemIndexItem58 = 0;\n  let maxItemIndexItem59 = 0;\n  let maxItemIndexItem60 = 0;\n  let maxItemIndexItem61 = 0;\n  let maxItemIndexItem62 = 0;\n  let maxItemIndexItem63 = 0;\n  let maxItemIndexItem64 = 0;\n  let maxItemIndexItem65 = 0;\n  let maxItemIndexItem66 = 0;\n  let maxItemIndexItem67 = 0;\n  let maxItemIndexItem68 = 0;\n  let maxItemIndexItem69 = 0;\n  let maxItemIndexItem70 = 0;\n  let maxItemIndexItem71 = 0;\n  let maxItemIndexItem72 = 0;\n  let maxItemIndexItem73 = 0;\n  let maxItemIndexItem74 = 0;\n  let maxItemIndexItem75 = 0;\n  let maxItemIndexItem76 = 0;\n  let maxItemIndexItem77 = 0;\n  let maxItemIndexItem78 = 0;\n  let maxItemIndexItem79 = 0;\n  let maxItemIndexItem80 = 0;\n  let maxItemIndexItem81 = 0;\n  let maxItemIndexItem82 = 0;\n  let maxItemIndexItem83 = 0;\n  let maxItemIndexItem84 = 0;\n  let maxItemIndexItem85 = 0;\n  let maxItemIndexItem86 = 0;\n  let maxItemIndexItem87 = 0;\n  let maxItemIndexItem88 = 0;\n  let maxItemIndexItem89 = 0;\n  let maxItemIndexItem90 = 0;\n  let maxItemIndexItem91 = 0;\n  let maxItemIndexItem92 = 0;\n  let maxItemIndexItem93 = 0;\n  let maxItemIndexItem94 = 0;\n  let maxItemIndexItem95 = 0;\n  let maxItemIndexItem96 = 0;\n  let maxItemIndexItem97 = 0;\n  let maxItemIndexItem98 = 0;\n  let maxItemIndexItem99 = 0;\n  let maxItemIndexItem100 = 0;\n  let maxItemIndexItem101 = 0;\n  let maxItemIndexItem102 = 0;\n  let maxItemIndexItem103 = 0;\n  let maxItemIndexItem104 = 0"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l' = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[j] % 3 === 0) {\n      j++;\n    }\n    if (j < l.length) {\n      l'[i] = l[j];\n      i = j;\n    } else {\n      l'[i] = l[i];\n      i++;\n    }\n  }\n  return l';\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 1;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      lst.push(l[i]);\n      i++;\n      j++;\n    } else if (l[i] < l[j]) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      k++;\n      lst.push(l[j]);\n      j++;\n    }\n  }\n  return lst;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      count += 2;\n    } else if (n % 11 === 0) {\n      count += 1;\n    } else if (n % 13 === 0) {\n      count += 3;\n    } else {\n      count += 1;\n    }\n    n = n - 1;\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n  to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven7 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i + 1]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeC yc lic = (s) =>{\n  var enc = [];\n  for (let i = 0; i < s.length; i++) {\n    enc.push(s.charCodeAt(i));\n  }\n  return encodeCyclic(enc);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic = (s) => {\n  var enc = [];\n  for (let i = 0; i < s.length; i++) {\n    enc.push(s.charCodeAt(i));\n  }\n  return encodeCyclic(enc);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic = (s) => {\n  var enc = [];\n  for (let i = 0; i < s.length; i++) {\n    enc.push(s.charCodeAt(i));\n  }\n  return encodeCyclic(enc);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic = (s) => {\n  var enc = [];\n  for (let i = 0; i < s.length; i++) {\n    enc.push(s.charCodeAt(i));\n  }\n  return encodeCyclic(enc);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic = (s) => {\n  var enc = [];\n  for (let i = 0; i < s.length; i++) {\n    enc.push(s.charCodeAt(i));\n  }\n  return encodeCyclic(enc);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic = (s) => {\n  var enc = [];\n  for (let i = 0; i < s.length; i++) {\n    enc.push(s.charCodeAt(i));\n  }\n  return encodeCyclic(enc);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var deco = [];\n  for (let i = 0; i < s.length; i++) {\n    deco.push(s.charCodeAt(i));\n  }\n  return decodeCyclic(deco);\n}\n\n/*\n  takes as input string deco oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst encodeCyclic = (s) =>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1)\n  const fibPrime = primeFib(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib2(n - 1)\n  const fibPrime = primeFib2(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib3(n - 1)\n  const fibPrime = primeFib3(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib4(n - 1)\n  const fibPrime = primeFib4(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib5(n - 1)\n  const fibPrime = primeFib5(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib6(n - 1)\n  const fibPrime = primeFib6(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib7(n - 1)\n  const fibPrime = primeFib7(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib8(n - 1)\n  const fibPrime = primeFib8(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  }\n  return fib\n}\n\n/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib9(n - 1)\n  const fibPrime = primeFib9(n - 2)\n  if (fibPrime < fib) {\n    return fibPrime\n  "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] === 0) {\n      count++;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n  int i, j;\n  int cnt = 0;\n  for (i = 0; i < n; i++) {\n    for (j = i + 1; j < n; j++) {\n      if (car[i].x < car[j].x && car[i].x + car[i].w > car[j].x && car[i].y < car[j].y && car[i].y + car[i].h > car[j].y) {\n        cnt++;\n      }\n    }\n  }\n  return cnt;\n}\n\nint main() {\n  int n, m, i, j, k;\n  scanf(\"%d %d\", &n, &m);\n  for (i = 0; i < n; i++) {\n    scanf(\"%d %d\", &car[i].x, &car[i].y);\n    car[i].w = car[i].h = 1;\n  }\n  for (i = 0; i < m; i++) {\n    scanf(\"%d %d\", &j, &k);\n    car[j].x = car[k].x;\n    car[j].y = car[k].y;\n  }\n  printf(\"%d\\n\", carRaceCollis(n, m));\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i] + 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i] + 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i] + 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  let i = 0;\n  const result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      sum += l[i];\n      i++;\n      j++;\n      k++;\n    } else {\n      if (k > 0) {\n        sum += k;\n        i = j;\n        j = k;\n        k = 0;\n      }\n    }\n  }\n  return sum === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase2 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase3 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase4 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase5 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase6 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase7 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase8 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase9 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase10 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase11 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase12 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase13 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase14 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase15 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase16 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase17 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  return res;\n};\n\nconst changeBase18 = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let d = num % base;\n    num = num / base;\n    res = String.fromCharCode(d + 65) + res;\n  }\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 4;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 6) {\n    return 6;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 8) {\n    return 8;\n  }\n  if (n === 9) {\n    return 9;\n  }\n  if (n === 10) {\n    return 10;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 12) {\n    return 12;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 14) {\n    return 14;\n  }\n  if (n === 15) {\n    return 15;\n  }\n  if (n === 16) {\n    return 16;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 18) {\n    return 18;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 20) {\n    return 20;\n  }\n  if (n === 21) {\n    return 21;\n  }\n  if (n === 22) {\n    return 22;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 24) {\n    return 24;\n  }\n  if (n === 25) {\n    return 25;\n  }\n  if (n === 26) {\n    return 26;\n  }\n  if (n === 27) {\n    return 27;\n  }\n  if (n === 28) {\n    return 28;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 30) {\n    return 30;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 32) {\n    return 32;\n  }\n  if (n === 33) {\n    return 33;\n  }\n  if (n === 34) {\n    return 34;\n  }\n  if (n === 35) {\n    return 35;\n  }\n  if (n === 36) {\n    return 36;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 38) {\n    return 38;\n  }\n  if (n === 39) {\n    return 39;\n  }\n  if (n === 40) {\n    return 40;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 42) {\n    return 42;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 44) {\n    return 44;\n  }\n  if (n === 45) {\n    return 45;\n  }\n  if (n === 46) {\n    return 46;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 48) {\n    return 48;\n  }\n  if (n === 49) {\n    return 49;\n  }\n  if (n === 50) {\n    return 50;\n  }\n  if (n === 51) {\n    return 51;\n  }\n  if (n === 52) {\n    return 52;\n  }\n  if (n === 53) {\n    return 53;\n  }\n  if (n === 54) {\n    return 54;\n  }\n  if (n === 55) {\n    return 55;\n  }\n  if (n === 56) {\n    return 56;\n  }\n  if (n === 57) {\n    return 57;\n  }\n  if (n === 58) {\n    return 58;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 60) {\n    return 60;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 62) {\n    return 62;\n  }\n  if (n === 63) {\n    return 63;\n  }\n  if (n === 64) {\n    return 64;\n  }\n  if (n === 65) {\n    return 65;\n  }\n  if (n === 66) {\n    return 66;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 68) {\n    return 68;\n  }\n  if (n === 69) {\n    return 69;\n  }\n  if (n === 70) {\n    return 70;\n  }\n  if (n === 71) {\n    return 71;\n  }\n  if (n === 72) {\n    return 72;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 74) {\n    return 74;\n  }\n  if (n === 75) {\n    return 75;\n  }\n  if (n === 76) {\n    return 76;\n  }\n  if (n === 77) {\n    return 77;\n  }\n  if (n === 78)"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = 0;\n  let j = n - 1;\n  let k = m;\n\n  while (k > 0) {\n    if (l[i] > l[j]) {\n      i++;\n      k--;\n    } else if (l[i] < l[j]) {\n      j--;\n      k--;\n    } else {\n      break;\n    }\n  }\n\n  if (k == 0) {\n    return l[i];\n  } else if (k == 1) {\n    return l[(i + j) / 2];\n  } else {\n    return l[i] + (l[j] - l[i]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) {\n    throw new Error('n must be between 0 and p-1');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p);\n  }\n  return modp(n - 1, p) + p;\n};\n\nexport default modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift2 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift2= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift3 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift3= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift4 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift4= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift5 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift5= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift6 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift6= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift7 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift7= (s) =>{\n  return s. split(\"\"). map(c => Stri ng.fromCharCode(\n    ((c.ch arC odeAt(0) - 5) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift8 =(s) => {\n  retu rn s. split(\" \" ). map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU';\n  return text.replace(new RegExp(`[${vowels}]`, 'g'), '');\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((acc, x) => {\n    return acc && x < t;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.reduce((acc, x) => {\n    return acc && x > t;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold2 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold3 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold4 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold5 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold6 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold7 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold8 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold9 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold10 = (l, t, t1) => {\n  return l.reduce((acc, x) => {\n    return acc && x >= t && x <= t1;\n  }, true);\n};\n\n/*Return true if all numbers in the lis t l a re between threshold t and t+1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold11 = (l, t, t1) => {\n  return l.reduce((acc"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) {\n    return false;\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n <= 1) return n;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n <= 1) return n;\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return n;\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return n;\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return n;\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return n;\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return n;\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return n;\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return n;\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n <= 1) return n;\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n <= 1) return n;\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n <= 1) return n;\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n <= 1) return n;\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n <= 1) return n;\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n <= 1) return n;\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n <= 1) return n;\n  return fib18(n - 1) + fib18"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    } else if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return l[i] > l[i];\n};\n\n/*\n  Return true if the list is monotonic increasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  */\nconst monotonic_increasing = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] < l[i + 1]) {\n      return true;\n    }\n    i++;\n  }\n  return l[i] < l[i];\n};\n\n/*\n  Return true if the list is monotonic decreasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_decreasing = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n    i++;\n  }\n  return l[i] > l[i];\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  true\n  >>> monotonic_increasing([4, 1, 0, -10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_increasing_or_decreasing = (l) => {\n  return monotonic_increasing(l) || monotonic_decreasing(l);\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_increasing_or_decreasing = (l) => {\n  return monotonic_increasing_or_decreasing(l);\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_or_decreasing = (l) => {\n  return monotonic_increasing_or_decreasing(l);\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_or_increasing = (l) => {\n  return monotonic_or_decreasing(l);\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_or_increasing = (l) => {\n  return monotonic_or_decreasing(l);\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  >>> monotonic_increasing_or_decreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonic_or_increasing_or_decreasing = (l) => {\n  return monotonic_or_increasing(l) || monotonic_or_decreasing(l);\n};\n\n/*\n  Return true if the list is monotonic increasing or decreasing.\n  >>> monotonic_increasing_or_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_or_decreasing([1, 20, 4, 10])\n  false\n  >>> mon"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    const val = l1[i];\n    if (map.has(val)) {\n      map.set(val, map.get(val) + 1);\n    } else {\n      map.set(val, 1);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    const val = l2[i];\n    if (map.has(val)) {\n      map.set(val, map.get(val) - 1);\n    } else {\n      map.set(val, -1);\n    }\n  }\n  const res = [];\n  for (let key in map) {\n    if (map.get(key) === 0) {\n      res.push(key);\n    }\n  }\n  return res;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    throw new Error('n must be > 1')\n  }\n  if (n % 2 === 0) {\n    return 2\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sum"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let x = 0;\n  let xs2 = [];\n  let xs3 = [];\n  let xs4 = [];\n  let xs5 = [];\n  let xs6 = [];\n  let xs7 = [];\n  let xs8 = [];\n  let xs9 = [];\n  let xs10 = [];\n  let xs11 = [];\n  let xs12 = [];\n  let xs13 = [];\n  let xs14 = [];\n  let xs15 = [];\n  let xs16 = [];\n  let xs17 = [];\n  let xs18 = [];\n  let xs19 = [];\n  let xs20 = [];\n  let xs21 = [];\n  let xs22 = [];\n  let xs23 = [];\n  let xs24 = [];\n  let xs25 = [];\n  let xs26 = [];\n  let xs27 = [];\n  let xs28 = [];\n  let xs29 = [];\n  let xs30 = [];\n  let xs31 = [];\n  let xs32 = [];\n  let xs33 = [];\n  let xs34 = [];\n  let xs35 = [];\n  let xs36 = [];\n  let xs37 = [];\n  let xs38 = [];\n  let xs39 = [];\n  let xs40 = [];\n  let xs41 = [];\n  let xs42 = [];\n  let xs43 = [];\n  let xs44 = [];\n  let xs45 = [];\n  let xs46 = [];\n  let xs47 = [];\n  let xs48 = [];\n  let xs49 = [];\n  let xs50 = [];\n  let xs51 = [];\n  let xs52 = [];\n  let xs53 = [];\n  let xs54 = [];\n  let xs55 = [];\n  let xs56 = [];\n  let xs57 = [];\n  let xs58 = [];\n  let xs59 = [];\n  let xs60 = [];\n  let xs61 = [];\n  let xs62 = [];\n  let xs63 = [];\n  let xs64 = [];\n  let xs65 = [];\n  let xs66 = [];\n  let xs67 = [];\n  let xs68 = [];\n  let xs69 = [];\n  let xs70 = [];\n  let xs71 = [];\n  let xs72 = [];\n  let xs73 = [];\n  let xs74 = [];\n  let xs75 = [];\n  let xs76 = [];\n  let xs77 = [];\n  let xs78 = [];\n  let xs79 = [];\n  let xs80 = [];\n  let xs81 = [];\n  let xs82 = [];\n  let xs83 = [];\n  let xs84 = [];\n  let xs85 = [];\n  let xs86 = [];\n  let xs87 = [];\n  let xs88 = [];\n  let xs89 = [];\n  let xs90 = [];\n  let xs91 = [];\n  let xs92 = [];\n  let xs93 = [];\n  let xs94 = [];\n  let xs95 = [];\n  let xs96 = [];\n  let xs97 = [];\n  let xs98 = [];\n  let xs99 = [];\n  let xs100 = [];\n  let xs101 = [];\n  let xs102 = [];\n  let xs103 = [];\n  let xs104 = [];\n  let xs105 = [];\n  let xs106 = [];\n  let xs107 = [];\n  let xs108 = [];\n  let xs109 = [];\n  let xs110 = [];\n  let xs111 = [];\n  let xs112 = [];\n  let xs113 = [];\n  let xs114 = [];\n  let xs115 = [];\n  let xs116 = [];\n  let xs117 = [];\n  let xs118 = [];\n  let xs119 = [];\n  let xs120 = [];\n  let xs121 = [];\n  let xs122 = [];\n  let xs123 = [];\n  let xs124 = [];\n  let xs125 = [];\n  let xs126 = [];\n  let xs127 = [];\n  let xs128 = [];\n  let xs129 = [];\n  let xs130 = [];\n  let xs131 = [];\n  let xs132 = [];\n  let xs133 = [];\n  let xs134 = [];\n  let xs135 = [];\n  let xs136 = [];\n  let xs137 = [];\n  let xs138 = [];\n  let xs139 = [];\n  let xs140 = [];\n  let xs141 = [];\n  let xs142 = [];\n  let xs143 = [];\n  let xs144 = [];\n  let xs145 = [];\n  let xs146 = [];\n  let xs147 = [];\n  let xs148 = [];\n  let xs149 = [];\n  let xs150 = [];\n  let xs151 = [];\n  let xs152 = [];\n  let xs153 = [];\n  let xs154 = [];\n  let xs155 = [];\n  let xs156 = [];\n  let xs157 = [];\n  let xs158 = [];\n  let xs159 = [];\n  let xs160 = [];\n  let xs161 = [];\n  let xs162 = [];\n  let xs163 = [];\n  let xs164 = [];\n  let xs165 = [];\n  let xs166 = [];\n  let xs167 = [];\n  let xs168 = [];\n  let xs169 = [];\n  let xs170 = [];\n  let xs171 = [];\n  let xs172 = [];\n  let xs173 = [];\n  let xs174 = [];\n  let xs175 = [];\n  let xs"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2);\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (s[i] === 'y' && i === s.length - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let n = shift % 26;\n  let r = x << n;\n  let s = x >>> (26 - n);\n  return (s < 0? \"-\" : \"\") + (s? String.fromCharCode(s) : \"0\") + circularShift(r, shift - n);\n};\n\nconst getDigit = (x, n) => {\n  return String.fromCharCode(x >>> (n * 8) & 0xFF);\n};\n\nconst getDigits = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n);\n};\n\nconst getDigits2 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n);\n};\n\nconst getDigits3 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n);\n};\n\nconst getDigits4 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n) + getDigit(x >>> (n * 8 + 48), n);\n};\n\nconst getDigits5 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n) + getDigit(x >>> (n * 8 + 48), n) + getDigit(x >>> (n * 8 + 56), n);\n};\n\nconst getDigits6 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n) + getDigit(x >>> (n * 8 + 48), n) + getDigit(x >>> (n * 8 + 56), n) + getDigit(x >>> (n * 8 + 64), n);\n};\n\nconst getDigits7 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n) + getDigit(x >>> (n * 8 + 48), n) + getDigit(x >>> (n * 8 + 56), n) + getDigit(x >>> (n * 8 + 64), n) + getDigit(x >>> (n * 8 + 72), n);\n};\n\nconst getDigits8 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n) + getDigit(x >>> (n * 8 + 48), n) + getDigit(x >>> (n * 8 + 56), n) + getDigit(x >>> (n * 8 + 64), n) + getDigit(x >>> (n * 8 + 72), n) + getDigit(x >>> (n * 8 + 80), n);\n};\n\nconst getDigits9 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDigit(x >>> (n * 8 + 32), n) + getDigit(x >>> (n * 8 + 40), n) + getDigit(x >>> (n * 8 + 48), n) + getDigit(x >>> (n * 8 + 56), n) + getDigit(x >>> (n * 8 + 64), n) + getDigit(x >>> (n * 8 + 72), n) + getDigit(x >>> (n * 8 + 80), n) + getDigit(x >>> (n * 8 + 88), n);\n};\n\nconst getDigits10 = (x, n) => {\n  return getDigit(x, n) + getDigit(x >>> (n * 8 + 8), n) + getDigit(x >>> (n * 8 + 16), n) + getDigit(x >>> (n * 8 + 24), n) + getDig"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  let total = 0;\n  let i = 0;\n  while (i < s.length) {\n    let num = parseInt(s[i]);\n    total += num;\n    i++;\n  }\n  return total;\n}\n\nconst fruitDistribution = ( s,  n) => {\n  "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  let max_index = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      max_index = i\n    }\n  }\n  return max_index\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let arr = lst.sort((a, b) => a - b);\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea18 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea19 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea20 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea21 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea22 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea23 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea24 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea25 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea26 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s *"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  if (q.length === 1) return w === 0;\n  if (q.length === 2) return w === 0 || q[0] === q[1];\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  while (i < arr.length) {\n    let j = i + 1;\n    while (j < arr.length) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n        break;\n      }\n      j++;\n    }\n    i = j;\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total++;\n      }\n    }\n  }\n  return total;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(isMultiplyPrime(100));\nconsole.log(isMultiplyPrime(30));\nconsole.log(isMultiplyPrime(20));\nconsole.log(isMultiplyPrime(10));\nconsole.log(isMultiplyPrime(5));\nconsole.log(isMultiplyPrime(4));\nconsole.log(isMultiplyPrime(3));\nconsole.log(isMultiplyPrime(2));\nconsole.log(isMultiplyPrime(1));\nconsole.log(isMultiplyPrime(0));\nconsole.log(isMultiplyPrime(0.1));\nconsole.log(isMultiplyPrime(0.2));\nconsole.log(isMultiplyPrime(0.3));\nconsole.log(isMultiplyPrime(0.4));\nconsole.log(isMultiplyPrime(0.5));\nconsole.log(isMultiplyPrime(0.6));\nconsole.log(isMultiplyPrime(0.7));\nconsole.log(isMultiplyPrime(0.8));\nconsole.log(isMultiplyPrime(0.9));\nconsole.log(isMultiplyPrime(1));\nconsole.log(isMultiplyPrime(2));\nconsole.log(isMultiplyPrime(3));\nconsole.log(isMultiplyPrime(4));\nconsole.log(isMultiplyPrime(5));\nconsole.log(isMultiplyPrime(6));\nconsole.log(isMultiplyPrime(7));\nconsole.log(isMultiplyPrime(8));\nconsole.log(isMultiplyPrime(9));\nconsole.log(isMultiplyPrime(10));\nconsole.log(isMultiplyPrime(11));\nconsole.log(isMultiplyPrime(12));\nconsole.log(isMultiplyPrime(13));\nconsole.log(isMultiplyPrime(14));\nconsole.log(isMultiplyPrime(15));\nconsole.log(isMultiplyPrime(16));\nconsole.log(isMultiplyPrime(17));\nconsole.log(isMultiplyPrime(18));\nconsole.log(isMultiplyPrime(19));\nconsole.log(isMultiplyPrime(20));\nconsole.log(isMultiplyPrime(21));\nconsole.log(isMultiplyPrime(22));\nconsole.log(isMultiplyPrime(23));\nconsole.log(isMultiplyPrime(24));\nconsole.log(isMultiplyPrime(25));\nconsole.log(isMultiplyPrime(26));\nconsole.log(isMultiplyPrime(27));\nconsole.log(isMultiplyPrime(28));\nconsole.log(isMultiplyPrime(29));\nconsole.log(isMultiplyPrime(30));\nconsole.log(isMultiplyPrime(31));\nconsole.log(isMultiplyPrime(32));\nconsole.log(isMultiplyPrime(33));\nconsole.log(isMultiplyPrime(34));\nconsole.log(isMultiplyPrime(35));\nconsole.log(isMultiplyPrime(36));\nconsole.log(isMultiplyPrime(37));\nconsole.log(isMultiplyPrime(38));\nconsole.log(isMultiplyPrime(39));\nconsole.log(isMultiplyPrime(40));\nconsole.log(isMultiplyPrime(41));\nconsole.log(isMultiplyPrime(42));\nconsole.log(isMultiplyPrime(43));\nconsole.log(isMultiplyPrime(44));\nconsole.log(isMultiplyPrime(45));\nconsole.log(isMultiplyPrime(46));\nconsole.log(isMultiplyPrime(47));\nconsole.log(isMultiplyPrime(48));\nconsole.log(isMultiplyPrime(49));\nconsole.log(isMultiplyPrime(50));\nconsole.log(isMultiplyPrime(51));\nconsole.log(isMultiplyPrime(52));\nconsole.log(isMultiplyPrime(53));\nconsole.log(isMultiplyPrime(54));\nconsole.log(isMultiplyPrime(55));\nconsole.log(isMultiplyPrime(56));\nconsole.log(isMultiplyPrime(57));\nconsole.log(isMultiplyPrime(58));\nconsole.log(isMultiplyPrime(59));\nconsole.log(isMultiplyPrime(60));\nconsole.log(isMultiplyPrime(61));\nconsole.log(isMultiplyPrime(62));\nconsole.log(isMultiplyPrime(63));\nconsole.log(isMultiplyPrime(64));\nconsole.log(isMultiplyPrime(65));\nconsole.log(isMultiplyPrime(66));\nconsole.log(isMultiplyPrime(67));\nconsole.log(isMultiplyPrime(68));\nconsole.log(isMultiplyPrime(69));\nconsole.log(isMultiplyPrime(70));\nconsole.log(isMultiplyPrime(71));\nconsole.log(isMultiplyPrime(72));\nconsole.log(isMultiplyPrime(73));\nconsole.log(isMultiplyPrime(74));\nconsole.log(isMultiplyPrime(75));\nconsole.log(isMultiplyPrime(76));\nconsole.log(isMultiplyPrime(77));\nconsole.log(isMultiplyPrime(78));\nconsole.log(isMultiplyPrime(79));\nconsole.log(isMultiplyPrime(80));\nconsole.log(isMultiplyPrime(81));\nconsole.log(isMultiplyPrime(82));\nconsole.log(isMultiplyPrime(83));\nconsole.log(isMultiplyPrime(84));\nconsole.log(isMultiplyPrime(85));\nconsole.log(isMultiplyPrime(86));\nconsole.log(isMultiplyPrime(87));\nconsole.log(is"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0 && a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0 && a % 67 === 0 && a % 71 === 0 && a % 73 === 0 && a % 79 === 0 && a % 83 === 0 && a % 89 === 0 && a % 97 === 0 && a % 101 === 0 && a % 103 === 0 && a % 107 === 0 && a % 109 === 0 && a % 113 === 0 && a % 127 === 0 && a % 131 === 0 && a % 137 === 0 && a % 139 === 0 && a % 149 === 0 && a % 151 === 0 && a % 157 === 0 && a % 163 === 0 && a % 167 === 0 && a % 173 === 0 && a % 179 === 0 && a % 181 === 0 && a % 191 === 0 && a % 193 === 0 && a % 197 === 0 && a % 199 === 0 && a % 211 === 0 && a % 223 === 0 && a % 227 === 0 && a % 229 === 0 && a % 233 === 0 && a % 239 === 0 && a % 241 === 0 && a % 251 === 0 && a % 257 === 0 && a % 263 === 0 && a % 269 === 0 && a % 271 === 0 && a % 277 === 0 && a % 281 === 0 && a % 283 === 0 && a % 293 === 0 && a % 307 === 0 && a % 311 === 0 && a % 313 === 0 && a % 317 === 0 && a % 319 === 0 && a % 331 === 0 && a % 337 === 0 && a % 347 === 0 && a % 349 === 0 && a % 353 === 0 && a % 359 === 0 && a % 367 === 0 && a % 373 === 0 && a % 379 === 0 && a % 383 === 0 && a % 389 === 0 && a % 397 === 0 && a % 401 === 0 && a % 409 === 0 && a % 419 === 0 && a % 421 === 0 && a % 431 === 0 && a % 433 === 0 && a % 439 === 0 && a % 443 === 0 && a % 449 === 0 && a % 457 === 0 && a % 461 === 0 && a % 463 === 0 && a % 467 === 0 && a % 479 === 0 && a % 487 === 0 && a % 491 === 0 && a % 499 === 0 && a % 503 === 0 && a % 509 === 0 && a % 521 === 0 && a % 523 === 0 && a % 541 === 0 && a % 547 === 0 && a % 557 === 0 && a % 563 === 0 && a % 569 === 0 && a % 571 === 0 && a % 577 === 0 && a % 587 === 0 && a % 593 === 0 && a % 599 === 0 && a % 601 === 0 && a % 607 === 0 && a % 613 === 0 && a % 617 === 0 && a % 619 === 0 && a % 631 === 0 && a % 641 === 0 && a % 643 === 0 && a % 647 === 0 && a % 653 === 0 && a % 659 === 0 && a % 661 === 0 && a % 673 === 0 && a % 677 === 0 && a % 683 === 0 && a % 691 === 0 && a % 701 === 0 && a % 709 === 0 && a % 719 === 0 && a % 727 === 0 && a % 733 === 0 && a % 739 === 0 && a % 743 === 0 && a % 751 === 0 && a % 757 === 0 && a % 761 === 0 && a % 769 === 0 && a % 773 === 0 && a % 787 === 0 && a % 797 === 0 && a % 809 === 0 && a % 811 === 0 && a % 821 === 0 && a % 823 === 0 && a % 827 === 0 && a % 829 === 0 && a % 839 === 0 && a % 853 === 0 && a % 857 === 0 && a % 859 === 0 && a % 863 === 0 && a % 867 === 0 && a % 871 === 0 && a % 877 === 0 && a % 881 === 0 && a % 883 === 0 && a % 887 === 0 && a % 907 === 0 && a % 917 === 0 && a % 919 === 0 && a % 929 === 0 && a % 937 === 0 && a % 941 === 0 && a % 947 === 0 && a % 953 === 0 && a % 967 === 0 && a % 971 === 0 && a % 977 === 0 && a % 983 === 0 && a % 991 === 0 && a % 997 === 0 && a % 1009 === 0 && a % 1013 === 0 && a % 1019 === 0 && a % 1021 === 0 && a % 1031 === 0 && a % 1033 === 0 && a % 1039 === 0 && a % 1049 === 0 && a % 1051 === 0 && a % 1061 === 0 && a % 1063 === 0 && a % 1069 === 0 && a % 1087 === 0 && a % 1091 === 0 && a % 1093 === 0 && a % 1097 === 0 && a % 1103 === 0 && a % 1109 === 0 && a % 1117 === 0 && a % 1123 === 0 && a % 1129 === 0 && a % 1151 === 0 && a % 1163 === 0 && a % 1169 === 0 && a % 1171 === 0 && a % 1181 === 0 && a % 1187 === 0 && a % 1193 === 0 && a % 1201 === 0 && a % 1213 === 0 && a % 1217 === 0 && a % 1231 === 0 && a % 1237 === 0 && a % 1249 === 0 && a % 1259 === 0 && a % 1277 === 0 && a % 1279 === 0 && a % 1283 === 0 && a % 1289 === 0 && a % 1291 === 0 && a % 1297 === 0 && a % 1301 === 0 && a % 1303 === 0 && a"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numArr = num.split(\"\");\n  let numArrLength = numArr.length;\n  let numArrSum = 0;\n  let numArrDigit = 0;\n  let numArrDigitCount = 0;\n  let numArrDigitCount2 = 0;\n  let numArrDigitCount3 = 0;\n  let numArrDigitCount4 = 0;\n  let numArrDigitCount5 = 0;\n  let numArrDigitCount6 = 0;\n  let numArrDigitCount7 = 0;\n  let numArrDigitCount8 = 0;\n  let numArrDigitCount9 = 0;\n  let numArrDigitCount10 = 0;\n  let numArrDigitCount11 = 0;\n  let numArrDigitCount12 = 0;\n  let numArrDigitCount13 = 0;\n  let numArrDigitCount14 = 0;\n  let numArrDigitCount15 = 0;\n  let numArrDigitCount16 = 0;\n  let numArrDigitCount17 = 0;\n  let numArrDigitCount18 = 0;\n  let numArrDigitCount19 = 0;\n  let numArrDigitCount20 = 0;\n  let numArrDigitCount21 = 0;\n  let numArrDigitCount22 = 0;\n  let numArrDigitCount23 = 0;\n  let numArrDigitCount24 = 0;\n  let numArrDigitCount25 = 0;\n  let numArrDigitCount26 = 0;\n  let numArrDigitCount27 = 0;\n  let numArrDigitCount28 = 0;\n  let numArrDigitCount29 = 0;\n  let numArrDigitCount30 = 0;\n  let numArrDigitCount31 = 0;\n  let numArrDigitCount32 = 0;\n  let numArrDigitCount33 = 0;\n  let numArrDigitCount34 = 0;\n  let numArrDigitCount35 = 0;\n  let numArrDigitCount36 = 0;\n  let numArrDigitCount37 = 0;\n  let numArrDigitCount38 = 0;\n  let numArrDigitCount39 = 0;\n  let numArrDigitCount40 = 0;\n  let numArrDigitCount41 = 0;\n  let numArrDigitCount42 = 0;\n  let numArrDigitCount43 = 0;\n  let numArrDigitCount44 = 0;\n  let numArrDigitCount45 = 0;\n  let numArrDigitCount46 = 0;\n  let numArrDigitCount47 = 0;\n  let numArrDigitCount48 = 0;\n  let numArrDigitCount49 = 0;\n  let numArrDigitCount50 = 0;\n  let numArrDigitCount51 = 0;\n  let numArrDigitCount52 = 0;\n  let numArrDigitCount53 = 0;\n  let numArrDigitCount54 = 0;\n  let numArrDigitCount55 = 0;\n  let numArrDigitCount56 = 0;\n  let numArrDigitCount57 = 0;\n  let numArrDigitCount58 = 0;\n  let numArrDigitCount59 = 0;\n  let numArrDigitCount60 = 0;\n  let numArrDigitCount61 = 0;\n  let numArrDigitCount62 = 0;\n  let numArrDigitCount63 = 0;\n  let numArrDigitCount64 = 0;\n  let numArrDigitCount65 = 0;\n  let numArrDigitCount66 = 0;\n  let numArrDigitCount67 = 0;\n  let numArrDigitCount68 = 0;\n  let numArrDigitCount69 = 0;\n  let numArrDigitCount70 = 0;\n  let numArrDigitCount71 = 0;\n  let numArrDigitCount72 = 0;\n  let numArrDigitCount73 = 0;\n  let numArrDigitCount74 = 0;\n  let numArrDigitCount75 = 0;\n  let numArrDigitCount76 = 0;\n  let numArrDigitCount77 = 0;\n  let numArrDigitCount78 = 0;\n  let numArrDigitCount79 = 0;\n  let numArrDigitCount80 = 0;\n  let numArrDigitCount81 = 0;\n  let numArrDigitCount82 = 0;\n  let numArrDigitCount83 = 0;\n  let numArrDigitCount84 = 0;\n  let numArrDigitCount85 = 0;\n  let numArrDigitCount86 = 0;\n  let numArrDigitCount87 = 0;\n  let numArrDigitCount88 = 0;\n  let numArrDigitCount89 = 0;\n"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryStringLength = 0;\n  let binaryStringLength2 = 0;\n  let binaryStringLength3 = 0;\n  let binaryStringLength4 = 0;\n  let binaryStringLength5 = 0;\n  let binaryStringLength6 = 0;\n  let binaryStringLength7 = 0;\n  let binaryStringLength8 = 0;\n  let binaryStringLength9 = 0;\n  let binaryStringLength10 = 0;\n  let binaryStringLength11 = 0;\n  let binaryStringLength12 = 0;\n  let binaryStringLength13 = 0;\n  let binaryStringLength14 = 0;\n  let binaryStringLength15 = 0;\n  let binaryStringLength16 = 0;\n  let binaryStringLength17 = 0;\n  let binaryStringLength18 = 0;\n  let binaryStringLength19 = 0;\n  let binaryStringLength20 = 0;\n  let binaryStringLength21 = 0;\n  let binaryStringLength22 = 0;\n  let binaryStringLength23 = 0;\n  let binaryStringLength24 = 0;\n  let binaryStringLength25 = 0;\n  let binaryStringLength26 = 0;\n  let binaryStringLength27 = 0;\n  let binaryStringLength28 = 0;\n  let binaryStringLength29 = 0;\n  let binaryStringLength30 = 0;\n  let binaryStringLength31 = 0;\n  let binaryStringLength32 = 0;\n  let binaryStringLength33 = 0;\n  let binaryStringLength34 = 0;\n  let binaryStringLength35 = 0;\n  let binaryStringLength36 = 0;\n  let binaryStringLength37 = 0;\n  let binaryStringLength38 = 0;\n  let binaryStringLength39 = 0;\n  let binaryStringLength40 = 0;\n  let binaryStringLength41 = 0;\n  let binaryStringLength42 = 0;\n  let binaryStringLength43 = 0;\n  let binaryStringLength44 = 0;\n  let binaryStringLength45 = 0;\n  let binaryStringLength46 = 0;\n  let binaryStringLength47 = 0;\n  let binaryStringLength48 = 0;\n  let binaryStringLength49 = 0;\n  let binaryStringLength50 = 0;\n  let binaryStringLength51 = 0;\n  let binaryStringLength52 = 0;\n  let binaryStringLength53 = 0;\n  let binaryStringLength54 = 0;\n  let binaryStringLength55 = 0;\n  let binaryStringLength56 = 0;\n  let binaryStringLength57 = 0;\n  let binaryStringLength58 = 0;\n  let binaryStringLength59 = 0;\n  let binaryStringLength60 = 0;\n  let binaryStringLength61 = 0;\n  let binaryStringLength62 = 0;\n  let binaryStringLength63 = 0;\n  let binaryStringLength64 = 0;\n  let binaryStringLength65 = 0;\n  let binaryStringLength66 = 0;\n  let binaryStringLength67 = 0;\n  let binaryStringLength68 = 0;\n  let binaryStringLength69 = 0;\n  let binaryStringLength70 = 0;\n  let binaryStringLength71 = 0;\n  let binaryStringLength72 = 0;\n  let binaryStringLength73 = 0;\n  let binaryStringLength74 = 0;\n  let binaryStringLength75 = 0;\n  let binaryStringLength76 = 0;\n  let binaryStringLength77 = 0;\n  let binaryStringLength78 = 0;\n  let binaryStringLength79 = 0;\n  let binaryStringLength80 = 0;\n  let binaryStringLength81 = 0;\n  let binaryStringLength82 = 0;\n  let binaryStringLength83 = 0;\n  let binaryStringLength84 = 0;\n  let binaryStringLength85 = 0;\n  let binaryStringLength86 = 0;\n  let binaryStringLength87 = 0;\n  let binaryStringLength88 = 0;\n  let binaryStringLength89 = 0;\n  let binaryStringLength90 = 0;\n  let binaryStringLength91 = 0;\n  let binaryStringLength92 = 0;\n  let binaryStringLength93 = 0;\n  let binaryStringLength94 = 0;\n  let binaryStringLength95 = 0;\n  let binaryStringLength96 = 0;\n  let binaryStringLength97 = 0;\n  let binaryStringLength98 = 0;\n  let binaryStringLength99 = 0;\n  let binaryStringLength100 = 0;\n  let binaryStringLength101 = 0;\n  let binaryStringLength102 = 0;\n  let binaryStringLength103 = 0;\n  let binaryStringLength104 = 0;\n  let binaryStringLength105 = 0;\n  let binaryStringLength106 = 0;\n  let binaryStringLength107 = 0;\n  let binaryStringLength108 = 0;\n  let binaryStringLength109 = 0;\n  let binaryStringLength110 = 0;\n  let binaryStringLength111 = 0;\n  let binaryStringLength112 = 0;\n  let binaryStringLength113 = 0;\n  let binaryStringLength114 = 0;\n  let binaryStringLength115 = 0;\n  let binaryStringLength116 = 0;\n  let binaryStringLength117 = 0;\n  let binaryStringLength118 = 0;\n  let binaryStringLength119 = 0;\n  let binaryStringLength120 = 0;\n  let binaryStringLength121 = 0;\n  let binaryStringLength122 = 0;\n  let binaryStringLength123 = 0;\n  let binaryStringLength124 = 0;\n  let binaryStringLength125 = 0;\n  let binaryStringLength126 = 0;\n  let binaryStringLength127 = 0;\n  let binaryStringLength128 = 0;\n  let binaryStringLength129 = 0;\n  let binaryStringLength130 = 0;\n  let binaryStringLength131 = 0;\n  let binaryStringLength132 = 0;\n  let binaryStringLength133 = 0;\n  let binaryStringLength134 = 0;\n  let binaryStringLength135 = 0;\n"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let cnt = 0;\n  let i = 0;\n  while (i < len) {\n    if (s[i] === s[i + 1]) {\n      cnt++;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return cnt >= 3 && cnt % 3 === 0;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeTable = [\n    ['A+', 'A'],\n    ['B+', 'B'],\n    ['C+', 'C'],\n    ['D+', 'D'],\n    ['E+', 'E']\n  ];\n  let grade = gradeTable[grades.length - 1];\n  let gradeLetter = grade[0];\n  let gradeLetterGrade = grade[1];\n  let gradeLetterGradeIndex = gradeTable.indexOf(grade);\n  let gradeLetterGradeIndexPlusOne = gradeLetterGradeIndex + 1;\n  let gradeLetterGradeIndexMinusOne = gradeLetterGradeIndex - 1;\n  let gradeLetterGradeIndexMinusTwo = gradeLetterGradeIndexMinusOne - 1;\n  let gradeLetterGradeIndexMinusThree = gradeLetterGradeIndexMinusTwo - 1;\n  let gradeLetterGradeIndexMinusFour = gradeLetterGradeIndexMinusThree - 1;\n  let gradeLetterGradeIndexMinusFive = gradeLetterGradeIndexMinusFour - 1;\n  let gradeLetterGradeIndexMinusSix = gradeLetterGradeIndexMinusFive - 1;\n  let gradeLetterGradeIndexMinusSeven = gradeLetterGradeIndexMinusSix - 1;\n  let gradeLetterGradeIndexMinusEight = gradeLetterGradeIndexMinusSeven - 1;\n  let gradeLetterGradeIndexMinusNine = gradeLetterGradeIndexMinuseight - 1;\n  let gradeLetterGradeIndexMinusTen = gradeLetterGradeIndexMinusNine - 1;\n  let gradeLetterGradeIndexMinusEleven = gradeLetterGradeIndexMinusTen - 1;\n  let gradeLetterGradeIndexMinusTwelve = gradeLetterGradeIndexMinusEleven - 1;\n  let gradeLetterGradeIndexMinusThirteen = gradeLetterGradeIndexMinusTwelve - 1;\n  let gradeLetterGradeIndexMinusFourteen = gradeLetterGradeIndexMinusThirteen - 1;\n  let gradeLetterGradeIndexMinusFifteen = gradeLetterGradeIndexMinusFourteen - 1;\n  let gradeLetterGradeIndexMinusSixteen = gradeLetterGradeIndexMinusFifteen - 1;\n  let gradeLetterGradeIndexMinusSeventeen = gradeLetterGradeIndexMinusSixteen - 1;\n  let gradeLetterGradeIndexMinusEighteen = gradeLetterGradeIndexMinusSeventeen - 1;\n  let gradeLetterGradeIndexMinusNineteen = gradeLetterGradeIndexMinusEighteen - 1;\n  let gradeLetterGradeIndexMinusTwenty = gradeLetterGradeIndexMinusNineteen - 1;\n  let gradeLetterGradeIndexMinusTwentyOne = gradeLetterGradeIndexMinusTwenty - 1;\n  let gradeLetterGradeIndexMinusTwentyTwo = gradeLetterGradeIndexMinusTwentyOne - 1;\n  let gradeLetterGradeIndexMinusTwentyThree = gradeLetterGradeIndexMinusTwentyTwo - 1;\n  let gradeLetterGradeIndexMinusTwentyFour = gradeLetterGradeIndexMinusTwentyThree - 1;\n  let gradeLetterGradeIndexMinusTwentyFive = gradeLetterGradeIndexMinusTwentyFour - 1;\n  let gradeLetterGradeIndexMinusTwentySix = gradeLetterGradeIndexMinusTwentyFive - 1;\n  let gradeLetterGradeIndexMinusTwentySeven = gradeLetterGradeIndexMinusTwentySix - 1;\n  let gradeLetterGradeIndexMinusTwentyEight = gradeLetterGradeIndexMinusTwentySeven - 1;\n  let gradeLetterGradeIndexMinusTwentyNine = gradeLetterGradeIndexMinusTwentyEight - 1;\n  let gradeLetterGradeIndexMinusThirty = gradeLetterGradeIndexMinusTwentyNine - 1;\n  let gradeLetterGradeIndexMinusThirtyOne = gradeLetterGradeIndexMinusThirty - 1;\n  let gradeLetterGradeIndexMinusThirtyTwo = gradeLetterGradeIndexMinusThirtyOne - 1;\n  let gradeLetterGradeIndexMinusThirtyThree = gradeLetterGradeIndexMinusThirtyTwo - 1;\n  let gradeLetterGradeIndexMinusThirtyFour = gradeLetterGradeIndexMinusThirtyThree - 1;\n  let gradeLetterGradeIndexMinusThirtyFive = gradeLetterGradeIndexMinusThirtyFour - 1;\n  let gradeLetterGradeIndexMinusThirtySix = gradeLetterGradeIndexMinusThirtyFive - 1;\n  let gradeLetterGradeIndexMinusThirtySeven = gradeLetterGradeIndexMinusThirtySix - 1;\n  let gradeLetterGradeIndexMinusThirtyEight = gradeLetterGradeIndexMinusThirtySeven - 1;\n  let gradeLetterGradeIndexMinusThirtyNine = gradeLetterGradeIndexMinusThirtyEight - 1;\n  let gradeLetterGradeIndexMinusThirty = gradeLetterGradeIndexMinusThirtyNine - 1;\n  let gradeLetterGradeIndexMinusThirtyOne = gradeLetterGradeIndexMinusThirty - 1;\n  let gradeLetterGradeIndexMinusThirtyTwo = gradeLetterGradeIndexMinusThirtyOne - 1;\n  let gradeLetterGradeIndexMinusThirtyThree = gradeLetterGradeIndexMinusThirtyTwo - 1;\n  let gradeLetterGradeIndexMinusThirtyFour = gradeLetterGradeIndexMinusThirtyThree - 1;\n  let gradeLetterGradeIndexMinusThirtyFive = gradeLetterGradeIndexMinusThirtyFour - 1;\n  let gradeLetterGradeIndexMinusThirtySix = gradeLetterGradeIndexMinusThirtyFive - 1;\n  let gradeLetterGradeIndexMinusThirtySeven = gradeLetterGradeIndexMinusThirtySix - 1;\n  let gradeLetterGradeIndexMinusThirtyEight = gradeLetterGradeIndexMinusThirtySeven - 1;\n  let gradeLetterGradeIndexMinusThirtyNine = gradeLetterGradeIndexMinusThirtyEight - 1;\n  let gradeLetterGradeIndexMinusThirty = gradeLetterGradeIndexMinusThirtyNine"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n  for (let i=2;i<=n;i++) {\n    if (n%i==0) {\n      sOneEnds+=i;\n      n=n/i;\n    }\n  }\n  return sOneEnds;\n}\n\n//  Given a positive integer n, return t he co unt of the numbers of n-digit\n//  positive integers that start or end with  1.\ncon s t start sOneEnds= (n) => {\n  if (n<=1) return 0;\n  let sOneEnds=0;\n"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit * N;\n    N = N / 10;\n    digit *= 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add23 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add24 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add25 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add26 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst add27 = (lst"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ');\n  let newArr = arr.map((e, i) => {\n    let arr2 = arr.slice(0, i).concat(arr.slice(i + 1));\n    return arr2.join(' ');\n  });\n  return newArr.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getCol = (lst, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === y) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple2 = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple3 = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple4 = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple5 = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple6 = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const cols1 = [];\n    for (let j = 0; j < row.length; j++) {\n      if (j === x) {\n        cols1.push(row[j]);\n      }\n    }\n    rows.push(cols1);\n  }\n  return rows;\n};\n\nconst getTuple7 = (lst, x, y) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  const cols = [];"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let result = array.slice(0);\n  let len = result.length;\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    sum = result[i];\n    while (j < len && sum + result[j] < 0) {\n      result[j] = result[j] + sum;\n      j++;\n    }\n    if (j < len) {\n      result[i] = result[j];\n      result[j] = sum;\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst decrypt2 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst decrypt3 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst encrypt4 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst decrypt4 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst encrypt5 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst decrypt5 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst encrypt6 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst decrypt6 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    let num = char.charCodeAt(0);\n    let rot = num % 26;\n    let temp = rot * 2;\n    rot = temp + rot;\n    result += String.fromCharCode(rot);\n  }\n  return result;\n};\n\nconst encrypt"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest2 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest3 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest4 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest5 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest6 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest7 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest8 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest9 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest10 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest11 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest12 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest13 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest14 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest15 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest16 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconstnex tNextSmallest17 = (lst) => {\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst["}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(/[.!?]/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 0) {\n      continue;\n    }\n    let word = words[i];\n    let isBored = true;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j]!== 'I') {\n        isBored = false;\n        break;\n      }\n    }\n    if (isBored) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt11 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt12 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt13 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt14 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt15 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt16 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt17 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt18 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt19 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt20 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt21 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt22 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt23 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt24 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt25 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt26 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt27 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt28 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt29 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt30 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt31 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt32 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt33 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt34 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt35 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt36 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt37 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt38 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt39 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt40 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt41 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt42 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt43 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt44 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt45 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt46 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt47 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt48 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt49 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt50 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt51 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt52 = (x, y, z) => {\n  return x + y === z;\n}\n\nconst anyInt53 = (x,"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toLowerCase();\n  let encoded_array = encoded.split('');\n  let encoded_array_length = encoded_array.length;\n  let encoded_array_index = 0;\n  let encoded_array_index_end = encoded_array_length - 1;\n  let encoded_array_index_start = 0;\n  let encoded_array_index_start_end = encoded_array_length - 1;\n  let encoded_array_index_end_start = 0;\n  let encoded_array_index_end_start_end = encoded_array_length - 1;\n  let encoded_array_index_end_start_end_end = 0;\n  let encoded_array_index_end_start_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let encoded_array_index_end_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num > max) {\n      max = num;\n    }\n    sum += num;\n  }\n  return max + sum;\n};\n\nmodule.exports = skjkasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let keysLength = keys.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < keysLength) {\n    if (keys[i].toLowerCase() === keys[j].toLowerCase()) {\n      i++;\n      j++;\n    } else {\n      if (keys[i].toUpperCase() === keys[j].toUpperCase()) {\n        i++;\n        j++;\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_id = a.toString().split('').map(i => i.charCodeAt(0));\n  let b_id = b.toString().split('').map(i => i.charCodeAt(0));\n  let product = 0;\n  for (let i = 0; i < a_id.length; i++) {\n    for (let j = 0; j < b_id.length; j++) {\n      if (a_id[i] === b_id[j]) {\n        product += 1;\n      }\n    }\n  }\n  return product;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === s[i + 1]) {\n      if (s[i] === s[i + 2]) {\n        if (s[i] === s[i + 3]) {\n          if (s[i] === s[i + 4]) {\n            if (s[i] === s[i + 5]) {\n              count += 1;\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (value === \"\") {\n    return 0;\n  }\n  let num = parseFloat(value);\n  let diff = Math.abs(num - Math.round(num));\n  if (diff < 0.5) {\n    return Math.round(num);\n  } else {\n    return Math.round(num - diff);\n  }\n};\n\nmodule.exports = {\n  closestInteger\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = []\n  let nextLevel = n\n  while (nextLevel > 0) {\n    let nextLevelNum = Math.floor(nextLevel / 2)\n    pile.push(nextLevelNum)\n    nextLevel = nextLevel - nextLevelNum\n  }\n  return pile\n}\n\nmodule.exports = makeAPile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let wordsArray = [];\n  let wordsArrayLength = 0;\n  let wordsArrayIndex = 0;\n  let word = \"\";\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordArrayIndex = 0;\n  let wordArrayLength = 0;\n  let wordArrayIndexLength = 0;\n  let wordArrayIndexLengthLength = 0;\n  let wordArrayIndexLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let wordArrayIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  return Math.floor(Math.sqrt(x * y))\n}\n\nconst test = () => {\n  console.log(chooseNum(12, 15))\n  console.log(chooseNum(13, 12))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let n = x.length;\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    let digit = x[i];\n    let j = i;\n    while (j < n && x[j] === digit) {\n      j++;\n    }\n    if (j === n) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName2 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName3 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName4 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName5 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName6 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName7 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName8 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName9 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName10 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName11 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nconst byName12 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let num = arr[i];\n    if (num > 0 && num < 10) {\n      result.push(num);\n      i++;\n    } else {\n      "}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f15 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f16 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f17 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f18 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f19 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f20 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f21 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f22 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f23 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f24 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i % 2? 1 : i);\n  }\n  return result;\n};\n\nconst f25 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst test = () => {\n  let arr = [-1, 11, -11];\n  console.log(countNums(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempTemp = arrTemp.slice();\n  let arrTempTempLen = arrTempTemp.length;\n  let arrTempTempTemp = arrTempTemp.slice();\n  let arrTempTempTempLen = arrTempTempTemp.length;\n  let arrTempTempTempTemp = arrTempTempTemp.slice();\n  let arrTempTempTempTempLen = arrTempTempTempTemp.length;\n  let arrTempTempTempTempTemp = arrTempTempTempTemp.slice();\n  let arrTempTempTempTempTempLen = arrTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTemp = arrTempTempTempTempTemp.slice();\n  let arrTempTempTempTempTempTempLen = arrTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTemp"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Even = lst1.every((num) => num % 2 === 0);\n  const lst2Even = lst2.every((num) => num % 2 === 0);\n  if (lst1Even && lst2Even) {\n    return \"YES\";\n  } else if (lst1Even &&!lst2Even) {\n    return \"NO\";\n  } else if (!lst1Even && lst2Even) {\n    return \"NO\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconst test = () => {\n  const lst1 = [1, 2, 3, 4];\n  const lst2 = [1, 5, 3, 4];\n  console.log(exchange(lst1, lst2));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letter = '';\n  let letterCount = 0;\n  let letterCounts = [];\n  let letterCountsCount = 0;\n  let letterCountsCounts = [];\n  let letterCountsCountsCount = 0;\n  let letterCountsCountsCounts = [];\n  let letterCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = [];\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === c[0]) {\n      s = s.substr(0, index) + s.substr(index + 1);\n      index = index + 1;\n    } else {\n      index++;\n    }\n  }\n  if (s.length === 0) {\n    result = 'true';\n  } else {\n    result = s;\n  }\n  return [result, isPalindrome];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  let odd = 0\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i]\n    let len = str.length\n    let oddDigits = 0\n    for (let j = 0; j < len; j++) {\n      let digit = str[j]\n      if (digit % 2!== 0) {\n        oddDigits++\n      }\n    }\n    odd += oddDigits\n  }\n  res.push(\"the number of odd elements \" + odd + \"n the str\" + odd + \"ng \" +\n    \"of the \" + odd + \"nput.\")\n  return res\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > minSum) {\n      break;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push({\n          i: i,\n          j: j,\n          capacity: capacity\n        });\n      }\n    }\n  }\n  return buckets.length;\n};\n\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray2 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray3 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray4 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray5 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray6 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray7 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray8 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray9 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray10 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray11 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray12 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray13 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray14 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray15 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray16 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray17 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 1;\n  });\n  return result;\n};\n\nconst sortArray18 = (arr) => {\n  let result = arr.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a < b) {\n      return -1"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    let c = s[i];\n    if (c.match(/[a-zA-Z]/)) {\n      count++;\n      if (count === n) {\n        words.push(s.substring(i, i + n));\n      }\n    }\n    i++;\n  }\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let min = Infinity;\n  let minIndex = -1;\n  let i = 0;\n  while (i < len) {\n    let cur = word[i];\n    if (vowels.indexOf(cur)!== -1) {\n      let distance = Math.abs(i - len);\n      if (distance < min) {\n        min = distance;\n        minIndex = i;\n      }\n    }\n    i++;\n  }\n  if (minIndex === -1) {\n    return \"\";\n  }\n  return word[minIndex];\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let len = lst.length\n  let i = 0\n  let j = 0\n  let isGood = true\n  while (i < len && j < len) {\n    if (lst[i] === '(') {\n      i++\n      j++\n    } else if (lst[j] === ')') {\n      j++\n      i++\n    } else {\n      isGood = false\n      break\n    }\n  }\n  return isGood\n}\n\nmodule.exports = matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, val) => {\n    return val > max? val : max;\n  }, -Infinity);\n  const result = arr.filter((val, i) => val === max);\n  return result.length === k? result : [];\n};\n\nexport { maximum };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((acc, val) => {\n    if (val % 2 === 0) {\n      return acc + val;\n    } else {\n      return acc;\n    }\n  }, 0);\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport default addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let l = [];\n  let i = 0;\n  while (i < n) {\n    let j = n;\n    while (j > 1) {\n      if (j % 2 === 0) {\n        l.push(j);\n        j = j / 2;\n      } else {\n        j = 3 * j + 1;\n      }\n    }\n    i++;\n  }\n  return l;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  if (dateParts.length!== 3) {\n    return false;\n  }\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[2], 10);\n  const year = parseInt(dateParts[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    if (txt[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted14 = (lst) => {\n  if (lst.length === 0) return true;\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= prev) return false;\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted15 = (lst) => {\n  if (lst.length === 0) return true;\n  let"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let prodSigns = 0;\n  for (let i = 0; i < arr.length; i++) {\n    prodSigns += arr[i];\n  }\n  return prodSigns;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const gridSize = grid.length;\n  const gridSize2 = grid[0].length;\n  const gridSize3 = gridSize2 * gridSize;\n  const gridSize4 = gridSize3 * gridSize;\n  const gridSize5 = gridSize4 * gridSize;\n  const gridSize6 = gridSize5 * gridSize;\n  const gridSize7 = gridSize6 * gridSize;\n  const gridSize8 = gridSize7 * gridSize;\n  const gridSize9 = gridSize8 * gridSize;\n  const gridSize10 = gridSize9 * gridSize;\n  const gridSize11 = gridSize10 * gridSize;\n  const gridSize12 = gridSize11 * gridSize;\n  const gridSize13 = gridSize12 * gridSize;\n  const gridSize14 = gridSize13 * gridSize;\n  const gridSize15 = gridSize14 * gridSize;\n  const gridSize16 = gridSize15 * gridSize;\n  const gridSize17 = gridSize16 * gridSize;\n  const gridSize18 = gridSize17 * gridSize;\n  const gridSize19 = gridSize18 * gridSize;\n  const gridSize20 = gridSize19 * gridSize;\n  const gridSize21 = gridSize20 * gridSize;\n  const gridSize22 = gridSize21 * gridSize;\n  const gridSize23 = gridSize22 * gridSize;\n  const gridSize24 = gridSize23 * gridSize;\n  const gridSize25 = gridSize24 * gridSize;\n  const gridSize26 = gridSize25 * gridSize;\n  const gridSize27 = gridSize26 * gridSize;\n  const gridSize28 = gridSize27 * gridSize;\n  const gridSize29 = gridSize28 * gridSize;\n  const gridSize30 = gridSize29 * gridSize;\n  const gridSize31 = gridSize30 * gridSize;\n  const gridSize32 = gridSize31 * gridSize;\n  const gridSize33 = gridSize32 * gridSize;\n  const gridSize34 = gridSize33 * gridSize;\n  const gridSize35 = gridSize34 * gridSize;\n  const gridSize36 = gridSize35 * gridSize;\n  const gridSize37 = gridSize36 * gridSize;\n  const gridSize38 = gridSize37 * gridSize;\n  const gridSize39 = gridSize38 * gridSize;\n  const gridSize40 = gridSize39 * gridSize;\n  const gridSize41 = gridSize40 * gridSize;\n  const gridSize42 = gridSize41 * gridSize;\n  const gridSize43 = gridSize42 * gridSize;\n  const gridSize44 = gridSize43 * gridSize;\n  const gridSize45 = gridSize44 * gridSize;\n  const gridSize46 = gridSize45 * gridSize;\n  const gridSize47 = gridSize46 * gridSize;\n  const gridSize48 = gridSize47 * gridSize;\n  const gridSize49 = gridSize48 * gridSize;\n  const gridSize50 = gridSize49 * gridSize;\n  const gridSize51 = gridSize50 * gridSize;\n  const gridSize52 = gridSize51 * gridSize;\n  const gridSize53 = gridSize52 * gridSize;\n  const gridSize54 = gridSize53 * gridSize;\n  const gridSize55 = gridSize54 * gridSize;\n  const gridSize56 = gridSize55 * gridSize;\n  const gridSize57 = gridSize56 * gridSize;\n  const gridSize58 = gridSize57 * gridSize;\n  const gridSize59 = gridSize58 * gridSize;\n  const gridSize60 = gridSize59 * gridSize;\n  const gridSize61 = gridSize60 * gridSize;\n  const gridSize62 = gridSize61 * gridSize;\n  const gridSize63 = gridSize62 * gridSize;\n  const gridSize64 = gridSize63 * gridSize;\n  const gridSize65 = gridSize64 * gridSize;\n  const gridSize66 = gridSize65 * gridSize;\n  const gridSize67 = gridSize66 * gridSize;\n  const gridSize68 = gridSize67 * gridSize;\n  const gridSize69 = gridSize68 * gridSize;\n  const gridSize70 = gridSize69 * gridSize;\n  const gridSize71 = gridSize70 * gridSize;\n  const gridSize72 = gridSize71 * gridSize;\n  const gridSize73 = gridSize72 * gridSize;\n  const gridSize74 = gridSize73 * gridSize;\n  const gridSize75"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [a, b, c] = [1, 3, 2];\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = result[i - 1];\n  }\n  return result;\n};\n\nconst test = (n) => {\n  let result = tri(n);\n  console.log(result);\n};\n\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 1) return 0\n  if (n % 2) return 0\n  let sum = 0\n  while (n > 0) {\n    sum += n % 10\n    n /= 10\n  }\n  return sum\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t ="}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconsole.log(sumSquares([1, 2, 3]))\nconsole.log(sumSquares([1, 4, 9]))\nconsole.log(sumSquares([1, 3, 5, 7]))\nconsole.log(sumSquares([1.4, 4.2, 0]))\nconsole.log(sumSquares([-2.4, 1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter7 = (txt) => {\n  return txt.length > 0 && txt[txt.length - 1] >= 65 && txt[txt.length - 1] <= 90 && txt[txt.length - 1]!== 32;\n};\n\n/* Create a function that returns trueif th e last character of a given string is an alphabetic character and is  not  a par t  of a w ord, and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  "}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLen = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTempLen = 0;\n  let arrTempIndex = 0;\n  let arrTempMax = 0;\n  let arrTempMin = arrLen;\n  let arrTempMaxIndex = -1;\n  let arrTempMinIndex = arrLen;\n  let arrTempMaxIndex = -1;\n  let arrTempMinIndex = arrLen;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;\n  let arrTempMaxIndex = -1;"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  const largest = lst[0];\n  const smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {\n  if (a === b) {\n    return null;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\nconst compareOne = (a,  b) => {"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let isEven = true;\n  while (n > 0) {\n    if (isEven) {\n      sum += n % 2;\n    }\n    n = n / 2;\n    isEven =!isEven;\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error(\"The special factorial of a negative number is undefined\");\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return n;\n  }\n  return n * specialFactorial(n - 1);\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, \"_\");\n  if (result.length > 2) {\n    result = result.replace(/\\s+/g, \"-\");\n  }\n  return result;\n};\n\nmodule.exports = {\n  fixSpaces\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9\\.]+$/;\n  const file_name_length = file_name.length;\n  const file_name_substring_length = file_name.substring(0, file_name_length).length;\n  const file_name_substring_letters = file_name.substring(0, file_name_length).toLowerCase();\n  const file_name_substring_letters_regex = /^[a-zA-Z0-9]+$/;\n  const file_name_substring_letters_match = file_name_substring_letters.match(file_name_substring_letters_regex);\n  const file_name_substring_dot_regex = /\\./;\n  const file_name_substring_dot_match = file_name_substring_dot_regex.match(file_name_substring_letters);\n  const file_name_substring_letters_letters_regex = /^[a-zA-Z]+$/;\n  const file_name_substring_letters_letters_match = file_name_substring_letters_letters_regex.match(file_name_substring_letters);\n  const file_name_substring_letters_letters_letters_match = file_name_substring_letters_letters_match.match(file_name_substring_letters_letters_regex);\n  const file_name_substring_letters_letters_letters_letters_match = file_name_substring_letters_letters_letters_letters_match.match(file_name_substring_letters_letters_letters_regex);\n  const file_name_substring_letters_letters_letters_letters_letters_letters_match = file_name_substring_letters_letters_letters_letters_letters_letters_letters_match.match(file_name_substring_letters_letters_letters_letters_letters_regex);\n  const file_name_substring_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = sumSquares;<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(num); i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n  if (x == \"0\" || n == \"0\") {\n    return false;\n  }\n  if (x == \"1\" || n == \"1\") {\n    return true;\n  }\n  if (x == \"0\" || n == \"0\") {\n    return false;\n  }\n  if (x == \"1\" || n == \"1\") {\n    return true;\n  }\n  if (x == \"1\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"2\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"2\" || n == \"2\") {\n    return true;\n  }\n  if (x == \"3\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"3\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"3\" || n == \"3\") {\n    return true;\n  }\n  if (x == \"4\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"4\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"4\" || n == \"3\") {\n    return false;\n  }\n  if (x == \"4\" || n == \"4\") {\n    return true;\n  }\n  if (x == \"5\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"5\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"5\" || n == \"3\") {\n    return false;\n  }\n  if (x == \"5\" || n == \"4\") {\n    return false;\n  }\n  if (x == \"5\" || n == \"5\") {\n    return true;\n  }\n  if (x == \"6\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"6\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"6\" || n == \"3\") {\n    return false;\n  }\n  if (x == \"6\" || n == \"4\") {\n    return false;\n  }\n  if (x == \"6\" || n == \"5\") {\n    return false;\n  }\n  if (x == \"6\" || n == \"6\") {\n    return true;\n  }\n  if (x == \"7\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"7\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"7\" || n == \"3\") {\n    return false;\n  }\n  if (x == \"7\" || n == \"4\") {\n    return false;\n  }\n  if (x == \"7\" || n == \"5\") {\n    return false;\n  }\n  if (x == \"7\" || n == \"6\") {\n    return false;\n  }\n  if (x == \"7\" || n == \"7\") {\n    return true;\n  }\n  if (x == \"8\" || n == \"1\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"2\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"3\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"4\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"5\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"6\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"7\") {\n    return false;\n  }\n  if (x == \"8\" || n == \"8\") {\n    return true;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderByPoints15 = (nums) => {\n  if (nums.length === 0) {\n    return [];"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 10 === 0 && nums[i] % 100!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [1];\n  let max = 0;\n  for (let i = 2; i <= n; i++) {\n    let sum = 0;\n    for (let j = 0; j < i; j++) {\n      sum += a[j];\n    }\n    for (let k = i; k < n; k++) {\n      sum += a[k];\n    }\n    if (sum % 3 === 0) {\n      max = Math.max(max, sum);\n    }\n    a.push(sum);\n  }\n  return max;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = getOrbit(planet1);\n  const planet2Orbit = getOrbit(planet2);\n  const planet1OrbitSorted = sortBy(planet1Orbit);\n  const planet2OrbitSorted = sortBy(planet2Orbit);\n  const planet1OrbitSortedDistance = getDistance(planet1OrbitSorted);\n  const planet2OrbitSortedDistance = getDistance(planet2OrbitSorted);\n  const planet1OrbitSortedDistanceToSun = getDistanceToSun(planet1OrbitSorted);\n  const planet2OrbitSortedDistanceToSun = getDistanceToSun(planet2OrbitSorted);\n  const planet1OrbitSortedDistanceToSunSorted = getDistanceToSunSorted(planet1OrbitSorted);\n  const planet2OrbitSortedDistanceToSunSorted = getDistanceToSunSorted(planet2OrbitSorted);\n  const planet1OrbitSortedDistanceToSunSortedDistance = getDistanceToSunSortedDistance(planet1OrbitSortedDistanceToSunSorted);\n  const planet2OrbitSortedDistanceToSunSortedDistance = getDistanceToSunSortedDistance(planet2OrbitSortedDistanceToSunSorted);\n  const planet1OrbitSortedDistanceToSunSortedDistanceToSun = getDistanceToSunSortedDistanceToSun(planet1OrbitSortedDistanceToSunSorted);\n  const planet2OrbitSortedDistanceToSunSortedDistanceToSun = getDistanceToSunSortedDistanceToSun(planet2OrbitSortedDistanceToSunSorted);\n  const planet1OrbitSortedDistanceToSunSortedDistanceToSunSorted = getDistanceToSunSortedDistanceToSunSorted(planet1OrbitSortedDistanceToSunSortedDistance);\n  const planet2OrbitSortedDistanceToSunSortedDistanceToSunSorted = getDistanceToSunSortedDistanceToSunSorted(planet2OrbitSortedDistanceToSunSortedDistance);\n  const planet1OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun = getDistanceToSunSortedDistanceToSunSortedDistanceToSun(planet1OrbitSortedDistanceToSunSortedDistanceToSunSorted);\n  const planet2OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun = getDistanceToSunSortedDistanceToSunSortedDistanceToSun(planet2OrbitSortedDistanceToSunSortedDistanceToSunSorted);\n  const planet1OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun = getDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun(planet1OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSorted);\n  const planet2OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun = getDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun(planet2OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSun);\n  const planet1OrbitSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSortedDistanceToSunSorted"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  sortedListSum,\n  list_sort\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst xOrY = (n, x, y) => {\n  if (n % x === 0 && n % y === 0) {\n    return n;\n  } else {\n    return xOrY(n, x, y);\n  }\n"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst doubl e TheDif ference = (lst) => {\n  if (lst.length == 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 0) {\n      sum += lst["}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.map(score => score.score);\n  const guesses = guess.map(guess => guess.guess);\n  const match = scores.map(score => {\n    const guess = guesses.find(guess => score === guess);\n    return {\n      score: score,\n      guess: guess\n    };\n  });\n  const matchLength = match.map(match => {\n    const score = match.score;\n    const guess = match.guess;\n    const diff = Math.abs(score - guess);\n    return diff;\n  });\n  return matchLength;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_lower = class_name.toLowerCase();\n  let class_name_upper = class_name.toUpperCase();\n  let class_name_lower_extensions = class_name_lower.split('.');\n  let class_name_upper_extensions = class_name_upper.split('.');\n  let class_name_lower_extensions_length = class_name_lower_extensions.length;\n  let class_name_upper_extensions_length = class_name_upper_extensions.length;\n  let class_name_lower_extensions_length_equal = class_name_lower_extensions_length === class_name_upper_extensions_length;\n  let class_name_lower_extensions_equal = class_name_lower_extensions_length_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[0]);\n  let class_name_lower_extensions_equal_equal = class_name_lower_extensions_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[1]);\n  let class_name_lower_extensions_equal_equal_equal = class_name_lower_extensions_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[2]);\n  let class_name_lower_extensions_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[3]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[4]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[5]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[6]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[7]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[8]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[9]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[10]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[11]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal && class_name_lower_extensions.every(extension => extension === class_name_upper_extensions[12]);\n  let class_name_lower_extensions_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal_equal = class_name_lower_extensions_equal_equal_equal_equal_equal_equal_"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = number;\n  let result = '';\n  let i = 0;\n  while (num > 0) {\n    let digit = num % 10;\n    num = num / 10;\n    if (digit > 4) {\n      digit = digit - 9;\n    }\n    result = result + (digit < 10? digit.toString() : digit.toString() + 'M');\n    i++;\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === a || b === c && a === b;\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nexport default isRightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax2 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax3 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax4 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax5 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax6 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax7 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax8 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i];\n      maxIndex = i;\n      maxCount = count;\n    }\n  }\n  return max;\n};\n\nconst findMax9 = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  for (let i = 1; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j]!== words[i - 1][j]) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      max = words[i"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || number < 0 || need > 1000 || need < 0 || remaining > 1000 || remaining < 0) {\n    return 0;\n  }\n  let result = 0;\n  while (need > 0) {\n    let newNeed = need;\n    if (newNeed > remaining) {\n      newNeed = remaining;\n    }\n    let newRemaining = remaining - newNeed;\n    result += newRemaining;\n    need -= newNeed;\n  }\n  return result;\n};\n\nmodule.exports = eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length) {\n    let op = operator[i];\n    let op1 = operand[i];\n    let op2 = operand[i + 1];\n    if (op === '+') {\n      result += op1 * op2;\n    } else if (op === '-') {\n      result -= op1 * op2;\n    } else if (op === '*') {\n      result *= op1 * op2;\n    } else if (op === '/') {\n      result /= op1 * op2;\n    } else if (op === '//') {\n      result = Math.floor(result / op1 * op2);\n    } else if (op === '**') {\n      result = Math.pow(op1, op2);\n    }\n    i += 2;\n  }\n  return result;\n};\n\nconst test = () => {\n  let result = doAlgebra(['+', '*', '-'], [2, 3, 4, 5]);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let res = \"\";\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] >= 65 && str[i] <= 90) {\n      res += str[i].toUpperCase();\n    } else {\n      res += str[i];\n    }\n    i++;\n  }\n  return res;\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a < b) {\n    return [];\n  }\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
