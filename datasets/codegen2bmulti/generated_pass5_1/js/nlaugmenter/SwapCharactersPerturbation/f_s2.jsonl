{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const thresholdSquared = threshold * threshold;\n  for (let i = 0; i < sortedNumbers.length - 1; i++) {\n    if (sortedNumbers[i] + thresholdSquared >= sortedNumbers[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let current_group = [];\n  let open_paren = 0;\n  let close_paren = 0;\n  let current_group_length = 0;\n  let current_group_open = 0;\n  let current_group_close = 0;\n  let current_group_open_count = 0;\n  let current_group_close_count = 0;\n  let current_group_open_count_max = 0;\n  let current_group_close_count_max = 0;\n  let current_group_open_count_min = 0;\n  let current_group_close_count_min = 0;\n  let current_group_open_count_max_min = 0;\n  let current_group_close_count_max_min = 0;\n  let current_group_open_count_max_min_max = 0;\n  let current_group_close_count_max_min_max = 0;\n  let current_group_open_count_max_min_max_min = 0;\n  let current_group_close_count_max_min_max_min = 0;\n  let current_group_open_count_max_min_max_min_max = 0;\n  let current_group_close_count_max_min_max_min_max = 0;\n  let current_group_open_count_max_min_max_min_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_open_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  let current_group_close_count_max_min_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n  "}
{"task_id": "JavaScript/2", "prompt": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return integerPart + decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return integerPart;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimals of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimals = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToInteger = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return integerPart;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimals of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimalsToInteger = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimals = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimals of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimalsToDecimals = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalsToDecimals = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalsToInteger = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return integerPart;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimals of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimalsToDecimals = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalsToDecimals = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return decimals;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberToDecimalsToIntegerToInteger = (number) => {\n  const [integerPart, decimals] = number.toFixed(0).split('.');\n  return integerPart;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomposed"}
{"task_id": "JavaScript/3", "prompt": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance2 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance3 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance4 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance5 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance6 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn falls above zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance7 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  You're given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edt"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const mean = mean(numbers);\n  const dev = mean(abs(numbers - mean));\n  return dev;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let max_level = 0;\n  let current_level = 0;\n  let current_paren_level = 0;\n  let current_paren_index = 0;\n  let current_paren_end_index = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index = 0;\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_end_index ="}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": false, "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and are not in a given list\n  *\n  * @param {Array} strings\n  * @param {Array} exclude\n  * @returns {Array}\n  */\nconst filterBySubstringExclude = (strings, exclude) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(exclude) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(exclude) === -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and are not in a given list\n  *\n  * @param {Array} strings\n  * @param {Array} exclude\n  * @returns {Array}\n  */\nconst filterBySubstringExcludeExclude = (strings, exclude, exclude2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(exclude) === -1 && strings.indexOf(exclude2) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(exclude) === -1 && s.indexOf(exclude2) === -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and are not in a given list\n  *\n  * @param {Array} strings\n  * @param {Array} exclude\n  * @returns {Array}\n  */\nconst filterBySubstringExcludeExcludeExclude = (strings, exclude, exclude2, exclude3) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(exclude) === -1 && strings.indexOf(exclude2) === -1 && strings.indexOf(exclude3) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(exclude) === -1 && s.indexOf(exclude2) === -1 && s.indexOf(exclude3) === -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and are not in a given list\n  *\n  * @param {Array} strings\n  * @param {Array} exclude\n  * @returns {Array}\n  */\nconst filterBySubstringExcludeExcludeExcludeExclude = (strings, exclude, exclude2, exclude3, exclude4) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(exclude) === -1 && strings.indexOf(exclude2) === -1 && strings.indexOf(exclude3) === -1 && strings.indexOf(exclude4) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(exclude) === -1 && s.indexOf(exclude2) === -1 && s.indexOf(exclude3) === -1 && s.indexOf(exclude4) === -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and are not in a given list\n  *\n  * @param {Array} strings\n  * @param {Array} exclude\n  * @returns {Array}\n  */\nconst filterBySubstringExcludeExcludeExcludeExcludeExclude = (strings, exclude, exclude2, exclude3, exclude4, exclude5) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(exclude) === -1 && strings.indexOf(exclude2) === -1 && strings.indexOf(exclude3) === -1 && strings.indexOf(exclude4) === -1 && strings.indexOf(exclude5) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(exclude) === -1 && s.indexOf(exclude2) === -1 && s.indexOf(exclude3) === -1 && s.indexOf(exclude4) === -1 && s.indexOf(exclude5) === -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * and are not in a given list\n  *\n  * @param {Array} strings\n  * @param {Array} exclude\n  * @returns {Array}\n  */\nconst filterBySubstringExcludeExcludeExcludeExcludeExcludeExclude = (strings, exclude, exclude2, exclude3, exclude4, exclude5, exclude6) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(exclude) === -1 && strings.indexOf(exclude2) === -1 && strings.indexOf(exclude3) === -1 && strings.indexOf(exclude4) === -1 && strings.indexOf(exclude5) === -1 && strings.indexOf(exclude6) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(exclude) === -1 && s.indexOf(exclude2) === -1 && s.indexOf(exclude3) === -1 && s.indexOf(exclude4)"}
{"task_id": "JavaScript/8", "prompt": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  oFn a given list of"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = maxIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling minimum element found until given moment.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rollingMin = (numbers) => {\n  let min = numbers[0];\n  let minIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      minIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = minIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling sum element found until given moment.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 5, 7, 9, 11, 13]\n  */\nconst rollingSum = (numbers) => {\n  let sum = numbers[0];\n  let sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > sumIndex) {\n      sumIndex = sum;\n    }\n  }\n  let result = [];\n  for (let i = sumIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling average element found until given moment.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 2.5, 3.5, 3.5, 3.5, 3.5, 3.5]\n  */\nconst rollingAverage = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > sumIndex) {\n      sumIndex = sum;\n    }\n  }\n  let result = [];\n  for (let i = sumIndex; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling median element found until given moment.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [2, 2, 3, 3, 3, 3, 3]\n  */\nconst rollingMedian = (numbers) => {\n  let median = numbers[0];\n  let medianIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < median) {\n      median = numbers[i];\n      medianIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = medianIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling mode element found until given moment.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [2, 2, 3, 3, 3, 3, 3]\n  */\nconst rollingMode = (numbers) => {\n  let mode = numbers[0];\n  let modeIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === mode) {\n      modeIndex = i;\n    } else {\n      mode = numbers[i];\n    }\n  }\n  let result = [];\n  for (let i = modeIndex; i < numbers.length; i++) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling variance element found until given moment.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rollingVariance = (numbers) => {\n  let variance = 0;\n  let varianceIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    variance += Math.pow(numbers[i] - numbers[i - 1], 2);\n    if (variance > varianceIndex) {\n      varianceIndex = variance;\n    }\n  }\n  let result = [];\n  for (let i = varianceIndex; i < numbers.length; i++) {\n    result.push(variance / numbers.length);\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, generaet a list of rolling standard deviation element found until given moment.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst rollingStandardDeviation = (numbers) => {\n  let standardDeviation = 0;\n  let standardDeviationIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    standardDeviation += Math.p"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.split('').reverse().join('');\n  return postfix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalind"}
{"task_id": "JavaScript/11", "prompt": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0';\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0';\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0';\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0';\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0';\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === '1' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '1' && b[j] === '0') {\n        result += '0';\n      } else if (a[i] === '0' && b[j] === '1') {\n        result += '1';\n      } else if (a[i] === '0' && b[j] === '0') {\n        result += '0';\n      }\n    }\n  }\n  return result"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n\n  if (a === 0) {\n    return a;\n  }\n\n  if (b === 0) {\n    return b;\n  }\n\n  if (a === 1) {\n    return b;\n  }\n\n  if (b === 1) {\n    return a;\n  }\n\n  if (a === b) {\n    return a;\n  }\n\n  if (a % b === 0) {\n    return b;\n  }\n\n  if (b % a === 0) {\n    return a;\n  }\n\n  if (a % b === 0) {\n    return b;\n  }\n\n  return greatestCommonDivisor(a % b, b % a);\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString2 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString3 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString4 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString5 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString6 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString7 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString8 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString9 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString10 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString11 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current.length > 0) {\n    prefixes.push(current);\n    current = current.substr(0, current.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n  * Return list of lal prefixes frmo shortest to longest of the inupt string\n  * @param {string} string\n  * @returns {string[]}\n  */\nconst allPrefixesFromString12 = (string) => {\n  let prefixes = [];\n  let current = string;\n  while (current"}
{"task_id": "JavaScript/15", "prompt": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++)"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount++;\n    if (charCount > 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let music_string_array = music_string.split(\" \");\n  let music_string_array_length = music_string_array.length;\n  let music_string_array_index = 0;\n  let music_string_array_last_index = 0;\n  let music_string_array_last_char = \"\";\n  let music_string_array_last_char_index = 0;\n  let music_string_array_last_char_last_index = 0;\n  let music_string_array_last_char_last_char = \"\";\n  let music_string_array_last_char_last_char_index = 0;\n  let music_string_array_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char = \"\";\n  let music_string_array_last_char_last_char_last_char_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char = \"\";\n  let music_string_array_last_char_last_char_last_char_last_char_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char = \"\";\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char = \"\";\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char = \"\";\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_index = 0;\n  let music_string_array_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count += 1\n      i += substring.length\n    } else {\n      i += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/*\n  From a supplied list of numbers (of lentgh at least wto) elsetc and return the number that is the closest to aech\n  other and return it in order (smaller number, larger number).\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  2.2\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  2.0\n  */\nconst findClosestNumber = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return min;\n};\n\n/*\n  From a supplied list of numbers (of lentgh at least wto) elsetc and return the number that is the closest to aech\n  other and return it in order (smaller number, larger number).\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  2.2\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  2.0\n  */\nconst findClosestNumber2 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a supplied list of numbers (of lentgh at least wto) elsetc and return the number that is the closest to aech\n  other and return it in order (smaller number, larger number).\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  2.2\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  2.0\n  */\nconst findClosestNumber3 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return min;\n};\n\n/*\n  From a supplied list of numbers (of lentgh at least wto) elsetc and return the number that is the closest to aech\n  other and return it in order (smaller number, larger number).\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  2.2\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  2.0\n  */\nconst findClosestNumber4 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a supplied list of numbers (of lentgh at least wto) elsetc and return the number that is the closest to aech\n  other and return it in order (smaller number, larger number).\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  2.2\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  2.0\n  */\nconst findClosestNumber5 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return min;\n};\n\n/*\n  From a supplied list of numbers (of lentgh at least wto) elsetc and return the number that is the closest to aech\n  other and return it in order (smaller number, larger number).\n  >>> findClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  2.2\n  >>> findClosestNumber(["}
{"task_id": "JavaScript/21", "prompt": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit3 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit4 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit5 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit6 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit7 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit8 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit9 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit10 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit11 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit12 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit13 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit + min)\n  }\n  return result\n}\n\nconst rescaleToUnit14 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/*\n  Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/*\n  Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/*\n  Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/*\n  Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => typeof value === 'object' && value.constructor === Array);\n};\n\n/*\n  Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => typeof value === 'object' && value.constructor === Array);\n};\n\n/*\n  Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/*\n  Filter given list of any python values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/*\n  Filter given list of any python values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/*\n  Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1,"}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  eRturn the index of the first character of given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  */\nconst strpos = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.indexOf(substr);\n};\n\n/*\n  eRturn the index of the last character of given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  */\nconst strrpos = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr);\n};\n\n/*\n  eRturn the index of the first character of given string\n  >>> strripos('abc', 'a')\n  0\n  >>> strripos('abc', 'b')\n  1\n  >>> strripos('abc', 'c')\n  2\n  */\nconst strripos = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr, string.length);\n};\n\n/*\n  eRturn the index of the last character of given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  */\nconst strrripos = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr, 0, string.length);\n};\n\n/*\n  eRturn the index of the first character of given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  */\nconst strpos_r = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr, 0, string.length);\n};\n\n/*\n  eRturn the index of the last character of given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  */\nconst strrpos_r = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr, 0, string.length);\n};\n\n/*\n  eRturn the index of the first character of given string\n  >>> strpos('abc', 'a')\n  0\n  >>> strpos('abc', 'b')\n  1\n  >>> strpos('abc', 'c')\n  2\n  */\nconst strripos_r = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr, 0, string.length);\n};\n\n/*\n  eRturn the index of the last character of given string\n  >>> strrpos('abc', 'a')\n  0\n  >>> strrpos('abc', 'b')\n  1\n  >>> strrpos('abc', 'c')\n  2\n  */\nconst strrripos_r = (string, substr) => {\n  if (string === null || string === undefined) {\n    return -1;\n  }\n  return string.lastIndexOf(substr, 0, string.length);\n};\n\nmodule.exports = {\n  strlen,\n  strpos,\n  strrpos,\n  strripos,\n  strrpos_r,\n  strrpos_r,\n  strripos_r,\n  strrripos_r\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  Fro a given number n, find the smallest number that divides n evenly, bigger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) =>"}
{"task_id": "JavaScript/25", "prompt": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (!isPrime(factors[i])) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors2 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors3 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors4 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors5 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors6 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors7 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors8 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors9 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors10 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors11 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors12 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors13 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors14 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors15 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors16 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeFactors17 = (n) => {\n  let factors = factorize(n);\n  let i = 0;\n  while (i < factors.length) {\n    if (factors[i] > 1) {"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = numbers.length;\n  let result = [];\n  while (i < n) {\n    if (j < n) {\n      if (numbers[i] === numbers[j]) {\n        j++;\n      } else {\n        result[k++] = numbers[i];\n        i++;\n      }\n    } else {\n      result[k++] = numbers[i];\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toUpperCase());\n};\n\n/**\n  Returns a string with all the characters in the string in lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/**\n  Returns a string with all the characters in the string in uppercase and lowercase.\n  >>> upperAndLowerCase('Hello')\n  'HELLO"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('abc')\n  ['a', 'b', 'c']\n  */\nconst list = (str) => {\n  return str.split('');\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a', 'b', 'c'])\n  'abc'\n  */\nconst join = (strings) => {\n  return strings.join('');\n};\n\n/*\n  Convert a string to a list of integers\n  >>> list('123')\n  [123]\n  */\nconst listInt = (str) => {\n  return str.split('').map(Number);\n};\n\n/*\n  Convert a list of integers to a string\n  >>> join(['123'])\n  '123'\n  */\nconst joinInt = (ints) => {\n  return ints.join('');\n};\n\n/*\n  Convert a string to a list of floats\n  >>> list('123.456')\n  [123.456]\n  */\nconst listFloat = (str) => {\n  return str.split('').map(Number);\n};\n\n/*\n  Convert a list of floats to a string\n  >>> join(['123.456'])\n  '123.456'\n  */\nconst joinFloat = (floats) => {\n  return floats.join('');\n};\n\n/*\n  Convert a string to a list of booleans\n  >>> list('true')\n  [true]\n  */\nconst listBool = (str) => {\n  return str.split('').map(Boolean);\n};\n\n/*\n  Convert a list of booleans to a string\n  >>> join(['true'])\n  'true'\n  */\nconst joinBool = (bools) => {\n  return bools.join('');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst listStr = (str) => {\n  return str.split(',').map(String);\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a,b,c'])\n  'a,b,c'\n  */\nconst joinStr = (strs) => {\n  return strs.join(',');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst listInt = (str) => {\n  return str.split(',').map(Number);\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a,b,c'])\n  'a,b,c'\n  */\nconst joinInt = (ints) => {\n  return ints.join(',');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst listFloat = (str) => {\n  return str.split(',').map(Number);\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a,b,c'])\n  'a,b,c'\n  */\nconst joinFloat = (floats) => {\n  return floats.join(',');\n};\n\n/*\n  Convert a string to a list of booleans\n  >>> list('true')\n  [true]\n  */\nconst listBool = (str) => {\n  return str.split('').map(Boolean);\n};\n\n/*\n  Convert a list of booleans to a string\n  >>> join(['true'])\n  'true'\n  */\nconst joinBool = (bools) => {\n  return bools.join('');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst listStr = (str) => {\n  return str.split(',').map(String);\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a,b,c'])\n  'a,b,c'\n  */\nconst joinStr = (strs) => {\n  return strs.join(',');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst listInt = (str) => {\n  return str.split(',').map(Number);\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a,b,c'])\n  'a,b,c'\n  */\nconst joinInt = (ints) => {\n  return ints.join(',');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> list('a,b,c')\n  ['a', 'b', 'c']\n  */\nconst listFloat = (str) => {\n  return str.split(',').map(Number);\n};\n\n/*\n  Convert a list of strings to a string\n  >>> join(['a,b,c'])\n  'a,b,c'\n  */\nconst joinFloat = (floats) => {\n  return floats.join(',');\n};\n\n/*\n  Convert a string to a list of booleans\n  >>> list('true')\n  [true]\n  */\nconst listBool = (str) => {\n  return str.split('').map(Boolean);\n};\n\n/*\n  Convert a list of booleans to a string\n  >>> join(['true'])\n  'true'\n  */\nconst joinBool = (bools) => {\n  return bools.join('');\n};\n\n/*\n  Convert a string to a list of strings\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByContains = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByNotContains = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByStartsWith = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByNotStartsWith = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.startsWith(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByEndsWith = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.endsWith(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByNotEndsWith = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.endsWith(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByContainsAny = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByNotContainsAny = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.includes(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByStartsWithAny = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.startsWith(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that do not contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByNotStartsWithAny = (string, strings) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s =>!s.startsWith(string));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  *\n  * @param {string} string - The string to search for.\n  * @param {string[]} strings - The list of strings to filter.\n  * @returns {string[]} - The filtered list of strings.\n  */\nconst filterByEndsWithAny = (string, strings) => {\n  if (strings.length === 0) {"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] < 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return only negative numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegative = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] > 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return only negative and positive numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getPosNeg = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] < 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNumbers = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] > 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegPosNumbers = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] < 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegNegNumbers = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] > 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst getNegPosNegNumbers = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else if (l[j] < 0) {\n      result.push(l[j]);\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getPosNeg,\n  getNumbers,\n  getNegPosNumbers,\n  getNegNegNumbers,\n  getNegPosNegNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const nmuber = xs.length % 2 === 0? xs.length / 2 : xs.length / 2 + 1;\n  const max = xs.reduce((prev, item, index) => {\n    return Math.max(prev, item);\n  }, 0);\n  const min = xs.reduce((prev, item, index) => {\n    return Math.min(prev, item);\n  }, 0);\n  const x = (max + min) / 2;\n  const xs2 = xs.map((item, index) => {\n    return item * x;\n  });\n  const poly2 = (xs2, x) => {\n    return poly(xs2, x);\n  };\n  const result = poly2(xs2, x);\n  if (result === 0) {\n    return x;\n  }\n  const xs3 = xs2.map((item, index) => {\n    return item * x;\n  });\n  const poly3 = (xs3, x) => {\n    return poly(xs3, x);\n  };\n  const result2 = poly3(xs3, x);\n  if (result2 === 0) {\n    return x;\n  }\n  const xs4 = xs3.map((item, index) => {\n    return item * x;\n  });\n  const poly4 = (xs4, x) => {\n    return poly(xs4, x);\n  };\n  const result3 = poly4(xs4, x);\n  if (result3 === 0) {\n    return x;\n  }\n  const xs5 = xs4.map((item, index) => {\n    return item * x;\n  });\n  const poly5 = (xs5, x) => {\n    return poly(xs5, x);\n  };\n  const result4 = poly5(xs5, x);\n  if (result4 === 0) {\n    return x;\n  }\n  const xs6 = xs5.map((item, index) => {\n    return item * x;\n  });\n  const poly6 = (xs6, x) => {\n    return poly(xs6, x);\n  };\n  const result5 = poly6(xs6, x);\n  if (result5 === 0) {\n    return x;\n  }\n  const xs7 = xs6.map((item, index) => {\n    return item * x;\n  });\n  const poly7 = (xs7, x) => {\n    return poly(xs7, x);\n  };\n  const result6 = poly7(xs7, x);\n  if (result6 === 0) {\n    return x;\n  }\n  const xs8 = xs7.map((item, index) => {\n    return item * x;\n  });\n  const poly8 = (xs8, x) => {\n    return poly(xs8, x);\n  };\n  const result7 = poly8(xs8, x);\n  if (result7 === 0) {\n    return x;\n  }\n  const xs9 = xs8.map((item, index) => {\n    return item * x;\n  });\n  const poly9 = (xs9, x) => {\n    return poly(xs9, x);\n  };\n  const result8 = poly9(xs9, x);\n  if (result8 === 0) {\n    return x;\n  }\n  const xs10 = xs9.map((item, index) => {\n    return item * x;\n  });\n  const poly10 = (xs10, x) => {\n    return poly(xs10, x);\n  };\n  const result9 = poly10(xs10, x);\n  if (result9 === 0) {\n    return x;\n  }\n  const xs11 = xs10.map((item, index) => {\n    return item * x;\n  });\n  const poly11 = (xs11, x) => {\n    return poly(xs11, x);\n  };\n  const result10 = poly11(xs11, x);\n  if (result10 === 0) {\n    return x;\n  }\n  const xs12 = xs11.map((item, index) => {\n    return item * x;\n  });\n  const poly12 = (xs12, x) => {\n    return poly(xs12, x);\n  };\n  const result11 = poly12(xs12, x);\n  if (result11 === 0) {\n    return x;\n  }\n  const xs13 = xs12.map((item, index) => {\n    return item * x;\n  });\n  const poly13 = (xs13, x) => {\n    return poly(xs13, x);\n  };\n  const result12 = poly13(xs13, x);\n  if (result12 === 0) {\n    return x;\n  }\n  const xs14 = xs13.map((item, index) => {\n    return item * x;\n  });\n  const poly14 = (xs14, x) => {\n    return poly(xs14, x);\n  };\n  const result13 = poly14(xs14, x);\n  if (result13 === 0) {\n"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n"}
{"task_id": "JavaScript/34", "prompt": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (j === k) {\n      result.push(l[i]);\n      i++;\n    } else if (l[i] === l[j]) {\n      j++;\n    } else {\n      k++;\n      j = k;\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n\n  return l.reduce((max, val) => {\n    if (val > max) {\n      return val;\n    }\n    return max;\n  }, l[0]);\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 13 === 0) {\n      buzz++;\n    }\n    if (i % 11 === 0) {\n      fizz++;\n    }\n    i++;\n  }\n  return buzz + fizz;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l_even = [];\n  let l_odd = [];\n  let i = 0;\n  while (i < l.length) {\n    if (i % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_odd.push(l[i]);\n    }\n    i++;\n  }\n  return [...l_even,...l_odd];\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ndecodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": false, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1)\n  const prime = fib % 2 == 0\n  return prime? fib : fib + 1\n}\n\nmodule.exports = primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] === 0) {\n      sum = 0;\n      count = 0;\n      i++;\n    } else {\n      sum += l[i];\n      count++;\n    }\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collision = 0;\n  let cars = [];\n  let carsLeft = n;\n  let carsRight = n;\n  let carsSpeed = 1;\n  let carsSpeedLeft = 1;\n  let carsSpeedRight = 1;\n  let carsSpeedLeftPrev = 1;\n  let carsSpeedRightPrev = 1;\n  let carsSpeedLeftNext = 1;\n  let carsSpeedRightNext = 1;\n  let carsSpeedLeftPrevNext = 1;\n  let carsSpeedRightPrevNext = 1;\n  let carsSpeedLeftPrevNextNext = 1;\n  let carsSpeedRightPrevNextNext = 1;\n  let carsSpeedLeftPrevNextPrev = 1;\n  let carsSpeedRightPrevNextPrev = 1;\n  let carsSpeedLeftPrevPrevPrev = 1;\n  let carsSpeedRightPrevPrevPrev = 1;\n  let carsSpeedLeftPrevPrevNext = 1;\n  let carsSpeedRightPrevPrevNext = 1;\n  let carsSpeedLeftPrevPrevNextNext = 1;\n  let carsSpeedRightPrevPrevNextNext = 1;\n  let carsSpeedLeftPrevPrevNextPrev = 1;\n  let carsSpeedRightPrevPrevNextPrev = 1;\n  let carsSpeedLeftPrevPrevNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextPrev = 1;\n  let carsSpeedRightPrevPrevNextNextPrev = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedRightPrevPrevNextNextNextNextNextNextNext = 1;\n  let carsSpeedLeftPrevPrevNextNextNextNextNextNext"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[j] = res[j] + 1;\n    j++;\n  }\n  return res;\n};\n\nconst printList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    console.log(l[i]);\n    i++;\n  }\n};\n\nconst main = () => {\n  let l = [1, 2, 3];\n  printList(incrList(l));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let isPair = false;\n  while (i < l.length) {\n    if (l[i] === l[j]) {\n      sum += l[i];\n      isPair = true;\n    } else {\n      if (isPair) {\n        sum -= l[j];\n        isPair = false;\n      }\n    }\n    i++;\n    j++;\n  }\n  return sum === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 10) {\n    throw new Error('Base must be greater than 10');\n  }\n  return String(x).split('').map(char => {\n    let num = char.charCodeAt(0);\n    if (num >= 48 && num <= 57) {\n      return num - 48;\n    }\n    return char;\n  }).map(num => {\n    let res = num;\n    while (res > base) {\n      res = Math.floor(res / base);\n    }\n    return res;\n  }).join('');\n};\n\nmodule.exports = changeBase;\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given a side and high return area of a triangle,\n  return the area of the triangle.\n  >>>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n\n  let m = l.length / 2;\n  let i = 0;\n  let j = l.length - 1;\n\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n\n  return l[i + m];\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let str = text.split('');\n  let len = str.length;\n  for (let i = 0; i < len / 2; i++) {\n    if (str[i]!== str[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) {\n    throw new Error('n must be a positive integer');\n  }\n  if (p < 0) {\n    throw new Error('p must be a positive integer');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (n === p) {\n    return 1;\n  }\n  if (n % p === 0) {\n    return 1;\n  }\n  let r = 1;\n  while (n > 0) {\n    r = r * p % n;\n    n = n / p;\n  }\n  return r;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncoded = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is decoded with decodeShift function.\n  */\nconst isDecoded = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncodedShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is decoded with decodeShift function.\n  */\nconst isDecodedShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncodedShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is decoded with decodeShift function.\n  */\nconst isDecodedShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncodedShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is decoded with decodeShift function.\n  */\nconst isDecodedShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncodedShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is decoded with decodeShift function.\n  */\nconst isDecodedShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncodedShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is decoded with decodeShift function.\n  */\nconst isDecodedShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\").length === s.length;\n}\n\n/*\n  returns true if the string is encoded with encodeShift function.\n  */\nconst isEncodedShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt("}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = text.toLowerCase();\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": false, "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold2 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold3 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold4 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold5 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold6 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold7 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> withinThreshold([1, 2, 4, 10], 5, 15)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 15)\n  true\n  */\nconst withinThreshold8 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return d;\n};\n\n/*\n  Return n-th iFibonacci number.\n  >>> fib("}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length === 0) {\n    return false;\n  }\n\n  let bracketCount = 0;\n  let i = 0;\n  let j = brackets.length - 1;\n  let bracket = brackets[i];\n  let nextBracket = brackets[j];\n\n  while (i < j) {\n    if (bracket === nextBracket) {\n      bracketCount++;\n      i++;\n      nextBracket = brackets[i];\n    } else {\n      j--;\n      nextBracket = brackets[j];\n    }\n  }\n\n  return bracketCount === brackets.length;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    if (l[i] > last) {\n      last = l[i];\n    }\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      k++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return l1.slice(i, l1.length);\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": false, "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketPairs = brackets.split(/[()]/).filter(Boolean);\n  return bracketPairs.every(pair => {\n    const opening = pair.split(/[()]/).filter(Boolean).length;\n    const closing = pair.split(/[()]/).length - opening;\n    return opening === closing;\n  });\n};\n\nmodule.exports = {\n  correctBracketing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let d = [];\n  let d2 = [];\n  let d3 = [];\n  let d4 = [];\n  let d5 = [];\n  let d6 = [];\n  let d7 = [];\n  let d8 = [];\n  let d9 = [];\n  let d10 = [];\n  let d11 = [];\n  let d12 = [];\n  let d13 = [];\n  let d14 = [];\n  let d15 = [];\n  let d16 = [];\n  let d17 = [];\n  let d18 = [];\n  let d19 = [];\n  let d20 = [];\n  let d21 = [];\n  let d22 = [];\n  let d23 = [];\n  let d24 = [];\n  let d25 = [];\n  let d26 = [];\n  let d27 = [];\n  let d28 = [];\n  let d29 = [];\n  let d30 = [];\n  let d31 = [];\n  let d32 = [];\n  let d33 = [];\n  let d34 = [];\n  let d35 = [];\n  let d36 = [];\n  let d37 = [];\n  let d38 = [];\n  let d39 = [];\n  let d40 = [];\n  let d41 = [];\n  let d42 = [];\n  let d43 = [];\n  let d44 = [];\n  let d45 = [];\n  let d46 = [];\n  let d47 = [];\n  let d48 = [];\n  let d49 = [];\n  let d50 = [];\n  let d51 = [];\n  let d52 = [];\n  let d53 = [];\n  let d54 = [];\n  let d55 = [];\n  let d56 = [];\n  let d57 = [];\n  let d58 = [];\n  let d59 = [];\n  let d60 = [];\n  let d61 = [];\n  let d62 = [];\n  let d63 = [];\n  let d64 = [];\n  let d65 = [];\n  let d66 = [];\n  let d67 = [];\n  let d68 = [];\n  let d69 = [];\n  let d70 = [];\n  let d71 = [];\n  let d72 = [];\n  let d73 = [];\n  let d74 = [];\n  let d75 = [];\n  let d76 = [];\n  let d77 = [];\n  let d78 = [];\n  let d79 = [];\n  let d80 = [];\n  let d81 = [];\n  let d82 = [];\n  let d83 = [];\n  let d84 = [];\n  let d85 = [];\n  let d86 = [];\n  let d87 = [];\n  let d88 = [];\n  let d89 = [];\n  let d90 = [];\n  let d91 = [];\n  let d92 = [];\n  let d93 = [];\n  let d94 = [];\n  let d95 = [];\n  let d96 = [];\n  let d97 = [];\n  let d98 = [];\n  let d99 = [];\n  let d100 = [];\n  let d101 = [];\n  let d102 = [];\n  let d103 = [];\n  let d104 = [];\n  let d105 = [];\n  let d106 = [];\n  let d107 = [];\n  let d108 = [];\n  let d109 = [];\n  let d110 = [];\n  let d111 = [];\n  let d112 = [];\n  let d113 = [];\n  let d114 = [];\n  let d115 = [];\n  let d116 = [];\n  let d117 = [];\n  let d118 = [];\n  let d119 = [];\n  let d120 = [];\n  let d121 = [];\n  let d122 = [];\n  let d123 = [];\n  let d124 = [];\n  let d125 = [];\n  let d126 = [];\n  let d127 = [];\n  let d128 = [];\n  let d129 = [];\n  let d130 = [];\n  let d131 = [];\n  let d132 = [];\n  let d133 = [];\n  let d134 = [];\n  let d135 = [];\n  let d136 = [];\n  let d137 = [];\n  let d138 = [];\n  let d139 = [];\n  let d140 = [];\n  let d141 = [];\n  let d142 = [];\n  let d143 = [];\n  let d144 = [];\n  let d145 = [];\n  let d146 = [];\n  let d147 = [];\n  let d148 = [];\n  let d149 = [];\n  let d150 = [];\n  let d151 = [];\n  let d152 = [];\n  let d153 = [];\n  let d154 = [];\n  let d155 = [];\n  let d156 = [];\n  let d157 = [];\n  let d158 = [];\n  let d159 = [];\n  let d160 = [];\n  let d161 = [];\n  let d162 = [];\n  let d163 = [];\n  let d164 = [];\n  let d165 = [];\n  let d166 = [];\n  let d167 = [];\n  let d168 = [];\n  let d169 = [];\n  let d170 = [];\n  let d171 = [];\n  let d172 = [];\n  let d173 = [];\n  let d174 = [];\n  let d175 = [];\n  let d176 = [];\n  let d177 = [];\n  let d178 = [];\n  let d179 = [];\n  let d180 = [];\n  let d181 = [];\n  let d182 = [];\n  let d183 = [];\n  let d184 = [];\n  let d185 = [];\n  let d186 = [];\n  let d187 = [];\n  let d188 = [];\n  let d189 = [];\n  let d190 = [];\n  let d191 = [];\n  let d192 = [];\n  let d193 = [];\n  let d194 = [];\n  let d195 = [];\n  let d196 = [];\n  let d197 = [];\n  let d198 = [];\n  let d199 = [];\n  let d200 = [];\n  let d201 = [];\n  "}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += x[i]\n    i++\n    if (i % shift === 0) {\n      result += x[i % x.length]\n    }\n  }\n  return result\n}\n\nconst getDigit = (x, i) => {\n  return x[i % x.length]\n}\n\nconst getDigits = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverse = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircular = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift2 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift3 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift4 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift5 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift6 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift7 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift8 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift9 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift10 = (x, shift) => {\n  let result = ''\n  let i = 0\n  while (i < x.length) {\n    result += getDigit(x, i % x.length)\n    i++\n    if (i % shift === 0) {\n      result += getDigit(x, i % x.length)\n    }\n  }\n  return result\n}\n\nconst getDigitsReverseCircularShift11 = (x, shift) => {\n  let result = ''"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let res = 0;\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      res += n;\n      i++;\n    } else if (s[i] == 'o') {\n      res += n;\n      i++;\n      j++;\n    } else if (s[i] =='m') {\n      res += n;\n      i++;\n      j++;\n      res += n;\n    } else {\n      res += n;\n      i++;\n    }\n  }\n  return res;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oragnes\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples nad 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  if (min_index === 0) {\n    res.push(arr[0]);\n  } else {\n    res.push(arr[min_index]);\n  }\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === min) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) {\n    return -1\n  }\n  const freq = (n) => {\n    let i = 0\n    while (i < lst.length) {\n      if (lst[i] === n) {\n        return i\n      }\n      i++\n    }\n    return -1\n  }\n  let i = 0\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return i\n    }\n    i++\n  }\n  return -1\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] == min) {\n      result.unshift(lst[i]);\n    }\n    if (lst[i] == max) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return Math.abs(a + b + c - Math.sqrt(a * b * c));\n}\n\nconst triangleAreaTest = () => {\n  const triangleAreaTest = () => {\n    const triangleAreaTest = () => {\n      const triangleAreaTest = () => {\n        const triangleAreaTest = () => {\n          const triangleAreaTest = () => {\n            const triangleAreaTest = () => {\n              const triangleAreaTest = () => {\n                const triangleAreaTest = () => {\n                  const triangleAreaTest = () => {\n                    const triangleAreaTest = () => {\n                      const triangleAreaTest = () => {\n                        const triangleAreaTest = () => {\n                          const triangleAreaTest = () => {\n                            const triangleAreaTest = () => {\n                              const triangleAreaTest = () => {\n                                const triangleAreaTest = () => {\n                                  const triangleAreaTest = () => {\n                                    const triangleAreaTest = () => {\n                                      const triangleAreaTest = () => {\n                                        const triangleAreaTest = () => {\n                                          const triangleAreaTest = () => {\n                                            const triangleAreaTest = () => {\n                                              const triangleAreaTest = () => {\n                                                const triangleAreaTest = () => {\n                                                  const triangleAreaTest = () => {\n                                                    const triangleAreaTest = () => {\n                                                      const triangleAreaTest = () => {\n                                                        const triangleAreaTest = () => {\n                                                          const triangleAreaTest = () => {\n                                                            const triangleAreaTest = () => {\n                                                              const triangleAreaTest = () => {\n                                                                const triangleAreaTest = () => {\n                                                                  const triangleAreaTest = () => {\n                                                                    const triangleAreaTest = () => {\n                                                                      const triangleAreaTest = () => {\n                                                                        const triangleAreaTest = () => {\n                                                                          const triangleAreaTest = () => {\n                                                                            const triangleAreaTest = () => {\n                                                                              const triangleAreaTest = () => {\n                                                                                const triangleAreaTest = () => {\n                                                                                  const triangleAreaTest = () => {\n                                                                                    const triangleAreaTest = () => {\n                                                                                      const triangleAreaTest = () => {\n                                                                                        const triangleAreaTest = () => {\n                                                                                          const triangleAreaTest = () => {\n                                                                                            const triangleAreaTest = () => {\n                                                                                              const triangleAreaTest = () => {\n                                                                                                const triangleAreaTest = () => {\n                                                                                                  const triangleAreaTest = () => {\n                                                                                                    const triangleAreaTest = () => {\n                                                                                                      const triangleAreaTest = () => {\n                                                                                                         const triangleAreaTest = () => {\n                                                                                                            const triangleAreaTest = () => {\n                                                                                                              const triangleAreaTest = () => {\n                                                                                                                  const triangleAreaTest = () => {\n                                                                                                                    const triangleAreaTest = () => {\n                                                                                                                        const triangleAreaTest = () => {\n                                                                                                                          const triangleAreaTest = () => {\n                                                                                                                             const triangleAreaTest = () => {\n                                                                                                                             const triangleAreaTest = () => {\n                                                                                                                              const triangleAreaTest = () => {\n                                                                                                                                const triangleAreaTest = () => {\n                                                                                                                             \tconst triangleAreaTest = () => {\n                                                                                                                             \t  const triangleAreaTest = () => {\n                                                                                                                             \t    const triangleAreaTest = () => {\n                                                                                                                             \t      const triangleAreaTest = () => {\n                                                                                                                             \t        const triangleAreaTest = () => {\n                                                                                                                             \t          const triangleAreaTest = () => {\n                                                                                                                             \t            const triangleAreaTest = () => {\n                                                                                                                             \t            const triangleAreaTest = () => {\n                                                                                                                             \t              const triangleAreaTest = () => {\n                                                                                                                             \t                const triangleAreaTest = () => {\n                                                                                                                             \t                  const triangleAreaTest = () => {\n                                                                                                                             \t                    const triangleAreaTest = () => {\n                                                                                                                             \t                    const triangleAreaTest = () => {\n                                                                                                                             \t                      const triangleAreaTest = () => {\n                                                                                                                             \t                        const triangleAreaTest = () => {\n                                                                                                                             \t                          const triangleAreaTest = () => {\n                                                                                                                             \t                            const triangleAreaTest = () => {\n                                                                                                                             \t                              const triangleAreaTest = () => {\n                                                                                                                             \t                              const triangleAreaTest = () => {\n                                                                                                                             \t                                const triangleAreaTest = () => {\n                                                                                                                             \t                                const triangleAreaTest = () => {\n                                                                                                                             \t                                \tconst triangleAreaTest = () => {\n                                                                                                                             \t                                \t  const triangleAreaTest = () => {\n                                                                                                                             \t                                \t    const triangleAreaTest = () => {\n                                                                                                                             \t                                \t      const triangleAreaTest = () => {\n                                                                                                                             \t                                \t        const triangleAreaTest = () => {\n                                                                                              "}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n\n  const max = q.reduce((a, b) => a + b, 0);\n  const sum = q.reduce((a, b) => a + b, 0);\n\n  return sum <= w && q.reduce((a, b) => a + b, 0) === max;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      total += 1;\n    }\n    i += 1;\n  }\n  return total === lst1.length? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 === 0 && a % 5 === 0 && a % 7 === 0 && a % 11 === 0 && a % 13 === 0 && a % 17 === 0 && a % 19 === 0 && a % 23 === 0 && a % 29 === 0 && a % 31 === 0 && a % 37 === 0 && a % 41 === 0 && a % 43 === 0 && a % 47 === 0 && a % 53 === 0 && a % 59 === 0 && a % 61 === 0 && a % 67 === 0 && a % 71 === 0 && a % 73 === 0 && a % 79 === 0 && a % 83 === 0 && a % 89 === 0 && a % 97 === 0 && a % 101 === 0 && a % 103 === 0 && a % 107 === 0 && a % 109 === 0 && a % 113 === 0 && a % 127 === 0 && a % 131 === 0 && a % 137 === 0 && a % 139 === 0 && a % 149 === 0 && a % 151 === 0 && a % 157 === 0 && a % 163 === 0 && a % 167 === 0 && a % 173 === 0 && a % 179 === 0 && a % 181 === 0 && a % 191 === 0 && a % 193 === 0 && a % 197 === 0 && a % 199 === 0 && a % 211 === 0 && a % 223 === 0 && a % 227 === 0 && a % 229 === 0 && a % 233 === 0 && a % 239 === 0 && a % 241 === 0 && a % 251 === 0 && a % 257 === 0 && a % 263 === 0 && a % 269 === 0 && a % 271 === 0 && a % 277 === 0 && a % 281 === 0 && a % 283 === 0 && a % 293 === 0 && a % 307 === 0 && a % 311 === 0 && a % 313 === 0 && a % 317 === 0 && a % 319 === 0 && a % 331 === 0 && a % 337 === 0 && a % 347 === 0 && a % 349 === 0 && a % 353 === 0 && a % 359 === 0 && a % 367 === 0 && a % 373 === 0 && a % 379 === 0 && a % 383 === 0 && a % 389 === 0 && a % 397 === 0 && a % 401 === 0 && a % 409 === 0 && a % 419 === 0 && a % 421 === 0 && a % 431 === 0 && a % 433 === 0 && a % 439 === 0 && a % 443 === 0 && a % 449 === 0 && a % 457 === 0 && a % 461 === 0 && a % 463 === 0 && a % 467 === 0 && a % 479 === 0 && a % 487 === 0 && a % 491 === 0 && a % 499 === 0 && a % 503 === 0 && a % 509 === 0 && a % 521 === 0 && a % 523 === 0 && a % 541 === 0 && a % 547 === 0 && a % 557 === 0 && a % 563 === 0 && a % 569 === 0 && a % 571 === 0 && a % 577 === 0 && a % 587 === 0 && a % 593 === 0 && a % 599 === 0 && a % 601 === 0 && a % 607 === 0 && a % 613 === 0 && a % 617 === 0 && a % 619 === 0 && a % 631 === 0 && a % 641 === 0 && a % 643 === 0 && a % 647 === 0 && a % 653 === 0 && a % 659 === 0 && a % 661 === 0 && a % 673 === 0 && a % 677 === 0 && a % 683 === 0 && a % 691 === 0 && a % 701 === 0 && a % 709 === 0 && a % 719 === 0 && a % 727 === 0 && a % 733 === 0 && a % 739 === 0 && a % 743 === 0 && a % 751 === 0 && a % 757 === 0 && a % 761 === 0 && a % 769 === 0 && a % 773 === 0 && a % 787 === 0 && a % 797 === 0 && a % 809 === 0 && a % 811 === 0 && a % 821 === 0 && a % 823 === 0 && a % 827 === 0 && a % 829 === 0 && a % 839 === 0 && a % 853 === 0 && a % 857 === 0 && a % 859 === 0 && a % 863 === 0 && a % 867 === 0 && a % 871 === 0 && a % 877 === 0 && a % 881 === 0 && a % 883 === 0 && a % 887 === 0 && a % 907 === 0 && a % 917 === 0 && a % 919 === 0 && a % 929 === 0 && a % 931 === 0 && a % 941 === 0 && a % 947 === 0 && a % 953 === 0 && a % 967 === 0 && a % 971 === 0 && a % 977 === 0 && a % 983 === 0 && a % 991 === 0 && a % 997 === 0 && a % 1009 === 0 && a % 1013 === 0 && a % 1019 === 0 && a % 1021 === 0 && a % 1031 === 0 && a % 1033 === 0 && a % 1039 === 0 && a % 1049 === 0 && a % 1051 === 0 && a % 1061 === 0 && a % 1063 === 0 && a % 1069 === 0 && a % 1087 === 0 && a % 1091 === 0 && a % 1093 === 0 && a % 1097 === 0 && a % 1103 === 0 && a % 1109 === 0 && a % 1117 === 0 && a % 1123 === 0 && a % 1129 === 0 && a % 1153 === 0 && a % 1163 === 0 && a % 1171 === 0 && a % 1181 === 0 && a % 1187 === 0 && a % 1193 === 0 && a % 1201 === 0 && a % 1213 === 0 && a % 1217 === 0 && a % 1231 === 0 && a % 1237 === 0 && a % 1249 === 0 && a % 1259 === 0 && a % 1277 === 0 && a % 1279 === 0 && a % 1283 === 0 && a % 1289 === 0 && a % 1291 === 0 && a % 1297 === 0 && a % 1301 === 0 && a % 1303 === 0 && a % 1307 === 0 && a %"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0\n  let n = num.length\n  for (let i = 0; i < n; i++) {\n    let c = num[i]\n    if (c >= 'A' && c <= 'F') {\n      c = c.toUpperCase()\n    }\n    if (c >= '0' && c <= '9') {\n      res += parseInt(c, 10)\n    }\n  }\n  return res\n}\n\nconst isPrime = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime2 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime3 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime4 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime5 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime6 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime7 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime8 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime9 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime10 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime11 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime12 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime13 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime14 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime15 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime16 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime17 = (num) => {\n  let n = num\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime18 = (num) => {\n  let n = num\n  let i = 2\n  while ("}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary_length = 0;\n  let binary_length_increment = 1;\n  let binary_length_decrement = 1;\n  let binary_length_increment_decrement = 1;\n  let binary_length_increment_decrement = 1;\n  let binary_length_increment_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_increment = 1;\n  let binary_length_increment_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_decrement_"}
{"task_id": "JavaScript/80", "prompt": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n\nconst isHappy = (s) => {\n  let len = s.length;\n  let isHappy = true;\n  let i = 0;\n  while (i < len) {\n    let j = i + 1;\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j < len) {\n      isHappy = false;\n      break;\n    }\n    i++;\n  }\n  return isHappy;\n};\n"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => {\n    return grade.toFixed(2);\n  });\n  const gradesArrayLength = gradesArray.length;\n  const letterGrade = [];\n  for (let i = 0; i < gradesArrayLength; i++) {\n    if (gradesArray[i] >= 3.7) {\n      letterGrade.push('A+');\n    } else if (gradesArray[i] >= 3.3) {\n      letterGrade.push('A');\n    } else if (gradesArray[i] >= 3.0) {\n      letterGrade.push('A-');\n    } else if (gradesArray[i] >= 2.7) {\n      letterGrade.push('B+');\n    } else if (gradesArray[i] >= 2.3) {\n      letterGrade.push('B');\n    } else if (gradesArray[i] >= 2.0) {\n      letterGrade.push('B-');\n    } else if (gradesArray[i] >= 1.7) {\n      letterGrade.push('C+');\n    } else if (gradesArray[i] >= 1.3) {\n      letterGrade.push('C');\n    } else if (gradesArray[i] >= 1.0) {\n      letterGrade.push('C-');\n    } else if (gradesArray[i] >= 0.7) {\n      letterGrade.push('D+');\n    } else if (gradesArray[i] >= 0.3) {\n      letterGrade.push('D');\n    } else if (gradesArray[i] >= 0.0) {\n      letterGrade.push('D-');\n    }\n  }\n  return letterGrade;\n};\n\nconst letterGrade = numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]);\nconsole.log(letterGrade);\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  for (let i = 2; i < string.length; i++) {\n    if (string.length % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 0.\n  */\ncnost startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any other digit.\n  */\ncnost startsAnyEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 0 && i % 10!== 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with any digit except 1 and 0.\n  */\ncnost startsAnyEndsExceptOneZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10!== 1 && i % 10!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  startsOneEnds,\n  startsZeroEnds,\n  startsAnyEnds,\n  startsAnyEndsExceptOneZero,\n  startsAnyEndsExceptOneZero,\n  startsAnyEndsExceptOneZero,\n  startsAnyEndsExceptOneZero,\n  startsAnyEndsExceptOneZero,\n  startsAnyEndsExceptOneZero,\n  startsAnyEndsExceptOneZero,\n  st"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(10, i);\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(150));\nconsole.log(solve(147));\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve(147));\nconsole.log(solve("}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let newStr = arr.map((word) => {\n    let arr = word.split('');\n    let newArr = arr.map((ch) => {\n      let code = ch.charCodeAt(0);\n      let newCode = code - 97;\n      return String.fromCharCode(newCode);\n    });\n    return newArr.join('');\n  }).join('');\n  return newStr;\n};\n\n/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle2 = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let newStr = arr.map((word) => {\n    let arr = word.split('');\n    let newArr = arr.map((ch) => {\n      let code = ch.charCodeAt(0);\n      let newCode = code - 97;\n      return String.fromCharCode(newCode);\n    });\n    return newArr.join('');\n  }).join('');\n  return newStr;\n};\n\n/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle3 = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let newStr = arr.map((word) => {\n    let arr = word.split('');\n    let newArr = arr.map((ch) => {\n      let code = ch.charCodeAt(0);\n      let newCode = code - 97;\n      return String.fromCharCode(newCode);\n    });\n    return newArr.join('');\n  }).join('');\n  return newStr;\n};\n\n/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle4 = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let newStr = arr.map((word) => {\n    let arr = word.split('');\n    let newArr = arr.map((ch) => {\n      let code = ch.charCodeAt(0);\n      let newCode = code - 97;\n      return String.fromCharCode(newCode);\n    });\n    return newArr.join('');\n  }).join('');\n  return newStr;\n};\n\n/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle5 = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let newStr = arr.map((word) => {\n    let arr = word.split('');\n    let newArr = arr.map((ch) => {\n      let code = ch.charCodeAt(0);\n      let newCode = code - 97;\n      return String.fromCharCode(newCode);\n    });\n    return newArr.join('');\n  }).join('');\n  return newStr;\n};\n\n/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii"}
{"task_id": "JavaScript/87", "prompt": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col.length));\n  const sortedRows = rows.sort((a, b) => a - b);\n  const sortedRowsByCol = sortedRows.map(row => row.map(col => col.length));\n  const sortedRowsByColSorted = sortedRowsByCol.sort((a, b) => a - b);\n  const sortedRowsByColSortedByRow = sortedRowsByColSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRow = sortedRowsByColSortedByRow.sort((a, b) => a - b);\n  const sortedRowsByRowSorted = sortedRowsByRow.sort((a, b) => a - b);\n  const sortedRowsByRowSortedByCol = sortedRowsByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSorted = sortedRowsByRowSortedByCol.sort((a, b) => a - b);\n  const sortedRowsByRowSortedByColSortedByRow = sortedRowsByRowSortedByColSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSorted = sortedRowsByRowSortedByColSortedByRow.sort((a, b) => a - b);\n  const sortedRowsByRowSortedByColSortedByRowSorted = sortedRowsByRowSortedByColSortedByRowSorted.sort((a, b) => a - b);\n  const sortedRowsByRowSortedByColSortedByRowSortedByCol = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByCol = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColSortedByRowSortedByColSorted = sortedRowsByRowSortedByColSortedByRowSorted.map(row => row.map(col => col.length));\n  const sortedRowsByRowSortedByColS"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    let c = s[i];\n    let c2 = c.toUpperCase();\n    let r2 = r.length;\n    for (let j = 0; j < r2; j++) {\n      let c3 = r[j];\n      let c4 = c3.toUpperCase();\n      if (c4 === c2) {\n        r[j] = c2;\n        break;\n      }\n    }\n    r.push(c);\n  }\n  return r.join('');\n};\n\n//Create a function decrypt that takes a string as an argument adn\n//returns a string decrypted with the alphabet being rotated. \n//The lahpabet should be rotated in a manner such that the letters \n//shift down by two multiplied to wto plcaes.\nconst decrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    let c = s[i];\n    let c2 = c.toUpperCase();\n    let r2 = r.length;\n    for (let j = 0; j < r2; j++) {\n      let c3 = r[j];\n      let c4 = c3.toUpperCase();\n      if (c4 === c2) {\n        r[j] = c2;\n        break;\n      }\n    }\n    r.push(c);\n  }\n  return r.join('');\n};\n\n//Create a function encrypt that takes a string as an argument adn\n//returns a string encrypted with the alphabet being rotated. \n//The lahpabet should be rotated in a manner such that the letters \n//shift down by two multiplied to wto plcaes.\nconst encrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    let c = s[i];\n    let c2 = c.toUpperCase();\n    let r2 = r.length;\n    for (let j = 0; j < r2; j++) {\n      let c3 = r[j];\n      let c4 = c3.toUpperCase();\n      if (c4 === c2) {\n        r[j] = c2;\n        break;\n      }\n    }\n    r.push(c);\n  }\n  return r.join('');\n};\n\n//Create a function decrypt that takes a string as an argument adn\n//returns a string decrypted with the alphabet being rotated. \n//The lahpabet should be rotated in a manner such that the letters \n//shift down by two multiplied to wto plcaes.\nconst decrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    let c = s[i];\n    let c2 = c.toUpperCase();\n    let r2 = r.length;\n    for (let j = 0; j < r2; j++) {\n      let c3 = r[j];\n      let c4 = c3.toUpperCase();\n      if (c4 === c2) {\n        r[j] = c2;\n        break;\n      }\n    }\n    r.push(c);\n  }\n  return r.join('');\n};\n\n//Create a function encrypt that takes a string as an argument adn\n//returns a string encrypted with the alphabet being rotated. \n//The lahpabet should be rotated in a manner such that the letters \n//shift down by two multiplied to wto plcaes.\nconst encrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    let c = s[i];\n    let c2 = c.toUpperCase();\n    let r2 = r.length;\n    for (let j = 0; j < r2; j++) {\n      let c3 = r[j];\n      let c4 = c3.toUpperCase();\n      if (c4 === c2) {\n        r[j] = c2;\n        break;\n      }\n    }\n    r.push(c);\n  }\n  return r.join('');\n};\n\n//Create a function decrypt that takes a string as an argument adn\n//returns a string decrypted with the alphabet being rotated. \n//The lahpabet should be rotated in a manner such that the letters \n//shift down by two multiplied to wto plcaes.\nconst decrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    let c = s[i];\n    let c2 = c.toUpperCase();\n    let r2 = r.length;\n    for (let j = 0; j < r2; j++) {\n      let c3 = r[j];\n      let c4 = c3.toUpperCase();\n      if (c4 === c2) {\n        r[j] = c2;\n        break;\n      }\n    }\n    r.push(c);\n  }\n  return r.join('');\n};\n\n//Create a function encrypt that takes a string as an argument adn\n//returns a string encrypted with the alphabet being rotated. \n//The lahpabet should be rotated in a manner such that the letters \n//shift down by two multiplied to wto plcaes.\nconst encrypt = (s) => {\n  let l = s.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nextSmallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0\n  let words = S.split(\".\")\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/^[a-zA-Z]{1}$/)) {\n      count += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns the sum of the two numbers.\n  Examples\n  sum(5, 2, 7) ➞ 10\n  sum(3, 2, 2) ➞ 5\n  sum(3, -2, 1) ➞ -5\n  sum(3.6, -2.2, 2) ➞ -5.6\n  */\nconst sum = (x, y, z) => x + y;\n\n/* Create a function that takes 3 numbers.\n  Returns the difference of the two numbers.\n  Examples\n  diff(5, 2, 7) ➞ 3\n  diff(3, 2, 2) ➞ 1\n  diff(3, -2, 1) ➞ 1\n  diff(3.6, -2.2, 2) ➞ 1.6\n  */\nconst diff = (x, y, z) => x - y;\n\n/* Create a function that takes 3 numbers.\n  Returns the product of the two numbers.\n  Examples\n  prod(5, 2, 7) ➞ 35\n  prod(3, 2, 2) ➞ 6\n  prod(3, -2, 1) ➞ -6\n  prod(3.6, -2.2, 2) ➞ -6.24\n  */\nconst prod = (x, y, z) => x * y;\n\n/* Create a function that takes 3 numbers.\n  Returns the quotient of the two numbers.\n  Examples\n  quot(5, 2, 7) ➞ 2\n  quot(3, 2, 2) ➞ 1\n  quot(3, -2, 1) ➞ -1\n  quot(3.6, -2.2, 2) ➞ -1.2\n  */\nconst quot = (x, y, z) => x / y;\n\n/* Create a function that takes 3 numbers.\n  Returns the remainder of the division of the two numbers.\n  Examples\n  rem(5, 2, 7) ➞ 1\n  rem(3, 2, 2) ➞ 0\n  rem(3, -2, 1) ➞ 1\n  rem(3.6, -2.2, 2) ➞ 1.6\n  */\nconst rem = (x, y, z) => x % y;\n\n/* Create a function that takes 3 numbers.\n  Returns the absolute value of the number.\n  Examples\n  abs(5) ➞ 5\n  abs(-5) ➞ 5\n  abs(3.6) ➞ 3.6\n  */\nconst abs = (x) => Math.abs(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the sign of the number.\n  Examples\n  sign(5) ➞ 1\n  sign(-5) ➞ -1\n  sign(3.6) ➞ 1\n  */\nconst sign = (x) => x < 0? -1 : 1;\n\n/* Create a function that takes 3 numbers.\n  Returns the sine of the number.\n  Examples\n  sin(5) ➞ 0.8414709848079\n  sin(-5) ➞ -0.8414709848079\n  sin(3.6) ➞ 0.8\n  */\nconst sin = (x) => Math.sin(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the cosine of the number.\n  Examples\n  cos(5) ➞ 0.540302305868\n  cos(-5) ➞ -0.540302305868\n  cos(3.6) ➞ 0.6\n  */\nconst cos = (x) => Math.cos(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the tangent of the number.\n  Examples\n  tan(5) ➞ 0.5773502691896\n  tan(-5) ➞ -0.5773502691896\n  tan(3.6) ➞ 0.6\n  */\nconst tan = (x) => Math.tan(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the arc sine of the number.\n  Examples\n  asin(5) ➞ 0.8414709848079\n  asin(-5) ➞ -0.8414709848079\n  asin(3.6) ➞ 0.8\n  */\nconst asin = (x) => Math.asin(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the arc cosine of the number.\n  Examples\n  acos(5) ➞ 0.540302305868\n  acos(-5) ➞ -0.540302305868\n  acos(3.6) ➞ 0.6\n  */\nconst acos = (x) => Math.acos(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the arc tangent of the number.\n  Examples\n  atan(5) ➞ 0.5773502691896\n  atan(-5) ➞ -0.5773502691896\n  atan(3.6) ➞ 0.6\n  */\nconst atan = (x) => Math.atan(x);\n\n/* Create a function that takes 3 numbers.\n  Returns the arc tangent of the number.\n  Examples\n  atan2(5, 2) ➞ 0.5773502691896\n  atan2(-5, 2) ➞ -0.5773502691896\n  atan2(3.6, 2) ➞ 0.6\n  */\nconst atan2 = (x, y) => Math.atan2(x, y);\n\n/* Create a function that takes 3 numbers.\n  Returns the hyperbolic sine of the number.\n  Examples\n  sinh(5) ➞ 5.17"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toLowerCase();\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let letter = '';\n  let i = 0;\n  while (i < encoded.length) {\n    letter = letters.indexOf(encoded[i]);\n    if (letter!== -1) {\n      letter = vowels.indexOf(encoded[i]);\n      if (letter!== -1) {\n        letter = letters.charAt(letter + 1);\n        encoded = encoded.replace(encoded[i], letter);\n      }\n    }\n    i++;\n  }\n  return encoded;\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_digit = 0;\n  let max_prime_digit_index = 0;\n  let max_prime_digit_value = 0;\n  let max_prime_digit_value_index = 0;\n  let max_prime_digit_value_value = 0;\n  let max_prime_digit_value_value_index = 0;\n  let max_prime_digit_value_value_value = 0;\n  let max_prime_digit_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_index = 0;\n  let max_prime_digit_value_value_value_value_value_value_value_value_value_"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) {\n    throw new Error('n must be non-negative');\n  }\n  const result = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply13 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply14 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply15 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply16 = (a, b) => {\n  let result = 0;\n  while (a > 0) {\n    if (a % 10 === 0) {\n      result += b;\n      a /= 10;\n    } else {\n      result += a % 10 * b;\n      a /= 10;\n    }\n  }\n  return result;\n};\n\nconst multiply17 = (a, b) => {\n  let result = 0;\n  while (a > 0"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let i = 0;\n  while (i < diff.toString().length) {\n    if (diff.toString().charAt(i) === \"0\") {\n      closest = Math.abs(closest);\n    } else {\n      break;\n    }\n    i++;\n  }\n  return closest;\n};\n\nmodule.exports = {\n  closestInteger\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n < 1) {\n    return []\n  }\n  return [n, makeAPile(n - 1)]\n}\n\nmodule.exports = makeAPile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString9 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString10 = (s) => {\n  let words = s.split(/[,; ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or sapecs. Your atsk is\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n\n  const x2 = x * x;\n  const y2 = y * y;\n  const xy = x2 + y2;\n\n  if (xy > x2 + y2) {\n    return -1;\n  }\n\n  const xy2 = xy * xy;\n  const xy3 = xy2 * xy;\n\n  if (xy2 > xy3) {\n    return -1;\n  }\n\n  const xy4 = xy2 * xy2;\n  const xy5 = xy4 * xy;\n\n  if (xy3 > xy5) {\n    return -1;\n  }\n\n  const xy6 = xy5 * xy;\n\n  if (xy4 > xy6) {\n    return -1;\n  }\n\n  return xy6;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let result = 0;\n  let binary = \"\";\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result += n;\n      binary += \"1\";\n    } else {\n      result += n;\n      binary += \"0\";\n    }\n    n = n / 2;\n    i++;\n  }\n  if (m > i) {\n    return -1;\n  }\n  while (i < m) {\n    result += m;\n    binary += \"1\";\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  let reversed = arr.reverse();\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let digit = sorted[i];\n    let name = \"\";\n    if (digit === 1) {\n      name = \"One\";\n    } else if (digit === 2) {\n      name = \"Two\";\n    } else if (digit === 3) {\n      name = \"Three\";\n    } else if (digit === 4) {\n      name = \"Four\";\n    } else if (digit === 5) {\n      name = \"Five\";\n    } else if (digit === 6) {\n      name = \"Six\";\n    } else if (digit === 7) {\n      name = \"Seven\";\n    } else if (digit === 8) {\n      name = \"Eight\";\n    } else if (digit === 9) {\n      name = \"Nine\";\n    }\n    result.push(name);\n  }\n  return result;\n};\n\nmodule.exports = byLength;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f2 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f3 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f4 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f5 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f6 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f7 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f8 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f9 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f10 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f11 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f12 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f13 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f14 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f15 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f16 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f17 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f18 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f19 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f20 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f21 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f22 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f23 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f24 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f25 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f26 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f27 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n};\n\nconst f28 = (n) => {\n  let f = 1;\n  for (let i = 1; i <= n"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = (n % 2) === 0;\n  const odd = (n % 2) === 1;\n  const evenPalindrome = (n % 2) === 0;\n  const oddPalindrome = (n % 2) === 1;\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempTemp = arrTemp.slice();\n  let arrTempTempLen = arrTempTemp.length;\n  let arrTempTempTemp = arrTempTemp.slice();\n  let arrTempTempTempLen = arrTempTempTemp.length;\n  let arrTempTempTempTemp = arrTempTempTemp.slice();\n  let arrTempTempTempTempLen = arrTempTempTempTemp.length;\n  let arrTempTempTempTempTemp = arrTempTempTempTemp.slice();\n  let arrTempTempTempTempTempLen = arrTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempLen = arrTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTemp"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const even = lst1.filter(x => x % 2 === 0);\n  const odd = lst1.filter(x => x % 2!== 0);\n  if (even.length === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let hist = {};\n  let count = 0;\n  let letters = test.split('');\n  let i = 0;\n  while (i < letters.length) {\n    let letter = letters[i];\n    if (hist[letter] === undefined) {\n      hist[letter] = 1;\n    } else {\n      hist[letter]++;\n    }\n    count++;\n    i++;\n  }\n  return hist;\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let check = true;\n  for (let i = 0; i < c.length; i++) {\n    if (result.indexOf(c[i])!== -1) {\n      check = false;\n      break;\n    }\n  }\n  return [result, check];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let out = []\n  let n = 0\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i]\n    let n = 0\n    for (let j = 0; j < str.length; j++) {\n      let c = str[j]\n      if (c.match(/[0-9]/)) {\n        n += 1\n      }\n    }\n    if (n % 2) {\n      out.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`)\n    }\n  }\n  return out\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (!nums || nums.length === 0) {\n    return 0;\n  }\n  let minSum = nums[0];\n  let minIndex = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minSum + nums[minIndex];\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => {\n    return row.map((col, j) => {\n      return {\n        row: i,\n        col: j,\n        capacity: capacity\n      }\n    })\n  })\n  const result = buckets.reduce((acc, curr) => {\n    const bucket = curr.filter(({capacity}) => {\n      return acc.filter(({capacity}) => {\n        return capacity >= curr.capacity\n      })\n    })\n    return bucket.length\n  }, [])\n  return result\n}\n\nconst test = (grid, bucket_capacity) => {\n  console.log(maxFill(grid, bucket_capacity))\n}\n\ntest([\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1],\n  [0,1,1,1]\n], 1)\n\ntest([\n  [0,0,1,1],\n  [0,0,0,0],\n  [1,1,1,1],\n  [0,1,1,1]\n], 2)\n\ntest([\n  [0,0,0],\n  [0,0,0]\n], 5)\n\ntest([\n  [0,0,0],\n  [0,0,0]\n], 10)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  let sortedArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let"}
{"task_id": "JavaScript/117", "prompt": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let wordCount = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let wordLength = word.length;\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelIndex = 0;\n  let vowelDistance = 0;\n  let vowel = \"\";\n  let vowelIndex2 = 0;\n  let vowelDistance2 = 0;\n  let vowel2 = \"\";\n  let vowelIndex3 = 0;\n  let vowelDistance3 = 0;\n  let vowel3 = \"\";\n  let vowelIndex4 = 0;\n  let vowelDistance4 = 0;\n  let vowel4 = \"\";\n  let vowelIndex5 = 0;\n  let vowelDistance5 = 0;\n  let vowel5 = \"\";\n  let vowelIndex6 = 0;\n  let vowelDistance6 = 0;\n  let vowel6 = \"\";\n  let vowelIndex7 = 0;\n  let vowelDistance7 = 0;\n  let vowel7 = \"\";\n  let vowelIndex8 = 0;\n  let vowelDistance8 = 0;\n  let vowel8 = \"\";\n  let vowelIndex9 = 0;\n  let vowelDistance9 = 0;\n  let vowel9 = \"\";\n  let vowelIndex10 = 0;\n  let vowelDistance10 = 0;\n  let vowel10 = \"\";\n  let vowelIndex11 = 0;\n  let vowelDistance11 = 0;\n  let vowel11 = \"\";\n  let vowelIndex12 = 0;\n  let vowelDistance12 = 0;\n  let vowel12 = \"\";\n  let vowelIndex13 = 0;\n  let vowelDistance13 = 0;\n  let vowel13 = \"\";\n  let vowelIndex14 = 0;\n  let vowelDistance14 = 0;\n  let vowel14 = \"\";\n  let vowelIndex15 = 0;\n  let vowelDistance15 = 0;\n  let vowel15 = \"\";\n  let vowelIndex16 = 0;\n  let vowelDistance16 = 0;\n  let vowel16 = \"\";\n  let vowelIndex17 = 0;\n  let vowelDistance17 = 0;\n  let vowel17 = \"\";\n  let vowelIndex18 = 0;\n  let vowelDistance18 = 0;\n  let vowel18 = \"\";\n  let vowelIndex19 = 0;\n  let vowelDistance19 = 0;\n  let vowel19 = \"\";\n  let vowelIndex20 = 0;\n  let vowelDistance20 = 0;\n  let vowel20 = \"\";\n  let vowelIndex21 = 0;\n  let vowelDistance21 = 0;\n  let vowel21 = \"\";\n  let vowelIndex22 = 0;\n  let vowelDistance22 = 0;\n  let vowel22 = \"\";\n  let vowelIndex23 = 0;\n  let vowelDistance23 = 0;\n  let vowel23 = \"\";\n  let vowelIndex24 = 0;\n  let vowelDistance24 = 0;\n  let vowel24 = \"\";\n  let vowelIndex25 = 0;\n  let vowelDistance25 = 0;\n  let vowel25 = \"\";\n  let vowelIndex26 = 0;\n  let vowelDistance26 = 0;\n  let vowel26 = \"\";\n  let vowelIndex27 = 0;\n  let vowelDistance27 = 0;\n  let vowel27 = \"\";\n  let vowelIndex28 = 0;\n  let vowelDistance28 = 0;\n  let vowel28 = \"\";\n  let vowelIndex29 = 0;\n  let vowelDistance29 = 0;\n  let vowel29 = \"\";\n  let vowelIndex30 = 0;\n  let vowelDistance30 = 0;\n  let vowel30 = \"\";\n  let vowelIndex31 = 0;\n  let vowelDistance31 = 0;\n  let vowel31 = \"\";\n  let vowelIndex32 = 0;\n  let vowelDistance32 = 0;\n  let vowel32 = \"\";\n  let vowelIndex33 = 0;\n  let vowelDistance33 = 0;\n  let vowel33 = \"\";\n  let vowelIndex34 = 0;\n  let vowelDistance34 = 0;\n  let vowel34 = \"\";\n  let vowelIndex35 = 0;\n  let vowelDistance35 = 0;\n  let vowel35 = \"\";\n  let vowelIndex36 = 0;\n  let vowelDistance36 = 0;\n  let vowel36 = \"\";\n  let vowelIndex37 = 0;\n  let vowelDistance37 = 0;\n  let vowel37 = \"\";\n  let vowelIndex38 = 0;\n  let vowelDistance38 = 0;\n  let vowel38 = \"\";\n  let vowelIndex39 = 0;\n  let vowelDistance39 = 0;\n  let vowel39 = \"\";\n  let vowelIndex40 = 0;\n  let vowelDistance40 = 0;\n  let vowel40 = \"\";\n  let vowelIndex41 = 0;\n  let vowelDistance41 = 0;\n  let vowel41 = \"\";\n  let vowelIndex42 = 0;\n  let vowelDistance42 = 0;\n  let vowel42 = \"\";\n  let vowelIndex43 = 0;\n  let vowelDistance43 = 0;\n  let vowel43 = \"\";\n  let vowelIndex44 = 0;\n  let vowelDistance44 = 0;\n  let vowel44 = \"\";\n  let vowelIndex45 = 0;\n  let vowelDistance45 = 0;\n  let vowel45 = \"\";\n  let vowelIndex46 = 0;\n  let vowelDistance46 = 0;\n  let vowel46 = \"\";\n  let vowelIndex47 = 0;\n  let vowelDistance47 = 0;\n  let vowel47 = \"\";\n  let vowelIndex48 = 0;\n  let vowelDistance48 = 0;\n  let vowel48 = \"\";\n  let vowelIndex49 = 0;\n  let vowelDistance49 = 0;\n  let vowel49 = \"\";\n  let vowelIndex50 = 0;\n  let vowelDistance50 = 0;\n  let vowel50 = \"\";\n  let vowelIndex51 = 0;\n  let vowelDistance51 = 0;\n  let vowel51 ="}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (lst.length < 2) return 'No';\n  let res = 'Yes';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== '(' && lst[i]!== ')') {\n      res = 'No';\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) {\n    return arr;\n  }\n  if (k === 1) {\n    return arr.sort((a, b) => a - b);\n  }\n  const max = arr.reduce((max, val) => Math.max(val, max), -Infinity);\n  const result = arr.slice(0, k);\n  result.push(max);\n  return result;\n};\n\nmodule.exports = maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n  }\n  return arr.sort((a, b) => a - b);\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let month = dateArray[1];\n  let day = dateArray[2];\n  let year = dateArray[3];\n  let dayOfMonth = day;\n  let monthOfMonth = month;\n  let yearOfMonth = year;\n\n  if (monthOfMonth < 1 || monthOfMonth > 12) {\n    return false;\n  }\n  if (dayOfMonth < 1 || dayOfMonth > 31) {\n    return false;\n  }\n  if (dayOfMonth > 30) {\n    return false;\n  }\n  if (monthOfMonth == 4 || monthOfMonth == 6 || monthOfMonth == 9 || monthOfMonth == 11) {\n    if (dayOfMonth > 30) {\n      return false;\n    }\n  }\n  if (monthOfMonth == 2) {\n    if (dayOfMonth > 29) {\n      return false;\n    }\n  }\n  if (year < 2000 || year > 2099) {\n    return false;\n  }\n  if (monthOfMonth == 1 || monthOfMonth == 3 || monthOfMonth == 5 || monthOfMonth == 7 || monthOfMonth == 8 || monthOfMonth == 10 || monthOfMonth == 12) {\n    if (dayOfMonth > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords2 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords3 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords4 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords5 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords6 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords7 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords8 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords9 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords10 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords11 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords12 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords13 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords14 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords15 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords16 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i].trim());\n  }\n  return words;\n};\n\nconst splitWords17 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    words.push(wordsArr[i"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let len = lst.length;\n  let i = 0;\n  while (i < len - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start < interval2.start && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.start && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.start && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.end < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start < interval2.end && interval2.start < interval1.end) {\n    return \"NO\"\n  "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  const res = arr.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n\n    if (a === 0) {\n      return 0;\n    }\n\n    if (a === 1) {\n      return b;\n    }\n\n    if (a === -1) {\n      return -b;\n    }\n\n    return a * b;\n  }, null);\n\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const visited = new Array(rows).fill(new Array(cols));\n  const path = new Array(k);\n  let i = 0;\n  path[i] = grid[0][0];\n  visited[0][0] = true;\n  while (i < k) {\n    const min = Infinity;\n    let j = 0;\n    while (j < rows) {\n      if (!visited[j][0]) {\n        const min_j = Infinity;\n        const lst_j = [];\n        const lst_k = [];\n        let lst_i = 0;\n        let lst_j_i = 0;\n        let lst_k_i = 0;\n        while (lst_j_i < rows) {\n          if (!visited[lst_j_i][j]) {\n            const min_lst_j = Infinity;\n            const lst_lst_j = [];\n            const lst_lst_k = [];\n            let lst_lst_i = 0;\n            let lst_lst_j_i = 0;\n            let lst_lst_k_i = 0;\n            while (lst_lst_j_i < rows) {\n              if (!visited[lst_lst_j_i][lst_lst_j_i]) {\n                const min_lst_lst_j = Infinity;\n                const lst_lst_lst_j = [];\n                const lst_lst_lst_k = [];\n                let lst_lst_lst_i = 0;\n                let lst_lst_lst_j_i = 0;\n                let lst_lst_lst_k_i = 0;\n                while (lst_lst_lst_j_i < rows) {\n                  if (!visited[lst_lst_lst_j_i][lst_lst_lst_j_i]) {\n                    const min_lst_lst_lst_j = Infinity;\n                    const lst_lst_lst_lst_j = [];\n                    const lst_lst_lst_lst_k = [];\n                    let lst_lst_lst_lst_i = 0;\n                    let lst_lst_lst_lst_j_i = 0;\n                    let lst_lst_lst_lst_k_i = 0;\n                    while (lst_lst_lst_lst_j_i < rows) {\n                      if (!visited[lst_lst_lst_lst_j_i][lst_lst_lst_lst_j_i]) {\n                        const min_lst_lst_lst_lst_j = Infinity;\n                        const lst_lst_lst_lst_lst_j = [];\n                        const lst_lst_lst_lst_lst_k = [];\n                        let lst_lst_lst_lst_lst_i = 0;\n                        let lst_lst_lst_lst_lst_j_i = 0;\n                        let lst_lst_lst_lst_lst_k_i = 0;\n                        while (lst_lst_lst_lst_lst_j_i < rows) {\n                          if (!visited[lst_lst_lst_lst_lst_j_i][lst_lst_lst_lst_lst_j_i]) {\n                            const min_lst_lst_lst_lst_lst_j = Infinity;\n                            const lst_lst_lst_lst_lst_lst_j = [];\n                            const lst_lst_lst_lst_lst_lst_k = [];\n                            let lst_lst_lst_lst_lst_lst_i = 0;\n                            let lst_lst_lst_lst_lst_lst_j_i = 0;\n                            let lst_lst_lst_lst_lst_lst_k_i = 0;\n                            while (lst_lst_lst_lst_lst_lst_j_i < rows) {\n                              if (!visited[lst_lst_lst_lst"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i = i + 1;\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = i + 1;\n    }\n  }\n  return arr;\n};\n\nconst test = (n) => {\n  let arr = tri(n);\n  console.log(arr);\n};\n\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest(235);\ntest(236);"}
{"task_id": "JavaScript/131", "prompt": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [];\n  while (n > 0) {\n    digits.push(n % 10);\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\nmodule.exports = digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let counter = 0;\n  let bracketCounter = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    "}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt[txt.length - 1];\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isALetter &&!isNotALetter;\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let result = -1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      result = arr[i];\n      k = i;\n      i++;\n    } else {\n      result = arr[j];\n      k = j;\n      j--;\n    }\n  }\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const result = lst.reduce((acc, curr) => {\n    if (curr < 0) {\n      return [acc, curr];\n    } else if (acc === null) {\n      return [curr, curr];\n    } else {\n      return [acc, Math.min(acc, curr)];\n    }\n  }, null);\n\n  return result;\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > b? a : b;\n  }\n\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n\n  return null;\n};\n\nmodule.exports = compareOne;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": false, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The number of terms must be a positive integer.');\n  }\n\n  const result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces2 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces3 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces4 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces5 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces6 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces7 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces8 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces9 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces10 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces11 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces12 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces13 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces14 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces15 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces16 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces17 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces18 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces19 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces20 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces21 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces22 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces23 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces24 = (text) => {\n  let newText = text.replace(/ /g, \"_\");\n  let newText2 = newText.replace(/\\s+/g, \"-\");\n  return newText2;\n};\n\nconst fixSpaces25 = (text) => {\n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_length = file_name.length;\n  let file_name_characters = file_name.split('');\n  let file_name_characters_length = file_name_characters.length;\n  let file_name_characters_index = 0;\n  let file_name_characters_index_max = file_name_characters_length - 1;\n  let file_name_characters_index_min = 0;\n  let file_name_characters_index_max_minus_1 = file_name_characters_index_max - 1;\n  let file_name_characters_index_min_plus_1 = file_name_characters_index_min + 1;\n  let file_name_characters_index_max_plus_1 = file_name_characters_index_max + 1;\n  let file_name_characters_index_max_plus_2 = file_name_characters_index_max_plus_1 + 1;\n  let file_name_characters_index_min_minus_1 = file_name_characters_index_min_plus_1 - 1;\n  let file_name_characters_index_min_minus_2 = file_name_characters_index_min_minus_1 - 1;\n  let file_name_characters_index_min_minus_3 = file_name_characters_index_min_minus_2 - 1;\n  let file_name_characters_index_min_minus_4 = file_name_characters_index_min_minus_3 - 1;\n  let file_name_characters_index_min_minus_5 = file_name_characters_index_min_minus_4 - 1;\n  let file_name_characters_index_min_minus_6 = file_name_characters_index_min_minus_5 - 1;\n  let file_name_characters_index_min_minus_7 = file_name_characters_index_min_minus_6 - 1;\n  let file_name_characters_index_min_minus_8 = file_name_characters_index_min_minus_7 - 1;\n  let file_name_characters_index_min_minus_9 = file_name_characters_index_min_minus_8 - 1;\n  let file_name_characters_index_min_minus_10 = file_name_characters_index_min_minus_9 - 1;\n  let file_name_characters_index_min_minus_11 = file_name_characters_index_min_minus_10 - 1;\n  let file_name_characters_index_min_minus_12 = file_name_characters_index_min_minus_11 - 1;\n  let file_name_characters_index_min_minus_13 = file_name_characters_index_min_minus_12 - 1;\n  let file_name_characters_index_min_minus_14 = file_name_characters_index_min_minus_13 - 1;\n  let file_name_characters_index_min_minus_15 = file_name_characters_index_min_minus_14 - 1;\n  let file_name_characters_index_min_minus_16 = file_name_characters_index_min_minus_15 - 1;\n  let file_name_characters_index_min_minus_17 = file_name_characters_index_min_minus_16 - 1;\n  let file_name_characters_index_min_minus_18 = file_name_characters_index_min_minus_17 - 1;\n  let file_name_characters_index_min_minus_19 = file_name_characters_index_min_minus_18 - 1;\n  let file_name_characters_index_min_minus_20 = file_name_characters_index_min_minus_19 - 1;\n  let file_name_characters_index_min_minus_21 = file_name_characters_index_min_minus_20 - 1;\n  let file_name_characters_index_min_minus_22 = file_name_characters_index_min_minus_21 - 1;\n  let file_name_characters_index_min_minus_23 = file_name_characters_index_min_minus_22 - 1;\n  let file_name_characters_index_min_minus_24 = file_name_characters_index_min_minus_23 - 1;\n  let file_name_characters_index_min_minus_25 = file_name_characters_index_min_minus_24 - 1;\n  let file_name_characters_index_min_minus_26 = file_name_characters_index_min_minus_25 - 1;\n  let file_name_characters_index_min_minus_27 = file_name_characters_index_min_minus_26 - 1;\n  let file_name_characters_index_min_minus_28 = file_name_characters_index_min_minus_27 - 1;\n  let file_name_characters_index_min_minus_29 = file_name_characters_index_min_minus_28 - 1;\n  let file_name_characters_index_min_minus_30 = file_name_characters_index_min_minus_29 - 1;\n  let file_name_characters"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word)) {\n      result.push(word);\n    }\n  }\n  return result.join(' ');\n};\n\nfunction isPrime(num) {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  if (num % 3 === 0) {\n    return false;\n  }\n  if (num % 5 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 6; i <= sqrt; i += 6) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let xn = x.split(\"/\");\n  let nn = n.split(\"/\");\n  let xnumerator = xn[0];\n  let xdenominator = xn[1];\n  let nnumerator = nn[0];\n  let ndenominator = nn[1];\n  let xnumerator_is_whole = xnumerator.match(/^[0-9]+$/);\n  let nnumerator_is_whole = nnumerator.match(/^[0-9]+$/);\n  let xdenominator_is_whole = xdenominator.match(/^[0-9]+$/);\n  let ndenominator_is_whole = ndenominator.match(/^[0-9]+$/);\n  if (xnumerator_is_whole && nnumerator_is_whole && xdenominator_is_whole && ndenominator_is_whole) {\n    return xnumerator === nnumerator && xdenominator === ndenominator;\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/3\", \"2/3\"));\nconsole.log(simplify(\"1/4\", \"2/4\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"1"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n\n  const sorted = nums.sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n\n    if (a < b) {\n      return -1;\n    }\n\n    return 1;\n  });\n\n  return sorted;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i].toString().split('').every(x => x % 2 === 1)) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst specialFilter2 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i].toString().split('').every(x => x % 2 === 1)) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  specialFilter,\n  specialFilter2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [...planet1,...planet2];\n  const sorted = planets.sort((a, b) => {\n    const a1 = a.getOrbit();\n    const b1 = b.getOrbit();\n    if (a1.distanceTo(b1) < 0.1) {\n      return -1;\n    }\n    if (a1.distanceTo(b1) > 0.1) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nbf(\"Jupiter\", \"Neptune\");\nbf(\"Earth\", \"Mercury\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\", \"Mars\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Neptune\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Earth\");\nbf(\"Mercury\","}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i].length!== prev.length) {\n      res.push(prev);\n      prev = lst[i];\n    } else {\n      prev = prev + lst[i];\n    }\n  }\n  res.push(prev);\n  return res;\n};\n\nconst list_sort = (lst) => {\n  let res = sortedListSum(lst);\n  return res;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst main = () => {\n  console.log(xOrY(7, 34, 12));\n  console.log(xOrY(15, 8, 5));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst"}
{"task_id": "JavaScript/152", "prompt": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let scores = game.map(score => score.score);\n  let guesses = game.map(guess => guess.guess);\n  let len = scores.length;\n  let i = 0;\n  while (i < len) {\n    let guess = guesses[i];\n    let score = scores[i];\n    if (guess === score) {\n      result.push(0);\n    } else {\n      let diff = Math.abs(guess - score);\n      result.push(diff);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  extensions.forEach((extension) => {\n    let ext_name = extension.toLowerCase();\n    let ext_strength = class_name.indexOf(ext_name);\n    if (ext_strength > strength) {\n      extension_name = ext_name;\n      strength = ext_strength;\n    }\n  });\n  return extension_name;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] === bb[j]) {\n      i++;\n      j++;\n    } else if (aa[i] < bb[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === aa.length && j === bb.length) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = cycpatternCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": false, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  let temp = num;\n  while (temp > 0) {\n    if (temp % 10 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    temp = temp / 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": false, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    let digit = number % 10\n    number = number / 10\n    if (digit === 4) {\n      result += 'IV'\n    } else if (digit === 9) {\n      result += 'IX'\n    } else if (digit === 10) {\n      result += 'X'\n    } else if (digit === 5) {\n      result += 'V'\n    } else if (digit === 6) {\n      result += 'VI'\n    } else if (digit === 1) {\n      result += 'I'\n    } else if (digit === 2) {\n      result += 'II'\n    } else if (digit === 3) {\n      result += 'III'\n    } else if (digit === 7) {\n      result += 'VII'\n    } else if (digit === 8) {\n      result += 'VIII'\n    } else if (digit === 0) {\n      result += 'IX'\n    } else {\n      result +=''\n    }\n  }\n  return result\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && a + c > b && b + c > a);\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxLength = words[0].length;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      max = words[i];\n      maxIndex = i;\n      maxLength = max.length;\n    }\n  }\n  return max;\n};\n\nconst test = () => {\n  console.log(findMax([\"name\", \"of\", \"string\"]));\n  console.log(findMax([\"name\", \"enam\", \"agme\"]));\n  console.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number * need;\n  const left = remaining - need;\n  if (left < 0) {\n    return [total, 0];\n  }\n  return [total, left];\n};\n\nexport default eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  let i = 0;\n  while (i < operator.length) {\n    if (operator[i] === '+') {\n      result.push(operand[0] + operand[1]);\n    } else if (operator[i] === '-') {\n      result.push(operand[0] - operand[1]);\n    } else if (operator[i] === '*') {\n      result.push(operand[0] * operand[1]);\n    } else if (operator[i] === '/') {\n      result.push(operand[0] / operand[1]);\n    } else if (operator[i] === '//') {\n      result.push(operand[0] // operand[1]);\n    } else if (operator[i] === '**') {\n      result.push(Math.pow(operand[0], operand[1]));\n    }\n    i++;\n  }\n  return result;\n};\n\nconst doAlgebraTest = (operator, operand) => {\n  const result = doAlgebra(operator, operand);\n  console.log(result);\n};\n\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\ndoAlgebraTest(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8, 9,"}
{"task_id": "JavaScript/161", "prompt": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  let str = s.split('');\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] ="}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": false, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
