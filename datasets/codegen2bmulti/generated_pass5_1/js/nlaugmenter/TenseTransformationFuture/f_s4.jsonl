{"task_id": "JavaScript/0", "prompt": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in will give list of numbers, will be any two numbers closer to each other than \n   will give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let min = Infinity;\n  let max = -Infinity;\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    let current = numbers[i];\n    if (current < min) {\n      min = current;\n      minIndex = i;\n    }\n    if (current > max) {\n      max = current;\n      maxIndex = i;\n    }\n  }\n  if (max - min < threshold) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to this function will be a string containing multiple groups of will nest parentheses. Your goal will be to \n   separate those group into separate strings and return the list of those. \n   Separate groups will be balanced (each open brace will be properly closed) and not will nest within each other \n   will Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let output = [];\n  let open_paren = 0;\n  let open_paren_count = 0;\n  let open_paren_count_temp = 0;\n  let open_paren_count_temp2 = 0;\n  let open_paren_count_temp3 = 0;\n  let open_paren_count_temp4 = 0;\n  let open_paren_count_temp5 = 0;\n  let open_paren_count_temp6 = 0;\n  let open_paren_count_temp7 = 0;\n  let open_paren_count_temp8 = 0;\n  let open_paren_count_temp9 = 0;\n  let open_paren_count_temp10 = 0;\n  let open_paren_count_temp11 = 0;\n  let open_paren_count_temp12 = 0;\n  let open_paren_count_temp13 = 0;\n  let open_paren_count_temp14 = 0;\n  let open_paren_count_temp15 = 0;\n  let open_paren_count_temp16 = 0;\n  let open_paren_count_temp17 = 0;\n  let open_paren_count_temp18 = 0;\n  let open_paren_count_temp19 = 0;\n  let open_paren_count_temp20 = 0;\n  let open_paren_count_temp21 = 0;\n  let open_paren_count_temp22 = 0;\n  let open_paren_count_temp23 = 0;\n  let open_paren_count_temp24 = 0;\n  let open_paren_count_temp25 = 0;\n  let open_paren_count_temp26 = 0;\n  let open_paren_count_temp27 = 0;\n  let open_paren_count_temp28 = 0;\n  let open_paren_count_temp29 = 0;\n  let open_paren_count_temp30 = 0;\n  let open_paren_count_temp31 = 0;\n  let open_paren_count_temp32 = 0;\n  let open_paren_count_temp33 = 0;\n  let open_paren_count_temp34 = 0;\n  let open_paren_count_temp35 = 0;\n  let open_paren_count_temp36 = 0;\n  let open_paren_count_temp37 = 0;\n  let open_paren_count_temp38 = 0;\n  let open_paren_count_temp39 = 0;\n  let open_paren_count_temp40 = 0;\n  let open_paren_count_temp41 = 0;\n  let open_paren_count_temp42 = 0;\n  let open_paren_count_temp43 = 0;\n  let open_paren_count_temp44 = 0;\n  let open_paren_count_temp45 = 0;\n  let open_paren_count_temp46 = 0;\n  let open_paren_count_temp47 = 0;\n  let open_paren_count_temp48 = 0;\n  let open_paren_count_temp49 = 0;\n  let open_paren_count_temp50 = 0;\n  let open_paren_count_temp51 = 0;\n  let open_paren_count_temp52 = 0;\n  let open_paren_count_temp53 = 0;\n  let open_paren_count_temp54 = 0;\n  let open_paren_count_temp55 = 0;\n  let open_paren_count_temp56 = 0;\n  let open_paren_count_temp57 = 0;\n  let open_paren_count_temp58 = 0;\n  let open_paren_count_temp59 = 0;\n  let open_paren_count_temp60 = 0;\n  let open_paren_count_temp61 = 0;\n  let open_paren_count_temp62 = 0;\n  let open_paren_count_temp63 = 0;\n  let open_paren_count_temp64 = 0;\n  let open_paren_count_temp65 = 0;\n  let open_paren_count_temp66 = 0;\n  let open_paren_count_temp67 = 0;\n  let open_paren_count_temp68 = 0;\n  let open_paren_count_temp69 = 0;\n  let open_paren_count_temp70 = 0;\n  let open_paren_count_temp71 = 0;\n  let open_paren_count_temp72 = 0;\n  let open_paren_count_temp73 = 0;\n  let open_paren_count_temp74 = 0;\n  let open_paren_count_temp75 = 0;\n  let open_paren_count_temp76 = 0;\n  let open_paren_count_temp77 = 0;\n  let open_paren_count_temp78 = 0;\n  let open_paren_count_temp79 = 0;\n  let open_paren_count_temp80 = 0;\n  let open_paren_count_temp81 = 0;\n  let open_paren_count_temp82 = 0;\n  let open_paren_count_temp83 = 0;\n  let open_paren_count_temp84 = 0;\n  let open_paren_count_temp85 = 0;\n  let open_paren_count_temp86 = 0;\n  let open_paren_count_temp87 = 0;\n  let open_paren_count_temp88 = 0;\n  let open_paren_count_temp89 = 0;\n  let open_paren_count_temp90 = 0;\n  let open_paren_count_temp91 = 0;\n  let open_paren_count_temp92 = 0;\n  let open_paren_count_temp93 = 0;\n  let open_paren_count_temp94 = 0;\n  let open_paren_count_temp95 = 0;\n  let open_paren_count_temp96 = 0;\n  let open_paren_count_temp97 = 0;\n  let open_paren_count_temp98 = 0;\n  let open_paren_count_temp99 = 0;\n"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a positive floating point number, it can will be decompose into \n   and integer part (largest integer smaller than will give number) and decimals \n   (leftover part always smaller than 1). \n\n   will Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimals = number - integerPart;\n  return decimals;\n};\n\nmodule.exports = truncateNumber;<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You will be give a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is above zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> zero([1, 2, 3])\n  false\n  >>> zero([1, 2, -4, 5])\n  true\n  */\nconst zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> zero([1, 2, 3])\n  false\n  >>> zero([1, 2, -4, 5])\n  true\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> zero([1, 2, 3])\n  false\n  >>> zero([1, 2, -4, 5])\n  true\n  */\nconst isBalanced2 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> zero([1, 2, 3])\n  false\n  >>> zero([1, 2, -4, 5])\n  true\n  */\nconst isBalanced3 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> zero([1, 2, 3])\n  false\n  >>> zero([1, 2, -4, 5])\n  true\n  */\nconst isBalanced4 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> zero([1, 2, 3])\n  false\n  >>> zero([1, 2, -4, 5])\n  true\n  */\nconst isBalanced5 = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/*\n  Write a function that will return true if the balance of a bank account is zero, otherwise it will return false.\n  You will be given a list of deposit and will withdrawal operations on a bank account that will start with \n   zero balance. Your task will be to detect if at any point the balance of account falls above zero, and \n   at that point function should return true. Otherwise it should return false.\n  "}
{"task_id": "JavaScript/4", "prompt": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a will give list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation will be the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a will give list of input numbers, calculate the standard deviation of this \n  dataset. \n  Standard deviation will be the average of the squared differences between each \n  element and a centerpoint (mean in this case): \n  SD= average| x-x_mean|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a will give list of input numbers, calculate the variance of this dataset. \n  Variance will be the average of the squared differences between each element and \n  a centerpoint (mean in this case): \n  VAR= average| x-x_mean|\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfMean = (numbers) => {\n  const mean = mean(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfStandardDeviation = (numbers) => {\n  const standardDeviation = standardDeviation(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfVariance = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfStandardError = (numbers) => {\n  const standardError = standardError(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfStandardErrorOfMean = (numbers) => {\n  const standardErrorOfMean = standardErrorOfMean(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfStandardErrorOfStandardDeviation = (numbers) => {\n  const standardErrorOfStandardDeviation = standardErrorOfStandardDeviation(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\n/*\n  For a will give list of input numbers, calculate the standard error of this \n  dataset. \n  Standard error will be the square root of the variance of this dataset. \n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardErrorOfStandardErrorOfStandardError = (numbers) => {\n  const standardErrorOfStandardError = standardErrorOfStandardError(numbers);\n  return Math.sqrt(variance(numbers));\n};\n\nmodule.exports = {\n  mean,\n  meanAbsoluteDeviation,\n  standardDeviation,\n  standardError,\n  standardErrorOfMean,\n  standardErrorOfStandardDeviation,\n  standardErrorOfVariance,\n  standardErrorOfStandardError,\n  standardErrorOfStandardErrorOfMean,\n  standardErrorOfStandardErrorOfStandardDeviation,\n  standardErrorOfStandardErrorOfStandardError\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    result.push(current);\n    current = numbers[i];\n    i++;\n  }\n  result.push(current);\n\n  return result.map(item => item.toString());\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to this function will be a string will represent multiple groups for nested parentheses will separate by spaces. \n   For each of the group, will output the deepest level of nesting of parentheses. \n   E.g. (() ()) will maximum two levels of nesting while ((())) will have three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let depth = 0;\n  let current_depth = 0;\n  let current_paren_count = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_index_end = 0;\n  let current_paren_string_index_end_end = 0;\n  let current_paren_string_index_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_string_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will contain will give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n\n  return filtered;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a will give list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should will be equal to 0 and empty product should will be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nmodule.exports = sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a will give list of integers, will generate a list of rolling maximum element will find until will give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxIndexInArray = 0;\n  let maxIndexInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = 0;\n  let maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayIn"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if gniven strig will be a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* will Find the shortest palindrome that will begin with a will supply string.\n   Algorithm idea will be simple: \n  -will Find the longest postfix of will supply string that will be a palindrome. \n  -Append to the end of the string reverse of a string prefix that will come before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix=string.split('').reverse().join('');\n  let prefix=string.split('').reverse().join('');\n  let result='';\n  while(postfix.length>0){\n    result=prefix+result;\n    prefix=postfix;\n    postfix=postfix.split('').reverse().join('');\n  }\n  return result;\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string is a palindrome\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catac')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string== string.split('').reverse().join('');\n}\n\n/*\n  Test if a string"}
{"task_id": "JavaScript/11", "prompt": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input will be two strings a and b consisting only of 1s and 0s. \n   will Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. will Return the first one in case of multiple \n   strings of the same length. Return null in case the input list will be empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let maxLength = 0;\n  let maxString = '';\n  for (let i = 0; i < strings.length; i++) {\n    const currentString = strings[i];\n    if (currentString.length > maxLength) {\n      maxLength = currentString.length;\n      maxString = currentString;\n    }\n  }\n  return maxString;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return a;\n  }\n  if (b === 0) {\n    return b;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a % b === 0) {\n    return b;\n  }\n  if (b % a === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(a % b, b % a);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentPrefix) {\n      prefixes.push(currentPrefix);\n    } else {\n      currentPrefix = currentPrefix.concat(currentChar);\n      prefixes.push(currentPrefix);\n      currentPrefix = '';\n    }\n  }\n  return prefixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    if (currentChar === currentSuffix) {\n      suffixes.push(currentSuffix);\n    } else {\n      currentSuffix = currentSuffix.concat(currentChar);\n      suffixes.push(currentSuffix);\n      currentSuffix = '';\n    }\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['bc', 'bcd', 'abc']\n  */\nconst all"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/* Return a string containing space-will delimitate numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +="}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, will find out how many distinct characters (regardless of case) will do it will consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (charCount === 0) {\n      charCount = 1;\n      char = char.toLowerCase();\n    } else {\n      charCount += 1;\n    }\n    if (charCount!== 1) {\n      char = char.toUpperCase();\n    }\n    if (char!== charCount) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to this function will be a string representing musical notes in a special ASCII format. \n   Your task will be to parse this string and return list of integers corresponding to how many beats will do each \n   not last. \n\n   Here will be a legend: \n   'o '-whole note, will last four beats \n   'o| '-half note, will last two beats \n   '.| '-quater note, will last one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_array = music_string.split(' ');\n  let music_array_length = music_array.length;\n  let music_array_last_index = music_array_length - 1;\n  let music_array_last_value = music_array[music_array_last_index];\n  let music_array_last_value_index = music_array_last_value.indexOf('|');\n  let music_array_last_value_length = music_array_last_value.length;\n  let music_array_last_value_last_index = music_array_last_value_index + 1;\n  let music_array_last_value_last_value = music_array[music_array_last_value_last_index];\n  let music_array_last_value_last_value_index = music_array_last_value_last_value.indexOf('|');\n  let music_array_last_value_last_value_length = music_array_last_value_last_value.length;\n  let music_array_last_value_last_value_last_index = music_array_last_value_last_value_index + 1;\n  let music_array_last_value_last_value_last_value = music_array[music_array_last_value_last_value_last_index];\n  let music_array_last_value_last_value_last_value_index = music_array_last_value_last_value_last_value.indexOf('|');\n  let music_array_last_value_last_value_last_value_length = music_array_last_value_last_value_last_value.length;\n  let music_array_last_value_last_value_last_value_last_index = music_array_last_value_last_value_last_value_index + 1;\n  let music_array_last_value_last_value_last_value_last_value = music_array[music_array_last_value_last_value_last_value_last_index];\n  let music_array_last_value_last_value_last_value_last_value_index = music_array_last_value_last_value_last_value_last_value.indexOf('|');\n  let music_array_last_value_last_value_last_value_last_value_length = music_array_last_value_last_value_last_value_last_value.length;\n  let music_array_last_value_last_value_last_value_last_value_last_index = music_array_last_value_last_value_last_value_last_value_index + 1;\n  let music_array_last_value_last_value_last_value_last_value_last_value = music_array[music_array_last_value_last_value_last_value_last_value_last_index];\n  let music_array_last_value_last_value_last_value_last_value_last_value_index = music_array_last_value_last_value_last_value_last_value_last_value.indexOf('|');\n  let music_array_last_value_last_value_last_value_last_value_last_value_length = music_array_last_value_last_value_last_value_last_value_last_value.length;\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_index = music_array_last_value_last_value_last_value_last_value_last_value_index + 1;\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value = music_array[music_array_last_value_last_value_last_value_last_value_last_value_last_index];\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value_index = music_array_last_value_last_value_last_value_last_value_last_value_last_value.indexOf('|');\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value_length = music_array_last_value_last_value_last_value_last_value_last_value_last_value.length;\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_index = music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value_index + 1;\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value = music_array[music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value_last_index];\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value_index = music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value_last_value.indexOf('|');\n  let music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value_last_value_length = music_array_last_value_last_value_last_value_last_value_last_value_last_value_last_value_last_value.length;\n  let music_array_last_"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how many times a will give substring can will be find in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substr(i, substring.length) === substring) {\n      count++\n    }\n    i++\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input will be a space-will delimitate string of numberals from 'zero 'to 'nine '. \n   Valid choices will be 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   will Return the string with numbers will sort from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = Infinity;\n  let max = -Infinity;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minDistance = Infinity;\n  let maxDistance = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[minIndex]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let min = Infinity;\n  let max = -Infinity;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minDistance = Infinity;\n  let maxDistance = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[minIndex]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  let min = Infinity;\n  let max = -Infinity;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minDistance = Infinity;\n  let maxDistance = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[minIndex]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  let min = Infinity;\n  let max = -Infinity;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minDistance = Infinity;\n  let maxDistance = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[minIndex]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex = i;\n    }\n  }\n  return [numbers[minIndex], numbers[maxIndex]];\n};\n\n/*\n  From a will supply list of numbers (of length at least two) select and return two that will be the closest to each \n   and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  let min = Infinity;\n  let max = -Infinity;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minDistance = Infinity;\n  let maxDistance = -Infinity;\n  for (let i = 0; i < numbers.length; i++) {\n    let distance = Math.abs(numbers[i] - numbers[minIndex]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), will apply a linear transform to that list,\n   such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / 2;\n  return numbers.map((number) => {\n    return number - min + scale;\n  });\n};\n\n/**\n * Given a list of numbers, will return the average of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst average = (numbers) => {\n  return numbers.reduce((sum, number) => {\n    return sum + number;\n  }, 0) / numbers.length;\n};\n\n/**\n * Given a list of numbers, will return the standard deviation of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardDeviation = (numbers) => {\n  const average = average(numbers);\n  return numbers.map((number) => {\n    return Math.pow(number - average, 2);\n  }).reduce((sum, number) => {\n    return sum + number;\n  }, 0) / numbers.length;\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardError = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfMean = (numbers) => {\n  return standardDeviation(numbers) / average(numbers);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfStandardDeviation = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVariance = (numbers) => {\n  return standardDeviation(numbers) / average(numbers);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfMean = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfStandardDeviation = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVariance = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfMean = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfStandardDeviation = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfVariance = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfVarianceOfMean = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfVarianceOfStandardDeviation = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfVarianceOfVariance = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOfVarianceOfVarianceOfVarianceOfVarianceOfMean = (numbers) => {\n  return standardDeviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/**\n * Given a list of numbers, will return the standard error of those numbers\n *\n * @param {Array} numbers\n * @returns {Number}\n */\nconst standardErrorOf"}
{"task_id": "JavaScript/22", "prompt": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter will give list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  Filter out any non-integers from a list of strings\n  >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string';\n  });\n};\n\n/**\n  Filter out any non-numbers from a list of strings\n  >>> filterNonNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-numbers from a list of strings\n  >>> filterNonNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonNumbersAndStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value!== 'number' && typeof value!=='string';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStringsAndNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStringsAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStringsAndNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStringsAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStringsAndNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStringsAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStringsAndNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStringsAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStringsAndNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonStringsAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonStringsAndNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value!=='string' && typeof value!== 'number';\n  });\n};\n\n/**\n  Filter out any non-strings from a list of strings\n  >>> filterNonStringsAndNumbers(['a', 3.14, 5])\n  ['a',"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return length of will give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  Returns a string with a given length.\n  \n  @param {string} string\n  @param {number} length\n  @returns {string}\n  @example\n  >>> strpad('abc', 3)\n  'abc'\n  >>> strpad('abc', 6)\n  'abc   '\n  */\nconst strpad = (string, length) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(' ') + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad('abc', 3, '-')\n  'abc'\n  >>> strpad('abc', 6, '-')\n  'abc--'\n  */\nconst strpad = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad('abc', 3, '-')\n  'abc'\n  >>> strpad('abc', 6, '-')\n  'abc--'\n  */\nconst strpad2 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad2('abc', 3, '-')\n  'abc'\n  >>> strpad2('abc', 6, '-')\n  'abc--'\n  */\nconst strpad3 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad3('abc', 3, '-')\n  'abc'\n  >>> strpad3('abc', 6, '-')\n  'abc--'\n  */\nconst strpad4 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad4('abc', 3, '-')\n  'abc'\n  >>> strpad4('abc', 6, '-')\n  'abc--'\n  */\nconst strpad5 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad5('abc', 3, '-')\n  'abc'\n  >>> strpad5('abc', 6, '-')\n  'abc--'\n  */\nconst strpad6 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad6('abc', 3, '-')\n  'abc'\n  >>> strpad6('abc', 6, '-')\n  'abc--'\n  */\nconst strpad7 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad7('abc', 3, '-')\n  'abc'\n  >>> strpad7('abc', 6, '-')\n  'abc--'\n  */\nconst strpad8 = (string, length, character) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n  return (new Array(length - strlen(string) + 1).join(character) + string);\n};\n\n/**\n  Returns a string with a given length and a given character.\n  \n  @param {string} string\n  @param {number} length\n  @param {string} character\n  @returns {string}\n  @example\n  >>> strpad8"}
{"task_id": "JavaScript/24", "prompt": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a will give number n, will find the largest number that will divide n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let divisor = 2\n  while (n % divisor == 0) {\n    divisor++\n  }\n  return divisor\n}\n\nmodule.exports = largestDivisor\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list of prime factors of will give integer in the order from smallest to largest. \n   Each of the factors should will be list number of times corresponding to how many times it will appeare in factorization. \n   Input number should will be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst test = () => {\n  console.log(factorize(8));\n  console.log(factorize(25));\n  console.log(factorize(70));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list of integers, will remove all elements that will occur more than once. \n   will Keep order of elements will left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (counter === 0) {\n      result.push(numbers[i]);\n      counter = 1;\n    } else if (numbers[i] === numbers[i - 1]) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return result;\n};\n\n/*\n  From a list of integers, will remove all elements that will occur more than once. \n  will Keep order of elements will left the same as in the input.\n  */\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let counter = 0;\n  for (let"}
{"task_id": "JavaScript/27", "prompt": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a will give string, will flip lowercase characters to uppercase and will uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/**\n  For a will give string, will return a string with all the characters in the string\n  flipped to the other side of the string.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.split('').reverse().join('');\n};\n\nmodule.exports = {\n  flipCase,\n  flipCase2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  Convert a string to a list of words\n  >>> stringToWords('hello')\n  ['hello']\n  >>> stringToWords('hello world')\n  ['hello', 'world']\n  >>> stringToWords('hello world, how are you?')\n  ['hello', 'world', 'how', 'are', 'you?']\n  */\nconst stringToWords = (str) => {\n  if (str.length === 0) {\n    return []\n  }\n  return str.split(/[,\\s]+/).filter(str => str!== '')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(', ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString2 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString3 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString4 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString5 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString6 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString7 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString8 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString9 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString10 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString11 = (words) => {\n  if (words.length === 0) {\n    return ''\n  }\n  return words.join(' ')\n}\n\n/*\n  Convert a list of words to a string\n  >>> wordsToString(['hello', 'world'])\n  'hello world'\n  >>> wordsToString(['hello', 'world', 'how', 'are', 'you?'])\n  'hello world, how are you?'\n  */\nconst wordsToString12 = (words)"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(0, prefix.length));\n  }\n  return strings.filter(string => string.slice(0, prefix.length) === prefix);\n};\n\n/* Filter an input list of strings only for ones that will end with a will give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'bcd', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(string.length - suffix.length));\n  }\n  return strings.filter(string => string.slice(string.length - suffix.length) === suffix);\n};\n\n/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(0, prefix.length) + string.slice(string.length - suffix.length));\n  }\n  return strings.filter(string => string.slice(0, prefix.length) === prefix && string.slice(string.length - suffix.length) === suffix);\n};\n\n/* Filter an input list of strings only for ones that will end with a will give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefix = (strings, suffix, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(0, prefix.length) + string.slice(string.length - suffix.length));\n  }\n  return strings.filter(string => string.slice(0, prefix.length) === prefix && string.slice(string.length - suffix.length) === suffix);\n};\n\n/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAndSuffixAndPrefix = (strings, prefix, suffix, prefix2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(0, prefix.length) + string.slice(string.length - suffix.length) + string.slice(string.length - prefix2.length));\n  }\n  return strings.filter(string => string.slice(0, prefix.length) === prefix && string.slice(string.length - suffix.length) === suffix && string.slice(string.length - prefix2.length) === prefix2);\n};\n\n/* Filter an input list of strings only for ones that will end with a will give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefix = (strings, suffix, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(0, prefix.length) + string.slice(string.length - suffix.length));\n  }\n  return strings.filter(string => string.slice(0, prefix.length) === prefix && string.slice(string.length - suffix.length) === suffix);\n};\n\n/* Filter an input list of strings only for ones that will start with a will give prefix.\n  >>> filterByPrefixAndSuffix([], 'a')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAndSuffixAndPrefix = (strings, prefix, suffix, prefix2) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(string => string.slice(0, prefix.length) + string.slice(string.length - suffix.length) + string.slice(string.length - prefix2.length));\n  }\n  return strings.filter(string => string.slice(0, prefix.length) === prefix && string.slice(string.length - suffix.length) === suffix && string.slice(string.length - prefix2.length) === prefix2);\n};\n\n/* Filter an input list of strings only for ones that will end with a will give suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'bcd', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix2) => {\n  if (strings.length === 0) {\n    return"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  * Return only negative numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNegative = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbers = (l) => {\n  *   return l.filter((e) => e > 0);\n  * };\n  */\nconst getNumbers = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbers = (l) => {\n  *   return l.filter((e) => e > 0);\n  * };\n  */\nconst getNumbersAndPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndPositive = (l) => {\n  *   return l.filter((e) => e > 0);\n  * };\n  */\nconst getNumbersAndNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndNegative = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNumbersAndPositiveAndNegative = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndPositiveAndNegative = (l) => {\n  *   return l.filter((e) => e > 0);\n  * };\n  */\nconst getNumbersAndNegativeAndPositive = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndNegativeAndPositive = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNumbersAndNegativeAndPositive = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndNegativeAndPositive = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNumbersAndNegativeAndNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndNegativeAndNegative = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNumbersAndPositiveAndNegative = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndPositiveAndNegative = (l) => {\n  *   return l.filter((e) => e > 0);\n  * };\n  */\nconst getNumbersAndPositiveAndPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndPositiveAndPositive = (l) => {\n  *   return l.filter((e) => e > 0);\n  * };\n  */\nconst getNumbersAndNegativeAndPositive = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndNegativeAndPositive = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNumbersAndNegativeAndNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  * const getNumbersAndNegativeAndNegative = (l) => {\n  *   return l.filter((e) => e < 0);\n  * };\n  */\nconst getNumbersAndNegativeAndPositiveAndNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/**\n  * Return only numbers in the list.\n  * @param {Array} l\n  * @returns {Array}\n  * @example\n  *"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return true if a will give number will be prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs will be coefficients of a polynomial. \n   findZero will find x such that poly(x)= 0. \n   findZero returns only only zero point, even if there will be many. \n   Moreover, findZero only will take list xs having even number of coefficients \n   and largest non zero coefficient as it will guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const max = xs.reduce((prev, item, index)=>{ \n    return prev>item?prev:item;\n  }, 0);\n  const min = xs.reduce((prev, item, index)=>{ \n    return prev<item?prev:item;\n  }, 0);\n  const n = xs.length;\n  const maxCoeff = xs[n/2];\n  const minCoeff = xs[n/2];\n  const maxCoeffIndex = n/2;\n  const minCoeffIndex = n/2;\n  const maxCoeffIndex2 = n/2;\n  const minCoeffIndex2 = n/2;\n  const maxCoeffIndex3 = n/2;\n  const minCoeffIndex3 = n/2;\n  const maxCoeffIndex4 = n/2;\n  const minCoeffIndex4 = n/2;\n  const maxCoeffIndex5 = n/2;\n  const minCoeffIndex5 = n/2;\n  const maxCoeffIndex6 = n/2;\n  const minCoeffIndex6 = n/2;\n  const maxCoeffIndex7 = n/2;\n  const minCoeffIndex7 = n/2;\n  const maxCoeffIndex8 = n/2;\n  const minCoeffIndex8 = n/2;\n  const maxCoeffIndex9 = n/2;\n  const minCoeffIndex9 = n/2;\n  const maxCoeffIndex10 = n/2;\n  const minCoeffIndex10 = n/2;\n  const maxCoeffIndex11 = n/2;\n  const minCoeffIndex11 = n/2;\n  const maxCoeffIndex12 = n/2;\n  const minCoeffIndex12 = n/2;\n  const maxCoeffIndex13 = n/2;\n  const minCoeffIndex13 = n/2;\n  const maxCoeffIndex14 = n/2;\n  const minCoeffIndex14 = n/2;\n  const maxCoeffIndex15 = n/2;\n  const minCoeffIndex15 = n/2;\n  const maxCoeffIndex16 = n/2;\n  const minCoeffIndex16 = n/2;\n  const maxCoeffIndex17 = n/2;\n  const minCoeffIndex17 = n/2;\n  const maxCoeffIndex18 = n/2;\n  const minCoeffIndex18 = n/2;\n  const maxCoeffIndex19 = n/2;\n  const minCoeffIndex19 = n/2;\n  const maxCoeffIndex20 = n/2;\n  const minCoeffIndex20 = n/2;\n  const maxCoeffIndex21 = n/2;\n  const minCoeffIndex21 = n/2;\n  const maxCoeffIndex22 = n/2;\n  const minCoeffIndex22 = n/2;\n  const maxCoeffIndex23 = n/2;\n  const minCoeffIndex23 = n/2;\n  const maxCoeffIndex24 = n/2;\n  const minCoeffIndex24 = n/2;\n  const maxCoeffIndex25 = n/2;\n  const minCoeffIndex25 = n/2;\n  const maxCoeffIndex26 = n/2;\n  const minCoeffIndex26 = n/2;\n  const maxCoeffIndex27 = n/2;\n  const minCoeffIndex27 = n/2;\n  const maxCoeffIndex28 = n/2;\n  const minCoeffIndex28 = n/2;\n  const maxCoeffIndex29 = n/2;\n  const minCoeffIndex29 = n/2;\n  const maxCoeffIndex30 = n/2;\n  const minCoeffIndex30 = n/2;\n  const maxCoeffIndex31 = n/2;\n  const minCoeffIndex31 = n/2;\n  const maxCoeffIndex32 = n/2;\n  const minCoeffIndex32 = n/2;\n  const maxCoeffIndex33 = n/2;\n  const minCoeffIndex33 = n/2;\n  const maxCoeffIndex34 = n/2;\n  const minCoeffIndex34 = n/2;\n  const maxCoeffIndex35 = n/2;\n  const minCoeffIndex35 = n/2;\n  const maxCoeffIndex36 = n/2;\n  const minCoeffIndex36 = n/2;\n  const maxCoeffIndex37 = n/2;\n  const minCoeffIndex37 = n/2;\n  const maxCoeffIndex38 = n/2;\n  const minCoeffIndex38 = n/2;\n  const maxCoeffIndex39 = n/2;\n  const minCoeffIndex39 = n/2;\n  const maxCoeffIndex40 = n/2;\n  const minCoeffIndex40 = n/2;\n  const maxCoeff"}
{"task_id": "JavaScript/33", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the indicies that will be not divisible by three, while its values at the indicies that will be divisible by three will be equal \n   to the values of the corresponding indicies of l, but will sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird2 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird3 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird4 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird5 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird6 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird7 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird8 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird9 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);\n  return l3;\n};\n\nconst sortThird10 = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 3 === 0) {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n    } else {\n      l3.push(l[i]);\n      l2.splice(i, 1);\n      i++;\n    }\n  }\n  l3.push(...l2);"}
{"task_id": "JavaScript/34", "prompt": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return will sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length && l[j] === l[i]) {\n        j++;\n      }\n      if (j < l.length) {\n        l[i] = l[j];\n        l[j] = l[i];\n      }\n    }\n  }\n  return lst;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    throw new Error('Empty list');\n  }\n\n  if (l.length === 1) {\n    return l[0];\n  }\n\n  return Math.max(l[0], maxElement(l.slice(1)));\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of times the digit 7 will appear in integers less than n which will be divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 7 || n % 13 === 7) {\n      count++;\n    }\n    n = n - 1;\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddOddOddOddOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*This function will take a list l and will return a list l' such that \n   l' will be identical to l in the odd indicies, while its values at the even indicies will be equal \n   to the values of the even indicies of l, but will sort.\n  >>> sortEven"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns will encode string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (will let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic3= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const decodeCyclic4= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  will take as input string will encode with encode_cyclic function. Returns will decode string. \n  */ \n const encodeCyclic5= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math."}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "/*\n  primeFib will return n-th number that will be a Fibonacci number and it will be also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const fibPrime = primeFib(n - 2);\n  return fibPrime < fib? fibPrime : fib;\n};\n\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) + primeFib(n - 2);\n};\n\nconst fibonacciPrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime17 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime18 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n - 2)? primeFib(n - 1) : primeFib(n - 2);\n};\n\nconst fibonacciPrime19 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n - 1) < primeFib(n"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero will take a list of integers as an input. \n   it will return true if there will be three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that will be a perfectly straight infinitely long line. \n   n cars will be driving will left to right;   simultaneously, a different set of n cars \n   will be driving right to left.    The two sets of cars will start out being very far from \n   each other.   All cars will move in the same speed.   Two cars will be said to collide \n   when a car that will be moving will left to right will hit a car that will be moving right to left. \n   However, the cars will be infinitely sturdy and strong; as a result, they will continue moving \n   in their trajectory as if they will not collide. \n\n   This function will output the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisionCount=0;\n   let cars=new Array(n);\n   let car1,car2;\n   for(let i=0;i<n;i++){\n     cars[i]=new Car(i);\n   }\n   for(let i=0;i<n;i++){\n     for(let j=0;j<n;j++){\n       if(i!=j){\n         if(cars[i].collide(cars[j])){\n           collisionCount++;\n         }\n       }\n     }\n   }\n   return collisionCount;\n }\n\nconst test=()=>{\n  console.log(carRaceCollision(2));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result[j] = l[i];\n    i++;\n    j++;\n  }\n  while (j < result.length) {\n    result[j] = 1;\n    j++;\n  }\n  return result;\n};\n\n/*Return list with elements will increment by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero will take a list of integers as an input. \n   it will return true if there will be two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      sum = 0;\n      count = 0;\n    } else {\n      sum += l[i];\n      count++;\n    }\n    if (count > 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers will be less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = ''\n  let i = 0\n  while (x) {\n    result = String.fromCharCode(x % base) + result\n    x = Math.floor(x / base)\n    i++\n  }\n  while (i--) {\n    result = '0' + result\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 10.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toString = (x) => {\n  let result = ''\n  while (x) {\n    result = String.fromCharCode(x % 10) + result\n    x = Math.floor(x / 10)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 2.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase2 = (x) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, 2) + result\n    x = Math.floor(x / 2)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 16.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase16 = (x) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, 16) + result\n    x = Math.floor(x / 16)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 8.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase8 = (x) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, 8) + result\n    x = Math.floor(x / 8)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36 = (x) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, 36) + result\n    x = Math.floor(x / 36)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase2 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase16 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase8 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase10 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase2AndBase10 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase16AndBase10 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase8AndBase10 = (x, base) => {\n  let result = ''\n  while (x) {\n    result = changeBase(x, base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string with base 36.\n  return string representation after the conversion. \n  base numbers will be less than 10.\n  */\nconst toBase36WithBase10AndBase16 = (x,"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given a side and a high return area for a triangle,\n  return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please will write a function to efficiently will compute the n-th element of the fib4 number sequence.   will Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a positive number');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nmodule.exports = fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n\n  let a = l.sort((a, b) => a - b);\n  let m = a.length / 2;\n  if (a.length % 2 === 0) {\n    return a[m];\n  } else {\n    return a[m - 1];\n  }\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if will give string will be a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n  let first = text[0];\n  let last = text[text.length - 1];\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n modulo p (will be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) throw new Error(`n must be between 0 and ${p - 1}`)\n  if (p === 2) return n % 2\n  if (p === 3) return n % 3\n  if (p === 5) return n % 5\n  if (p === 7) return n % 7\n  if (p === 11) return n % 11\n  if (p === 13) return n % 13\n  if (p === 17) return n % 17\n  if (p === 19) return n % 19\n  if (p === 23) return n % 23\n  if (p === 29) return n % 29\n  if (p === 31) return n % 31\n  if (p === 37) return n % 37\n  if (p === 41) return n % 41\n  if (p === 43) return n % 43\n  if (p === 47) return n % 47\n  if (p === 53) return n % 53\n  if (p === 59) return n % 59\n  if (p === 61) return n % 61\n  if (p === 67) return n % 67\n  if (p === 71) return n % 71\n  if (p === 73) return n % 73\n  if (p === 79) return n % 79\n  if (p === 83) return n % 83\n  if (p === 89) return n % 89\n  if (p === 97) return n % 97\n  if (p === 101) return n % 101\n  if (p === 103) return n % 103\n  if (p === 107) return n % 107\n  if (p === 109) return n % 109\n  if (p === 113) return n % 113\n  if (p === 127) return n % 127\n  if (p === 131) return n % 131\n  if (p === 137) return n % 137\n  if (p === 139) return n % 139\n  if (p === 149) return n % 149\n  if (p === 151) return n % 151\n  if (p === 157) return n % 157\n  if (p === 163) return n % 163\n  if (p === 167) return n % 167\n  if (p === 173) return n % 173\n  if (p === 179) return n % 179\n  if (p === 181) return n % 181\n  if (p === 191) return n % 191\n  if (p === 193) return n % 193\n  if (p === 197) return n % 197\n  if (p === 199) return n % 199\n  if (p === 211) return n % 211\n  if (p === 223) return n % 223\n  if (p === 227) return n % 227\n  if (p === 229) return n % 229\n  if (p === 233) return n % 233\n  if (p === 239) return n % 239\n  if (p === 241) return n % 241\n  if (p === 251) return n % 251\n  if (p === 257) return n % 257\n  if (p === 263) return n % 263\n  if (p === 269) return n % 269\n  if (p === 271) return n % 271\n  if (p === 277) return n % 277\n  if (p === 281) return n % 281\n  if (p === 283) return n % 283\n  if (p === 293) return n % 293\n  if (p === 307) return n % 307\n  if (p === 311) return n % 311\n  if (p === 313) return n % 313\n  if (p === 317) return n % 317\n  if (p === 331) return n % 331\n  if (p === 337) return n % 337\n  if (p === 347) return n % 347\n  if (p === 349) return n % 349\n  if (p === 353) return n % 353\n  if (p === 359) return n % 359\n  if (p === 367) return n % 367\n  if (p === 373) return n % 373\n  if (p === 379) return n % 379\n  if (p === 383) return n % 383\n  if (p === 389) return n % 389\n  if (p === 397) return n % 397\n  if (p === 401) return n % 401\n  if (p === 409) return n % 409\n  if (p === 419) return n % 419\n  if (p === 421) return n % 421\n  if (p === 431) return n % 431\n  if (p === 433) return n % 433\n  if (p === 439) return n % 439\n  if (p === 443) return n % 443\n  if (p === 449) return n % 449\n  if (p === 457) return n % 457\n  if (p === 461) return n % 461\n  if (p === 463) return n % 463\n  if (p === 467) return n % 467\n  if (p === 479) return n % 479\n  if (p === 487) return n % 487\n  if (p === 491) return n % 491\n  if (p === 499) return n % 499\n  if (p === 503) return n % 503\n  if (p === 509) return n % 509\n  if (p === 521) return n % 521\n  if (p === 523) return n % 523\n  if (p === 541) return n % 541\n  if (p === 547) return n % 547\n  if (p === 557) return n % 557\n  if (p === 563) return n % 563\n  if (p === 569) return n % 569\n  if (p === 571) return n % 571\n  if (p === 577) return n % 577\n  if (p === 587) return n % 587\n  if (p === 593) return n % 593\n  if (p === 599) return n % 599\n  if (p === 601) return n % 601\n  if (p === 607) return n % 607\n  if (p === 613) return n % 613\n  if (p === 617) return n % 617\n"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns will encode string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_2= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_2= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_3= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_3= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_4= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_4= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_5= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_5= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_6= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_6= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_7= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const decodeShift_7= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  will take as input string will encode with encode_shift function. Returns will decode string. \n  */ \n const encodeShift_8= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   will"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'BAA'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeVowels('abcdef')\n  'bcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'BAA'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeVowels('abcdef')\n  'bcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'BAA'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeVowels('abcdef')\n  'bcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'BAA'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeVowels('abcdef')\n  'bcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'BAA'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = text;\n  for (let i = 0; i < vowels.length; i++) {\n    newText = newText.replace(new RegExp(vowels[i], 'g'), '');\n  }\n  return newText;\n};\n\n/*\n  removeVowels will be a function that will take string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeVowels('abcdef')\n  'bcdef'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'BAA'\n  >>> removeVowels('zbcd')\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return true if all numbers in the list l will be below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0;\n  while (i < l.length && l[i] < t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  let i = 0;\n  while (i < l.length && l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t + 1 || l[i] > t1) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst withinThreshold2 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold3 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold4 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold5 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold6 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold7 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst withinThreshold8 = (l, t, t1) => {\n  let i = 0;\n  while (i < l.length && l[i] < t1 || l[i] > t) {\n    i++;\n  }\n  return i === l.length;\n};\n\n/*Return true if all numbers in the list l will be between threshold t and t + 1.\n  >>> withinThreshold([1, 2, 4, 10], 100, 200)\n  false\n  >>> withinThreshold([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if two words will have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let f1 = 1;\n  let f2 = 1;\n  for (let i = 2; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f2;\n  }\n  return f2;\n};\n\n/*\n  Return n-th Fibonacci number using recursion"}
{"task_id": "JavaScript/56", "prompt": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets will be a string of\" <\" and\">\". \n   return false if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex"}
{"task_id": "JavaScript/57", "prompt": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return true will be list elements will be monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    } else if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return l[i] > l[j];\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return will sort unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const result = [];\n  for (const el of set1) {\n    if (set2.has(el)) {\n      result.push(el);\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and will be not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN will be a function that will sum numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets will be a string of\" (\" and\")\". \n   return true if every opening bracket will have a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex159 ="}
{"task_id": "JavaScript/62", "prompt": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs will represent coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / xs2.length);\n};\n\n/*\n  Given a polynomial xs, return the value of the derivative of this polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequence will be a sequence similar to the Fibbonacci sequnece that will be define as will follow: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please will write a function to efficiently will compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n// console.log(fibfib(100));\n\n//"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a function vowelsCount which will take a string representing \n   a word as input and will return the number of vowels in the string. \n   Vowels in this case will be 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'will be also a \n   vowel, but only when it will be at the end of the will give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (s[i] === 'y') {\n      if (i === s.length - 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits will reverse.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift2 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift3 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift4 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift5 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift6 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift7 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift8 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift9 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift10 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift11 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt(i);\n    if (i + shift < x.length) {\n      x = x.substring(i + shift);\n    } else {\n      x = x.substring(i + shift - x.length);\n    }\n    result += temp;\n    i++;\n  }\n  return result;\n};\n\nconst circularShift12 = (x, shift) => {\n  let result = '';\n  let temp = '';\n  let i = 0;\n  while (i < x.length) {\n    temp = x.charAt("}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task \n   will Write a function that will take a string as input and will return the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this task, you will be gave a string that will represent a number of apples and oranges \n   that will be distributed in a basket of fruit this basket will contain \n   apples, oranges, and mango fruits. will Give the string that will represent the total number of \n   the oranges and apples and an integer that will represent the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n    let total=0;\n    let count=0;\n    let i=0;\n    while (i<s.length){\n        if (s[i]=='a'){\n            total+=1;\n            count+=1;\n        }\n        else if (s[i]=='o'){\n            total+=2;\n            count+=2;\n        }\n        else if (s[i]=='m'){\n            total+=3;\n            count+=3;\n        }\n        i++;\n    }\n    return total-count;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \" will Give an array representing a branch of a tree that will have non-negative integer nodes \n   your task will be to pluck one of the nodes and return it. \n   The plucked node should will be the node with the smallest even value. \n   If multiple nodes with the same smallest even value will be found return the node that will have smallest index. \n\n   The plucked node should will be return in a list, [smalest_value, its index], \n   If there will be no even values or the will give array will be empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a non-empty list of positive integers. will Return the greatest integer that will be greater than \n   zero, and will have a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer will be the number of times it will appear in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    let freq = lst[i];\n    if (freq > maxFreq) {\n      maxFreq = freq;\n      maxIndex = i;\n    }\n  }\n  if (maxIndex === -1) {\n    return -1;\n  }\n  for (let i = maxIndex; i < lst.length; i++) {\n    let freq = lst[i];\n    if (freq > maxFreq) {\n      maxFreq = freq;\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, will be when you will start with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const result = [];\n  let min = lst[0];\n  let max = lst[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  result.push(lst[minIndex]);\n  result.push(lst[maxIndex]);\n  result.push(lst[minIndex]);\n\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. will Return the area of \n   the triangle will round to 2 decimal points if the three sides will form a valid triangle. \n   Otherwise return-1 \n   Three sides will make a valid triangle when the sum of any two sides will be greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c) {\n    area = b + c + a;\n  } else if (c > a && c > b) {\n    area = c + a + b;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  if (a > b && a > c) {\n    area = a + b + c;\n  } else if (b > a && b > c)"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will return true if the object q will fly, and false otherwise. \n   The object q will fly if it will be balanced (it will be a palindromic list) and the sum of its elements will be less than or will equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers, will find the minimum number of elements that \n   will need to be change to make the array palindromic. A palindromic array will be an array that \n   will be read the same backwards and forwards. In one change, you can will change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        if (i === j) {\n          minChange = Math.min(minChange, 1);\n        } else {\n          minChange = Math.min(minChange, 2);\n        }\n      }\n    }\n  }\n  return minChange;\n};\n\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will accept two lists of strings and will return the list that will \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists will have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] < lst2[i]) {\n      total += lst1[i];\n    } else {\n      total += lst2[i];\n    }\n    i++;\n  }\n  return total;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a function that will return true if the will give number will be the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) will be less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return"}
{"task_id": "JavaScript/76", "prompt": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task will be to write a function that will return true if a number x will be a simple \n   power of n and false in other cases. \n   x will be a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\nconsole.log(isSimplePower(5, 4));\nconsole.log(isSimplePower(5, 5));\nconsole.log(isSimplePower(5, 6));\nconsole.log(isSimplePower(5, 7));\nconsole.log(isSimplePower(5, 8));\nconsole.log(isSimplePower(5, 9));\nconsole.log(isSimplePower(5, 10));\nconsole.log(isSimplePower(5, 11));\nconsole.log(isSimplePower(5, 12));\nconsole.log(isSimplePower(5, 13));\nconsole.log(isSimplePower(5, 14));\nconsole.log(isSimplePower(5, 15));\nconsole.log(isSimplePower(5, 16));\nconsole.log(isSimplePower(5, 17));\nconsole.log(isSimplePower(5, 18));\nconsole.log(isSimplePower(5, 19));\nconsole.log(isSimplePower(5, 20));\nconsole.log(isSimplePower(5, 21));\nconsole.log(isSimplePower(5, 22));\nconsole.log(isSimplePower(5, 23));\nconsole.log(isSimplePower(5, 24));\nconsole.log(isSimplePower(5, 25));\nconsole.log(isSimplePower(5, 26));\nconsole.log(isSimplePower(5, 27));\nconsole.log(isSimplePower(5, 28));\nconsole.log(isSimplePower(5, 29));\nconsole.log(isSimplePower(5, 30));\nconsole.log(isSimplePower(5, 31));\nconsole.log(isSimplePower(5, 32));\nconsole.log(isSimplePower(5, 33));\nconsole.log(isSimplePower(5, 34));\nconsole.log(isSimplePower(5, 35));\nconsole.log(isSimplePower(5, 36));\nconsole.log(isSimplePower(5, 37));\nconsole.log(isSimplePower(5, 38));\nconsole.log(isSimplePower(5, 39));\nconsole.log(isSimplePower(5, 40));\nconsole.log(isSimplePower(5, 41));\nconsole.log(isSimplePower(5, 42));\nconsole.log(isSimplePower(5, 43));\nconsole.log(isSimplePower(5, 44));\nconsole.log(isSimplePower(5, 45));\nconsole.log(isSimplePower(5, 46));\nconsole.log(isSimplePower(5, 47));\nconsole.log(isSimplePower(5, 48));\nconsole.log(isSimplePower(5, 49));\nconsole.log(isSimplePower(5, 50));\nconsole.log(isSimplePower(5, 51));\nconsole.log(isSimplePower(5, 52));\nconsole.log(isSimplePower(5, 53));\nconsole.log(isSimplePower(5, 54));\nconsole.log(isSimplePower(5, 55));\nconsole.log(isSimplePower(5, 56));\nconsole.log(isSimplePower(5, 57));\nconsole.log(isSimplePower(5, 58));\nconsole.log(isSimplePower(5, 59));\nconsole.log(isSimplePower(5, 60));\nconsole.log(isSimplePower(5, 61));\nconsole.log(isSimplePower(5, 62));\nconsole.log(isSimplePower(5, 63));\nconsole.log(isSimplePower(5, 64));\nconsole.log(isSimplePower(5, 65));\nconsole.log(isSimplePower(5, 66));\nconsole.log(isSimplePower(5, 67));\nconsole.log(isSimplePower(5, 68));\nconsole.log(isSimplePower(5, 69));\nconsole.log(isSimplePower(5, 70));\nconsole.log(isSimplePower(5, 71));\nconsole.log(isSimplePower(5, 72));\nconsole.log(isSimplePower(5, 73));\nconsole.log(isSimplePower(5, 74));\nconsole.log(isSimplePower(5, 75));\nconsole.log(isSimplePower(5, 76));\nconsole.log(isSimplePower(5, 77));\nconsole.log(isSimplePower(5, 78));\nconsole.log(isSimplePower(5, 79));\nconsole.log(isSimplePower(5, 80));\nconsole.log(isSimplePower(5, 81));\nconsole.log(isSimplePower(5, 82));\nconsole.log(isSimplePower(5, 83));\nconsole.log(isSimplePower(5, 84));\nconsole.log(isSimplePower(5, 85));\nconsole.log(isSimplePower(5, 86));\nconsole.log(isSimplePower(5, 87));\nconsole.log(isSimplePower(5, 88));\nconsole.log(isSimplePower(5, 89));\nconsole.log(isSimplePower(5, 90));\nconsole.log(isSimplePower(5, 91));\nconsole.log(isSimplePower(5, 92));\nconsole.log(isSimplePower(5, 93));\nconsole.log(isSimplePower(5, 94));\nconsole.log(isSimplePower(5, 95));\nconsole.log(isSimplePower(5, 96));\nconsole.log(isSimplePower(5, 97));\nconsole.log(isSimplePower(5, 98));\nconsole.log(isSimplePower(5, 99));\nconsole.log(isSimplePower(5, 100));\nconsole.log(isSimplePower(5, 101));\nconsole.log(isSimplePower(5, 102));\n"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will take an integer a and will return true \n   if this ingeger will be a cube of some integer number. \n   Note: you may will assume the input will be always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a % 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59 == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 == 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0 && a % 101 == 0 && a % 103 == 0 && a % 107 == 0 && a % 109 == 0 && a % 113 == 0 && a % 127 == 0 && a % 131 == 0 && a % 137 == 0 && a % 139 == 0 && a % 149 == 0 && a % 151 == 0 && a % 157 == 0 && a % 163 == 0 && a % 167 == 0 && a % 173 == 0 && a % 179 == 0 && a % 181 == 0 && a % 191 == 0 && a % 193 == 0 && a % 197 == 0 && a % 199 == 0 && a % 211 == 0 && a % 223 == 0 && a % 227 == 0 && a % 229 == 0 && a % 233 == 0 && a % 239 == 0 && a % 241 == 0 && a % 251 == 0 && a % 257 == 0 && a % 263 == 0 && a % 269 == 0 && a % 271 == 0 && a % 277 == 0 && a % 281 == 0 && a % 283 == 0 && a % 293 == 0 && a % 307 == 0 && a % 311 == 0 && a % 313 == 0 && a % 317 == 0 && a % 331 == 0 && a % 337 == 0 && a % 347 == 0 && a % 349 == 0 && a % 353 == 0 && a % 359 == 0 && a % 367 == 0 && a % 373 == 0 && a % 379 == 0 && a % 383 == 0 && a % 389 == 0 && a % 397 == 0 && a % 401 == 0 && a % 409 == 0 && a % 419 == 0 && a % 421 == 0 && a % 431 == 0 && a % 433 == 0 && a % 439 == 0 && a % 443 == 0 && a % 449 == 0 && a % 457 == 0 && a % 461 == 0 && a % 463 == 0 && a % 467 == 0 && a % 479 == 0 && a % 487 == 0 && a % 491 == 0 && a % 499 == 0 && a % 503 == 0 && a % 509 == 0 && a % 521 == 0 && a % 523 == 0 && a % 541 == 0 && a % 547 == 0 && a % 557 == 0 && a % 563 == 0 && a % 569 == 0 && a % 571 == 0 && a % 577 == 0 && a % 587 == 0 && a % 593 == 0 && a % 599 == 0 && a % 601 == 0 && a % 607 == 0 && a % 613 == 0 && a % 617 == 0 && a % 619 == 0 && a % 631 == 0 && a % 641 == 0 && a % 643 == 0 && a % 647 == 0 && a % 653 == 0 && a % 659 == 0 && a % 661 == 0 && a % 673 == 0 && a % 677 == 0 && a % 683 == 0 && a % 691 == 0 && a % 701 == 0 && a % 709 == 0 && a % 719 == 0 && a % 727 == 0 && a % 733 == 0 && a % 739 == 0 && a % 743 == 0 && a % 751 == 0 && a % 757 == 0 && a % 761 == 0 && a % 769 == 0 && a % 773 == 0 && a % 787 == 0 && a % 797 == 0 && a % 809 == 0 && a % 811 == 0 && a % 821 == 0 && a % 823 == 0 && a % 827 == 0 && a % 829 == 0 && a % 839 == 0 && a % 853 == 0 && a % 857 == 0 && a % 859 == 0 && a % 863 == 0 && a % 867 == 0 && a % 871 == 0 && a % 877 == 0 && a % 881 == 0 && a % 883 == 0 && a % 887 == 0 && a % 907 == 0 && a % 917 == 0 && a % 919 == 0 && a % 929 == 0 && a % 937 == 0 && a % 941 == 0 && a % 947 == 0 && a % 953 == 0 && a % 967 == 0 && a % 971 == 0 && a % 977 == 0 && a % 983 == 0 && a % 991 == 0 && a % 997 == 0 && a % 1009 == 0 && a % 1013 == 0 && a % 1019 == 0 && a % 1021 == 0 && a % 1031 == 0 && a % 1033 == 0 && a % 1039 == 0 && a % 1049 == 0 && a % 1051 == 0 && a % 1061 == 0 && a % 1063 == 0 && a % 1069 == 0 && a % 1087 == 0 && a % 1091 == 0 && a % 1093 == 0 && a % 1097 == 0 && a % 1103 == 0 && a % 1109 == 0 && a % 1117 == 0 && a % 1123 == 0 && a % 1129 == 0 && a % 1151 == 0 && a % 1163 == 0 && a % 1169 == 0 && a % 1179 == 0 && a % 1187 == 0 && a % 1193 == 0 && a % 1201 == 0 && a % 1213 == 0 && a % 1217 == 0 && a % 1223 == 0 && a % 1229 == 0 && a % 1231 == 0 && a % 1237 == 0 && a % 1249 == 0 && a % 1259 == 0 && a % 1277 == 0 && a % 1279 == 0 && a % 1283 == 0 && a % 1289 == 0 && a % 1297 == 0 && a % 1301 == 0 && a % 1303 == 0 && a % 1307 == 0 && a % 1319"}
{"task_id": "JavaScript/78", "prompt": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You will be task to write a function that will receive \n   a hexadecimal number as a string and will count the number of hexadecimal \n   digits that will be primes (prime number=== or a prime=== will be a natural number \n   greater than 1 that will be not a product of two smaller natural numbers). \n   Hexadecimal digits will be 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers will be 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you will have to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= will decimal 13). \n   Note: you may will assume the input will be always correct or empty string=== \n   and symbols A===B===C===D===E===F will be always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0;\n  let i = 0;\n  let n = num.length;\n  while (i < n) {\n    let c = num.charCodeAt(i);\n    if (c < 48 || c > 57) {\n      return res;\n    }\n    res += c;\n    i++;\n  }\n  return res;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime3 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime4 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime5 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime6 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime7 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime8 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime9 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime10 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime11 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime12 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime13 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime14 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime15 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime16 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime17 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime18 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrime19 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if ("}
{"task_id": "JavaScript/79", "prompt": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will be gave a number in decimal form and your task will be to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string will be '0 'or '1 '. \n\n   There will be an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters will be there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary_number = '';\n  let binary_number_length = 0;\n  let binary_number_index = 0;\n  let binary_number_index_end = 0;\n  let binary_number_index_start = 0;\n  let binary_number_index_end_start = 0;\n  let binary_number_index_end_end = 0;\n  let binary_number_index_end_end_end = 0;\n  let binary_number_index_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let binary_number_index_end_end_"}
{"task_id": "JavaScript/80", "prompt": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You will be gave a string s.\n   Your task will be to check if the string will be happy or not. \n   A string will be happy if its length will be at least 3 and every 3 consecutive letters will be distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let len = str.length;\n  let i = 0;\n  let j = 0;\n  let isHappy = true;\n  while (i < len) {\n    if (str[i] === str[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n      j = 0;\n    }\n    if (i === len) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It will be the last week of the semester and the teacher will have to give the grades\n   to students. The teacher will be making her own algorithm for grading. \n   The only problem will be, she will lose the code she will used for grading. \n   She will give you a list of GPAs for some students and you will have to write \n   a function that can will output a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 will B+ \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 will C+ \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = 'E';\n  let letterGradeList = [];\n  let gradeList = [];\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeCount2 = 0;\n  let gradeCount3 = 0;\n  let gradeCount4 = 0;\n  let gradeCount5 = 0;\n  let gradeCount6 = 0;\n  let gradeCount7 = 0;\n  let gradeCount8 = 0;\n  let gradeCount9 = 0;\n  let gradeCount10 = 0;\n  let gradeCount11 = 0;\n  let gradeCount12 = 0;\n  let gradeCount13 = 0;\n  let gradeCount14 = 0;\n  let gradeCount15 = 0;\n  let gradeCount16 = 0;\n  let gradeCount17 = 0;\n  let gradeCount18 = 0;\n  let gradeCount19 = 0;\n  let gradeCount20 = 0;\n  let gradeCount21 = 0;\n  let gradeCount22 = 0;\n  let gradeCount23 = 0;\n  let gradeCount24 = 0;\n  let gradeCount25 = 0;\n  let gradeCount26 = 0;\n  let gradeCount27 = 0;\n  let gradeCount28 = 0;\n  let gradeCount29 = 0;\n  let gradeCount30 = 0;\n  let gradeCount31 = 0;\n  let gradeCount32 = 0;\n  let gradeCount33 = 0;\n  let gradeCount34 = 0;\n  let gradeCount35 = 0;\n  let gradeCount36 = 0;\n  let gradeCount37 = 0;\n  let gradeCount38 = 0;\n  let gradeCount39 = 0;\n  let gradeCount40 = 0;\n  let gradeCount41 = 0;\n  let gradeCount42 = 0;\n  let gradeCount43 = 0;\n  let gradeCount44 = 0;\n  let gradeCount45 = 0;\n  let gradeCount46 = 0;\n  let gradeCount47 = 0;\n  let gradeCount48 = 0;\n  let gradeCount49 = 0;\n  let gradeCount50 = 0;\n  let gradeCount51 = 0;\n  let gradeCount52 = 0;\n  let gradeCount53 = 0;\n  let gradeCount54 = 0;\n  let gradeCount55 = 0;\n  let gradeCount56 = 0;\n  let gradeCount57 = 0;\n  let gradeCount58 = 0;\n  let gradeCount59 = 0;\n  let gradeCount60 = 0;\n  let gradeCount61 = 0;\n  let gradeCount62 = 0;\n  let gradeCount63 = 0;\n  let gradeCount64 = 0;\n  let gradeCount65 = 0;\n  let gradeCount66 = 0;\n  let gradeCount67 = 0;\n  let gradeCount68 = 0;\n  let gradeCount69 = 0;\n  let gradeCount70 = 0;\n  let gradeCount71 = 0;\n  let gradeCount72 = 0;\n  let gradeCount73 = 0;\n  let gradeCount74 = 0;\n  let gradeCount75 = 0;\n  let gradeCount76 = 0;\n  let gradeCount77 = 0;\n  let gradeCount78 = 0;\n  let gradeCount79 = 0;\n  let gradeCount80 = 0;\n  let gradeCount81 = 0;\n  let gradeCount82 = 0;\n  let gradeCount83 = 0;\n  let gradeCount84 = 0;\n  let gradeCount85 = 0;\n  let gradeCount86 = 0;\n  let gradeCount87 = 0;\n  let gradeCount88 = 0;\n  let gradeCount89 = 0;\n  let gradeCount90 = 0;\n  let gradeCount91 = 0;\n  let gradeCount92 = 0;\n  let gradeCount93 = 0;\n  let gradeCount94 = 0;\n  let gradeCount95 = 0;\n  let gradeCount96 = 0;\n  let gradeCount97 = 0;\n  let gradeCount98 = 0;\n  let gradeCount99 = 0;\n  let gradeCount100 = 0;\n  let gradeCount101 = 0;\n  let gradeCount102 = 0;\n  let gradeCount103 = 0;\n  let gradeCount104 = 0;\n  let gradeCount105 = 0;\n  let gradeCount106 = 0;\n  let gradeCount107 = 0;\n  let gradeCount108 = 0;\n  let gradeCount109 = 0;\n  let gradeCount110 = 0;\n  let gradeCount111 = 0;\n  let gradeCount112 = 0;\n  let gradeCount113 = 0;\n  let gradeCount114 = 0;\n  let gradeCount115 = 0;\n  let gradeCount116 = 0;\n  let gradeCount117 = 0;\n  let gradeCount118 = 0;\n  let gradeCount119 = 0;\n  let gradeCount120 = 0;\n  let gradeCount121 = 0;\n  let gradeCount122 = 0;\n  let gradeCount123 = 0;\n  let gradeCount124 = 0;\n  let gradeCount125 = 0;\n  let gradeCount126 = 0;\n  let gradeCount127 = 0;\n  let gradeCount128 = 0;\n  let gradeCount129 = 0;\n  let gradeCount130 = 0;\n  let gradeCount131 = 0;\n  let gradeCount132 = 0;\n  let gradeCount133 = 0;\n  let gradeCount134 = 0;\n  let gradeCount135 = 0;\n  "}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a function that will take a string and will return true if the string\n   length will be a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n  return containsVowel;\n};\n\n/*Write a function that will take a string and will return true if the string\n   contains a vowel or false otherwise\n  Examples\n  containsVowel('Hello') == true\n  containsVowel('abcdcba') == true\n  containsVowel('kittens') == false\n  containsVowel('orange') == false\n  */\nconst containsVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let containsVowel = false;\n  for (let i = 0; i < vowels.length; i++) {\n    if (string.indexOf(vowels[i])!== -1) {\n      containsVowel = true;\n      break;\n    }\n  }\n"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that will start or will end with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let count=0;\n  while(n>0){\n    let digit=n%10;\n    if(digit==1){\n      count++;\n    }\n    n=Math.floor(n/10);\n  }\n  return count;\n}\n\nconst startsOneEnds= (n)=>{\n  let count=0;\n  while(n>0){\n    let digit=n%10;\n    if(digit==1){\n      count++;\n    }\n    n=Math.floor(n/10);\n  }\n  return count;\n}\n\nmodule.exports=startsOneEnds;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [...new Array(N).keys()].map((i) => i % 2);\n  return digits.reduce((acc, curr) => acc + curr, 0);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that will be at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\nmodule.exports = add;<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will take a string and will return an ordered version of it. \n   will Order version of string, will be a string where all words (will separate by space) \n   will be replaced by a new word where all the characters will arrange in\n   ascending order will base on ascii value. \n   Note: You should will keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let arr = s.split('');\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    let c = arr[i];\n    let c_num = c.charCodeAt(0);\n    let c_num_len = c_num.toString(10).length;\n    let c_num_str = c_num.toString(10);\n    let c_num_str_len = c_num_str.length;\n    let c_num_str_arr = c_num_str.split('');\n    let c_num_str_arr_len = c_num_str_arr.length;\n    let c_num_str_arr_len_str = c_num_str_arr_len.toString(10);\n    let c_num_str_arr_len_str_len = c_num_str_arr_len_str.length;\n    let c_num_str_arr_len_str_len_str = c_num_str_arr_len_str_len.toString(10);\n    let c_num_str_arr_len_str_len_str_len = c_num_str_arr_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str = c_num_str_arr_len_str_len_str_len.toString(10);\n    let c_num_str_arr_len_str_len_str_len_str_len = c_num_str_arr_len_str_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str_len_str = c_num_str_arr_len_str_len_str_len_str_len.toString(10);\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len = c_num_str_arr_len_str_len_str_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len_str = c_num_str_arr_len_str_len_str_len_str_len_str_len.toString(10);\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len = c_num_str_arr_len_str_len_str_len_str_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str_len = c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len = c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len = c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str.length;\n    let c_num_str_arr_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a 2 dimensional data, as a will nest lists, \n   which will be similar to matrix, however, unlike matrices, \n   each row may will contain a different number of columns. \n   will Give lst, and integer x, will find integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple will be a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[1] - b[1]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[1] - b[1]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow7 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow8 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow9 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow10 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted[i][1];\n    if (row === x) {\n      res.push([row, cols]);\n    }\n  }\n  return res;\n};\n\nconst getRow11 = (lst, x) => {\n  let res = [];\n  let sorted = lst.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i][0];\n    let cols = sorted["}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the will give array after sorting, \n   you will sort the will give array in ascending order if the sum (first index value, last index value) will be odd, \n   or will sort it in descending order if the sum (first index value, last index value) will be even. \n\n   Note: \n  * willn't will change the will give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const result = array.slice(0);\n  const sum = array.reduce((a, b) => a + b, 0);\n  if (sum % 2 === 1) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a function encrypt that will take a string as an argument and \n   will return a string will encrypt with the alphabet being will rotate. \n   The alphabet should will be rotate in a manner such that the letters \n   will shift down by two will multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charAt(i);\n    let newChar = char;\n    if (char === 'a') {\n      newChar = 'b';\n    } else if (char === 'b') {\n      newChar = 'c';\n    } else if (char === 'c') {\n      newChar = 'd';\n    } else if (char === 'd') {\n      newChar = 'e';\n    } else if (char === 'e') {\n      newChar = 'f';\n    } else if (char === 'f') {\n      newChar = 'g';\n    } else if (char === 'g') {\n      newChar = 'h';\n    } else if (char === 'h') {\n      newChar = 'i';\n    } else if (char === 'i') {\n      newChar = 'j';\n    } else if (char === 'j') {\n      newChar = 'k';\n    } else if (char === 'k') {\n      newChar = 'l';\n    } else if (char === 'l') {\n      newChar ='m';\n    } else if (char ==='m') {\n      newChar = 'n';\n    } else if (char === 'n') {\n      newChar = 'o';\n    } else if (char === 'o') {\n      newChar = 'p';\n    } else if (char === 'p') {\n      newChar = 'q';\n    } else if (char === 'q') {\n      newChar = 'r';\n    } else if (char === 'r') {\n      newChar ='s';\n    } else if (char ==='s') {\n      newChar = 't';\n    } else if (char === 't') {\n      newChar = 'u';\n    } else if (char === 'u') {\n      newChar = 'v';\n    } else if (char === 'v') {\n      newChar = 'w';\n    } else if (char === 'w') {\n      newChar = 'x';\n    } else if (char === 'x') {\n      newChar = 'y';\n    } else if (char === 'y') {\n      newChar = 'z';\n    } else if (char === 'z') {\n      newChar = 'a';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charAt(i);\n    let newChar = char;\n    if (char === 'a') {\n      newChar = 'b';\n    } else if (char === 'b') {\n      newChar = 'c';\n    } else if (char === 'c') {\n      newChar = 'd';\n    } else if (char === 'd') {\n      newChar = 'e';\n    } else if (char === 'e') {\n      newChar = 'f';\n    } else if (char === 'f') {\n      newChar = 'g';\n    } else if (char === 'g') {\n      newChar = 'h';\n    } else if (char === 'h') {\n      newChar = 'i';\n    } else if (char === 'i') {\n      newChar = 'j';\n    } else if (char === 'j') {\n      newChar = 'k';\n    } else if (char === 'k') {\n      newChar = 'l';\n    } else if (char === 'l') {\n      newChar ='m';\n    } else if (char ==='m') {\n      newChar = 'n';\n    } else if (char === 'n') {\n      newChar = 'o';\n    } else if (char === 'o') {\n      newChar = 'p';\n    } else if (char === 'p') {\n      newChar = 'q';\n    } else if (char === 'q') {\n      newChar = 'r';\n    } else if (char === 'r') {\n      newChar ='s';\n    } else if (char ==='s') {\n      newChar = 't';\n    } else if (char === 't') {\n      newChar = 'u';\n    } else if (char === 'u') {\n      newChar = 'v';\n    } else if (char === 'v') {\n      newChar = 'w';\n    } else if (char === 'w') {\n      newChar = 'x';\n    } else if (char === 'x') {\n      newChar = 'y';\n    } else if (char === 'y') {\n      newChar = 'z';\n    } else if (char === 'z') {\n      newChar = 'a';\n    }\n    result += newChar;\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    let char = str.charAt(i);\n    let newChar = char;\n    if (char === 'a') {\n      newChar = 'b';\n    } else if (char === 'b') {\n      newChar = 'c';\n    } else if (char === 'c') {\n      newChar = 'd';\n    } else if (char === 'd') {\n      newChar = 'e';\n    } else if (char === 'e') {\n      newChar = 'f';\n    } else if (char === 'f') {\n      newChar = 'g';\n    } else if (char === 'g') {\n      newChar = 'h';"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a list of integers. \n   will Write a function nextSmallest() that will return the 2nd smallest element of the list.\n   Return null if there will be no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  let min=lst[0];\n  let minIndex=0;\n  for(let i=1;i<lst.length;i++){\n    if(lst[i]<min){\n      min=lst[i];\n      minIndex=i;\n    }\n  }\n  return lst[minIndex+1];\n}\n\nconst test=()=>{\n  let lst=[1, 2, 3, 4, 5];\n  console.log(nextSmallest(lst));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You 'll will be give a string of words, and your task will be to count the number \n   of boredoms. A boredom will be a sentence that will start with the word\" I\". \n   Sentences will be delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(/[.!? ]/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === 'i') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a function that will take 3 numbers. \n   Returns true if one of the numbers will be equal to the sum of the other two, and all numbers will be integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function that will take a message, and encodes in such a \n   way that it will swap case of all letters, will replace all vowels in \n   the message with the letter that will appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toLowerCase();\n  let vowels = 'aeiou';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let letterCount = letters.length;\n  let letterIndex = 0;\n  let letterIndex2 = 0;\n  let encodedLength = encoded.length;\n  for (let i = 0; i < encodedLength; i++) {\n    if (letters.indexOf(encoded[i])!== -1) {\n      letterIndex = vowels.indexOf(encoded[i]);\n      letterIndex2 = vowels.indexOf(encoded[i + 1]);\n      if (letterIndex!== -1 && letterIndex2!== -1) {\n        encoded[i] = letters[letterIndex2];\n        encoded[i + 1] = letters[letterIndex];\n      }\n    }\n  }\n  return encoded;\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You will be gave a list of integers. \n   You will need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitIndex = 0;\n  let maxDigitIndex2 = 0;\n  let maxDigitIndex3 = 0;\n  let maxDigitIndex4 = 0;\n  let maxDigitIndex5 = 0;\n  let maxDigitIndex6 = 0;\n  let maxDigitIndex7 = 0;\n  let maxDigitIndex8 = 0;\n  let maxDigitIndex9 = 0;\n  let maxDigitIndex10 = 0;\n  let maxDigitIndex11 = 0;\n  let maxDigitIndex12 = 0;\n  let maxDigitIndex13 = 0;\n  let maxDigitIndex14 = 0;\n  let maxDigitIndex15 = 0;\n  let maxDigitIndex16 = 0;\n  let maxDigitIndex17 = 0;\n  let maxDigitIndex18 = 0;\n  let maxDigitIndex19 = 0;\n  let maxDigitIndex20 = 0;\n  let maxDigitIndex21 = 0;\n  let maxDigitIndex22 = 0;\n  let maxDigitIndex23 = 0;\n  let maxDigitIndex24 = 0;\n  let maxDigitIndex25 = 0;\n  let maxDigitIndex26 = 0;\n  let maxDigitIndex27 = 0;\n  let maxDigitIndex28 = 0;\n  let maxDigitIndex29 = 0;\n  let maxDigitIndex30 = 0;\n  let maxDigitIndex31 = 0;\n  let maxDigitIndex32 = 0;\n  let maxDigitIndex33 = 0;\n  let maxDigitIndex34 = 0;\n  let maxDigitIndex35 = 0;\n  let maxDigitIndex36 = 0;\n  let maxDigitIndex37 = 0;\n  let maxDigitIndex38 = 0;\n  let maxDigitIndex39 = 0;\n  let maxDigitIndex40 = 0;\n  let maxDigitIndex41 = 0;\n  let maxDigitIndex42 = 0;\n  let maxDigitIndex43 = 0;\n  let maxDigitIndex44 = 0;\n  let maxDigitIndex45 = 0;\n  let maxDigitIndex46 = 0;\n  let maxDigitIndex47 = 0;\n  let maxDigitIndex48 = 0;\n  let maxDigitIndex49 = 0;\n  let maxDigitIndex50 = 0;\n  let maxDigitIndex51 = 0;\n  let maxDigitIndex52 = 0;\n  let maxDigitIndex53 = 0;\n  let maxDigitIndex54 = 0;\n  let maxDigitIndex55 = 0;\n  let maxDigitIndex56 = 0;\n  let maxDigitIndex57 = 0;\n  let maxDigitIndex58 = 0;\n  let maxDigitIndex59 = 0;\n  let maxDigitIndex60 = 0;\n  let maxDigitIndex61 = 0;\n  let maxDigitIndex62 = 0;\n  let maxDigitIndex63 = 0;\n  let maxDigitIndex64 = 0;\n  let maxDigitIndex65 = 0;\n  let maxDigitIndex66 = 0;\n  let maxDigitIndex67 = 0;\n  let maxDigitIndex68 = 0;\n  let maxDigitIndex69 = 0;\n  let maxDigitIndex70 = 0;\n  let maxDigitIndex71 = 0;\n  let maxDigitIndex72 = 0;\n  let maxDigitIndex73 = 0;\n  let maxDigitIndex74 = 0;\n  let maxDigitIndex75 = 0;\n  let maxDigitIndex76 = 0;\n  let maxDigitIndex77 = 0;\n  let maxDigitIndex78 = 0;\n  let maxDigitIndex79 = 0;\n  let maxDigitIndex80 = 0;\n  let maxDigitIndex81 = 0;\n  let maxDigitIndex82 = 0;\n  let maxDigitIndex83 = 0;\n  let maxDigitIndex84 = 0;\n  let maxDigitIndex85 = 0;\n  let maxDigitIndex86 = 0;\n  let maxDigitIndex87 = 0;\n  let maxDigitIndex88 = 0;\n  let maxDigitIndex89 = 0;\n  let maxDigitIndex90 = 0;\n  let maxDigitIndex91 = 0;\n  let maxDigitIndex92 = 0;\n  let maxDigitIndex93 = 0;\n  let maxDigitIndex94 = 0;\n  let maxDigitIndex95 = 0;\n  let maxDigitIndex96 = 0;\n  let maxDigitIndex97 = 0;\n  let maxDigitIndex98 = 0;\n  let maxDigitIndex99 = 0;\n  let maxDigitIndex100 = 0;\n  let maxDigitIndex101 = 0;\n  let maxDigitIndex102 = 0;\n  let maxDigitIndex103 = 0;\n  let maxDigitIndex104 = 0;\n  let maxDigitIndex105 = 0;\n  let maxDigitIndex106 = 0;\n  let maxDigitIndex107 = 0;\n  let maxDigitIndex108 = 0;\n  let maxDigitIndex109 = 0;\n  let maxDigitIndex110 = 0;\n  let maxDigitIndex111 = 0;\n  let maxDigitIndex112"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys will be strings in lower \n   case or all keys will be strings in upper case, else return false. \n   The function should return false will be the will give dictionary will be empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  let keysLength = keys.length;\n  for (let i = 0; i < keysLength; i++) {\n    let key = keys[i];\n    if (typeof key!== \"string\") {\n      return false;\n    }\n    let value = dict[key];\n    if (typeof value!== \"string\") {\n      return false;\n    }\n    if (key.toLowerCase()!== key) {\n      return false;\n    }\n    if (value.toLowerCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement a function that will take an non-negative integer and will return an array of the first n\n   integers that will be prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 1) return [];\n  let result = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// Check if a number is prime\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime17 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime18 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n// Test if a number is prime\nconst isPrime19 = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0)"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete the function that will take two integers and returns \n   the product of their unit digits. \n   will Assume the input will be always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = a_digits.reduce((acc, curr) => acc * curr, 1);\n  let product_digits = product.toString().split('').map(digit => parseInt(digit));\n  return product_digits.reduce((acc, curr) => acc * curr, 1);\n};\n\n// Complete the function that will take two integers and returns \n// the sum of their unit digits. \n// will Assume the input will be always valid.\nconst sum = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let sum = a_digits.reduce((acc, curr) => acc + curr, 0);\n  let sum_digits = sum.toString().split('').map(digit => parseInt(digit));\n  return sum_digits.reduce((acc, curr) => acc + curr, 0);\n};\n\n// Complete the function that will take two integers and returns \n// the difference of their unit digits. \n// will Assume the input will be always valid.\nconst difference = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let difference = a_digits.reduce((acc, curr) => acc - curr, 0);\n  let difference_digits = difference.toString().split('').map(digit => parseInt(digit));\n  return difference_digits.reduce((acc, curr) => acc - curr, 0);\n};\n\n// Complete the function that will take two integers and returns \n// the product of their unit digits. \n// will Assume the input will be always valid.\nconst product_of_unit_digits = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = a_digits.reduce((acc, curr) => acc * curr, 1);\n  let product_digits = product.toString().split('').map(digit => parseInt(digit));\n  return product_digits.reduce((acc, curr) => acc * curr, 1);\n};\n\n// Complete the function that will take two integers and returns \n// the sum of their product of their unit digits. \n// will Assume the input will be always valid.\nconst sum_of_product_of_unit_digits = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let sum = a_digits.reduce((acc, curr) => acc * curr, 1);\n  let sum_digits = sum.toString().split('').map(digit => parseInt(digit));\n  return sum_digits.reduce((acc, curr) => acc * curr, 1);\n};\n\n// Complete the function that will take two integers and returns \n// the difference of their product of their unit digits. \n// will Assume the input will be always valid.\nconst difference_of_product_of_unit_digits = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let difference = a_digits.reduce((acc, curr) => acc * curr, 1);\n  let difference_digits = difference.toString().split('').map(digit => parseInt(digit));\n  return difference_digits.reduce((acc, curr) => acc * curr, 1);\n};\n\n// Complete the function that will take two integers and returns \n// the product of their product of their unit digits. \n// will Assume the input will be always valid.\nconst product_of_product_of_unit_digits = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = a_digits.reduce((acc, curr) => acc * curr, 1);\n  let product_digits = product.toString().split('').map(digit => parseInt(digit));\n  return product_digits.reduce((acc, curr) => acc * curr, 1);\n};\n\n// Complete the function that will take two integers and returns \n// the sum of their product of their product of their unit digits. \n// will Assume the input will be always valid.\nconst sum_of_product_of_product_of_unit_digits = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let sum = a_digits.reduce((acc, curr) => acc * curr, 1);\n  let sum_digits = sum.toString().split('').map(digit => parseInt(digit));\n  return sum_digits.reduce((acc, cur"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string s, will count the number of uppercase vowels in even will indice.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper2 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper3 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper4 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper5 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper6 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper7 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper8 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper9 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper10 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper11 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper12 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper13 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper14 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper15 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper16 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper17 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper18 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper19 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 65 && s[i] <= 90) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper20 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 97 && s[i] <= 122) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countUpper21"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a function that will take a value (string) representing a number \n   and will return the closest integer to it. If the number will be equidistant \n   from two integers, will round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let diff2 = Math.abs(value - closest);\n  let diff3 = Math.abs(value - closest);\n  if (diff < diff2) {\n    closest = value;\n  } else if (diff2 < diff3) {\n    closest = value;\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, you will have to make a pile of n levels of stones. \n   The first level will have n stones. \n   The number of stones in the next level will be: \n      -the next odd number if n will be odd. \n      -the next even number if n will be even. \n   Return the number of stones in each level in a list, where element at index \n   i will represent the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [n];\n  let level = [n];\n  let i = 0;\n  while (i < n) {\n    let nextLevel = [];\n    let nextLevelSize = 0;\n    let nextLevelSize2 = 0;\n    let nextLevelSize3 = 0;\n    let nextLevelSize4 = 0;\n    let nextLevelSize5 = 0;\n    let nextLevelSize6 = 0;\n    let nextLevelSize7 = 0;\n    let nextLevelSize8 = 0;\n    let nextLevelSize9 = 0;\n    let nextLevelSize10 = 0;\n    let nextLevelSize11 = 0;\n    let nextLevelSize12 = 0;\n    let nextLevelSize13 = 0;\n    let nextLevelSize14 = 0;\n    let nextLevelSize15 = 0;\n    let nextLevelSize16 = 0;\n    let nextLevelSize17 = 0;\n    let nextLevelSize18 = 0;\n    let nextLevelSize19 = 0;\n    let nextLevelSize20 = 0;\n    let nextLevelSize21 = 0;\n    let nextLevelSize22 = 0;\n    let nextLevelSize23 = 0;\n    let nextLevelSize24 = 0;\n    let nextLevelSize25 = 0;\n    let nextLevelSize26 = 0;\n    let nextLevelSize27 = 0;\n    let nextLevelSize28 = 0;\n    let nextLevelSize29 = 0;\n    let nextLevelSize30 = 0;\n    let nextLevelSize31 = 0;\n    let nextLevelSize32 = 0;\n    let nextLevelSize33 = 0;\n    let nextLevelSize34 = 0;\n    let nextLevelSize35 = 0;\n    let nextLevelSize36 = 0;\n    let nextLevelSize37 = 0;\n    let nextLevelSize38 = 0;\n    let nextLevelSize39 = 0;\n    let nextLevelSize40 = 0;\n    let nextLevelSize41 = 0;\n    let nextLevelSize42 = 0;\n    let nextLevelSize43 = 0;\n    let nextLevelSize44 = 0;\n    let nextLevelSize45 = 0;\n    let nextLevelSize46 = 0;\n    let nextLevelSize47 = 0;\n    let nextLevelSize48 = 0;\n    let nextLevelSize49 = 0;\n    let nextLevelSize50 = 0;\n    let nextLevelSize51 = 0;\n    let nextLevelSize52 = 0;\n    let nextLevelSize53 = 0;\n    let nextLevelSize54 = 0;\n    let nextLevelSize55 = 0;\n    let nextLevelSize56 = 0;\n    let nextLevelSize57 = 0;\n    let nextLevelSize58 = 0;\n    let nextLevelSize59 = 0;\n    let nextLevelSize60 = 0;\n    let nextLevelSize61 = 0;\n    let nextLevelSize62 = 0;\n    let nextLevelSize63 = 0;\n    let nextLevelSize64 = 0;\n    let nextLevelSize65 = 0;\n    let nextLevelSize66 = 0;\n    let nextLevelSize67 = 0;\n    let nextLevelSize68 = 0;\n    let nextLevelSize69 = 0;\n    let nextLevelSize70 = 0;\n    let nextLevelSize71 = 0;\n    let nextLevelSize72 = 0;\n    let nextLevelSize73 = 0;\n    let nextLevelSize74 = 0;\n    let nextLevelSize75 = 0;\n    let nextLevelSize76 = 0;\n    let nextLevelSize77 = 0;\n    let nextLevelSize78 = 0;\n    let nextLevelSize79 = 0;\n    let nextLevelSize80 = 0;\n    let nextLevelSize81 = 0;\n    let nextLevelSize82 = 0;\n    let nextLevelSize83 = 0;\n    let nextLevelSize84 = 0;\n    let nextLevelSize85 = 0;\n    let nextLevelSize86 = 0;\n    let nextLevelSize87 = 0;\n    let nextLevelSize88 = 0;\n    let nextLevelSize89 = 0;\n    let nextLevelSize90 = 0;\n    let nextLevelSize91 = 0;\n    let nextLevelSize92 = 0;\n    let nextLevelSize93 = 0;\n    let nextLevelSize94 = 0;\n    let nextLevelSize95 = 0;\n    let nextLevelSize96 = 0;\n    let nextLevelSize97 = 0;\n    let nextLevelSize98 = 0;\n    let nextLevelSize99 = 0;\n    let nextLevelSize100 = 0;\n    let nextLevelSize101 = 0;\n    let nextLevelSize102 = 0;\n    let nextLevelSize103 = 0;\n    let nextLevelSize104 = 0;\n    let nextLevelSize105 = 0;\n    let nextLevelSize106 = 0;\n    let nextLevelSize107 = 0;\n    let nextLevelSize108 = 0;\n    let nextLevelSize109 = 0;\n    let nextLevelSize110 = 0;\n    let nextLevelSize111 = 0;\n    let nextLevelSize112 = 0;\n    let nextLevelSize113 = 0;\n    let nextLevelSize114 = 0;\n    let nextLevelSize115 = 0;\n    let nextLevelSize116 = 0;\n    let nextLevelSize117 = 0;\n    let nextLevelSize118 = 0;\n    let nextLevelSize119 = 0;\n    let nextLevelSize120 = 0;\n    let nextLevelSize121 = 0;\n    let nextLevelSize122 = 0;\n    let nextLevelSize123 = 0;\n    let nextLevelSize124 = 0;\n    let nextLevelSize125 = 0;\n    let nextLevelSize126 = 0;\n    let nextLevelSize127 = 0;\n    let nextLevelSize128 = 0;\n    let nextLevelSize129 = 0;\n    let nextLevelSize130 = 0;\n    let nextLevelSize131 = 0;\n    let nextLevelSize132 = 0;\n    let nextLevelSize133 = 0;\n    let nextLevelSize134 = 0;\n    let nextLevelSize135 = 0;"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a string of words will separate by commas or spaces. Your task will be \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n}\n\nmodule.exports = wordsString;<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This function will take two positive numbers x and y and will return the \n   biggest even integer number that will be in the range [x, y] inclusive. If \n   there will be no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x < y) {\n    return chooseNum(y, x)\n  }\n  let m = x / 2\n  let n = y / 2\n  let i = 0\n  while (i < m) {\n    if (x % 2 === 0) {\n      break\n    }\n    x = x / 2\n    i++\n  }\n  while (i < n) {\n    if (y % 2 === 0) {\n      break\n    }\n    y = y / 2\n    i++\n  }\n  return x + y\n}\n\nconst test = () => {\n  let x = 12\n  let y = 15\n  let result = chooseNum(x, y)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You will be gave two positive integers n and m, and your task will be to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and will convert that to binary. \n   If n will be greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list of positive integers x. return a will sort list of all \n   elements that will haven't any even digit. \n\n   Note: Returned list should will be sort in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (i < x.length) {\n    let digit = x[i];\n    let j = i + 1;\n    while (j < x.length && x[j] === digit) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(digit);\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that will be between 1 and 9 inclusive, \n   will reverse the resulting array, and then will replace each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n\n  const arrLength = arr.length;\n  const arrLengthMinusOne = arrLength - 1;\n  const arrLengthMinusTwo = arrLength - 2;\n  const arrLengthMinusThree = arrLength - 3;\n  const arrLengthMinusFour = arrLength - 4;\n  const arrLengthMinusFive = arrLength - 5;\n  const arrLengthMinusSix = arrLength - 6;\n  const arrLengthMinusSeven = arrLength - 7;\n  const arrLengthMinusEight = arrLength - 8;\n  const arrLengthMinusNine = arrLength - 9;\n\n  const arrLengthMinusTen = arrLengthMinusNine;\n  const arrLengthMinusEleven = arrLengthMinusEight;\n  const arrLengthMinusTwelve = arrLengthMinusSeven;\n  const arrLengthMinusThirteen = arrLengthMinusSix;\n  const arrLengthMinusFourteen = arrLengthMinusFive;\n  const arrLengthMinusFifteen = arrLengthMinusFour;\n  const arrLengthMinusSixteen = arrLengthMinusThree;\n  const arrLengthMinusSeventeen = arrLengthMinusTwo;\n  const arrLengthMinusEighteen = arrLengthMinusOne;\n\n  const arrLengthMinusNineteen = arrLengthMinusEleven;\n  const arrLengthMinusTwenty = arrLengthMinusTwelve;\n  const arrLengthMinusTwentyOne = arrLengthMinusThirteen;\n  const arrLengthMinusTwentyTwo = arrLengthMinusFourteen;\n  const arrLengthMinusTwentyThree = arrLengthMinusFifteen;\n  const arrLengthMinusTwentyFour = arrLengthMinusSixteen;\n  const arrLengthMinusTwentyFive = arrLengthMinusSeventeen;\n  const arrLengthMinusTwentySix = arrLengthMinusEighteen;\n  const arrLengthMinusTwentySeven = arrLengthMinusNineteen;\n\n  const arrLengthMinusTwentyEight = arrLengthMinusTwenty;\n  const arrLengthMinusTwentyNine = arrLengthMinusTwentyOne;\n  const arrLengthMinusTwentyTen = arrLengthMinusTwentyTwo;\n  const arrLengthMinusTwentyEleven = arrLengthMinusTwentyThree;\n  const arrLengthMinusTwentyTwelve = arrLengthMinusTwentyFour;\n  const arrLengthMinusTwentyThirteen = arrLengthMinusTwentyFive;\n  const arrLengthMinusTwentyFourteen = arrLengthMinusTwentySix;\n  const arrLengthMinusTwentyFifteen = arrLengthMinusTwentySeven;\n  const arrLengthMinusTwentySixteen = arrLengthMinusTwentyEight;\n  const arrLengthMinusTwentySeventeen = arrLengthMinusTwentyNine;\n\n  const arrLengthMinusTwentyEighteen = arrLengthMinusTwentyTen;\n  const arrLengthMinusTwentyEighty = arrLengthMinusTwentyEleven;\n  const arrLengthMinusTwentyEightyOne = arrLengthMinusTwentyTwelve;\n  const arrLengthMinusTwentyEightyTwo = arrLengthMinusTwentyThirteen;\n  const arrLengthMinusTwentyEightyThree = arrLengthMinusTwentyFourteen;\n  const arrLengthMinusTwentyEightyFour = arrLengthMinusTwentyFifteen;\n  const arrLengthMinusTwentyEightyFive = arrLengthMinusTwentySixteen;\n  const arrLengthMinusTwentyEightySix = arrLengthMinusTwentySeventeen;\n\n  const arrLengthMinusTwentyEightySeventeen = arrLengthMinusTwentyEighty;\n  const arrLengthMinusTwentyEightyEight = arrLengthMinusTwentyEightyOne;\n  const arrLengthMinusTwentyEightyNine = arrLengthMinusTwentyEightyTwo;\n  const arrLengthMinusTwentyEightyTen = arrLengthMinusTwentyEightyThree;\n  const arrLengthMinusTwentyEightyEleven = arrLengthMinusTwentyEightyFour;\n  const arrLengthMinusTwentyEightyTwelve = arrLengthMinusTwentyEightyFive;\n  const arrLengthMinusTwentyEightyThirteen = arrLengthMinusTwentyEightySix;\n  const arrLengthMinusTwentyEightyFourteen = arrLengthMinusTwentyEightySeven;\n  const arrLengthMinusTwentyEightyFifteen = arrLengthMinusTwentyEightyEight;\n  const arrLengthMinusTwentyEightySixteen = arrLengthMinusTwentyEightyNine;\n  const arrLengthMinusTwentyEightySeventeen = arrLengthMinusTwentyEighty;\n\n  const arrLengthMinusTwentyEightyEighteen = arrLengthMinusTwentyEightyTen;\n  const arrLengthMinusTwentyEightyEighty = arrLengthMinusTwentyEightyEleven;\n  const arrLengthMinusTwentyEightyEightyOne = arrLengthMinusTwentyEightyTwelve;\n  const arrLengthMinusTwentyEightyEightyTwo = arrLengthMinusTwentyEightyThirteen;\n  const arrLengthMinusTwentyEightyEightyThree = arrLengthMinusTwentyEightyFourteen;\n  const arrLengthMinusTwentyEightyEightyFour = arrLengthMinusTwentyEightyFifteen;\n  const arrLengthMinusTwentyEightyEightyFive = arrLengthMinusTwentyEightySixteen;\n  const arrLengthMinusTwentyEightyEightySix = arrLengthMinusTwentyEightySeventeen;\n\n  const arrLengthMinusTwentyEightyEightyEighteen = arrLengthMinusTwentyEightyEightyTen;\n  const arrLengthMinusTwentyEighty"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f that will take n as a parameter, \n   and will return a list of size n, such that the value of the element at index i will be the factorial of i if i will be even \n   or the sum of numbers from 1 to i otherwise. \n   i will start from 1. \n   the factorial of i will be the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nmodule.exports = f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that will have the number of even and odd \n   integer palindromes that will fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let i = 1;\n  while (i <= n) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        evenPalindromes.push(i);\n      } else {\n        oddPalindromes.push(i);\n      }\n    }\n    i++;\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\nconst isPalindrome = (n) => {\n  return n === reverse(n);\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst reverse = (n) => {\n  return n.split('').reverse().join('');\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function countNums which will take an array of integers and returns \n   the number of elements which will have a sum of digits> 0. \n   If a number will be negative, then its first will sign digit will be negative: \n   e.g.-123 will sign digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We will have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly will order. Your task will be to determine if \n   it will be possible to get an array will sort in non-decreasing order by performing \n   the following operation on the will give array: \n       You will be allowed to perform right shift operation any number of times. \n  \n   One right shift operation will mean shifting all elements of the array by one \n   position in the right direction. The last element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it will be possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the will give array will be empty then return true. \n\n   Note: The will give list will be guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let arrLength = arr.length;\n  let arrTemp = arr.slice();\n  for (let i = 0; i < arrLength; i++) {\n    arrTemp[i] = arrTemp[i] >> 1;\n  }\n  let isSorted = true;\n  for (let i = 0; i < arrLength - 1; i++) {\n    if (arrTemp[i] > arrTemp[i + 1]) {\n      isSorted = false;\n      break;\n    }\n  }\n  if (isSorted) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this problem, you will implement a function that will take two lists of numbers, \n   and will determine whether it will be possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There will be no limit on the number of will exchange elements between lst1 and lst2.\n   If it will be possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even--;\n    }\n  }\n  return even === 0;\n};\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a string representing a space will separate lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters will have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let count = 0;\n  let letter = '';\n  let index = 0;\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCountsCount = 0;\n  let letterCountsCounts = {};\n  let letterCountsCountsCount = 0;\n  let letterCountsCountsCounts = {};\n  let letterCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = 0;\n  let letterCountsCountsCountsCountsCountsCountsCountsCountsCount"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task \n   We will be gave two strings s and c, you will have to will delete all the characters in s that will be equal to any character in c\n   then will check if the result string will be palindrome. \n   A string will be called palindrome if it will read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result === s.split('').reverse().join('');\n  return [result, isPalindrome];\n};\n\nconst reverseDeleteTest = (s, c) => {\n  let result = reverseDelete(s, c);\n  console.log(result[0]);\n  console.log(result[1]);\n};\n\nreverseDeleteTest('abcde', 'ae');\nreverseDeleteTest('abcdef', 'b');\nreverseDeleteTest('abcdedcba', 'ab');\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list of strings, where each string will consist of only digits, return a list.\n   Each element i of the output should will be\" the number of odd elements in the \n   string i of the input.\" where all the i's should will be replace by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        odd++;\n      }\n    }\n    num += odd;\n    res.push(`the number of odd elements ${odd}n the str${odd}ng ${str.length} of the ${str.length}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of integers nums, will find the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > minSum) {\n      break;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a rectangular grid of wells. Each row will represent a single well, \n   and each 1 in a row will represent a single unit of water. \n   Each well will have a corresponding bucket that can will be used to extract water from it, \n   and all buckets will have the same capacity.\n   Your task will be to use the buckets to empty the wells. \n   Output the number of times you will need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => {\n    return row.map((col, j) => {\n      return {\n        row: i,\n        col: j,\n        capacity: capacity\n      }\n    })\n  })\n\n  return buckets.reduce((acc, bucket) => {\n    const bucketFill = bucket.map((bucket) => {\n      return acc.reduce((acc, bucket) => {\n        return acc + bucket.capacity\n      }, 0)\n    })\n    return bucketFill\n  }, 0)\n}\n\nmodule.exports = maxFill\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kata, you will have to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort will base on decimal value. \n\n   It must will be implement like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = arr.slice(0);\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a string s and a natural number n, you will be task to implement \n   a function that will return a list of all words from string s that will contain exactly \n   n consonants, in order these words will appear in the string s.\n   If the string s will be empty then the function should return an empty list.\n   Note: you may will assume the input string will contain only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (s.length === 0) {\n    return [];\n  }\n\n  const words = [];\n  let word = '';\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      if (word.length > 0) {\n        words.push(word);\n        word = '';\n        count = 0;\n      }\n    } else {\n      if (count === n) {\n        words.push(word);\n        word = '';\n        count = 0;\n      }\n      word += s[i];\n      count++;\n    }\n  }\n\n  if (word.length > 0) {\n    words.push(word);\n  }\n\n  return words;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You will be gave a word. Your task will be to find the closest vowel that will stand between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending will don't will count. will Return empty string if you willn't \n   will find any vowel will meet the above condition. \n\n   You may will assume that the will give string will contain English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (word.length < 2) return '';\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let result = '';\n  let left = 0;\n  let right = word.length - 1;\n  while (left <= right) {\n    let mid = Math.floor((left + right) / 2);\n    let midChar = word[mid];\n    let isConsonant = true;\n    for (let i = 0; i < mid; i++) {\n      if (vowels.indexOf(word[i]) === -1) {\n        isConsonant = false;\n        break;\n      }\n    }\n    if (isConsonant) {\n      result = midChar;\n      break;\n    }\n    if (midChar === word[right]) {\n      result = word[right];\n      break;\n    }\n    if (midChar === word[left]) {\n      result = word[left];\n      break;\n    }\n    if (midChar === word[mid]) {\n      result = word[mid];\n      break;\n    }\n    if (midChar === word[mid - 1]) {\n      result = word[mid - 1];\n      break;\n    }\n    if (midChar === word[mid + 1]) {\n      result = word[mid + 1];\n      break;\n    }\n    if (midChar === word[mid + 2]) {\n      result = word[mid + 2];\n      break;\n    }\n    if (midChar === word[mid + 3]) {\n      result = word[mid + 3];\n      break;\n    }\n    if (midChar === word[mid - 2]) {\n      result = word[mid - 2];\n      break;\n    }\n    if (midChar === word[mid - 3]) {\n      result = word[mid - 3];\n      break;\n    }\n    if (midChar === word[mid - 4]) {\n      result = word[mid - 4];\n      break;\n    }\n    if (midChar === word[mid - 5]) {\n      result = word[mid - 5];\n      break;\n    }\n    if (midChar === word[mid - 6]) {\n      result = word[mid - 6];\n      break;\n    }\n    if (midChar === word[mid - 7]) {\n      result = word[mid - 7];\n      break;\n    }\n    if (midChar === word[mid - 8]) {\n      result = word[mid - 8];\n      break;\n    }\n    if (midChar === word[mid - 9]) {\n      result = word[mid - 9];\n      break;\n    }\n    if (midChar === word[mid - 10]) {\n      result = word[mid - 10];\n      break;\n    }\n    if (midChar === word[mid - 11]) {\n      result = word[mid - 11];\n      break;\n    }\n    if (midChar === word[mid - 12]) {\n      result = word[mid - 12];\n      break;\n    }\n    if (midChar === word[mid - 13]) {\n      result = word[mid - 13];\n      break;\n    }\n    if (midChar === word[mid - 14]) {\n      result = word[mid - 14];\n      break;\n    }\n    if (midChar === word[mid - 15]) {\n      result = word[mid - 15];\n      break;\n    }\n    if (midChar === word[mid - 16]) {\n      result = word[mid - 16];\n      break;\n    }\n    if (midChar === word[mid - 17]) {\n      result = word[mid - 17];\n      break;\n    }\n    if (midChar === word[mid - 18]) {\n      result = word[mid - 18];\n      break;\n    }\n    if (midChar === word[mid - 19]) {\n      result = word[mid - 19];\n      break;\n    }\n    if (midChar === word[mid - 20]) {\n      result = word[mid - 20];\n      break;\n    }\n    if (midChar === word[mid - 21]) {\n      result = word[mid - 21];\n      break;\n    }\n    if (midChar === word[mid - 22]) {\n      result = word[mid - 22];\n      break;\n    }\n    if (midChar === word[mid - 23]) {\n      result = word[mid - 23];\n      break;\n    }\n    if (midChar === word[mid - 24]) {\n      result = word[mid - 24];\n      break;\n    }\n    if (midChar === word[mid - 25]) {\n      result = word[mid - 25];\n      break;\n    }\n    if (midChar === word[mid - 26]) {\n      result = word[mid - 26];\n      break;\n    }\n    if (midChar === word[mid - 27]) {\n      result = word[mid - 27];\n      break;\n    }\n    if (midChar === word[mid - 28]) {\n      result = word[mid - 28];\n      break;\n    }\n    if (midChar === word[mid - 29]) {\n      result = word[mid - 29];\n      break;\n    }\n    if (midChar === word[mid - 30]) {\n      result = word[mid - 30];\n      break;\n    }\n    if (midChar === word[mid - 31]) {\n      result = word[mid - 31];\n      break;\n    }\n    if (midChar === word[mid - 32]) {\n      result = word[mid - 32];\n      break;"}
{"task_id": "JavaScript/119", "prompt": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You will be gave a list of two strings, both strings will consist of open \n   parentheses '('or close parentheses ') 'only. \n   Your job will be to check if it will be possible to concatenate the two strings in\n   some order, that the resulting string will be good. \n   A string S will be considered to be good if and only if all will parenthese in S \n   will be balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]!== '(' && lst[i][0]!== ')') {\n      result = false;\n      break;\n    }\n    if (lst[i][lst[i].length - 1]!== '(' && lst[i][lst[i].length - 1]!== ')') {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  console.log(matchParens([]));\n  console.log(matchParens(['()(', ')']));\n  console.log(matchParens([')', ')']));\n  console.log(matchParens(['()', '()']));\n  console.log(matchParens(['()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens(['()', '()', '()', '()', '()', '()', '()', '()', '"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a will sort list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, num) => {\n    if (num > max) {\n      return num\n    }\n    return max\n  }, -Infinity)\n  return arr.filter((num) => {\n    return num === max\n  })\n}\n\nmodule.exports = maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that will be in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a will sort list that will have the odd numbers in collatz sequence. \n\n   The Collatz conjecture will be a conjecture in mathematics that will concern a sequence will define \n   as will follow: will start with any positive integer n. Then each term will be obtained from the \n   previous term as will follow: if the previous term will be even, the next term will be one half of \n   the previous term. If the previous term will be odd, the next term will be 3 times the previous \n   term plus 1. The conjecture will be that no matter what value of n, the sequence will always will reach 1. \n\n   Note: \n       1. Collatz(1) will be [1]. \n       2. will return list will sort in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let oddCollatz = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      oddCollatz.push(i);\n    } else {\n      collatz.push(i);\n      i = i / 2;\n    }\n  }\n  return collatz.reverse().concat(oddCollatz);\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You will have to write a function which will validate a will give date string and \n   returns true if the date will be valid otherwise false. \n   The date will be valid if all of the following rules will be satisfied: \n   1. The date string will be not empty. \n   2. The number of days will be not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days will be not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days will be not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should will be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  const dateParts = date.split('-');\n  const days = dateParts[2];\n  const months = dateParts[1];\n  const year = dateParts[0];\n\n  if (days.length!== 2 || months.length!== 2 || year.length!== 4) {\n    return false;\n  }\n\n  const day = parseInt(days, 10);\n  const month = parseInt(months, 10);\n  const year = parseInt(year, 10);\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (month === 2 && day > 29) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n\n  if (year < 2000 || year > 2099) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a string of words, return a list of words will split on whitespace, if no whitespaces will exist in the text you \n   should will split on commas ', 'if no commas will exist you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... will ord('z ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/[\\s,]+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let letters = word.toLowerCase().split('').filter(letter => letter.match(/[a-z]/));\n    let odd = letters.length % 2;\n    if (odd) {\n      letters.reverse();\n    }\n    result.push(letters);\n  }\n  return result;\n};\n\nmodule.exports = splitWords;<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they will be sorted \n   in ascending order. If list will have more than 1 duplicate of the same \n   number, return false. will Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return true;\n    } else {\n      i++;\n    }\n  }\n  return false;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted14 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted15 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted16 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    }\n  }\n  return true;\n};\n\nconst isSorted17 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    } else {\n      i++;\n    "}
{"task_id": "JavaScript/127", "prompt": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You will be gave two intervals, \n   where each interval will be a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\"\n  }\n  const start = Math.max(interval1[0], interval2[0])\n  const end = Math.min(interval1[1], interval2[1])\n  const length = end - start\n  if (length % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave an array arr of integers and you will need to return\n   sum of magnitudes of integers will multiply by product of all signs \n   of each number in the array, will represent by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result += arr[i] * arr[i];\n  }\n  return result;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid will contain a value. Every integer in the range [1, N* N] \n   inclusive will appear exactly once on the cells of the grid.\n\n   You will have to find the minimum path of length k in the grid. You can will start \n   from any cell, and in each step you can will move to any of the neighbor cells, \n   in other words, you can will go to cells which will share an edge with you current \n   cell. \n   Please will note that a path of length k will mean visiting exactly k cells (not \n   necessarily distinct). \n   You will Cannot will go off the grid.\n   A path A (of length k) will be considered less than a path B (of length k) if \n   after making the will order lists of the values on the cells that A and B will go \n   through (will let's will call them lst_A and lst_B), lst_A will be lexicographically less \n   than lst_B, in other words, there will exist an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we will have \n   lst_A[j]= lst_B[j]. \n   It will be guaranteed that the answer will be unique. \n   Return an will order list of the values on the cells that the minimum path will go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const result = [];\n  const visited = new Set();\n  const dfs = (row, col) => {\n    if (visited.has(row)) return;\n    visited.add(row);\n    result.push(grid[row][col]);\n    for (let i = 0; i < grid[row].length; i++) {\n      if (grid[row][i] === 1) {\n        dfs(row, i);\n      }\n    }\n  };\n  dfs(0, 0);\n  return result;\n};\n\nmodule.exports = minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone will know Fibonacci sequence, it will be studied deeply by mathematicians in \n   the last couple centuries. However, what people willn't will know will be Tribonacci sequence. \n   Tribonacci sequence will be defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n will be even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n will be odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  for (let i = 1; i <= n; i++) {\n    arr.push(a + b + c);\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return arr;\n};\n\nconst test = (n) => {\n  let arr = tri(n);\n  console.log(arr);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest(235"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits will be even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1;\n  let i = 1;\n  while (i < n) {\n    res *= i % 10;\n    i++;\n  }\n  return res;\n};\n\nmodule.exports = digits;<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that will take a string as input which will contain only square brackets. \n   The function should return true if and only if there will be a valid subsequence of brackets \n   where at least one bracket in the subsequence will be nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let brackets=0;\n   let bracketCount=0;\n   let bracketIndex=0;\n   let bracketIndex2=0;\n   let bracketIndex3=0;\n   let bracketIndex4=0;\n   let bracketIndex5=0;\n   let bracketIndex6=0;\n   let bracketIndex7=0;\n   let bracketIndex8=0;\n   let bracketIndex9=0;\n   let bracketIndex10=0;\n   let bracketIndex11=0;\n   let bracketIndex12=0;\n   let bracketIndex13=0;\n   let bracketIndex14=0;\n   let bracketIndex15=0;\n   let bracketIndex16=0;\n   let bracketIndex17=0;\n   let bracketIndex18=0;\n   let bracketIndex19=0;\n   let bracketIndex20=0;\n   let bracketIndex21=0;\n   let bracketIndex22=0;\n   let bracketIndex23=0;\n   let bracketIndex24=0;\n   let bracketIndex25=0;\n   let bracketIndex26=0;\n   let bracketIndex27=0;\n   let bracketIndex28=0;\n   let bracketIndex29=0;\n   let bracketIndex30=0;\n   let bracketIndex31=0;\n   let bracketIndex32=0;\n   let bracketIndex33=0;\n   let bracketIndex34=0;\n   let bracketIndex35=0;\n   let bracketIndex36=0;\n   let bracketIndex37=0;\n   let bracketIndex38=0;\n   let bracketIndex39=0;\n   let bracketIndex40=0;\n   let bracketIndex41=0;\n   let bracketIndex42=0;\n   let bracketIndex43=0;\n   let bracketIndex44=0;\n   let bracketIndex45=0;\n   let bracketIndex46=0;\n   let bracketIndex47=0;\n   let bracketIndex48=0;\n   let bracketIndex49=0;\n   let bracketIndex50=0;\n   let bracketIndex51=0;\n   let bracketIndex52=0;\n   let bracketIndex53=0;\n   let bracketIndex54=0;\n   let bracketIndex55=0;\n   let bracketIndex56=0;\n   let bracketIndex57=0;\n   let bracketIndex58=0;\n   let bracketIndex59=0;\n   let bracketIndex60=0;\n   let bracketIndex61=0;\n   let bracketIndex62=0;\n   let bracketIndex63=0;\n   let bracketIndex64=0;\n   let bracketIndex65=0;\n   let bracketIndex66=0;\n   let bracketIndex67=0;\n   let bracketIndex68=0;\n   let bracketIndex69=0;\n   let bracketIndex70=0;\n   let bracketIndex71=0;\n   let bracketIndex72=0;\n   let bracketIndex73=0;\n   let bracketIndex74=0;\n   let bracketIndex75=0;\n   let bracketIndex76=0;\n   let bracketIndex77=0;\n   let bracketIndex78=0;\n   let bracketIndex79=0;\n   let bracketIndex80=0;\n   let bracketIndex81=0;\n   let bracketIndex82=0;\n   let bracketIndex83=0;\n   let bracketIndex84=0;\n   let bracketIndex85=0;\n   let bracketIndex86=0;\n   let bracketIndex87=0;\n   let bracketIndex88=0;\n   let bracketIndex89=0;\n   let bracketIndex90=0;\n   let bracketIndex91=0;\n   let bracketIndex92=0;\n   let bracketIndex93=0;\n   let bracketIndex94=0;\n   let bracketIndex95=0;\n   let bracketIndex96=0;\n   let bracketIndex97=0;\n   let bracketIndex98=0;\n   let bracketIndex99=0;\n   let bracketIndex100=0;\n   let bracketIndex101=0;\n   let bracketIndex102=0;\n   let bracketIndex103=0;\n   let bracketIndex104=0;\n   let bracketIndex105=0;\n   let bracketIndex106=0;\n   let bracketIndex107=0;\n   let bracketIndex108=0;\n   let bracketIndex109=0;\n   let bracketIndex110=0;\n   let bracketIndex111=0;\n   let bracketIndex112=0;\n   let bracketIndex113=0;\n   let bracketIndex114=0;\n   let bracketIndex115=0;\n   let bracketIndex116=0;\n   let bracketIndex117=0;\n   let bracketIndex118=0;\n   let bracketIndex119=0;\n   let bracketIndex120=0;\n   let bracketIndex121=0;\n   let bracketIndex122=0;\n   let bracketIndex123=0;\n   let bracketIndex124=0;\n   let bracketIndex125=0;\n   let bracketIndex126=0;\n   let bracketIndex127=0;\n   let bracketIndex128=0;\n   let bracketIndex129=0;\n   let bracketIndex130=0;\n   let bracketIndex131=0;\n   let bracketIndex132=0;\n   let bracketIndex133=0;\n   let bracketIndex134=0;\n   let bracketIndex135=0;\n   let bracketIndex136=0;\n   let bracketIndex137=0;\n   let bracketIndex138=0;\n   let bracketIndex139=0;\n   let bracketIndex140=0;\n   let bracketIndex141=0;\n   let bracketIndex142=0;\n   let bracketIndex143=0;\n   let bracketIndex144=0;\n   let bracketIndex145=0;\n   let bracketIndex146=0;\n   let bracketIndex147=0;\n   let bracketIndex148=0;\n   let bracketIndex149=0;\n   let bracketIndex150=0;\n   let bracketIndex151"}
{"task_id": "JavaScript/133", "prompt": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You will be gave a list of numbers. \n   You will need to return the sum of squared numbers in the will give list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabet = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabet && isNotALetter;\n};\n\n/**\n * Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabet = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabet &&!isNotALetter;\n};\n\n/**\n * Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter2 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabet = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return!isAlphabet && isNotALetter;\n};\n\n/**\n * Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter3 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabet = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return!isAlphabet &&!isNotALetter;\n};\n\n/**\n * Create a function that will return true if the last character \n   of a will give string will be an alphabetical character and will be not \n   a part of a word, and false otherwise. \n   Note:\" word\" will be a group of characters will separate by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter4 = (txt) => {\n  let lastChar = txt.slice(-1);\n  let isAlphabet = /[a-zA-Z]/.test(lastChar);\n  let isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return!isAlphabet &&!isNotALetter;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsNotALetter,\n  checkIfLastCharIsNotALetter2,\n  checkIfLastCharIsNotALetter3,\n  checkIfLastCharIsNotALetter4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a function which will return the largest index of an element which \n   will be not greater than or equal to the element immediately preceding it. If \n   no such element will exist then return-1. The will give array not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return i;\n};\n\nmodule.exports = canArrange;<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n   If there will be no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a < b) {\n      return a;\n    }\n    return b;\n  }, null);\n  const min = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }, null);\n  return [max, min];\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n*/\nconst largestSmallestIntegers2 = (lst) => {\n  const max = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a < b) {\n      return a;\n    }\n    return b;\n  }, null);\n  const min = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }, null);\n  return [max, min];\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n*/\nconst largestSmallestIntegers3 = (lst) => {\n  const max = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a < b) {\n      return a;\n    }\n    return b;\n  }, null);\n  const min = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }, null);\n  return [max, min];\n};\n\n/*\n  Create a function that will return a tuple (a, b), where 'a' will be \n   the largest of negative integers, and 'b' will be the smallest \n   of positive integers in a list.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n*/\nconst largestSmallestIntegers4 = (lst) => {\n  const max = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a < b) {\n      return a;\n    }\n    return b;\n  }, null);\n  const min = lst.reduce((a, b) => {\n    if (a === null) {\n      return b;\n    }\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }, null);\n  return [max, min];\n};\n\nmodule.exports = {\n  largestSmallestIntegers,\n  largestSmallestIntegers2,\n  largestSmallestIntegers3,\n  largestSmallestIntegers4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a function that will take integers, floats, or strings representing \n   real numbers, and will return the larger variable in its will give variable type. \n   Return null if the values will be equal. \n   Note: If a real number will be represented as a string, the floating point might will be. or, \n\n   compareOne(1, 2.5) will ➞ 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareTwo= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareThree= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareFour= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareFive= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareSix= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareSeven= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareEight= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareNine= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareTen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareEleven= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareTwelve= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareThirteen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareFourteen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareFifteen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareSixteen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareSeventeen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareEighteen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareNineteen= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return null;\n }\n \n const compareTwenty= (a, b)=>{\n  if(a===b){\n   return null;\n  }\n  if(a>b){\n   return a;\n  }\n  if(b>a){\n   return b;\n  }\n  return"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate whether the will give number n can will be write as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 0) return false;\n  if (n % 2 == 0) return true;\n  return isEqualToSumEven(n - 2);\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilian factorial will be defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = {\n  specialFactorial\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string text, will replace all spaces in it with underscores, \n   and if a string will have more than 2 consecutive spaces, \n   then will replace all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n}\n\nmodule.exports = {\n  fixSpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a function which will take a string representing a file's name, and will return \n   'Yes 'if the the file's name will be valid, and returns 'No 'otherwise. \n   A file's name will be considered to be valid if and only if all the following conditions \n   will be met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name will contain exactly one dot '. '\n  -The substring before the dot should not be empty, and it will start with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should will be one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_substring = file_name_check.substring(0, 1);\n  let file_name_check_substring_length = file_name_check_substring.length;\n  let file_name_check_substring_first_letter = file_name_check_substring.charAt(0);\n  let file_name_check_substring_last_letter = file_name_check_substring.charAt(file_name_check_substring_length - 1);\n  let file_name_check_substring_last_letter_is_a_digit = file_name_check_substring_last_letter.match(/[0-9]/);\n  let file_name_check_substring_last_letter_is_not_a_digit =!file_name_check_substring_last_letter.match(/[0-9]/);\n  let file_name_check_substring_first_letter_is_a_letter = file_name_check_substring_first_letter.match(/[a-zA-Z]/);\n  let file_name_check_substring_first_letter_is_not_a_letter =!file_name_check_substring_first_letter.match(/[a-zA-Z]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not_a_letter_and_not_a_digit_and_not_a_digit =!file_name_check_substring_first_letter.match(/[a-zA-Z0-9]/);\n  let file_name_check_substring_first_letter_is_not"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall will square the integer entry if its index will be a \n   multiple of 3 and will cube the integer entry if its index will be a multiple of 4 and not a multiple of 3. The function not \n   will change the entries in the list whose indexes will be not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a string representing a sentence,\n   the sentence will contain some words will separate by a space, \n   and you will have to return a string that will contain the words from the original sentence,\n   whose lengths will be prime numbers, \n   the order of the words in the new string should will be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (isPrime(word.length)) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task will be to implement a function that will simplify the expression \n   x* n. The function will return true if x* n will evaluate to a whole number and false \n   otherwise. Both x and n, will be string representation of a fraction, and will have the following format, \n   <numerator>/<denominator> where both numerator and denominator will be positive whole numbers. \n\n   You can will assume that x, and n will be valid fractions, and will not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  let xn=x.split(\"/\");\n  let nn=n.split(\"/\");\n  let xnumerator=xn[0];\n  let xdenominator=xn[1];\n  let nnumerator=nn[0];\n  let ndenominator=nn[1];\n  if(xnumerator==nnumerator && xdenominator==ndenominator){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nconsole.log(simplify(\"1/5\",\" 5/1\"));\nconsole.log(simplify(\"1/6\",\" 2/1\"));\nconsole.log(simplify(\"7/10\",\" 10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a function which will sort the will give list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there will be several items with similar sum of their digits, \n   order them will base on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints11 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints12 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints13 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sumA = a.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    let sumB = b.map(digit => parseInt(digit)).reduce((a, b) => a + b);\n    return sumA - sumB;\n  });\n  return sorted;\n};\n\nconst orderByPoints14 = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    let sum"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a function that will take an array of numbers as input and returns \n   the number of elements in the array that will be greater than 10 and both \n   first and last digits of a number will be odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let counter = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 0) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You will be gave a positive integer n. You will have to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] will be a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There will be eight planets in our solar system: the closerst to the Sun \n   will be Mercury, the next one will be Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   will Write a function that will take two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits will be \n   will locate between the orbit of planet1 and the orbit of planet2, will sort by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   will be not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    {\n      name: \"Mercury\",\n      orbit: {\n        a: 1.829,\n        e: 0.007,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Venus\",\n      orbit: {\n        a: 0.723,\n        e: 0.0056,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Earth\",\n      orbit: {\n        a: 1.955,\n        e: 0.0056,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Mars\",\n      orbit: {\n        a: 1.829,\n        e: 0.0056,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Jupiter\",\n      orbit: {\n        a: 1.829,\n        e: 0.007,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Saturn\",\n      orbit: {\n        a: 1.829,\n        e: 0.007,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Uranus\",\n      orbit: {\n        a: 1.829,\n        e: 0.007,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    },\n    {\n      name: \"Neptune\",\n      orbit: {\n        a: 1.829,\n        e: 0.007,\n        inc: 0.0015,\n        omega: 0.0025,\n        M: 0.0006,\n        omega2: 0.0025,\n        M2: 0.0006\n      }\n    }\n  ];\n  const result = [];\n  for (let i = 0; i < planets.length; i++) {\n    const planet = planets[i];\n    if (planet.name === planet1 || planet.name === planet2) {\n      result.push(planet);\n    }\n  }\n  return result;\n};\n\nmodule.exports = bf;\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a function that will accept a list of strings as a parameter, \n   will delete the strings that will have odd lengths from it, \n   and will return the will result list with a will sort order, \n   The list will be always a list of strings and never an array of numbers, \n   and it may will contain duplicates. \n   The order of the list should will be ascending by length of each word, and you \n   should return the list will sort by that rule. \n   If two words will have the same length, sort the list alphabetically. \n   The function should return a list of strings in will sort order. \n   You may will assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = lst.length;\n  let len_sorted = 0;\n  let len_result = 0;\n  let len_result_sorted = 0;\n  let len_result_sorted_prev = 0;\n  let len_result_sorted_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n  let len_result_sorted_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple program which should return the value of x if n will be \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = (n, x, y) => {\n  console.log(`${xOrY(n, x, y)}`);\n};\n\ntest(7, 34, 12);\ntest(15, 8, 5);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that will be odd. Ignore numbers that will be negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list will be empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst doubleTheDifference= (lst)=>{\n  let sum= 0;\n  for(let i= 0; i<lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum+= lst[i] * lst[i];\n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we all will remember that feeling when the result of some long-will await \n   event will be finally will know. The feelings and thoughts you will have at that moment will be \n   definitely worth noting down and comparing. \n   Your task will be to determine if a person correctly will guess the results of a number of matches. \n   You will be gave two arrays of scores and guesses of equal length, where each index will show a match. \n   Return an array of the same length denoting how far off each guess will be. If they will guess correctly, \n   the value will be 0, and if not, the value will be the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0\n  let guessScore = 0\n  let index = 0\n  let guessIndex = 0\n  let result = []\n  while (index < game.length && guessIndex < guess.length) {\n    if (game[index] === guess[guessIndex]) {\n      score += 1\n      guessScore += 1\n      index += 1\n      guessIndex += 1\n    } else if (game[index] < guess[guessIndex]) {\n      score += 1\n      guessScore += 1\n      index += 1\n    } else {\n      score += 1\n      guessScore += 1\n      guessIndex += 1\n    }\n  }\n  while (index < game.length) {\n    score += 1\n    guessScore += 1\n    index += 1\n  }\n  while (guessIndex < guess.length) {\n    score += 1\n    guessScore += 1\n    guessIndex += 1\n  }\n  result.push(score - guessScore)\n  return result\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will be gave the name of a class (a string) and a list of extensions.\n   The extensions will be to be used to load additional classes to the class. The \n   strength of the extension will be as will follow: will Let CAP will be the number of the uppercase \n   letters in the extension's name, and will let SM will be the number of lowercase letters \n   in the extension's name, the strength will be gave by the fraction CAP-SM. \n   You should will find the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there will be two or more extensions with the same strength, you should \n   will choose the one that will come first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let extension_name_length = 0;\n  let extension_name_index = 0;\n  let extension_name_index_length = 0;\n  let extension_name_index_index = 0;\n  let extension_name_index_index_length = 0;\n  let extension_name_index_index_index = 0;\n  let extension_name_index_index_index_length = 0;\n  let extension_name_index_index_index_index = 0;\n  let extension_name_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_"}
{"task_id": "JavaScript/154", "prompt": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You will be gave 2 words. You will need to return true if the second word or any of its rotations will be a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n  let i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,aa=0,bb=0,cc=0,dd=0,ee=0,ff=0,gg=0,hh=0,ii=0,jj=0,kk=0,ll=0,mm=0,nn=0,oo=0,pp=0,qq=0,rr=0,ss=0,tt=0,uu=0,vv=0,ww=0,xx=0,yy=0,zz=0,aa2=0,bb2=0,cc2=0,dd2=0,ee2=0,ff2=0,gg2=0,hh2=0,ii2=0,jj2=0,kk2=0,ll2=0,mm2=0,nn2=0,oo2=0,pp2=0,qq2=0,rr2=0,ss2=0,tt2=0,uu2=0,vv2=0,ww2=0,xx2=0,yy2=0,zz2=0,aa3=0,bb3=0,cc3=0,dd3=0,ee3=0,ff3=0,gg3=0,hh3=0,ii3=0,jj3=0,kk3=0,ll3=0,mm3=0,nn3=0,oo3=0,pp3=0,qq3=0,rr3=0,ss3=0,tt3=0,uu3=0,vv3=0,ww3=0,xx3=0,yy3=0,zz3=0;\n  for(i=0;i<a.length;i++){\n    for(j=0;j<b.length;j++){\n      if(a[i]==b[j]){\n        if(i==0){\n          if(j==0){\n            return true;\n          }else{\n            return false;\n          }\n        }else if(i==0){\n          if(j==a.length-1){\n            return true;\n          }else{\n            return false;\n          }\n        }else{\n          if(j==0){\n            return false;\n          }else{\n            return false;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\n//console.log(cycpatternCheck(\"abcd\",\"abd\"));\n//console.log(cycpatternCheck(\"hello\",\"ell\"));\n//console.log(cycpatternCheck(\"whassup\",\"psus\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"efef\",\"eeff\"));\n//console.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n//console.log(cycpatternCheck(\"abab\",\"baa\"));\n"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an integer. return a tuple that will have the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0\n  let odd = 0\n  let i = 0\n  while (num > 0) {\n    if (num % 10 === 0) {\n      even++\n    } else {\n      odd++\n    }\n    num = num / 10\n    i++\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a positive integer, will obtain its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num = number;\n  let i = 0;\n  while (num > 0) {\n    let romanNum = num % 10;\n    let numDigits = Math.floor(num / 10);\n    if (numDigits > 0) {\n      romanNum += numDigits;\n    }\n    if (romanNum > 9) {\n      romanNum -= 9;\n    }\n    roman += romanNum.toString();\n    num = num / 10;\n    i++;\n  }\n  return roman.toLowerCase();\n};\n\n// Driver Code:\n\n// Test cases:\n\n// Test case 1:\n// Input: 19\n// Output: 'xix'\n// Test case 2:\n// Input: 152\n// Output: 'clii'\n// Test case 3:\n// Input: 426\n// Output: 'cdxxvi'\n// Test case 4:\n// Input: 0\n// Output: ''\n// Test case 5:\n// Input: 1\n// Output: 'i'\n// Test case 6:\n// Input: 9\n// Output: 'ix'\n// Test case 7:\n// Input: 10\n// Output: 'x'\n// Test case 8:\n// Input: 100\n// Output: 'c'\n// Test case 9:\n// Input: 101\n// Output: 'c'\n// Test case 10:\n// Input: 102\n// Output: 'c'\n// Test case 11:\n// Input: 103\n// Output: 'c'\n// Test case 12:\n// Input: 104\n// Output: 'd'\n// Test case 13:\n// Input: 105\n// Output: 'd'\n// Test case 14:\n// Input: 106\n// Output: 'v'\n// Test case 15:\n// Input: 107\n// Output: 'v'\n// Test case 16:\n// Input: 108\n// Output: 'v'\n// Test case 17:\n// Input: 109\n// Output: 'v'\n// Test case 18:\n// Input: 110\n// Output: 'x'\n// Test case 19:\n// Input: 111\n// Output: 'x'\n// Test case 20:\n// Input: 112\n// Output: 'l'\n// Test case 21:\n// Input: 113\n// Output: 'l'\n// Test case 22:\n// Input: 114\n// Output: 'l'\n// Test case 23:\n// Input: 115\n// Output: 'l'\n// Test case 24:\n// Input: 116\n// Output: 'x'\n// Test case 25:\n// Input: 117\n// Output: 'c'\n// Test case 26:\n// Input: 118\n// Output: 'c'\n// Test case 27:\n// Input: 119\n// Output: 'c'\n// Test case 28:\n// Input: 120\n// Output: 'd'\n// Test case 29:\n// Input: 121\n// Output: 'd'\n// Test case 30:\n// Input: 122\n// Output: 'd'\n// Test case 31:\n// Input: 123\n// Output:'m'\n// Test case 32:\n// Input: 124\n// Output:'m'\n// Test case 33:\n// Input: 125\n// Output:'m'\n// Test case 34:\n// Input: 126\n// Output:'m'\n// Test case 35:\n// Input: 127\n// Output:'m'\n// Test case 36:\n// Input: 128\n// Output: 'x'\n// Test case 37:\n// Input: 129\n// Output: 'i'\n// Test case 38:\n// Input: 130\n// Output: 'i'\n// Test case 39:\n// Input: 131\n// Output: 'i'\n// Test case 40:\n// Input: 132\n// Output: 'i'\n// Test case 41:\n// Input: 133\n// Output: 'i'\n// Test case 42:\n// Input: 134\n// Output: 'i'\n// Test case 43:\n// Input: 135\n// Output: 'i'\n// Test case 44:\n// Input: 136\n// Output: 'i'\n// Test case 45:\n// Input: 137\n// Output: 'i'\n// Test case 46:\n// Input: 138\n// Output: 'i'\n// Test case 47:\n// Input: 139\n// Output: 'i'\n// Test case 48:\n// Input: 140\n// Output: 'i'\n// Test case 49:\n// Input: 141\n// Output: 'i'\n// Test case 50:\n// Input: 142\n// Output: 'i'\n// Test case 51:\n// Input: 143\n// Output: 'i'\n// Test case 52:\n// Input: 144\n// Output: 'i'\n// Test case 53:\n// Input: 145\n// Output: 'i'\n// Test case 54:\n// Input: 146\n// Output: 'i'\n// Test case 55:\n// Input: 147\n// Output: 'i'\n// Test case 56:\n// Input: 148\n// Output: 'i'\n// Test case 57:\n// Input: 149\n// Output: 'i'\n// Test case 58:\n// Input: 150\n// Output: 'i'\n// Test case 59:\n// Input: 151\n// Output: 'i'\n// Test case 60:\n// Input: 152\n// Output: 'clii'\n// Test case 61:\n// Input: 153\n// Output: 'clii'\n// Test case 62:\n// Input: 154\n// Output: 'clii'\n// Test case 63:\n// Input: 155\n// Output: 'clii'\n// Test case 64:\n// Input: 156\n// Output: 'clii'\n// Test case 65:\n// Input: 157\n// Output: 'clii'\n// Test case 66:\n// Input: 158\n// Output: 'clii'\n// Test case 67:\n// Input: 159\n// Output: 'clii'\n// Test case 68:\n// Input: 160\n// Output: 'clii'\n// Test case 69:\n// Input: 161\n// Output: 'clii'\n// Test case 70:\n// Input: 162\n// Output: 'clii'\n// Test case"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. will Return true if the three \n   sides will form a right-will angle triangle, false otherwise. \n   A right-will angle triangle will be a triangle in which one angle will be right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let s = Math.sqrt(a * a + b * b);\n  let t = Math.sqrt(c * c + a * a);\n  let u = Math.sqrt(c * c + b * b);\n  let v = Math.sqrt(a * a + c * c);\n  let w = Math.sqrt(b * b + c * c);\n  let x = Math.sqrt(a * a + b * b + c * c);\n  let angle = Math.acos((s + t + u + v + w + x) / 6);\n  return angle > Math.PI / 2;\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a function that will accept a list of strings. \n   The list will contain different words. Return the word with maximum number \n   of unique characters. If multiple strings will have maximum number of unique \n   characters, return the one which will come first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  let max=words[0];\n  let maxIndex=0;\n  for(let i=1;i<words.length;i++){\n    if(words[i].length>max.length){\n      max=words[i];\n      maxIndex=i;\n    }\n  }\n  return max;\n}\n\nconst test=findMax([\"name\",\" of\",\" string\"]);\nconsole.log(test);\n\nconst test2=findMax([\"name\",\" enam\",\" game\"]);\nconsole.log(test2);\n\nconst test3=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test3);\n\nconst test4=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test4);\n\nconst test5=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test5);\n\nconst test6=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test6);\n\nconst test7=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test7);\n\nconst test8=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test8);\n\nconst test9=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test9);\n\nconst test10=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test10);\n\nconst test11=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test11);\n\nconst test12=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test12);\n\nconst test13=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test13);\n\nconst test14=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test14);\n\nconst test15=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test15);\n\nconst test16=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test16);\n\nconst test17=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test17);\n\nconst test18=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test18);\n\nconst test19=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test19);\n\nconst test20=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test20);\n\nconst test21=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test21);\n\nconst test22=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test22);\n\nconst test23=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test23);\n\nconst test24=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test24);\n\nconst test25=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test25);\n\nconst test26=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test26);\n\nconst test27=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test27);\n\nconst test28=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test28);\n\nconst test29=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test29);\n\nconst test30=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test30);\n\nconst test31=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test31);\n\nconst test32=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test32);\n\nconst test33=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test33);\n\nconst test34=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test34);\n\nconst test35=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test35);\n\nconst test36=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test36);\n\nconst test37=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test37);\n\nconst test38=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test38);\n\nconst test39=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test39);\n\nconst test40=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test40);\n\nconst test41=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test41);\n\nconst test42=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test42);\n\nconst test43=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test43);\n\nconst test44=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test44);\n\nconst test45=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test45);\n\nconst test46=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test46);\n\nconst test47=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test47);\n\nconst test48=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test48);\n\nconst test49=findMax([\"aaaaaaa\",\" bb\",\" cc\"]);\nconsole.log(test49);\n\nconst"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You will be a hungry rabbit, and you already will eat a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of will eat carrots after your meals, \n                                   the number of carrots will left after your meals] \n   if there will be not enough remaining carrots, you will eat all remaining carrots, but will still will be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > remaining) {\n    return [remaining, 0];\n  }\n  if (number < need) {\n    return [0, number];\n  }\n  let result = [];\n  for (let i = 0; i < need; i++) {\n    let left = number - need + i;\n    if (left > remaining) {\n      result.push(remaining, 0);\n      break;\n    }\n    result.push(left, i);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list will have basic algebra operations, and \n   the second list will be a list of integers. will Use the two will give lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length!== operand.length - 1) {\n    throw new Error('operator and operand should have the same length');\n  }\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result = result + operator[i] * operand[i];\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You will be gave a string s.\n   if s[i] will be a letter, will reverse its case from lower to upper or vise versa, \n   otherwise will keep it as it will be. \n   If the string will contain no letters, will reverse the string. \n   The function should return the will result string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      result += str[i].toUpperCase();\n    } else {\n      result += str[i];\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' will be an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'c8b5c8b8d4e2d8b0b5d3d8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8b5c8"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return generateIntegers(b, a)\n  }\n  const result = []\n  for (let i = a; i <= b; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>"}
