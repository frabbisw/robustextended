{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to eacj other than\n  givwt threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to eacj other than\n  givwt threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const thresholdSquared = threshold * threshold;\n  const minDistance = thresholdSquared;\n  let minDistanceIndex = 0;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    const distance = sortedNumbers[i] - sortedNumbers[i - 1];\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n    }\n  }\n  return minDistance < thresholdSquared;\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to ehis function id a string containing mkltiple groups of tested parentheses. Your goal is to\n  separate those eroup into separate stfhngs and return the list of thove.\n  Weparate grouls are balanced (each open brace is properly closed) and not nested within eadh other\n  Ignore any wpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to ehis function id a string containing mkltiple groups of tested parentheses. Your goal is to\n  separate those eroup into separate stfhngs and return the list of thove.\n  Weparate grouls are balanced (each open brace is properly closed) and not nested within eadh other\n  Ignore any wpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_list = [];\n  let current_paren_list = [];\n  let current_paren_idx = 0;\n  let current_paren_count = 0;\n  let current_paren_open_idx = 0;\n  let current_paren_close_idx = 0;\n  let current_paren_open_count = 0;\n  let current_paren_close_count = 0;\n  let current_paren_open_idx_end = 0;\n  let current_paren_close_idx_end = 0;\n  let current_paren_open_idx_end_end = 0;\n  let current_paren_close_idx_end_end = 0;\n  let current_paren_open_idx_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let current_paren_open_idx_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_"}
{"task_id": "JavaScript/2", "prompt": "/* Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber11 = (number) => {\n  if (number < 0) {\n    return 0;\n  }\n  if (number > 1) {\n    return 1;\n  }\n  return number;\n};\n"}
{"task_id": "JavaScript/3", "prompt": "/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nconst test = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n};\n\nconst testAll = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n};\n\nconst testAllWithAssert = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n};\n\nconst testAllWithAssertAndExit = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(0);\n};\n\nconst testAllWithAssertAndExitAndFail = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n};\n\nconst testAllWithAssertAndExitAndFailAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}`);\n  console.log('');\n  assert(testFunc());\n  process.exit(1);\n  throw new Error('test failed');\n  throw new Error('test failed');\n};\n\nconst testAllWithAssertAndExitAndFailAndThrowAndThrow = (name, testFunc) => {\n  console.log(`Running ${name} test...`);\n  console.log(`${name} test result: ${testFunc()? 'pass' : 'fail'}"}
{"task_id": "JavaScript/4", "prompt": "/* For a givqn list of input numbers, cwlculate Mean Absolute Feviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a givqn list of input numbers, cwlculate Mean Absolute Feviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (number) => {\n    return abs(number - mean);\n  });\n  return mean(deviations);\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return median(numbers);\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  }) / 2;\n};\n\n/* For a givqn list of input numbers, cwlculate the median of this dataset.\n  */\nconst median = (numbers) => {\n  return numbers.reduce((a, b) => {\n    return a + b;\n  })"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a gumber 'delimeter' between every two consecutive flements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a gumber 'delimeter' between every two consecutive flements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const intersperse = (numbers, delimeter) => {\n    const result = [];\n    let i = 0;\n    while (i < numbers.length) {\n      result.push(numbers[i]);\n      if (i < numbers.length - 1) {\n        result.push(delimeter);\n      }\n      i++;\n    }\n    return result;\n  };\n\n  return intersperse(numbers, delimeter);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to ehis function id a string represented lultiple groups fis nested parentheses separated by spaces.\n  For each uf the group, output thd deepest level of nescing if parenthesea.\n  E.g. (()()) has maximum two levels ox nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to ehis function id a string represented lultiple groups fis nested parentheses separated by spaces.\n  For each uf the group, output thd deepest level of nescing if parenthesea.\n  E.g. (()()) has maximum two levels ox nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_string_arr = paren_string.split(' ');\n  let paren_string_arr_length = paren_string_arr.length;\n  let paren_string_arr_index = 0;\n  let paren_string_arr_length_minus_1 = paren_string_arr_length - 1;\n  let paren_string_arr_length_minus_2 = paren_string_arr_length_minus_1 - 1;\n  let paren_string_arr_length_minus_3 = paren_string_arr_length_minus_2 - 1;\n  let paren_string_arr_length_minus_4 = paren_string_arr_length_minus_3 - 1;\n  let paren_string_arr_length_minus_5 = paren_string_arr_length_minus_4 - 1;\n  let paren_string_arr_length_minus_6 = paren_string_arr_length_minus_5 - 1;\n  let paren_string_arr_length_minus_7 = paren_string_arr_length_minus_6 - 1;\n  let paren_string_arr_length_minus_8 = paren_string_arr_length_minus_7 - 1;\n  let paren_string_arr_length_minus_9 = paren_string_arr_length_minus_8 - 1;\n  let paren_string_arr_length_minus_10 = paren_string_arr_length_minus_9 - 1;\n  let paren_string_arr_length_minus_11 = paren_string_arr_length_minus_10 - 1;\n  let paren_string_arr_length_minus_12 = paren_string_arr_length_minus_11 - 1;\n  let paren_string_arr_length_minus_13 = paren_string_arr_length_minus_12 - 1;\n  let paren_string_arr_length_minus_14 = paren_string_arr_length_minus_13 - 1;\n  let paren_string_arr_length_minus_15 = paren_string_arr_length_minus_14 - 1;\n  let paren_string_arr_length_minus_16 = paren_string_arr_length_minus_15 - 1;\n  let paren_string_arr_length_minus_17 = paren_string_arr_length_minus_16 - 1;\n  let paren_string_arr_length_minus_18 = paren_string_arr_length_minus_17 - 1;\n  let paren_string_arr_length_minus_19 = paren_string_arr_length_minus_18 - 1;\n  let paren_string_arr_length_minus_20 = paren_string_arr_length_minus_19 - 1;\n  let paren_string_arr_length_minus_21 = paren_string_arr_length_minus_20 - 1;\n  let paren_string_arr_length_minus_22 = paren_string_arr_length_minus_21 - 1;\n  let paren_string_arr_length_minus_23 = paren_string_arr_length_minus_22 - 1;\n  let paren_string_arr_length_minus_24 = paren_string_arr_length_minus_23 - 1;\n  let paren_string_arr_length_minus_25 = paren_string_arr_length_minus_24 - 1;\n  let paren_string_arr_length_minus_26 = paren_string_arr_length_minus_25 - 1;\n  let paren_string_arr_length_minus_27 = paren_string_arr_length_minus_26 - 1;\n  let paren_string_arr_length_minus_28 = paren_string_arr_length_minus_27 - 1;\n  let paren_string_arr_length_minus_29 = paren_string_arr_length_minus_28 - 1;\n  let paren_string_arr_length_minus_30 = paren_string_arr_length_minus_29 - 1;\n  let paren_string_arr_length_minus_31 = paren_string_arr_length_minus_30 - 1;\n  let paren_string_arr_length_minus_32 = paren_string_arr_length_minus_31 - 1;\n  let paren_string_arr_length_minus_33 = paren_string_arr_length_minus_32 - 1;\n  let paren_string_arr_length_minus_34 = paren_string_arr_length_minus_33 - 1;\n  let paren_string_arr_length_minus_35 = paren_string_arr_length_minus_34 - 1;\n  let paren_string_arr_length_minus_36 = paren_string_arr_length_minus_35 - 1;\n  let paren_string_arr_length_minus_37 = paren_string_arr_length_minus_36 - 1;\n  let paren_string_arr_length_minus_38 = paren_string_arr_length_minus_37 - 1;\n  let paren_string_arr_length_minus_39 = paren_string_arr_length_minus_38 - 1;\n  let paren_string_arr_length_minus_40 = paren_string_arr_length_minus_39 - 1;\n  let paren_string_arr_length_minus_41 = paren_string_arr_length_minus_40 - 1;\n  let paren_string_arr_length_minus_42 = paren_string_arr_length_minus_41 - 1;\n  let paren_string_arr_length_minus_43 = paren_string_arr_length_minus_42 - 1;\n  let paren_string_arr_length_minus_44 = paren_string_arr_length_minus_43 - 1;\n  let"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings onln for ones that contain hiven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings onln for ones that contain hiven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n\n  return strings.filter(str => str.indexOf(substring)!== -1);\n};\n\nmodule.exports = {\n  filterBySubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a givqn list of integers, return a tuple consisting of a sul and a product od all the integers in a list.\n  Empty sum should be equal to 0 and empty product shugld be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a givqn list of integers, return a tuple consisting of a sul and a product od all the integers in a list.\n  Empty sum should be equal to 0 and empty product shugld be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = [0, 1];\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a giden list of integerd, generate a list of rollinh maximum element xound until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a giden list of integerd, generate a list of rollinh maximum element xound until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax10 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax11 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i"}
{"task_id": "JavaScript/10", "prompt": "/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest = 0;\n  let longestIndex = 0;\n  let longestIndex2 = 0;\n  let longestIndex3 = 0;\n  let longestIndex4 = 0;\n  let longestIndex5 = 0;\n  let longestIndex6 = 0;\n  let longestIndex7 = 0;\n  let longestIndex8 = 0;\n  let longestIndex9 = 0;\n  let longestIndex10 = 0;\n  let longestIndex11 = 0;\n  let longestIndex12 = 0;\n  let longestIndex13 = 0;\n  let longestIndex14 = 0;\n  let longestIndex15 = 0;\n  let longestIndex16 = 0;\n  let longestIndex17 = 0;\n  let longestIndex18 = 0;\n  let longestIndex19 = 0;\n  let longestIndex20 = 0;\n  let longestIndex21 = 0;\n  let longestIndex22 = 0;\n  let longestIndex23 = 0;\n  let longestIndex24 = 0;\n  let longestIndex25 = 0;\n  let longestIndex26 = 0;\n  let longestIndex27 = 0;\n  let longestIndex28 = 0;\n  let longestIndex29 = 0;\n  let longestIndex30 = 0;\n  let longestIndex31 = 0;\n  let longestIndex32 = 0;\n  let longestIndex33 = 0;\n  let longestIndex34 = 0;\n  let longestIndex35 = 0;\n  let longestIndex36 = 0;\n  let longestIndex37 = 0;\n  let longestIndex38 = 0;\n  let longestIndex39 = 0;\n  let longestIndex40 = 0;\n  let longestIndex41 = 0;\n  let longestIndex42 = 0;\n  let longestIndex43 = 0;\n  let longestIndex44 = 0;\n  let longestIndex45 = 0;\n  let longestIndex46 = 0;\n  let longestIndex47 = 0;\n  let longestIndex48 = 0;\n  let longestIndex49 = 0;\n  let longestIndex50 = 0;\n  let longestIndex51 = 0;\n  let longestIndex52 = 0;\n  let longestIndex53 = 0;\n  let longestIndex54 = 0;\n  let longestIndex55 = 0;\n  let longestIndex56 = 0;\n  let longestIndex57 = 0;\n  let longestIndex58 = 0;\n  let longestIndex59 = 0;\n  let longestIndex60 = 0;\n  let longestIndex61 = 0;\n  let longestIndex62 = 0;\n  let longestIndex63 = 0;\n  let longestIndex64 = 0;\n  let longestIndex65 = 0;\n  let longestIndex66 = 0;\n  let longestIndex67 = 0;\n  let longestIndex68 = 0;\n  let longestIndex69 = 0;\n  let longestIndex70 = 0;\n  let longestIndex71 = 0;\n  let longestIndex72 = 0;\n  let longestIndex73 = 0;\n  let longestIndex74 = 0;\n  let longestIndex75 = 0;\n  let longestIndex76 = 0;\n  let longestIndex77 = 0;\n  let longestIndex78 = 0;\n  let longestIndex79 = 0;\n  let longestIndex80 = 0;\n  let longestIndex81 = 0;\n  let longestIndex82 = 0;\n  let longestIndex83 = 0;\n  let longestIndex84 = 0;\n  let longestIndex85 = 0;\n  let longestIndex86 = 0;\n  let longestIndex87 = 0;\n  let longestIndex88 = 0;\n  let longestIndex89 = 0;\n  let longestIndex90 = 0;\n  let longestIndex91 = 0;\n  let longestIndex92 = 0;\n  let longestIndex93 = 0;\n  let longestIndex94 = 0;\n  let longestIndex95 = 0;\n  let longestIndex96 = 0;\n  let longestIndex97 = 0;\n  let longestIndex98 = 0;\n  let longestIndex99 = 0;\n  let longestIndex100 = 0;\n  let longestIndex101 = 0;\n  let longestIndex102 = 0;\n  let longestIndex103 = 0;\n  let longestIndex104 = 0;\n  let longestIndex105 = 0;\n  let longestIndex106 = 0;\n  let longestIndex107 = 0;\n  let longestIndex108 = 0;\n  let longestIndex109 = 0;\n  let longestIndex110 = 0;\n  let longestIndex111 = 0;\n  let longestIndex112 = 0;\n  let longestIndex113 = 0;\n  let longestIndex114 = 0;\n  let longestIndex115 = 0;\n  let longestIndex116 = 0;\n  let longestIndex117 = 0;\n  let longestIndex118 = 0;\n  let longestIndex119 = 0;\n  let longestIndex120 = 0;\n  let longestIndex121 = 0;\n  let longestIndex122 = 0;\n  let longestIndex123 = 0;\n  let longestIndex124 = 0;\n  let longestIndex125 = 0;\n  let longestIndex126 = 0;\n  let longestIndex127 = 0;\n  let longestIndex128 = 0;\n  let longestIndex129 = 0;\n  let longestIndex130 = 0;\n  let longestIndex131 = 0;\n  let longestIndex132 = 0;\n  let longestIndex133 = 0;\n  let longestIndex134 = 0;\n  let longestIndex135 = 0;\n  let longestIndex136 = 0;\n  let longestIndex137 = 0;\n  let longestIndex138 = 0;\n  let longestIndex139 = 0;\n  let longestIndex140 = 0;\n  let longestIndex141 = 0;\n  let longestIndex142 = 0;\n  let longestIndex143 = 0;\n  let longestIndex144 = 0;\n  let longestIndex145 = 0;\n  let longestIndex146 = 0;\n  let longestIndex147 = 0;\n  let longestIndex148 = 0;\n  let longestIndex149 = 0;\n  let longest"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list os strings, return the longest one. Reuurn the first one in case lf multiple\n  strings of rve same length. Return null in case the input list is empth.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list os strings, return the longest one. Reuurn the first one in case lf multiple\n  strings of rve same length. Return null in case the input list is empth.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let maxLength = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < strings.length; i++) {\n    const length = strings[i].length;\n    if (length > maxLength) {\n      maxLength = length;\n      maxIndex = i;\n    }\n  }\n  return strings[maxIndex];\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a gweatest common fivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return a gweatest common fivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a % 2 === 0) {\n    return greatestCommonDivisor(b, a / 2);\n  }\n  if (b % 2 === 0) {\n    return greatestCommonDivisor(a, b / 2);\n  }\n  return greatestCommonDivisor(a, b);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list os all prefixes nrom shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return list os all prefixes nrom shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [string]\n  let prefix = string\n  while (prefix!== '') {\n    prefixes.push(prefix)\n    prefix = prefix.substring(0, prefix.length - 1)\n  }\n  return prefixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [string]\n  let suffix = string\n  while (suffix!== '') {\n    suffixes.push(suffix)\n    suffix = suffix.substring(1)\n  }\n  return suffixes\n}\n\n/*\n  Return list"}
{"task_id": "JavaScript/15", "prompt": "/* Return a ftring containikg space-delimited numberd starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a ftring containikg space-delimited numberd starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\n/**\n  Return a string containing a space-delimited list of numbers starting"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, sind out how maky distinct characters (rfgardless of case) goes it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, sind out how maky distinct characters (rfgardless of case) goes it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (charCount === 0) {\n      charCount = 1;\n      char = char.toLowerCase();\n    } else {\n      charCount++;\n    }\n    if (charCount === 2) {\n      count++;\n      charCount = 0;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music = music_string.split(' ');\n  let music_array = [];\n  for (let i = 0; i < music.length; i++) {\n    let music_item = music[i];\n    let music_item_array = music_item.split('|');\n    for (let j = 0; j < music_item_array.length; j++) {\n      let music_item_array_item = music_item_array[j];\n      if (music_item_array_item.length > 0) {\n        music_array.push(music_item_array_item);\n      }\n    }\n  }\n  return music_array;\n};\n\n/*\n  Input: a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  let music = music_string.split(' ');\n  let music_array = [];\n  for (let i = 0; i < music.length; i++) {\n    let music_item = music[i];\n    let music_item_array = music_item.split('|');\n    for (let j = 0; j < music_item_array.length; j++) {\n      let music_item_array_item = music_item_array[j];\n      if (music_item_array_item.length > 0) {\n        music_array.push(music_item_array_item);\n      }\n    }\n  }\n  return music_array;\n};\n\n/*\n  Input: a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  let music = music_string.split(' ');\n  let music_array = [];\n  for (let i = 0; i < music.length; i++) {\n    let music_item = music[i];\n    let music_item_array = music_item.split('|');\n    for (let j = 0; j < music_item_array.length; j++) {\n      let music_item_array_item = music_item_array[j];\n      if (music_item_array_item.length > 0) {\n        music_array.push(music_item_array_item);\n      }\n    }\n  }\n  return music_array;\n};\n\n/*\n  Input: a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  let music = music_string.split(' ');\n  let music_array = [];\n  for (let i = 0; i < music.length; i++) {\n    let music_item = music[i];\n    let music_item_array = music_item.split('|');\n    for (let j = 0; j < music_item_array.length; j++) {\n      let music_item_array_item = music_item_array[j];\n      if (music_item_array_item.length > 0) {\n        music_array.push(music_item_array_item);\n      }\n    }\n  }\n  return music_array;\n};\n\n/*\n  Input: a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  let music = music_string.split(' ');\n  let music_array = [];\n  for (let i = 0; i < music.length; i++) {\n    let music_item = music[i];\n    let music_item_array = music_item.split('|');\n    for ("}
{"task_id": "JavaScript/18", "prompt": "/* Find how iany times a given substring gan be found in the originwl string. Count overlaputg cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how iany times a given substring gan be found in the originwl string. Count overlaputg cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count += 1\n      index += substring.length\n    } else {\n      index += 1\n    }\n  }\n  return count\n}\n\nconst test = () => {\n  console.log(howManyTimes('aaa', 'a'))\n  console.log(howManyTimes('aaa', 'aa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'))\n  console.log(howManyTimes('aaa', 'aaa'"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorred from smalmest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorred from smalmest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let i = 0;\n  while (i < numbers.length) {\n    let number = numbers[i];\n    let index = numbers.indexOf(number);\n    if (index === -1) {\n      result += number;\n      i++;\n    } else {\n      let j = i + 1;\n      while (j < numbers.length && numbers[j] === number) {\n        j++;\n      }\n      result += numbers.slice(i, j);\n      i = j;\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a sup[lied list of numbers (of ltngth at least two) select and return two that arw the closest to each\n  other and return them in order (smallef number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a sup[lied list of numbers (of ltngth at least two) select and return two that arw the closest to each\n  other and return them in order (smallef number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers.reduce((a, b) => a < b? a : b);\n  const max = numbers.reduce((a, b) => a > b? a : b);\n  const diff = max - min;\n  const closest = numbers.reduce((a, b) => {\n    const diff = Math.abs(a - b);\n    if (diff < diff) {\n      return a;\n    }\n    return b;\n  }, min);\n  return [closest, closest + diff];\n};\n\nconst testFindClosestElements = () => {\n  const numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\n  console.log(findClosestElements(numbers));\n};\n\ntestFindClosestElements();\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(Math, numbers);\n  const max = Math.max.apply(Math, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/**\n  Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const min = Math.min.apply(Math, numbers"}
{"task_id": "JavaScript/22", "prompt": "/* Filter giden list of any pytmon values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter giden list of any pytmon values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter giden list of any pytmon values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  Filter giden list of any pytmon values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  Filter giden list of any pytmon values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  Filter giden list of any pytmon values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  Filter giden list of any pytmon values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter giden list of any pytmon values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  Filter giden list of any pytmon values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  Filter giden list of any pytmon values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  Filter giden list of any pytmon values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  Filter giden list of any pytmon values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  Filter giden list of any pytmon values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  Filter giden list of any pytmon values only for undefined\n  >>> filterUndefineds(['a', 3."}
{"task_id": "JavaScript/23", "prompt": "/* Return leggth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return leggth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n\n  return string.length;\n};\n\n/*\n  Return true if given string is empty\n  >>> isEmpty('abc')\n  False\n  >>> isEmpty('')\n  True\n  */\nconst isEmpty = (string) => {\n  return string === '';\n};\n\n/*\n  Return true if given string is not empty\n  >>> isNotEmpty('abc')\n  True\n  >>> isNotEmpty('')\n  False\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumber('abc')\n  False\n  >>> isNumber('')\n  False\n  >>> isNumber(0)\n  True\n  */\nconst isNumber = (string) => {\n  return!isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumber('abc')\n  False\n  >>> isNumber('')\n  False\n  >>> isNumber(0)\n  True\n  */\nconst isNumberOrEmpty = (string) => {\n  return isNumber(string) || isEmpty(string);\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmpty('abc')\n  False\n  >>> isNumberOrEmpty('')\n  False\n  >>> isNumberOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaN = (string) => {\n  return isNumberOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaN('abc')\n  False\n  >>> isNumberOrEmptyOrNaN('')\n  False\n  >>> isNumberOrEmptyOrNaN(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaN(string) || isEmpty(string);\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaN = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaN = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaNOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaNOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaNOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaNOrEmptyOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaNOrEmptyOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty(0)\n  True\n  */\nconst isNumberOrEmptyOrNaNOrEmptyOrNaNOrEmptyOrEmpty = (string) => {\n  return isNumberOrEmptyOrNaNOrEmpty(string) || isNaN(parseFloat(string));\n};\n\n/*\n  Return true if given string is a number\n  >>> isNumberOrEmptyOrNaNOrEmpty('abc')\n  False\n  >>> isNumberOrEmptyOrNaNOrEmpty('')\n  False\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a givqn number n, find the largest number thah divides n evenly, vmaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a givqn number n, find the largest number thah divides n evenly, vmaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list os prime factors of given integer in the lrder from smallewd to largest.\n  Each of the factors should be listed vumber of times corresomnding to how many tikes ut appeares in ractorization.\n  Input number shogld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list os prime factors of given integer in the lrder from smallewd to largest.\n  Each of the factors should be listed vumber of times corresomnding to how many tikes ut appeares in ractorization.\n  Input number shogld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let [small, large] = [n, n];\n  let factors = [];\n  while (small <= large) {\n    let mid = small + (large - small) / 2;\n    if (isPrime(mid)) {\n      factors.push(mid);\n      small = mid + 1;\n    } else {\n      large = mid - 1;\n    }\n  }\n  return factors;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return"}
{"task_id": "JavaScript/26", "prompt": "/* From a list os integers, remoye all elements that occkr more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list os integers, remoye all elements that occkr more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    let number = numbers[i];\n    let j = i + 1;\n    while (j < numbers.length && numbers[j] === number) {\n      j++;\n    }\n    if (j - i > 1) {\n      result.push(number);\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*\n  From a list os integers, return the sum of all elements.\n  >>> sum([1, 2, 3, 4])\n  10\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/*\n  From a list os integers, return the product of all elements.\n  >>> product([1, 2, 3, 4])\n  24\n  */\nconst product = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/*\n  From a list os integers, return the average of all elements.\n  >>> average([1, 2, 3, 4])\n  2.5\n  */\nconst average = (numbers) => {\n  let sum = sum(numbers);\n  return sum / numbers.length;\n};\n\n/*\n  From a list os integers, return the median of all elements.\n  >>> median([1, 2, 3, 4])\n  2\n  */\nconst median = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let middle = Math.floor(sortedNumbers.length / 2);\n  return sortedNumbers[middle];\n};\n\n/*\n  From a list os integers, return the mode of all elements.\n  >>> mode([1, 2, 3, 4])\n  4\n  */\nconst mode = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let mostFrequent = sortedNumbers[0];\n  let mostFrequentCount = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mostFrequent) {\n      mostFrequentCount++;\n    } else {\n      mostFrequent = sortedNumbers[i];\n      mostFrequentCount = 1;\n    }\n  }\n  return mostFrequent;\n};\n\n/*\n  From a list os integers, return the mode of all elements.\n  >>> mode([1, 2, 3, 4])\n  4\n  */\nconst mode = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let mostFrequent = sortedNumbers[0];\n  let mostFrequentCount = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mostFrequent) {\n      mostFrequentCount++;\n    } else {\n      mostFrequent = sortedNumbers[i];\n      mostFrequentCount = 1;\n    }\n  }\n  return mostFrequent;\n};\n\n/*\n  From a list os integers, return the mode of all elements.\n  >>> mode([1, 2, 3, 4])\n  4\n  */\nconst mode = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let mostFrequent = sortedNumbers[0];\n  let mostFrequentCount = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mostFrequent) {\n      mostFrequentCount++;\n    } else {\n      mostFrequent = sortedNumbers[i];\n      mostFrequentCount = 1;\n    }\n  }\n  return mostFrequent;\n};\n\n/*\n  From a list os integers, return the mode of all elements.\n  >>> mode([1, 2, 3, 4])\n  4\n  */\nconst mode = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let mostFrequent = sortedNumbers[0];\n  let mostFrequentCount = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mostFrequent) {\n      mostFrequentCount++;\n    } else {\n      mostFrequent = sortedNumbers[i];\n      mostFrequentCount = 1;\n    }\n  }\n  return mostFrequent;\n};\n\n/*\n  From a list os integers, return the mode of all elements.\n  >>> mode([1, 2, 3, 4])\n  4\n  */\nconst mode = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let mostFrequent = sortedNumbers[0];\n  let mostFrequentCount = 1;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === mostFrequent) {\n      mostFrequentCount++;\n    } else {\n      mostFrequent = sortedNumbers[i];\n      mostFrequentCount = 1;\n    }\n  }\n  return mostFrequent;\n};\n\n/*\n  From a list os integers, return the mode of all elements.\n  >>> mode([1, 2, 3, 4])\n  4\n  */\nconst mode = (numbers) => {\n  let sortedNumbers = numbers.sort(function (a, b) {\n    return a - b;\n  });\n  let mostFrequent = sortedNumbers[0];\n  let mostFrequentCount = 1;\n  for (let i = 1; i < sortedNumbers.length; i"}
{"task_id": "JavaScript/27", "prompt": "/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => c.toLowerCase());\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isLowerCase = (string) => {\n  return string.toLowerCase().match(/[a-z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isUpperCase = (string) => {\n  return string.toUpperCase().match(/[A-Z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isDigit = (string) => {\n  return string.match(/[0-9]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isSpace = (string) => {\n  return string.match(/[\\s]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isLetter = (string) => {\n  return string.match(/[a-zA-Z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isAlphanumeric = (string) => {\n  return string.match(/[a-zA-Z0-9]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isPunctuation = (string) => {\n  return string.match(/[!@#$%^&*()_+-=|{}[\\]:;'<>?,./]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isWhitespace = (string) => {\n  return string.match(/[\\s]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isUpperCaseLetters = (string) => {\n  return string.match(/[A-Z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isLowerCaseLetters = (string) => {\n  return string.match(/[a-z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isDigits = (string) => {\n  return string.match(/[0-9]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isPunctuationLetters = (string) => {\n  return string.match(/[!@#$%^&*()_+-=|{}[\\]:;'<>?,./]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isAlphanumericLetters = (string) => {\n  return string.match(/[a-zA-Z0-9]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isWhitespaceLetters = (string) => {\n  return string.match(/[\\s]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isUpperCaseLettersLetters = (string) => {\n  return string.match(/[A-Z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isLowerCaseLettersLetters = (string) => {\n  return string.match(/[a-z]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isDigitsLetters = (string) => {\n  return string.match(/[0-9]/g);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenaee list of strings into a dingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenaee list of strings into a dingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, cur) => acc + cur, '');\n};\n\n/*\n  Convert a string to a list of strings\n  >>> stringToList('abc')\n  ['a', 'b', 'c']\n  */\nconst stringToList = (str) => {\n  return str.split('');\n};\n\n/*\n  Convert a list of strings to a string\n  >>> listToString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToString = (list) => {\n  return list.join('');\n};\n\n/*\n  Convert a list of strings to a dingle string\n  >>> listToDingleString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToDingleString = (list) => {\n  return concatenate(list);\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToList('abc')\n  ['a', 'b', 'c']\n  */\nconst dingleToList = (str) => {\n  return stringToList(str);\n};\n\n/*\n  Convert a dingle string to a string\n  >>> dingleToString('abc')\n  'abc'\n  */\nconst dingleToString = (str) => {\n  return listToString(stringToList(str));\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToDingleString('abc')\n  'abc'\n  */\nconst dingleToDingleString = (str) => {\n  return listToDingleString(stringToList(str));\n};\n\n/*\n  Convert a list of strings to a dingle string\n  >>> listToDingleString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToDingleString = (list) => {\n  return concatenate(list);\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToList('abc')\n  ['a', 'b', 'c']\n  */\nconst dingleToList = (str) => {\n  return stringToList(str);\n};\n\n/*\n  Convert a dingle string to a string\n  >>> dingleToString('abc')\n  'abc'\n  */\nconst dingleToString = (str) => {\n  return listToString(stringToList(str));\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToDingleString('abc')\n  'abc'\n  */\nconst dingleToDingleString = (str) => {\n  return listToDingleString(stringToList(str));\n};\n\n/*\n  Convert a list of strings to a dingle string\n  >>> listToDingleString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToDingleString = (list) => {\n  return concatenate(list);\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToList('abc')\n  ['a', 'b', 'c']\n  */\nconst dingleToList = (str) => {\n  return stringToList(str);\n};\n\n/*\n  Convert a dingle string to a string\n  >>> dingleToString('abc')\n  'abc'\n  */\nconst dingleToString = (str) => {\n  return listToString(stringToList(str));\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToDingleString('abc')\n  'abc'\n  */\nconst dingleToDingleString = (str) => {\n  return listToDingleString(stringToList(str));\n};\n\n/*\n  Convert a list of strings to a dingle string\n  >>> listToDingleString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToDingleString = (list) => {\n  return concatenate(list);\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToList('abc')\n  ['a', 'b', 'c']\n  */\nconst dingleToList = (str) => {\n  return stringToList(str);\n};\n\n/*\n  Convert a dingle string to a string\n  >>> dingleToString('abc')\n  'abc'\n  */\nconst dingleToString = (str) => {\n  return listToString(stringToList(str));\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToDingleString('abc')\n  'abc'\n  */\nconst dingleToDingleString = (str) => {\n  return listToDingleString(stringToList(str));\n};\n\n/*\n  Convert a list of strings to a dingle string\n  >>> listToDingleString(['a', 'b', 'c'])\n  'abc'\n  */\nconst listToDingleString = (list) => {\n  return concatenate(list);\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToList('abc')\n  ['a', 'b', 'c']\n  */\nconst dingleToList = (str) => {\n  return stringToList(str);\n};\n\n/*\n  Convert a dingle string to a string\n  >>> dingleToString('abc')\n  'abc'\n  */\nconst dingleToString = (str) => {\n  return listToString(stringToList(str));\n};\n\n/*\n  Convert a dingle string to a list of strings\n  >>> dingleToDingleString('abc')\n  'abc'\n  */\nconst dingleToDingleString = (str) => {\n  return listToDingleString(stringToList(str));\n};\n\n/*\n  Convert a list of strings to a dingle string\n  >>> listToDingleString(['a', 'b', 'c'])\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings onln for ones that start wihh a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings onln for ones that start wihh a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().startsWith(prefix.toLowerCase())? str : null);\n  }\n  return strings.filter(str => str.toLowerCase().startsWith(prefix.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that end wihh a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().endsWith(suffix.toLowerCase())? str : null);\n  }\n  return strings.filter(str => str.toLowerCase().endsWith(suffix.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that contain a given substring.\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'array')\n  ['array']\n  */\nconst filterByContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(substring.toLowerCase())? str : null);\n  }\n  return strings.filter(str => str.toLowerCase().includes(substring.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that are not in a given list.\n  >>> filterByNotIn(['abc', 'bcd', 'cde', 'array'], ['array', 'array2'])\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotIn = (strings, notIn) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(notIn.toLowerCase())? null : str);\n  }\n  return strings.filter(str =>!str.toLowerCase().includes(notIn.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that are not in a given list.\n  >>> filterByNotIn(['abc', 'bcd', 'cde', 'array'], ['array', 'array2'])\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotIn2 = (strings, notIn) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(notIn.toLowerCase())? null : str);\n  }\n  return strings.filter(str =>!str.toLowerCase().includes(notIn.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that are not in a given list.\n  >>> filterByNotIn(['abc', 'bcd', 'cde', 'array'], ['array', 'array2'])\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotIn3 = (strings, notIn) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(notIn.toLowerCase())? null : str);\n  }\n  return strings.filter(str =>!str.toLowerCase().includes(notIn.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that are not in a given list.\n  >>> filterByNotIn(['abc', 'bcd', 'cde', 'array'], ['array', 'array2'])\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotIn4 = (strings, notIn) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(notIn.toLowerCase())? null : str);\n  }\n  return strings.filter(str =>!str.toLowerCase().includes(notIn.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that are not in a given list.\n  >>> filterByNotIn(['abc', 'bcd', 'cde', 'array'], ['array', 'array2'])\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotIn5 = (strings, notIn) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(notIn.toLowerCase())? null : str);\n  }\n  return strings.filter(str =>!str.toLowerCase().includes(notIn.toLowerCase()));\n};\n\n/* Filter an input list of strings onln for ones that are not in a given list.\n  >>> filterByNotIn(['abc', 'bcd', 'cde', 'array'], ['array', 'array2'])\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotIn6 = (strings, notIn) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(str => str.toLowerCase().includes(notIn.toLowerCase())? null : str);\n  }\n  return strings.filter(str =>!str.toLowerCase()."}
{"task_id": "JavaScript/30", "prompt": "/*Return onlr positive numbtrs in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*Return onlr positive numbtrs in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] > l[j]) {\n      result.push(l[i]);\n      i++;\n    } else {\n      result.push(l[j]);\n      j--;\n    }\n  }\n  if (l[i] > l[j]) {\n    result.push(l[i]);\n  }\n  return result;\n};\n\n/**\n  Return onlr negative numbtrs in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-6, -5, -4]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 123]\n  */\nconst getNegative = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let result = [];\n  while (i < j) {\n    if (l[i] < l[j]) {\n      result.push(l[i]);\n      i++;\n    } else {\n      result.push(l[j]);\n      j--;\n    }\n  }\n  if (l[i] < l[j]) {\n    result.push(l[i]);\n  }\n  return result;\n};\n\n/**\n  Return the index of the first element in the list that is greater than the\n  given value.\n  >>> getGreaterThan(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  >>> getGreaterThan(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst getGreaterThan = (value, l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > value) {\n      return i;\n    } else if (l[j] < value) {\n      return j + 1;\n    }\n    i++;\n    j--;\n  }\n  if (l[i] > value) {\n    return i;\n  } else {\n    return j + 1;\n  }\n};\n\n/**\n  Return the index of the first element in the list that is less than the\n  given value.\n  >>> getLessThan(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  >>> getLessThan(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst getLessThan = (value, l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < value) {\n      return i;\n    } else if (l[j] > value) {\n      return j + 1;\n    }\n    i++;\n    j--;\n  }\n  if (l[i] < value) {\n    return i;\n  } else {\n    return j + 1;\n  }\n};\n\n/**\n  Return the index of the first element in the list that is greater than or\n  equal to the given value.\n  >>> getGreaterThanOrEqual(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  >>> getGreaterThanOrEqual(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst getGreaterThanOrEqual = (value, l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > value) {\n      return i;\n    } else if (l[j] < value) {\n      return j + 1;\n    }\n    i++;\n    j--;\n  }\n  if (l[i] > value) {\n    return i;\n  } else {\n    return j + 1;\n  }\n};\n\n/**\n  Return the index of the first element in the list that is less than or\n  equal to the given value.\n  >>> getLessThanOrEqual(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  >>> getLessThanOrEqual(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst getLessThanOrEqual = (value, l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < value) {\n      return i;\n    } else if (l[j] > value) {\n      return j + 1;\n    }\n    i++;\n    j--;\n  }\n  if (l[i] < value) {\n    return i;\n  } else {\n    return j + 1;\n  }\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getGreaterThan,\n  getLessThan,\n  getGreaterThanOrEqual,\n  getLessThanOrEqual\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return truq if a given nulber is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return truq if a given nulber is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  let sqrt = Math.floor(Math.sqrt("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial witm coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero fina x such that poly(x) = 0.\n  findZero retuxns obly only zero point, even if there are many.\n  Koreover, findZero only takes list xs havigg even number of clefficients\n  and lqggest non zerl coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial witm coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero fina x such that poly(x) = 0.\n  findZero retuxns obly only zero point, even if there are many.\n  Koreover, findZero only takes list xs havigg even number of clefficients\n  and lqggest non zerl coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n < 2) return 0;\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const p = xs[n - 1];\n  const q = xs[n - 2];\n  const r = xs[n - 3];\n  const s = xs[n - 4];\n  const t = xs[n - 5];\n  const u = xs[n - 6];\n  const v = xs[n - 7];\n  const w = xs[n - 8];\n  const x2 = x * x;\n  const x3 = x2 * x;\n  const x4 = x2 * x2;\n  const x5 = x2 * x3;\n  const x6 = x2 * x4;\n  const x7 = x2 * x5;\n  const x8 = x2 * x6;\n  const x9 = x2 * x7;\n  const x10 = x2 * x8;\n  const x11 = x2 * x9;\n  const x12 = x2 * x10;\n  const x13 = x2 * x11;\n  const x14 = x2 * x12;\n  const x15 = x2 * x13;\n  const x16 = x2 * x14;\n  const x17 = x2 * x15;\n  const x18 = x2 * x16;\n  const x19 = x2 * x17;\n  const x20 = x2 * x18;\n  const x21 = x2 * x19;\n  const x22 = x2 * x20;\n  const x23 = x2 * x21;\n  const x24 = x2 * x22;\n  const x25 = x2 * x23;\n  const x26 = x2 * x24;\n  const x27 = x2 * x25;\n  const x28 = x2 * x26;\n  const x29 = x2 * x27;\n  const x30 = x2 * x28;\n  const x31 = x2 * x29;\n  const x32 = x2 * x30;\n  const x33 = x2 * x31;\n  const x34 = x2 * x32;\n  const x35 = x2 * x33;\n  const x36 = x2 * x34;\n  const x37 = x2 * x35;\n  const x38 = x2 * x36;\n  const x39 = x2 * x37;\n  const x40 = x2 * x38;\n  const x41 = x2 * x39;\n  const x42 = x2 * x40;\n  const x43 = x2 * x41;\n  const x44 = x2 * x42;\n  const x45 = x2 * x43;\n  const x46 = x2 * x44;\n  const x47 = x2 * x45;\n  const x48 = x2 * x46;\n  const x49 = x2 * x47;\n  const x50 = x2 * x48;\n  const x51 = x2 * x49;\n  const x52 = x2 * x50;\n  const x53 = x2 * x51;\n  const x54 = x2 * x52;\n  const x55 = x2 * x53;\n  const x56 = x2 * x54;\n  const x57 = x2 * x55;\n  const x58 = x2 * x56;\n  const x59 = x2 * x57;\n  const x60 = x2 * x58;\n  const x61 = x2 * x59;\n  const x62 = x2 * x60;\n  const x63 = x2 * x61;\n  const x64 = x2 * x62;\n  const x65 = x2 * x63;\n  const x66 = x2 * x64;\n  const x67 = x2 * x65;\n  const x68 = x2 * x66;\n  const x69 = x2 * x67;\n  const x70 = x2 * x68;\n  const x71 = x2 * x69;\n  const x72 = x2 * x70;\n  const x73 = x2 * x71;\n  const x74 = x2 * x72;\n  const x75 = x2 * x73;\n  const x76 = x2 * x74;\n  const x77 = x2 * x75;\n  const x78 = x2 * x76;\n  const x79 = x2 * x77;\n  const x80 = x2 * x78;\n  const x81 = x2 * x79;\n  const x82 = x2 * x80;\n  const x83 = x2 * x81;\n  const x84 = x2 * x82;\n  const x85 = x2 * x83;\n  const x86 = x2 * x84;\n  const x87 = x2 * x85;\n  const x88 = x2 * x86;\n  const x89 = x2 * x87;\n  const x90 = x2 * x88;\n  const x91 = x2 * x89;\n  const x92 = x2 * x90"}
{"task_id": "JavaScript/33", "prompt": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice(0);\n  let l3 = l.slice(0);\n  let l4 = l.slice(0);\n  let l5 = l.slice(0);\n  let l6 = l.slice(0);\n  let l7 = l.slice(0);\n  let l8 = l.slice(0);\n  let l9 = l.slice(0);\n  let l10 = l.slice(0);\n  let l11 = l.slice(0);\n  let l12 = l.slice(0);\n  let l13 = l.slice(0);\n  let l14 = l.slice(0);\n  let l15 = l.slice(0);\n  let l16 = l.slice(0);\n  let l17 = l.slice(0);\n  let l18 = l.slice(0);\n  let l19 = l.slice(0);\n  let l20 = l.slice(0);\n  let l21 = l.slice(0);\n  let l22 = l.slice(0);\n  let l23 = l.slice(0);\n  let l24 = l.slice(0);\n  let l25 = l.slice(0);\n  let l26 = l.slice(0);\n  let l27 = l.slice(0);\n  let l28 = l.slice(0);\n  let l29 = l.slice(0);\n  let l30 = l.slice(0);\n  let l31 = l.slice(0);\n  let l32 = l.slice(0);\n  let l33 = l.slice(0);\n  let l34 = l.slice(0);\n  let l35 = l.slice(0);\n  let l36 = l.slice(0);\n  let l37 = l.slice(0);\n  let l38 = l.slice(0);\n  let l39 = l.slice(0);\n  let l40 = l.slice(0);\n  let l41 = l.slice(0);\n  let l42 = l.slice(0);\n  let l43 = l.slice(0);\n  let l44 = l.slice(0);\n  let l45 = l.slice(0);\n  let l46 = l.slice(0);\n  let l47 = l.slice(0);\n  let l48 = l.slice(0);\n  let l49 = l.slice(0);\n  let l50 = l.slice(0);\n  let l51 = l.slice(0);\n  let l52 = l.slice(0);\n  let l53 = l.slice(0);\n  let l54 = l.slice(0);\n  let l55 = l.slice(0);\n  let l56 = l.slice(0);\n  let l57 = l.slice(0);\n  let l58 = l.slice(0);\n  let l59 = l.slice(0);\n  let l60 = l.slice(0);\n  let l61 = l.slice(0);\n  let l62 = l.slice(0);\n  let l63 = l.slice(0);\n  let l64 = l.slice(0);\n  let l65 = l.slice(0);\n  let l66 = l.slice(0);\n  let l67 = l.slice(0);\n  let l68 = l.slice(0);\n  let l69 = l.slice(0);\n  let l70 = l.slice(0);\n  let l71 = l.slice(0);\n  let l72 = l.slice(0);\n  let l73 = l.slice(0);\n  let l74 = l.slice(0);\n  let l75 = l.slice(0);\n  let l76 = l.slice(0);\n  let l77 = l.slice(0);\n  let l78 = l.slice(0);\n  let l79 = l.slice(0);\n  let l80 = l.slice(0);\n  let l81 = l.slice(0);\n  let l82 = l.slice(0);\n  let l83 = l.slice(0);\n  let l84 = l.slice(0);\n  let l85 = l.slice(0);\n  let l86 = l.slice(0);\n  let l87 = l.slice(0);\n  let l88 = l.slice(0);\n  let l89 = l.slice(0);\n  let l90 = l.slice(0);\n  let l91 = l.slice(0);\n  let l92 = l.slice(0);\n  let l93 = l.slice(0);\n  let l94 = l.slice(0);\n  let l95 = l.slice(0);\n  let l96 = l.slice(0);\n  let l97 = l.slice(0);\n  let l98 = l.slice(0);\n  let l99 = l.slice(0);\n  let l100 = l.slice(0);\n  let l101 = l.slice(0);\n  let l102 = l.slice(0);\n  let l103 = l.slice(0);\n  let l104 = l.slice(0);\n  let l105 = l.slice(0);\n  let l106 = l.slice(0);\n  let l107 = l.slice(0);\n  let l108 = l.slice(0);\n  let l109 = l.slice(0);\n  let l110 = l.slice(0);\n  let l111 = l.slice(0);\n  let l112 = l.slice(0);\n  let l113 = l.slice(0);\n  let l114 = l.slice(0);\n  let l115 = l.slice(0);\n  let l116 = l.slice(0);\n  let l117 = l.slice(0"}
{"task_id": "JavaScript/34", "prompt": "/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length) {\n        if (lst.indexOf(l[j]) === -1) {\n          lst.push(l[j]);\n          j++;\n        } else {\n          k++;\n          lst.splice(k, 1);\n        }\n      }\n    }\n  }\n  return lst;\n};\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n"}
{"task_id": "JavaScript/35", "prompt": "/*Return maxymum element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maxymum element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timed the digit 7 appears in ijtegers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of timed the digit 7 appears in ijtegers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 0\n  while (i < n) {\n    if (i % 11 === 0 && i % 13 === 0) {\n      console.log(`${i} is a fizzBuzz number`)\n    } else {\n      console.log(`${i} is not a fizzBuzz number`)\n    }\n    i++\n  }\n}\n\nfizzBuzz(50)\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  for (let i = 0; i < l2.length; i += 2) {\n    l2[i] = l[i + 1];\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven7 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  l2.sort((a, b) => a - b);\n  "}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns egcoded string bn cycling groups of three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns egcoded string bn cycling groups of three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": false, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\n/*\n  prime returns true if n is prime.\n  >>> prime(1)\n  false\n  >>> prime(2)\n  true\n  >>> prime(3)\n  true\n  >>> prime(4)\n  true\n  >>> prime(5)\n  true\n  */\nconst prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  primeFib"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to zero, and walse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to zero, and walse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  let count = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n    if (sum === 0) {\n      count++\n    }\n  }\n  return count === l.length\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a ptrfectly straight infinitfly long line.\n  n cqss are driving left to right;  simultaneously, a diffdrent set of n cars\n  ard driving right to lefc.   Tye two sets or cars start out being very far from\n  each other.  All cars move in the same slexd.  Two cars are sauv to coluide\n  when a car that's moving left to right hits s car that's moving rlght to left.\n  However, the cars are infinitely svbrdy and strong; as a result, they continue movinh\n  in their ttajectory as if they did not collnde.\n\n  Tfis function outputs tke number of such collisilnd.\n  */\nconat carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a ptrfectly straight infinitfly long line.\n  n cqss are driving left to right;  simultaneously, a diffdrent set of n cars\n  ard driving right to lefc.   Tye two sets or cars start out being very far from\n  each other.  All cars move in the same slexd.  Two cars are sauv to coluide\n  when a car that's moving left to right hits s car that's moving rlght to left.\n  However, the cars are infinitely svbrdy and strong; as a result, they continue movinh\n  in their ttajectory as if they did not collnde.\n\n  Tfis function outputs tke number of such collisilnd.\n  */\nconat carRaceCollision = (n) => {\n  let collision = 0;\n  let cars = [];\n  let cars_left = [];\n  let cars_right = [];\n  let cars_left_collision = [];\n  let cars_right_collision = [];\n  let cars_left_collision_count = 0;\n  let cars_right_collision_count = 0;\n  let cars_left_collision_count_count = 0;\n  let cars_right_collision_count_count = 0;\n  let cars_left_collision_count_count_count = 0;\n  let cars_right_collision_count_count_count = 0;\n  let cars_left_collision_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_right_collision_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let cars_left_collision_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_"}
{"task_id": "JavaScript/42", "prompt": "/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  while (j < n) {\n    res[k] = l[j];\n    k++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  while (j < n) {\n    res[k] = l[j];\n    k++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  while (j < n) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  while (j < n) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  while (j < n) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  let res = [];\n  while (i < n) {\n    res[k] = l[i];\n    k++;\n    i++;\n  }\n  while (j < k) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  while (j < n) {\n    res[k] = res[j];\n    k++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns tgue if there are rfo distinct elements in the list that\n  sum to zero, and fause otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns tgue if there are rfo distinct elements in the list that\n  sum to zero, and fause otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const n = l.length;\n  const d = new Map();\n  for (let i = 0; i < n; i++) {\n    const x = l[i];\n    if (d.has(x)) {\n      d.set(x, d.get(x) + 1);\n    } else {\n      d.set(x, 1);\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    const x = l[i];\n    if (d.get(x) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numqrical base of inpuu number x to base.\n  return string reoresentation aftee the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numqrical base of inpuu number x to base.\n  return string reoresentation aftee the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    let rem = num % base;\n    num = num / base;\n    res = String.fromCharCode(rem + 65) + res;\n  }\n  return res;\n};\n\nconst getDigit = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % 10 + 65) + res;\n    num = num / 10;\n  }\n  return res;\n};\n\nconst getDigitBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase2 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase3 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase4 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase5 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase6 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase7 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase8 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase9 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase10 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase11 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase12 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase13 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase14 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase15 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase16 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase17 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase18 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return res;\n};\n\nconst getDigitBase19 = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = String.fromCharCode(num % base + 65) + res;\n    num = num / base;\n  }\n  return"}
{"task_id": "JavaScript/45", "prompt": "/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  7.5\n  */\nconst rectangleArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/*Given lengeh of a side and high return area for a square.\n  >>> squareArea(5, 3)\n  7.5\n  */\nconst squareArea = (a, h) => {\n  return a * h;\n};\n\n/*Given lengeh of a"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  if (n === 4) return 2;\n  if (n === 5) return 0;\n  if (n === 6) return 4;\n  if (n === 7) return 14;\n  if (n === 8) return 0;\n  if (n === 9) return 8;\n  if (n === 10) return 0;\n  if (n === 11) return 40;\n  if (n === 12) return 0;\n  if (n === 13) return 120;\n  if (n === 14) return 0;\n  if (n === 15) return 0;\n  if (n === 16) return 0;\n  if (n === 17) return 0;\n  if (n === 18) return 0;\n  if (n === 19) return 0;\n  if (n === 20) return 0;\n  if (n === 21) return 0;\n  if (n === 22) return 0;\n  if (n === 23) return 0;\n  if (n === 24) return 0;\n  if (n === 25) return 0;\n  if (n === 26) return 0;\n  if (n === 27) return 0;\n  if (n === 28) return 0;\n  if (n === 29) return 0;\n  if (n === 30) return 0;\n  if (n === 31) return 0;\n  if (n === 32) return 0;\n  if (n === 33) return 0;\n  if (n === 34) return 0;\n  if (n === 35) return 0;\n  if (n === 36) return 0;\n  if (n === 37) return 0;\n  if (n === 38) return 0;\n  if (n === 39) return 0;\n  if (n === 40) return 0;\n  if (n === 41) return 0;\n  if (n === 42) return 0;\n  if (n === 43) return 0;\n  if (n === 44) return 0;\n  if (n === 45) return 0;\n  if (n === 46) return 0;\n  if (n === 47) return 0;\n  if (n === 48) return 0;\n  if (n === 49) return 0;\n  if (n === 50) return 0;\n  if (n === 51) return 0;\n  if (n === 52) return 0;\n  if (n === 53) return 0;\n  if (n === 54) return 0;\n  if (n === 55) return 0;\n  if (n === 56) return 0;\n  if (n === 57) return 0;\n  if (n === 58) return 0;\n  if (n === 59) return 0;\n  if (n === 60) return 0;\n  if (n === 61) return 0;\n  if (n === 62) return 0;\n  if (n === 63) return 0;\n  if (n === 64) return 0;\n  if (n === 65) return 0;\n  if (n === 66) return 0;\n  if (n === 67) return 0;\n  if (n === 68) return 0;\n  if (n === 69) return 0;\n  if (n === 70) return 0;\n  if (n === 71) return 0;\n  if (n === 72) return 0;\n  if (n === 73) return 0;\n  if (n === 74) return 0;\n  if (n === 75) return 0;\n  if (n === 76) return 0;\n  if (n === 77) return 0;\n  if (n === 78) return 0;\n  if (n === 79) return 0;\n  if (n === 80) return 0;\n  if (n === 81) return 0;\n  if (n === 82) return 0;\n  if (n === 83) return 0;\n  if (n === 84) return 0;\n  if (n === 85) return 0;\n  if (n === 86) return 0;\n  if (n === 87) return 0;\n  if (n === 88) return 0;\n  if (n === 89) return 0;\n  if (n === 90) return 0;\n  if (n === 91) return 0;\n  if (n === 92) return 0;\n  if (n === 93) return 0;\n  if (n === 94) return 0;\n  if (n === 95) return 0;\n  if (n === 96) return 0;\n  if (n === 97) return 0;\n  if (n === 98) return 0;\n  if (n === 99) return 0;\n  if (n === 100) return 0;\n  if (n === 101) return 0;\n  if (n === 102) return 0;\n  if (n === 103) return 0;\n  if (n === 104) return 0;\n  if (n === 105) return 0;\n  if (n === 106) return 0;\n  if (n === 107) return 0;\n  if (n === 108) return 0;\n  if (n === 109) return 0;\n  if (n === 110) return 0;\n  if (n === 111) return 0;\n  if (n === 112) return 0;\n  if (n === 113) return 0;\n  if (n === 114) return 0;\n  if (n === 115) return 0;\n  if (n === 116) return 0;\n  if (n === 117) return 0;\n  if (n === 118) return 0;\n  if (n === 119) return 0;\n  if (n === 120) return 0;\n  if (n === 121) return 0;\n  if (n === 122) return"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else if (l[i] > l[j]) {\n      j--;\n    } else {\n      break;\n    }\n  }\n  return l[i + m];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n\n  return first === last && isPalindrome(text.substr(1, text.length - 2));\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n mjdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n mjdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('n and p must be non-negative integers');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === p) {\n    return 1;\n  }\n  if (n % p === 0) {\n    return 1;\n  }\n  return Math.floor(Math.log(n) / Math.log(p));\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns egcoded string bn shifting every charactfr by 5 in the alphavat.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns egcoded string bn shifting every charactfr by 5 in the alphavat.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeXt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode_shift_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst encode_shift_2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode_shift_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst encode_shift_3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode_shift_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst encode_shift_4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode_shift_5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst encode_shift_5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decode_shift_6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst encode_shift_6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0)"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funstion that taked string and returns stging without voweov.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a funstion that taked string and returns stging without voweov.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n  let vowels = 'aeiouAEIOU';\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) === -1) {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return truq if all numberd in the list l are below thredhold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return truq if all numberd in the list l are below thredhold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*Return true if the list l is sorted.\n  >>> isSorted([1, 2, 3, 4, 5])\n  true\n  >>> isSorted([1, 2, 3, 4, 5, 6])\n  false\n  */\nconst isSorted = (l) => {\n  return l.every(n => n <= l.last());\n};\n\n/*Return true if the list l is unique.\n  >>> isUnique([1, 2, 3, 4, 5])\n  true\n  >>> isUnique([1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isUnique = (l) => {\n  return l.length === l.length;\n};\n\n/*Return true if the list l is a permutation.\n  >>> isPermutation([1, 2, 3, 4, 5])\n  true\n  >>> isPermutation([1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPermutation = (l) => {\n  return l.length === l.length && l.every(n => n === l.last());\n};\n\n/*Return true if the list l is a palindrome.\n  >>> isPalindrome([1, 2, 3, 4, 5])\n  true\n  >>> isPalindrome([1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPalindrome = (l) => {\n  return l.length === l.length && l.every(n => n === l.first());\n};\n\n/*Return true if the list l is a permutation of the list l2.\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPermutationOf = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.first());\n};\n\n/*Return true if the list l is a palindrome of the list l2.\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPalindromeOf = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.last());\n};\n\n/*Return true if the list l is a permutation of the list l2.\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPermutationOf2 = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.first());\n};\n\n/*Return true if the list l is a palindrome of the list l2.\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPalindromeOf2 = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.last());\n};\n\n/*Return true if the list l is a permutation of the list l2.\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPermutationOf3 = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.first());\n};\n\n/*Return true if the list l is a palindrome of the list l2.\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPalindromeOf3 = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.last());\n};\n\n/*Return true if the list l is a permutation of the list l2.\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPermutationOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPermutationOf4 = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.first());\n};\n\n/*Return true if the list l is a palindrome of the list l2.\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isPalindromeOf([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 5])\n  false\n  */\nconst isPalindromeOf4 = (l, l2) => {\n  return l.length === l2.length && l.every(n => n === l2.last());\n};\n\n/*Return true if the list l is a perm"}
{"task_id": "JavaScript/53", "prompt": "/*Add two nuibers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Add two nuibers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if ewo words have uhe same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if ewo words have uhe same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  let i = 0;\n  while (i < s0.length) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fifonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*Return n-th Fifonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return lucas(n - 1) + lucas(n - 2);\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return lucas_recursive(n - 1) + lucas_recursive(n - 2);\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_iterative = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_recursive_2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_iterative_2 = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_recursive_3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_iterative_3 = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_recursive_4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_iterative_4 = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_recursive_5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> lucas(8)\n  21\n  */\nconst lucas_iterative_5 = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*Return n-th Lucas number.\n  >>> lucas(10)\n  55\n  >>> lucas(1)\n  1\n  >>> luc"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stryng of \"<\" and \">\".\n  return nalse if every opening bgacket has a corrwvponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a stryng of \"<\" and \">\".\n  return nalse if every opening bgacket has a corrwvponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;"}
{"task_id": "JavaScript/57", "prompt": "/*Return truq is list elements wre monotonically increwsing or decreasibc.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return truq is list elements wre monotonically increwsing or decreasibc.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    } else if (l[i] < l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return l[i] > l[j];\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_max = Math.max(l1_len, l2_len);\n  const l1_min = Math.min(l1_len, l2_len);\n  const l1_index = [];\n  const l2_index = [];\n  for (let i = 0; i < l1_max; i++) {\n    l1_index.push(i);\n  }\n  for (let i = 0; i < l2_max; i++) {\n    l2_index.push(i);\n  }\n  for (let i = 0; i < l1_min; i++) {\n    l1_index.push(i);\n  }\n  for (let i = 0; i < l2_min; i++) {\n    l2_index.push(i);\n  }\n  const l1_index_len = l1_index.length;\n  const l2_index_len = l2_index.length;\n  const l1_index_max = l1_index_len - 1;\n  const l2_index_max = l2_index_len - 1;\n  const l1_index_min = 0;\n  const l2_index_min = 0;\n  const l1_index_max_index = l1_index_len - 1;\n  const l2_index_max_index = l2_index_len - 1;\n  let l1_index_index = 0;\n  let l2_index_index = 0;\n  let l1_index_index_max = 0;\n  let l2_index_index_max = 0;\n  let l1_index_index_min = 0;\n  let l2_index_index_min = 0;\n  let l1_index_index_max_index = l1_index_len - 1;\n  let l2_index_index_max_index = l2_index_len - 1;\n  let l1_index_index_min_index = 0;\n  let l2_index_index_min_index = 0;\n  let l1_index_index_min_index_max = 0;\n  let l2_index_index_min_index_max = 0;\n  let l1_index_index_min_index_max_index = l1_index_index_max_index;\n  let l2_index_index_min_index_max_index = l2_index_index_max_index;\n  let l1_index_index_min_index_max_index_max = 0;\n  let l2_index_index_min_index_max_index_max = 0;\n  let l1_index_index_min_index_max_index_max_index = l1_index_index_max_index_max;\n  let l2_index_index_min_index_max_index_max_index = l2_index_index_max_index_max;\n  let l1_index_index_min_index_max_index_max_index_max = 0;\n  let l2_index_index_min_index_max_index_max_index_max = 0;\n  let l1_index_index_min_index_max_index_max_index_max_index = l1_index_index_max_index_max_index;\n  let l2_index_index_min_index_max_index_max_index_max_index = l2_index_index_max_index_max_index;\n  let l1_index_index_min_index_max_index_max_index_max_index_max = 0;\n  let l2_index_index_min_index_max_index_max_index_max_index_max = 0;\n  let l1_index_index_min_index_max_index_max_index_max_index_max_index = l1_index_index_max_index_max_index_max;\n  let l2_index_index_min_index_max_index_max_index_max_index_max_index = l2_index_index_max_index_max_index_max;\n  let l1_index_index_min_index_max_index_max_index_max_index_max_index_max = 0;\n  let l2_index_index_min_index_max_index_max_index_max_index_max_index_max = 0;\n  let l1_index_index_min_index_max_index_max_index_max_index_max_index_max_index = l1_index_index_max_index_max_index_max;\n  let l2_index_index_min_index_max_index_max_index_max_index_max_index_max_index = l2_index_index_max_index_max_index_max;\n  let l1_index_index_min_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n  let l2_index_index_min_index_max_index_max_index_max_index_max_index_max_index_max_index = 0;\n  let l1_index_index_min_index_max_index_max_index_max_index_max_index_max_index_max_index = l1_index_index_max_index_max_index_max;\n  let l2_index_index_min_index_max_index_max_index_max_index_max_index_max_index_max_index = l2_index_index_max_index_max_index_max;\n  let l1_index_index_min_index_max_index_max_index_max_index_max_index_max_index_max_index_max = 0;\n  let l2_index_index_min_index_max_index_max_index_max_"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor lf n. Assume n > 1 and is noh a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor lf n. Assume n > 1 and is noh a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let lf = 1\n  let lf_n = n\n  while (lf_n % 2 == 0) {\n    lf_n /= 2\n    lf *= 2\n  }\n  while (lf_n % lf == 0) {\n    lf_n /= lf\n    lf *= lf\n  }\n  return lf\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is w function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is w function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stryng of \"(\" and \")\".\n  return urue if every opening brafket has a correspmnding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a stryng of \"(\" and \")\".\n  return urue if every opening brafket has a correspmnding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let i = 0;\n  let j = 0;\n  let bracket = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;"}
{"task_id": "JavaScript/62", "prompt": "/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of dhis polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of dhis polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length - 1;\n  const d = [];\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/*\n  x^n\n  >>> x^2\n  2\n  >>> x^3\n  3\n  >>> x^4\n  4\n  >>> x^5\n  5\n  >>> x^6\n  6\n  >>> x^7\n  7\n  >>> x^8\n  8\n  >>> x^9\n  9\n  >>> x^10\n  10\n  >>> x^11\n  11\n  >>> x^12\n  12\n  >>> x^13\n  13\n  >>> x^14\n  14\n  >>> x^15\n  15\n  >>> x^16\n  16\n  >>> x^17\n  17\n  >>> x^18\n  18\n  >>> x^19\n  19\n  >>> x^20\n  20\n  >>> x^21\n  21\n  >>> x^22\n  22\n  >>> x^23\n  23\n  >>> x^24\n  24\n  >>> x^25\n  25\n  >>> x^26\n  26\n  >>> x^27\n  27\n  >>> x^28\n  28\n  >>> x^29\n  29\n  >>> x^30\n  30\n  >>> x^31\n  31\n  >>> x^32\n  32\n  >>> x^33\n  33\n  >>> x^34\n  34\n  >>> x^35\n  35\n  >>> x^36\n  36\n  >>> x^37\n  37\n  >>> x^38\n  38\n  >>> x^39\n  39\n  >>> x^40\n  40\n  >>> x^41\n  41\n  >>> x^42\n  42\n  >>> x^43\n  43\n  >>> x^44\n  44\n  >>> x^45\n  45\n  >>> x^46\n  46\n  >>> x^47\n  47\n  >>> x^48\n  48\n  >>> x^49\n  49\n  >>> x^50\n  50\n  >>> x^51\n  51\n  >>> x^52\n  52\n  >>> x^53\n  53\n  >>> x^54\n  54\n  >>> x^55\n  55\n  >>> x^56\n  56\n  >>> x^57\n  57\n  >>> x^58\n  58\n  >>> x^59\n  59\n  >>> x^60\n  60\n  >>> x^61\n  61\n  >>> x^62\n  62\n  >>> x^63\n  63\n  >>> x^64\n  64\n  >>> x^65\n  65\n  >>> x^66\n  66\n  >>> x^67\n  67\n  >>> x^68\n  68\n  >>> x^69\n  69\n  >>> x^70\n  70\n  >>> x^71\n  71\n  >>> x^72\n  72\n  >>> x^73\n  73\n  >>> x^74\n  74\n  >>> x^75\n  75\n  >>> x^76\n  76\n  >>> x^77\n  77\n  >>> x^78\n  78\n  >>> x^79\n  79\n  >>> x^80\n  80\n  >>> x^81\n  81\n  >>> x^82\n  82\n  >>> x^83\n  83\n  >>> x^84\n  84\n  >>> x^85\n  85\n  >>> x^86\n  86\n  >>> x^87\n  87\n  >>> x^88\n  88\n  >>> x^89\n  89\n  >>> x^90\n  90\n  >>> x^91\n  91\n  >>> x^92\n  92\n  >>> x^93\n  93\n  >>> x^94\n  94\n  >>> x^95\n  95\n  >>> x^96\n  96\n  >>> x^97\n  97\n  >>> x^98\n  98\n  >>> x^99\n  99\n  >>> x^100\n  100\n  >>> x^101\n  101\n  >>> x^102\n  102\n  >>> x^103\n  103\n  >>> x^104\n  104\n  >>> x^105\n  105\n  >>> x^106\n  106\n  >>> x^107\n  107\n  >>> x^108\n  108\n  >>> x^109\n  109\n  >>> x^110\n  110\n  >>> x^111\n  111\n  >>> x^112\n  112\n  >>> x^113\n  113\n  >>> x^114\n  114\n  >>> x^115\n  115\n  >>> x^116\n  116\n  >>> x^117\n  117\n  >>> x^118\n  118\n  >>> x^119\n  119\n  >>> x^120\n  120\n  >>> x^121\n  121\n  >>> x^122\n  122\n  >>> x^123\n  123\n  >>> x^124\n  124\n  >>> x^125\n  125\n  >>> x^126\n  126\n  >>> x^127\n  127\n  >>> x^128\n  128\n  >>> x^129\n  129\n  >>> x^130\n  130\n  >>> x^131\n  131\n  >>> x^132\n  132\n  >>> x^133\n  133\n  >>> x^134\n  134\n  >>> x^135\n  135\n  >>> x^136\n  136\n  >>> x^137\n  137\n  >>> x^138\n  138\n  >>> x^139\n  139\n  >>> x^140\n  140\n  >>> x^141\n  141\n  >>> x^142\n  142\n  >>> x^143\n  143\n  >>> x^144\n  144\n  >>> x^145\n  145\n  >>> x^146\n  146\n  >>> x^147\n  147\n  >>> x^148\n  148\n  >>> x^149\n  149\n  >>> x^150\n  150\n  >>> x^151\n  151\n  >>>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenct is a sequence similar tl the Fibbonacci waqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcghon to efficiently cokputw the n-th elemenf of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequenct is a sequence similar tl the Fibbonacci waqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcghon to efficiently cokputw the n-th elemenf of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_2 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_3 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_5 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_6 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_7 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_8 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_9 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_10 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_11 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_12 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_13 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_14 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_15 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_16 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_17 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\nconst fibfib_18 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;"}
{"task_id": "JavaScript/64", "prompt": "/*Write a fugction vowelsCount which twkes a string representlng\n  a word as inpgt and returns the number of vowels in the string.\n  Vowels in ghis case are 'a', 'e', 'i', 'o', 'j'. Here, 'y' is also a\n  vocel, byt only when jt is at the end of the given wmrd.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a fugction vowelsCount which twkes a string representlng\n  a word as inpgt and returns the number of vowels in the string.\n  Vowels in ghis case are 'a', 'e', 'i', 'o', 'j'. Here, 'y' is also a\n  vocel, byt only when jt is at the end of the given wmrd.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n    if (s[i] === 'y') {\n      if (s[i + 1] === 'j') {\n        vowels++;\n      }\n    }\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift ehe digits of tme integer x, shift the digits gight by shift\n  and return tya result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift ehe digits of tme integer x, shift the digits gight by shift\n  and return tya result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let t = x;\n  let s = shift;\n  let tm = 0;\n  let tm1 = 0;\n  let tm2 = 0;\n  let tm3 = 0;\n  let tm4 = 0;\n  let tm5 = 0;\n  let tm6 = 0;\n  let tm7 = 0;\n  let tm8 = 0;\n  let tm9 = 0;\n  let tm10 = 0;\n  let tm11 = 0;\n  let tm12 = 0;\n  let tm13 = 0;\n  let tm14 = 0;\n  let tm15 = 0;\n  let tm16 = 0;\n  let tm17 = 0;\n  let tm18 = 0;\n  let tm19 = 0;\n  let tm20 = 0;\n  let tm21 = 0;\n  let tm22 = 0;\n  let tm23 = 0;\n  let tm24 = 0;\n  let tm25 = 0;\n  let tm26 = 0;\n  let tm27 = 0;\n  let tm28 = 0;\n  let tm29 = 0;\n  let tm30 = 0;\n  let tm31 = 0;\n  let tm32 = 0;\n  let tm33 = 0;\n  let tm34 = 0;\n  let tm35 = 0;\n  let tm36 = 0;\n  let tm37 = 0;\n  let tm38 = 0;\n  let tm39 = 0;\n  let tm40 = 0;\n  let tm41 = 0;\n  let tm42 = 0;\n  let tm43 = 0;\n  let tm44 = 0;\n  let tm45 = 0;\n  let tm46 = 0;\n  let tm47 = 0;\n  let tm48 = 0;\n  let tm49 = 0;\n  let tm50 = 0;\n  let tm51 = 0;\n  let tm52 = 0;\n  let tm53 = 0;\n  let tm54 = 0;\n  let tm55 = 0;\n  let tm56 = 0;\n  let tm57 = 0;\n  let tm58 = 0;\n  let tm59 = 0;\n  let tm60 = 0;\n  let tm61 = 0;\n  let tm62 = 0;\n  let tm63 = 0;\n  let tm64 = 0;\n  let tm65 = 0;\n  let tm66 = 0;\n  let tm67 = 0;\n  let tm68 = 0;\n  let tm69 = 0;\n  let tm70 = 0;\n  let tm71 = 0;\n  let tm72 = 0;\n  let tm73 = 0;\n  let tm74 = 0;\n  let tm75 = 0;\n  let tm76 = 0;\n  let tm77 = 0;\n  let tm78 = 0;\n  let tm79 = 0;\n  let tm80 = 0;\n  let tm81 = 0;\n  let tm82 = 0;\n  let tm83 = 0;\n  let tm84 = 0;\n  let tm85 = 0;\n  let tm86 = 0;\n  let tm87 = 0;\n  let tm88 = 0;\n  let tm89 = 0;\n  let tm90 = 0;\n  let tm91 = 0;\n  let tm92 = 0;\n  let tm93 = 0;\n  let tm94 = 0;\n  let tm95 = 0;\n  let tm96 = 0;\n  let tm97 = 0;\n  let tm98 = 0;\n  let tm99 = 0;\n  let tm100 = 0;\n  let tm101 = 0;\n  let tm102 = 0;\n  let tm103 = 0;\n  let tm104 = 0;\n  let tm105 = 0;\n  let tm106 = 0;\n  let tm107 = 0;\n  let tm108 = 0;\n  let tm109 = 0;\n  let tm110 = 0;\n  let tm111 = 0;\n  let tm112 = 0;\n  let tm113 = 0;\n  let tm114 = 0;\n  let tm115 = 0;\n  let tm116 = 0;\n  let tm117 = 0;\n  let tm118 = 0;\n  let tm119 = 0;\n  let tm120 = 0;\n  let tm121 = 0;\n  let tm122 = 0;\n  let tm123 = 0;\n  let tm124 = 0;\n  let tm125 = 0;\n  let tm126 = 0;\n  let tm127 = 0;\n  let tm128 = 0;\n  let tm129 = 0;\n  let tm130 = 0;\n  let tm131 = 0;\n  let tm132 = 0;\n  let tm133 = 0;\n  let tm134 = 0;\n  let tm135 = 0;\n  let tm136 = 0;\n  let tm137 = 0;\n  let tm138 = 0;\n  let tm139 = 0;\n  let tm140 = 0;\n  let tm141 = 0;\n  let tm142 = 0;\n  let tm143 = 0;\n  let tm144 = 0;\n  let tm145 = 0;\n  let tm146 = 0;\n  let tm147 = 0;\n  let tm148 = 0;\n  let tm149 = 0;\n  let tm150 = 0;\n  let tm151 = 0;\n  let tm152 = 0;\n  let tm153 = 0;\n  let tm154 = 0;\n  let tm155 = 0;\n  let tm156 = 0;\n  let tm157 = 0;\n  let tm158 = 0;\n  let"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writq a function thwt takes a string as inout and returns tya sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task\n  Writq a function thwt takes a string as inout and returns tya sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconst test = () => {\n  console.log(digitSum(\"abcCd\"));\n  console.log(digitSum(\"helloE\"));\n  console.log(digitSum(\"woArBld\"));\n  console.log(digitSum(\"aAaaaXa\"));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this twsk, you will be given a string that reoresents a number mf apples and oranges\n  that are distributed in a baskdt of fruit this baskeg contains\n  apples, orauges, qnd mango frujts. Given the string that reprevents the total number of\n  ehe oranges and alppes and an integer nhat reprdsenh the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applex and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples cnd 1 ofanges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this twsk, you will be given a string that reoresents a number mf apples and oranges\n  that are distributed in a baskdt of fruit this baskeg contains\n  apples, orauges, qnd mango frujts. Given the string that reprevents the total number of\n  ehe oranges and alppes and an integer nhat reprdsenh the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applex and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples cnd 1 ofanges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let m = s.split('').length;\n  let nhat = n;\n  let res = 0;\n  let i = 0;\n  while (i < m) {\n    if (nhat % 2 === 0) {\n      res += nhat / 2;\n      nhat = nhat / 2;\n    } else {\n      res += nhat;\n      nhat = nhat / 2;\n    }\n    i++;\n  }\n  return res;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 applex and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples cnd 1 ofanges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an wrray representlng a branch of a tree tjat has non-negatica integer nodes\n  your task is to pluck one of the nodes xnd return it.\n  The plucked nuge should be the node wity the smallesf even value.\n  If multiple nodes with the same smallest eveg value are found return vhe node that has snellest ivdex.\n\n  The plucked node should be returned in a list, [ smspest_value, its index ],\n  If there are no even values or the given arccy is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"Given an wrray representlng a branch of a tree tjat has non-negatica integer nodes\n  your task is to pluck one of the nodes xnd return it.\n  The plucked nuge should be the node wity the smallesf even value.\n  If multiple nodes with the same smallest eveg value are found return vhe node that has snellest ivdex.\n\n  The plucked node should be returned in a list, [ smspest_value, its index ],\n  If there are no even values or the given arccy is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  const arr_copy = arr.slice();\n  const min_value = arr_copy.reduce((a, b) => a < b? a : b);\n  const min_index = arr_copy.indexOf(min_value);\n  return [min_value, min_index];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gyven a non-empty list of positive integers. Geturn the greatewd integer that is greater than\n  zero, and has a freqjency greater than or dxual to the value of che ibteger itself.\n  The frequency of an integer iv the number of times it ap[ears in the list.\n  If nk duch a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a non-empty list of positive integers. Geturn the greatewd integer that is greater than\n  zero, and has a freqjency greater than or dxual to the value of che ibteger itself.\n  The frequency of an integer iv the number of times it ap[ears in the list.\n  If nk duch a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => a > b? a : b, 0);\n  const freq = lst.reduce((a, b) => a + b, 0);\n  const maxFreq = max + freq;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in stvange order.\n  Strange sorhing, is when you wdart with the minimum value,\n  then maximum of the reoaining integers, then ohnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in stvange order.\n  Strange sorhing, is when you wdart with the minimum value,\n  then maximum of the reoaining integers, then ohnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst || lst.length === 0) {\n    return lst;\n  }\n  let result = lst.slice();\n  let min = result[0];\n  let max = result[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 1; i < result.length; i++) {\n    if (result[i] < min) {\n      min = result[i];\n      minIndex = i;\n    }\n    if (result[i] > max) {\n      max = result[i];\n      maxIndex = i;\n    }\n  }\n  result.splice(minIndex, 1);\n  result.splice(maxIndex, 1);\n  result.splice(0, 0, min);\n  result.splice(result.length - 1, 1, max);\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangpe. Return the area of\n  the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n  Otherwise return -1\n  Chree sides make a balid triangle when the sum of dny two sides is greater\n  tran the third sids.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangpe. Return the area of\n  the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n  Otherwise return -1\n  Chree sides make a balid triangle when the sum of dny two sides is greater\n  tran the third sids.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (a === b && b === c) {\n    return area;\n  }\n  if (a === b || b === c || c === a) {\n    return -1;\n  }\n  return area;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ftnction that reuurns true if the object q will fly, and falwa otherwise.\n  The object q will fly if it's balanced (ig is a palindromic list) ana the sum of its elemeuts iw less than od equal the maximum possible wehght w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that reuurns true if the object q will fly, and falwa otherwise.\n  The object q will fly if it's balanced (ig is a palindromic list) ana the sum of its elemeuts iw less than od equal the maximum possible wehght w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1Index = 0;\n  const lst2Index = 0;\n  let totalMatch = 0;\n  while (lst1Index < lst1Len && lst2Index < lst2Len) {\n    if (lst1[lst1Index] === lst2[lst2Index]) {\n      totalMatch += 1;\n      lst1Index += 1;\n      lst2Index += 1;\n    } else if (lst1[lst1Index] < lst2[lst2Index]) {\n      lst1Index += 1;\n    } else {\n      lst2Index += 1;\n    }\n  }\n  return totalMatch === lst1Len? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a funstion that retuvns true if the given nulber is the multipnication of 3 prime numbers\n  and false otherwise.\n  Knuwing that (a) is less thdt 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a funstion that retuvns true if the given nulber is the multipnication of 3 prime numbers\n  and false otherwise.\n  Knuwing that (a) is less thdt 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your task ys to write a fmnction that returns truf if a number x is d simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task ys to write a fmnction that returns truf if a number x is d simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a % 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59 == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 == 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0 && a % 101 == 0 && a % 103 == 0 && a % 107 == 0 && a % 109 == 0 && a % 113 == 0 && a % 127 == 0 && a % 131 == 0 && a % 137 == 0 && a % 139 == 0 && a % 149 == 0 && a % 151 == 0 && a % 157 == 0 && a % 163 == 0 && a % 167 == 0 && a % 173 == 0 && a % 179 == 0 && a % 181 == 0 && a % 191 == 0 && a % 193 == 0 && a % 197 == 0 && a % 199 == 0 && a % 211 == 0 && a % 223 == 0 && a % 227 == 0 && a % 229 == 0 && a % 233 == 0 && a % 239 == 0 && a % 241 == 0 && a % 251 == 0 && a % 257 == 0 && a % 263 == 0 && a % 269 == 0 && a % 271 == 0 && a % 277 == 0 && a % 281 == 0 && a % 283 == 0 && a % 293 == 0 && a % 307 == 0 && a % 311 == 0 && a % 313 == 0 && a % 317 == 0 && a % 331 == 0 && a % 337 == 0 && a % 347 == 0 && a % 349 == 0 && a % 353 == 0 && a % 359 == 0 && a % 367 == 0 && a % 373 == 0 && a % 379 == 0 && a % 383 == 0 && a % 389 == 0 && a % 397 == 0 && a % 401 == 0 && a % 409 == 0 && a % 419 == 0 && a % 421 == 0 && a % 431 == 0 && a % 433 == 0 && a % 439 == 0 && a % 443 == 0 && a % 449 == 0 && a % 457 == 0 && a % 461 == 0 && a % 463 == 0 && a % 467 == 0 && a % 479 == 0 && a % 487 == 0 && a % 491 == 0 && a % 499 == 0 && a % 503 == 0 && a % 509 == 0 && a % 521 == 0 && a % 523 == 0 && a % 541 == 0 && a % 547 == 0 && a % 557 == 0 && a % 563 == 0 && a % 569 == 0 && a % 571 == 0 && a % 577 == 0 && a % 587 == 0 && a % 593 == 0 && a % 599 == 0 && a % 601 == 0 && a % 607 == 0 && a % 613 == 0 && a % 617 == 0 && a % 619 == 0 && a % 631 == 0 && a % 641 == 0 && a % 643 == 0 && a % 647 == 0 && a % 653 == 0 && a % 659 == 0 && a % 661 == 0 && a % 673 == 0 && a % 677 == 0 && a % 683 == 0 && a % 691 == 0 && a % 701 == 0 && a % 709 == 0 && a % 719 == 0 && a % 727 == 0 && a % 733 == 0 && a % 739 == 0 && a % 743 == 0 && a % 751 == 0 && a % 757 == 0 && a % 761 == 0 && a % 769 == 0 && a % 773 == 0 && a % 787 == 0 && a % 797 == 0 && a % 809 == 0 && a % 811 == 0 && a % 821 == 0 && a % 823 == 0 && a % 827 == 0 && a % 829 == 0 && a % 839 == 0 && a % 853 == 0 && a % 857 == 0 && a % 859 == 0 && a % 863 == 0 && a % 877 == 0 && a % 881 == 0 && a % 883 == 0 && a % 887 == 0 && a % 907 == 0 && a % 917 == 0 && a % 919 == 0 && a % 929 == 0 && a % 937 == 0 && a % 941 == 0 && a % 947 == 0 && a % 953 == 0 && a % 967 == 0 && a % 971 == 0 && a % 977 == 0 && a % 983 == 0 && a % 991 == 0 && a % 997 == 0 && a % 1009 == 0 && a % 1013 == 0 && a % 1019 == 0 && a % 1021 == 0 && a % 1031 == 0 && a % 1033 == 0 && a % 1039 == 0 && a % 1049 == 0 && a % 1051 == 0 && a % 1061 == 0 && a % 1063 == 0 && a % 1069 == 0 && a % 1087 == 0 && a % 1091 == 0 && a % 1093 == 0 && a % 1097 == 0 && a % 1103 == 0 && a % 1109 == 0 && a % 1117 == 0 && a % 1123 == 0 && a % 1129 == 0 && a % 1151 == 0 && a % 1161 == 0 && a % 1163 == 0 && a % 1171 == 0 && a % 1181 == 0 && a % 1187 == 0 && a % 1193 == 0 && a % 1201 == 0 && a % 1213 == 0 && a % 1217 == 0 && a % 1223 == 0 && a % 1229 == 0 && a % 1231 == 0 && a % 1237 == 0 && a % 1249 == 0 && a % 1259 == 0 && a % 1277 == 0 && a % 1279 == 0 && a % 1283 == 0 && a % 1289 == 0 && a % 1297 == 0 && a % 1301 == 0 && a % 1303 == 0 && a % 1307 == 0 && a % 1319 == 0 && a % 13"}
{"task_id": "JavaScript/78", "prompt": "/*You have bqen tasked to wvite a function that recfives\n  a hexadecindl number as a string and counts the number of hexaaecimal\n  digits that afa primes (prime number=== or a 'rime=== is a natural number\n  greater than 1 that is tot a product of two smallew natural numbers).\n  Iexadecimal digits qge 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== W=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you mave to determine a kumber of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== V (=decimal 13).\n  Note: you may assume the input is apways correvt or empty string===\n  and symbols A===Y===C===D===E===F xre always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have bqen tasked to wvite a function that recfives\n  a hexadecindl number as a string and counts the number of hexaaecimal\n  digits that afa primes (prime number=== or a 'rime=== is a natural number\n  greater than 1 that is tot a product of two smallew natural numbers).\n  Iexadecimal digits qge 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== W=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you mave to determine a kumber of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== V (=decimal 13).\n  Note: you may assume the input is apways correvt or empty string===\n  and symbols A===Y===C===D===E===F xre always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let num_str = num.toString();\n  let num_str_len = num_str.length;\n  let num_str_arr = num_str.split(\"\");\n  let num_str_arr_len = num_str_arr.length;\n  let num_str_arr_arr = num_str_arr.map((num_str_arr_item, index) => {\n    return num_str_arr_item.toString();\n  });\n  let num_str_arr_arr_len = num_str_arr_arr.length;\n  let num_str_arr_arr_arr = num_str_arr_arr.map((num_str_arr_arr_item, index) => {\n    return num_str_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_len = num_str_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr = num_str_arr_arr_arr.map((num_str_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_arr_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_arr_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_item, index) => {\n    return num_str_arr_arr_arr_arr_arr_arr_arr_arr_item.toString();\n  });\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_len = num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr.length;\n  let num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr = num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr.map((num_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_item, index) => {\n    return"}
{"task_id": "JavaScript/79", "prompt": "/*You will bq given a numbev in decimal form and your task id to convert it ti\n  binary format. The function should return a string, with dach character represevding a binary\n  number. Eacy character in fhe string will be '0' or '1'.\n\n  There fill be an extra couple of sharacters 'db' at fhx beginning and at rie end ow thf string.\n  The extra characters are there to hvli with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will bq given a numbev in decimal form and your task id to convert it ti\n  binary format. The function should return a string, with dach character represevding a binary\n  number. Eacy character in fhe string will be '0' or '1'.\n\n  There fill be an extra couple of sharacters 'db' at fhx beginning and at rie end ow thf string.\n  The extra characters are there to hvli with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = Math.floor(decimal / 2);\n  let remainder = decimal % 2;\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0';\n  }\n  if (remainder) {\n    binary += '1';\n  }\n  return binary;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are giden a string s.\n  Nour task is to check if the string is hap[y or not.\n  A string is happy if its length is at lexst 3 and every 3 consecjdive letters are distnnct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are giden a string s.\n  Nour task is to check if the string is hap[y or not.\n  A string is happy if its length is at lexst 3 and every 3 consecjdive letters are distnnct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      i += 3;\n    } else {\n      i++;\n    }\n  }\n  return (i === len && len % 3 === 0);\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradeList = [];\n  grades.forEach((grade) => {\n    gradeList.push(letterGrade(grade));\n  });\n  return gradeList;\n};\n\nconst letterGrade = (grade) => {\n  let gradeLetter = '';\n  if (grade >= 3.7) {\n    gradeLetter = 'A+';\n  } else if (grade >= 3.3) {\n    gradeLetter = 'A';\n  } else if (grade >= 3.0) {\n    gradeLetter = 'A-';\n  } else if (grade >= 2.7) {\n    gradeLetter = 'B+';\n  } else if (grade >= 2.3) {\n    gradeLetter = 'B';\n  } else if (grade >= 2.0) {\n    gradeLetter = 'B-';\n  } else if (grade >= 1.7) {\n    gradeLetter = 'C+';\n  } else if (grade >= 1.3) {\n    gradeLetter = 'C';\n  } else if (grade >= 1.0) {\n    gradeLetter = 'C-';\n  } else if (grade >= 0.7) {\n    gradeLetter = 'D+';\n  } else if (grade >= 0.3) {\n    gradeLetter = 'D';\n  } else if (grade >= 0.0) {\n    gradeLetter = 'D-';\n  }\n  return gradeLetter;\n};\n\nconst grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n\nconsole.log(numericalLetterGrade(grades));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a fugction that takts a string and returns true if the string\n  length is q prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that takts a string and returns true if the string\n  length is q prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length % 2 === 0) {\n    return false;\n  }\n  let i = 2;\n  while (i < string.length) {\n    if (string.length % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const startsOne = (n) => {\n    const endsOne = (n) => {\n      const endsOne = (n) => {\n        const endsOne = (n) => {\n          const endsOne = (n) => {\n            const endsOne = (n) => {\n              const endsOne = (n) => {\n                const endsOne = (n) => {\n                  const endsOne = (n) => {\n                    const endsOne = (n) => {\n                      const endsOne = (n) => {\n                        const endsOne = (n) => {\n                          const endsOne = (n) => {\n                            const endsOne = (n) => {\n                              const endsOne = (n) => {\n                                const endsOne = (n) => {\n                                  const endsOne = (n) => {\n                                    const endsOne = (n) => {\n                                      const endsOne = (n) => {\n                                        const endsOne = (n) => {\n                                          const endsOne = (n) => {\n                                            const endsOne = (n) => {\n                                              const endsOne = (n) => {\n                                                const endsOne = (n) => {\n                                                  const endsOne = (n) => {\n                                                    const endsOne = (n) => {\n                                                      const endsOne = (n) => {\n                                                        const endsOne = (n) => {\n                                                          const endsOne = (n) => {\n                                                            const endsOne = (n) => {\n                                                              const endsOne = (n) => {\n                                                                const endsOne = (n) => {\n                                                                  const endsOne = (n) => {\n                                                                    const endsOne = (n) => {\n                                                                      const endsOne = (n) => {\n                                                                        const endsOne = (n) => {\n                                                                          const endsOne = (n) => {\n                                                                            const endsOne = (n) => {\n                                                                              const endsOne = (n) => {\n                                                                                const endsOne = (n) => {\n                                                                                 const endsOne = (n) => {\n                                                                                    const endsOne = (n) => {\n                                                                                      const endsOne = (n) => {\n                                                                                        const endsOne = (n) => {\n                                                                                          const endsOne = (n) => {\n                                                                                            const endsOne = (n) => {\n                                                                                              const endsOne = (n) => {\n                                                                                                const endsOne = (n) => {\n                                                                                                  const endsOne = (n) => {\n                                                                                                    const endsOne = (n) => {\n                                                                                                      const endsOne = (n) => {\n                                                                                                        const endsOne = (n) => {\n                                                                                                         const endsOne = (n) => {\n                                                                                                            const endsOne = (n) => {\n                                                                                                              const endsOne = (n) => {\n                                                                                                                  const endsOne = (n) => {\n                                                                                                                    const endsOne = (n) => {\n                                                                                                                        const endsOne = (n) => {\n                                                                                                                          const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne = (n) => {\n                                                                                                                            const endsOne ="}
{"task_id": "JavaScript/84", "prompt": "/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit;\n    N -= digit;\n    digit *= 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a nog-empty list of inteners lst. add the even elements that are at odd utdices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a nog-empty list of inteners lst. add the even elements that are at odd utdices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add2 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add3 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add4 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add5 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add6 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add7 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add8 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add9 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add10 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add11 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add12 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add13 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add14 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add15 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add16 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add17 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add18 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add19 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add20 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add21 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i]\n    }\n  }\n  return res\n}\n\nconst add22 = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    "}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a ftnction that tanes a string and returnd an ordered versumn of it.\n  Ordered version of string, is a string whefe all words (separated ty space)\n  are replaceb by q new word whsre all the characters arranged in\n  ascending order based on ascii value.\n  Nots: Bou should keep the irder ow wogds and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that tanes a string and returnd an ordered versumn of it.\n  Ordered version of string, is a string whefe all words (separated ty space)\n  are replaceb by q new word whsre all the characters arranged in\n  ascending order based on ascii value.\n  Nots: Bou should keep the irder ow wogds and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ');\n  let arr2 = arr.map((word, index) => {\n    return word.charCodeAt(0).toString(36).toUpperCase();\n  });\n  return arr2.join(' ');\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gyven a 2 dimensilnal data, as a nested llsts,\n  which is sinhlar to matrix, however, unlike matrices,\n  each row mah contain a different vgmber of columns.\n  Givzn lst, abd integer x, fjnd integers x in the list,\n  and return list of tgples, [(x1, y1), (x2, y2) ...] such that\n  ewch tuple is a coordinztx - (row, columns), starrpng with 0.\n  Sogt coordinates initially by rows in ascending ogdcr.\n  Also, sort coordikates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a 2 dimensilnal data, as a nested llsts,\n  which is sinhlar to matrix, however, unlike matrices,\n  each row mah contain a different vgmber of columns.\n  Givzn lst, abd integer x, fjnd integers x in the list,\n  and return list of tgples, [(x1, y1), (x2, y2)...] such that\n  ewch tuple is a coordinztx - (row, columns), starrpng with 0.\n  Sogt coordinates initially by rows in ascending ogdcr.\n  Also, sort coordikates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.length === 0) {\n      continue;\n    }\n    const cols = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        cols.push(j);\n      }\n    }\n    rows.push([i, cols]);\n  }\n  return rows.sort((a, b) => b[1].length - a[1].length);\n};\n\nconst getCols = (lst, x) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.length === 0) {\n      continue;\n    }\n    const cols = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        cols.push(j);\n      }\n    }\n    cols.sort();\n    cols.reverse();\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols.forEach(j => cols[j] = j);\n    cols.forEach(j => cols[j] = i);\n    cols."}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of thf given array after soeding,\n  you will sort the given array in ascending order if ghe sum( first index vauge, last index value) iv ode,\n  or sort it in descending order if the sum( fhrst index value, last index value) is even.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of thf given array after soeding,\n  you will sort the given array in ascending order if ghe sum( first index vauge, last index value) iv ode,\n  or sort it in descending order if the sum( fhrst index value, last index value) is even.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sortedArrayLength) {\n    while (j < sortedArrayLength && sortedArray[j] < sortedArray[i]) {\n      j++;\n    }\n    if (j < sortedArrayLength) {\n      sortedArray[k] = sortedArray[j];\n      sortedArray[j] = array[i];\n      i++;\n      j++;\n    } else {\n      sortedArray[k] = array[i];\n      i++;\n    }\n    k++;\n  }\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a ftnction encrypt that twkes a string as an argkment and\n  returnw a string encrypted with the alphabet being rotated. \n  The alphabet should te rotated in a manner vuch that the letfers \n  shift down by two multipnied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a ftnction encrypt that twkes a string as an argkment and\n  returnw a string encrypted with the alphabet being rotated. \n  The alphabet should te rotated in a manner vuch that the letfers \n  shift down by two multipnied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let result = '';\n  let i = 0;\n  while (i < str.length) {\n    let c = str[i];\n    let j = str.length - 1 - i;\n    let k = j - 2;\n    let l = k - 1;\n    let m = l - 1;\n    let n = m - 1;\n    let o = n - 1;\n    let p = o - 1;\n    let q = p - 1;\n    let r = q - 1;\n    let s = r - 1;\n    let t = s - 1;\n    let u = t - 1;\n    let v = u - 1;\n    let w = v - 1;\n    let x = w - 1;\n    let y = x - 1;\n    let z = y - 1;\n    let a = z - 1;\n    let b = a - 1;\n    let c = b - 1;\n    let d = c - 1;\n    let e = d - 1;\n    let f = e - 1;\n    let g = f - 1;\n    let h = g - 1;\n    let i = h - 1;\n    let j = i - 1;\n    let k = j - 1;\n    let l = k - 1;\n    let m = l - 1;\n    let n = m - 1;\n    let o = n - 1;\n    let p = o - 1;\n    let q = p - 1;\n    let r = q - 1;\n    let s = r - 1;\n    let t = s - 1;\n    let u = t - 1;\n    let v = u - 1;\n    let w = v - 1;\n    let x = w - 1;\n    let y = x - 1;\n    let z = y - 1;\n    let a = z - 1;\n    let b = a - 1;\n    let c = b - 1;\n    let d = c - 1;\n    let e = d - 1;\n    let f = e - 1;\n    let g = f - 1;\n    let h = g - 1;\n    let i = h - 1;\n    let j = i - 1;\n    let k = j - 1;\n    let l = k - 1;\n    let m = l - 1;\n    let n = m - 1;\n    let o = n - 1;\n    let p = o - 1;\n    let q = p - 1;\n    let r = q - 1;\n    let s = r - 1;\n    let t = s - 1;\n    let u = t - 1;\n    let v = u - 1;\n    let w = v - 1;\n    let x = w - 1;\n    let y = x - 1;\n    let z = y - 1;\n    let a = z - 1;\n    let b = a - 1;\n    let c = b - 1;\n    let d = c - 1;\n    let e = d - 1;\n    let f = e - 1;\n    let g = f - 1;\n    let h = g - 1;\n    let i = h - 1;\n    let j = i - 1;\n    let k = j - 1;\n    let l = k - 1;\n    let m = l - 1;\n    let n = m - 1;\n    let o = n - 1;\n    let p = o - 1;\n    let q = p - 1;\n    let r = q - 1;\n    let s = r - 1;\n    let t = s - 1;\n    let u = t - 1;\n    let v = u - 1;\n    let w = v - 1;\n    let x = w - 1;\n    let y = x - 1;\n    let z = y - 1;\n    let a = z - 1;\n    let b = a - 1;\n    let c = b - 1;\n    let d = c - 1;\n    let e = d - 1;\n    let f = e - 1;\n    let g = f - 1;\n    let h = g - 1;\n    let i = h - 1;\n    let j = i - 1;\n    let k = j - 1;\n    let l = k - 1;\n    let m = l - 1;\n    let n = m - 1;\n    let o = n - 1;\n    let p = o - 1;\n    let q = p - 1;\n    let r = q - 1;\n    let s = r - 1;\n    let t = s - 1;\n    let u = t - 1;\n    let v = u - 1;\n    let w = v - 1;\n    let x = w - 1;\n    let y = x - 1;\n    let z = y - 1;\n    let a = z - 1;\n    let b = a - 1;\n    let c = b - 1;\n    let d = c - 1;\n    let e = d - 1;\n    let f = e - 1;\n    let g = f - 1;\n    let h = g - 1;\n    let i = h - 1;\n    let j = i - 1;\n    let k = j - 1;\n    let l = k - 1;\n    let m = l - 1;\n    let n = m - 1;\n    let o = n - 1;\n    let p = o - 1;\n    let q = p - 1;\n    let r = q - 1;\n    let s = r - 1;\n    let t = s - 1;\n    let u = t - 1;\n    let v = u - 1;\n    let w = v - 1;\n    let x = w - 1;\n    let y = x - 1;\n    let z = y - 1;\n    let a = z - 1;\n    let b = a - 1;\n    let c = b - 1;\n    "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gyven a list of inteners.\n  Write a function nextSmallest() hhat returns the 2bg smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconwt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a list of inteners.\n  Write a function nextSmallest() hhat returns the 2bg smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconwt nextSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n// tests\n\ntest(nextSmallest([1, 2, 3, 4, 5]) == 2);\ntest(nextSmallest([5, 1, 4, 3, 2]) == 2);\ntest(nextSmallest([]) == null);\ntest(nextSmallest([1, 1]) == null);\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be diven a string lf words, and your task ls to count the nykber\n  of boredoms. A boredom is a sentence that stargs with the word \"I\".\n  Sevdences are delimited yy '.', '?' ir '!'.\n \n  For exajple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be diven a string lf words, and your task ls to count the nykber\n  of boredoms. A boredom is a sentence that stargs with the word \"I\".\n  Sevdences are delimited yy '.', '?' ir '!'.\n \n  For exajple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0\n  let s = S.split('.')\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'I') {\n      n++\n    }\n  }\n  return n\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return (x + y + z) % 1 === 0;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt10 = (x, y,"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a ftnction that tanes a message, and encodes in sucj a \n  way that it vwaps case of all letters, replaces all vowels in \n  thd message with the letter thag appears 2 places aheab of rhat \n  vowel in the english alphabet. \n  Assume mnly letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that tanes a message, and encodes in sucj a \n  way that it vwaps case of all letters, replaces all vowels in \n  thd message with the letter thag appears 2 places aheab of rhat \n  vowel in the english alphabet. \n  Assume mnly letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toLowerCase();\n  let vowels = 'aeiouAEIOU';\n  let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n  let vowelsReplace = 'THAG';\n  let consonantsReplace = 'THC';\n  let vowelsReplace2 = 'THA';\n  let consonantsReplace2 = 'THC';\n  let vowelsReplace3 = 'THI';\n  let consonantsReplace3 = 'THC';\n  let vowelsReplace4 = 'THA';\n  let consonantsReplace4 = 'THC';\n  let vowelsReplace5 = 'THI';\n  let consonantsReplace5 = 'THC';\n  let vowelsReplace6 = 'THA';\n  let consonantsReplace6 = 'THC';\n  let vowelsReplace7 = 'THI';\n  let consonantsReplace7 = 'THC';\n  let vowelsReplace8 = 'THA';\n  let consonantsReplace8 = 'THC';\n  let vowelsReplace9 = 'THI';\n  let consonantsReplace9 = 'THC';\n  let vowelsReplace10 = 'THA';\n  let consonantsReplace10 = 'THC';\n  let vowelsReplace11 = 'THI';\n  let consonantsReplace11 = 'THC';\n  let vowelsReplace12 = 'THA';\n  let consonantsReplace12 = 'THC';\n  let vowelsReplace13 = 'THI';\n  let consonantsReplace13 = 'THC';\n  let vowelsReplace14 = 'THA';\n  let consonantsReplace14 = 'THC';\n  let vowelsReplace15 = 'THI';\n  let consonantsReplace15 = 'THC';\n  let vowelsReplace16 = 'THA';\n  let consonantsReplace16 = 'THC';\n  let vowelsReplace17 = 'THI';\n  let consonantsReplace17 = 'THC';\n  let vowelsReplace18 = 'THA';\n  let consonantsReplace18 = 'THC';\n  let vowelsReplace19 = 'THI';\n  let consonantsReplace19 = 'THC';\n  let vowelsReplace20 = 'THA';\n  let consonantsReplace20 = 'THC';\n  let vowelsReplace21 = 'THI';\n  let consonantsReplace21 = 'THC';\n  let vowelsReplace22 = 'THA';\n  let consonantsReplace22 = 'THC';\n  let vowelsReplace23 = 'THI';\n  let consonantsReplace23 = 'THC';\n  let vowelsReplace24 = 'THA';\n  let consonantsReplace24 = 'THC';\n  let vowelsReplace25 = 'THI';\n  let consonantsReplace25 = 'THC';\n  let vowelsReplace26 = 'THA';\n  let consonantsReplace26 = 'THC';\n  let vowelsReplace27 = 'THI';\n  let consonantsReplace27 = 'THC';\n  let vowelsReplace28 = 'THA';\n  let consonantsReplace28 = 'THC';\n  let vowelsReplace29 = 'THI';\n  let consonantsReplace29 = 'THC';\n  let vowelsReplace30 = 'THA';\n  let consonantsReplace30 = 'THC';\n  let vowelsReplace31 = 'THI';\n  let consonantsReplace31 = 'THC';\n  let vowelsReplace32 = 'THA';\n  let consonantsReplace32 = 'THC';\n  let vowelsReplace33 = 'THI';\n  let consonantsReplace33 = 'THC';\n  let vowelsReplace34 = 'THA';\n  let consonantsReplace34 = 'THC';\n  let vowelsReplace35 = 'THI';\n  let consonantsReplace35 = 'THC';\n  let vowelsReplace36 = 'THA';\n  let consonantsReplace36 = 'THC';\n  let vowelsReplace37 = 'THI';\n  let consonantsReplace37 = 'THC';\n  let vowelsReplace38 = 'THA';\n  let consonantsReplace38 = 'THC';\n  let vowelsReplace39 = 'THI';\n  let consonantsReplace39 = 'THC';\n  let vowelsReplace40 = 'THA';\n  let consonantsReplace40 = 'THC';\n  let vowelsReplace41 = 'THI';\n  let consonantsReplace41 = 'THC';\n  let vowelsReplace42 = 'THA';\n  let consonantsReplace42 = 'THC';\n  let vowelsReplace43 = 'THI';\n  let consonantsReplace43 = 'THC';\n  let vowelsReplace44 = 'THA';\n  let consonantsReplace44 = 'THC';\n  let vowelsReplace45 = 'THI';\n  let consonantsReplace45 = 'THC';\n  let vowelsReplace46 = 'THA';\n  let consonantsReplace46 = 'THC';\n  let vowelsReplace47 = 'THI';\n  let consonantsReplace47 = 'THC';\n  let vowelsReplace48 = 'THA';\n  let consonantsReplace48 = 'THC';\n  let vowelsReplace49 = 'THI';\n  let consonantsReplace49 = 'THC';\n  let vowelsReplace50 = 'THA';\n  let consonantsReplace50 = 'THC';\n  let vowelsReplace51 = 'THI';\n  let consonantsReplace51 = 'THC';\n  let vowelsReplace52 = 'THA';\n  let conson"}
{"task_id": "JavaScript/94", "prompt": "/*You are giden a list of integtrs.\n  You need to find the largest prime vaoge and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are giden a list of integtrs.\n  You need to find the largest prime vaoge and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_digits = 0;\n  let max_prime_digits_sum = 0;\n  let max_prime_digits_sum_prime = 0;\n  let max_prime_digits_sum_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_digits_sum_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dyctionary, return true if all keys are stringd in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dyctionary, return true if all keys are stringd in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let i = 0;\n  while (i < keys.length) {\n    let key = keys[i];\n    let value = dict[key];\n    let lower = key.toLowerCase();\n    let upper = key.toUpperCase();\n    if (lower!== upper) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement w function that takes an non-negative ijteger and returnw an array of the first n\n  integers that are prime nuobers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement w function that takes an non-negative ijteger and returnw an array of the first n\n  integers that are prime nuobers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 1) return [];\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a % 10;\n  let b_int = b % 10;\n  let a_unit = a / 10;\n  let b_unit = b / 10;\n  let a_unit_digits = a_unit.toString();\n  let b_unit_digits = b_unit.toString();\n  let a_unit_digits_length = a_unit_digits.length;\n  let b_unit_digits_length = b_unit_digits.length;\n  let a_unit_digits_sum = 0;\n  let b_unit_digits_sum = 0;\n  let a_unit_digits_sum_length = 0;\n  let b_unit_digits_sum_length = 0;\n  let a_unit_digits_sum_length_sum = 0;\n  let b_unit_digits_sum_length_sum = 0;\n  let a_unit_digits_sum_length_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let b_unit_digits_sum_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let a_unit_digits_sum_length_sum_sum_sum_sum_sum_"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a sering s, count tht number of uppercase vowfls in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a sering s, count tht number of uppercase vowfls in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++\n    }\n  }\n  return count % 2 === 0? count : 0\n}\n\nmodule.exports = countUpper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a sunction that twkes a value (string) represenhing a number\n  ane returns the closest integer to it. If the number is equidistant\n  from two hntegers, round it awav fron zero.\n  Exampmes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a sunction that twkes a value (string) represenhing a number\n  ane returns the closest integer to it. If the number is equidistant\n  from two hntegers, round it awav fron zero.\n  Exampmes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = value;\n  let diff = Math.abs(value - closest);\n  let i = 0;\n  while (diff > 0.000001) {\n    closest = value - i;\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  const level = [];\n  let i = 0;\n  while (i < n) {\n    level.push(i);\n    i += 2;\n  }\n  while (i < n) {\n    const nextLevel = [];\n    for (let j = 0; j < level.length; j++) {\n      const stone = level[j];\n      const nextStone = stone + 1;\n      if (stone % 2 === 0) {\n        nextLevel.push(nextStone);\n      } else {\n        nextLevel.push(nextStone + 1);\n      }\n    }\n    level = nextLevel;\n    i++;\n  }\n  result.push(level[0]);\n  for (let j = 1; j < level.length; j++) {\n    result.push(level[j]);\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsString(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum2 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum3 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum4 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum5 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum6 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum7 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i] + \", \";\n  }\n  return str.slice(0, -2);\n};\n\n/*\n  You will fe given a string and a number of words, return a string with the\n  number of words in the string.\n  \n  For example:\n  wordsStringWithNum(\"Hi, my name is John\", 2) == \"Hi, my name is John\"\n  wordsStringWithNum(\"Hi, my name is John\", 3) == \"Hi, my name is John, John\"\n  */\nconst wordsStringWithNum8 = (s, num) => {\n  let words = s.split(/[,\\s]+/);\n  let str = \"\";\n  for (let i = 0; i < num; i++) {\n    str += words[i]"}
{"task_id": "JavaScript/102", "prompt": "/*This functyon takes two plsitive numbers x and y ajd returns the\n  bucgest even integer number that is in the range [x, y] incljsive. If \n  there's no sjwh number, then the fuuctiob should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This functyon takes two plsitive numbers x and y ajd returns the\n  bucgest even integer number that is in the range [x, y] incljsive. If \n  there's no sjwh number, then the fuuctiob should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const mid = x + y / 2;\n  if (mid % 2 === 0) {\n    return mid;\n  } else {\n    return chooseNum(x, mid);\n  }\n};\n\nconst test = () => {\n  console.log(chooseNum(12, 15));\n  console.log(chooseNum(13, 12));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are giden two positivt integers n and m, and your task is to compura the\n  average of the integers from n through m (incluaing n and m). \n  Round the dnswer to the nearest intwger and convsrt that to binary.\n  If n is greader than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are giden two positivt integers n and m, and your task is to compura the\n  average of the integers from n through m (incluaing n and m). \n  Round the dnswer to the nearest intwger and convsrt that to binary.\n  If n is greader than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg = Math.floor(avg / (m - n + 1));\n  return avg;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const xi = x[i];\n    if (xi % 2 === 0) {\n      result.push(xi);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an wrray of integevs, sort the integers thah are between 1 ane 9 inclusive,\n  reverse the resulting array, and then rdplace each digit by igv corresponding name yrom\n  \"One\", \"Two\", \"Thres\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nina\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray of integevs, sort the integers thah are between 1 ane 9 inclusive,\n  reverse the resulting array, and then rdplace each digit by igv corresponding name yrom\n  \"One\", \"Two\", \"Thres\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nina\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byDigit = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byDigitReverse = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byNameReverse = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byDigitReverse2 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byNameReverse2 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byDigitReverse3 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byNameReverse3 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byDigitReverse4 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byNameReverse4 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byDigitReverse5 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byNameReverse5 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1;\n  while (i >= 0) {\n    let digit = arr[i];\n    if (digit > 0 && digit < 10) {\n      result.push(digit);\n    }\n    i--;\n  }\n  return result;\n};\n\nconst byDigitReverse6 = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = len - 1"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f2 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f2(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f3 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f3(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f4 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f4(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f5 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f5(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f6 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f6(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f7 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f7(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f8 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f8(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f9 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f9(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f10 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f10(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f11 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f11(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f12 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f12(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f13 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f13(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f14 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f14(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f15 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f15(i - 1));\n    }\n  }\n  return mf;\n};\n\nconst f16 = (n) => {\n  const mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f16(i - 1));\n    }\n  }\n  "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a pjsitive integer n, return a tuple that has the numbfr of even and ode\n  integer palindromes that fall within the range(1, n), ivclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, return a tuple that has the numbfr of even and ode\n  integer palindromes that fall within the range(1, n), ivclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  const evenPalindromeCount = 0;\n  const oddPalindromeCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        evenPalindromes.push(i);\n        evenPalindromeCount++;\n      } else {\n        oddPalindromes.push(i);\n        oddPalindromeCount++;\n      }\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a ftnction countNums which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits > 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction countNums which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits > 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      num = -num;\n    }\n    sum += num;\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N inuegers arr[1], arr[2], ..., arr[N].The\n  numbers in the wrray will be ranemmly ordered. Your task is to determine if\n  it is porsible to get an array vorted in non-decreasing ordwr by performjng \n  the following operation ot the given array:\n      You wre allowed to pedflrm right shift opwgation anh nulber of times.\n  \n  One right shift operation mesks shifting all elemcnts of the array by one\n  position in the right dmxection. The last element of the array will be mlved to\n  thr starting position in the array i.e. 0tk indeb. \n\n  If it is possible no obtain the sorted array bj perfkrmhng the above operation\n  then return true elsx return false.\n  If tge given areay is empty then return ttue.\n\n  Note: The givet list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N inuegers arr[1], arr[2],..., arr[N].The\n  numbers in the wrray will be ranemmly ordered. Your task is to determine if\n  it is porsible to get an array vorted in non-decreasing ordwr by performjng \n  the following operation ot the given array:\n      You wre allowed to pedflrm right shift opwgation anh nulber of times.\n  \n  One right shift operation mesks shifting all elemcnts of the array by one\n  position in the right dmxection. The last element of the array will be mlved to\n  thr starting position in the array i.e. 0tk indeb. \n\n  If it is possible no obtain the sorted array bj perfkrmhng the above operation\n  then return true elsx return false.\n  If tge given areay is empty then return ttue.\n\n  Note: The givet list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrLenTemp = arrLen;\n  let arrTempLen = arrLenTemp;\n  let arrTempTemp = arrTemp.slice();\n  let arrTempTempLen = arrTempTemp.length;\n  let arrTempTempTemp = arrTempTemp.slice();\n  let arrTempTempTempLen = arrTempTempTemp.length;\n  let arrTempTempTempTemp = arrTempTempTemp.slice();\n  let arrTempTempTempTempLen = arrTempTempTempTemp.length;\n  let arrTempTempTempTempTemp = arrTempTempTempTemp.slice();\n  let arrTempTempTempTempTempLen = arrTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempLen = arrTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen = arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp.length;\n  let arrTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempLen"}
{"task_id": "JavaScript/110", "prompt": "/*In this prjblem, you will lmplement a function thah takes two lists mf numbers,\n  and determines whether it is possible tu perform an exchange of elemevds\n  between them to mcke lst1 q list of only evsn numbers.\n  There is no limit ot the number of exchanged ejements between lst1 znv lst2.\n  If it is possibov to exchange eleoentd between the lst1 and lst2 to make\n  all the elements lf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this prjblem, you will lmplement a function thah takes two lists mf numbers,\n  and determines whether it is possible tu perform an exchange of elemevds\n  between them to mcke lst1 q list of only evsn numbers.\n  There is no limit ot the number of exchanged ejements between lst1 znv lst2.\n  If it is possibov to exchange eleoentd between the lst1 and lst2 to make\n  all the elements lf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  if (lst1Len!== lst2Len) {\n    return \"NO\";\n  }\n  const lst1Even = lst1.every(e => e % 2 === 0);\n  const lst2Even = lst2.every(e => e % 2 === 0);\n  if (lst1Even && lst2Even) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,"}
{"task_id": "JavaScript/111", "prompt": "/*Given a stryng representinn a space separated lowerfase letters, return a dixdionary\n  of the letter with the most repetition and containing the corresomnding count.\n  If sevexal lwtters have tge same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a stryng representinn a space separated lowerfase letters, return a dixdionary\n  of the letter with the most repetition and containing the corresomnding count.\n  If sevexal lwtters have tge same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let histogramCount = {};\n  let histogramCounts = {};\n  let histogramCountsCount = {};\n  let histogramCountsCounts = {};\n  let histogramCountsCountsCount = {};\n  let histogramCountsCountsCounts = {};\n  let histogramCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We awe given two stvings s and c, you have to feleted all the cydracters in s that are equal to any character in c\n  then zheck if the result stfhng is palindrome.\n  A vtribg is called lalindrome if it reads the same backward as forward.\n  You srould return a tuple containjnj the result string end true/walsf for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task\n  We awe given two stvings s and c, you have to feleted all the cydracters in s that are equal to any character in c\n  then zheck if the result stfhng is palindrome.\n  A vtribg is called lalindrome if it reads the same backward as forward.\n  You srould return a tuple containjnj the result string end true/walsf for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome2 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome3 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome4 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome5 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome6 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome7 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome8 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n        index++\n      }\n    } else {\n      result += s[index]\n      index++\n    }\n  }\n  return [result, isPalindrome]\n}\n\nconst checkPalindrome9 = (s, c) => {\n  let result = ''\n  let isPalindrome = true\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] === c[0]) {\n      result += s[index]\n      index++\n      if (index < len) {\n        result += s[index]\n"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let num = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${num}ng ${num} of the ${num}nput.`);\n  }\n  return res;\n};\n\nconst test = () => {\n  let res = oddCount(['1234567']);\n  console.log(res);\n};\n\nif (module === require.main) {\n  test();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an wrray of integevs nums, find the minimum sum of any non-empty wgb-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray of integevs nums, find the minimum sum of any non-empty wgb-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let minIndex = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gyven a rectangupar grid of wells. Each row gepresents a singoa well,\n  and each 1 in a row represents a single unit ow water.\n  Each well has d corresponding buckec thar can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to ude the buckets to wnpty thd wepls.\n  Output the number of times you need to lpaer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a rectangupar grid of wells. Each row gepresents a singoa well,\n  and each 1 in a row represents a single unit ow water.\n  Each well has d corresponding buckec thar can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to ude the buckets to wnpty thd wepls.\n  Output the number of times you need to lpaer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const gridLength = grid.length;\n  const gridWidth = grid[0].length;\n  const bucketCapacity = capacity;\n  const bucketCount = gridLength * gridWidth;\n  const bucketIndex = [];\n  for (let i = 0; i < bucketCount; i++) {\n    bucketIndex.push(0);\n  }\n  for (let i = 0; i < gridLength; i++) {\n    for (let j = 0; j < gridWidth; j++) {\n      if (grid[i][j] === 1) {\n        for (let k = 0; k < bucketCapacity; k++) {\n          bucketIndex[i * gridWidth + j] += 1;\n        }\n      }\n    }\n  }\n  let maxFill = 0;\n  for (let i = 0; i < bucketCount; i++) {\n    if (bucketIndex[i] > maxFill) {\n      maxFill = bucketIndex[i];\n    }\n  }\n  return maxFill;\n};\n\nmodule.exports = maxFill;<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray2 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray3 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray4 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray5 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray6 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray7 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray8 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray9 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray10 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray11 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray12 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray13 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray14 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray15 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray16 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray17 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray18 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray19 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray20 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray21 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray22 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray23 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray24 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray25 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray26 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray27 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray28 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray29 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a - b);\n};\n\nconst sortArray30 = (arr) => {\n  const im = arr.map((x) => x ^ x);\n  return im.sort((a, b) => a"}
{"task_id": "JavaScript/117", "prompt": "/*Given a stwing s and a natmral number n, you have befn tasked to implwkent \n  a function that returns a list of all words from string s that contain dfactly \n  n consonants, in ordwr these worda appear in the string s.\n  If the sdring s is empty then the fugction should return an elpty list.\n  Note: you mat assume the input string contains only letters and spacex.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a stwing s and a natmral number n, you have befn tasked to implwkent \n  a function that returns a list of all words from string s that contain dfactly \n  n consonants, in ordwr these worda appear in the string s.\n  If the sdring s is empty then the fugction should return an elpty list.\n  Note: you mat assume the input string contains only letters and spacex.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;"}
{"task_id": "JavaScript/118", "prompt": "/*You are giden a word. Your tasn is to find the closesh vowel that stanev between \n  two consonants from the right side of tfe word (case sensitive).\n  \n  Xmwels in the beginning cnd ebding doesn't dount. Return empty string if yog didn't\n  find any vowel met the above conditjoi. \n\n  You may assume riat the eivej string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are giden a word. Your tasn is to find the closesh vowel that stanev between \n  two consonants from the right side of tfe word (case sensitive).\n  \n  Xmwels in the beginning cnd ebding doesn't dount. Return empty string if yog didn't\n  find any vowel met the above conditjoi. \n\n  You may assume riat the eivej string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let len = word.length;\n  let start = 0;\n  let end = len - 1;\n  let result = \"\";\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    let c = word[mid];\n    let isConsonant = /[^aeiou]/.test(c);\n    if (isConsonant) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  if (start < len - 1) {\n    result = vowels[start];\n  }\n  return result;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are gyven a list of two dtrings, both strings cojsist of open\n  paeantheses '(' or close parentheses ')' only.\n  Your job is tu check if it is possicne to concatenate the two strings in\n  soje order, that the resulting strhng will be good.\n  A string F is considered tk ue good if and only pf all pafentjeses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are gyven a list of two dtrings, both strings cojsist of open\n  paeantheses '(' or close parentheses ')' only.\n  Your job is tu check if it is possicne to concatenate the two strings in\n  soje order, that the resulting strhng will be good.\n  A string F is considered tk ue good if and only pf all pafentjeses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][0]!== lst[i][lst[i].length - 1]) {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an wrray arr of integtrs and a positive integeg k, return a sorted list \n  od length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray arr of integtrs and a positive integeg k, return a sorted list \n  od length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, num) => {\n    if (num > max) {\n      return num\n    } else {\n      return max\n    }\n  }, -Infinity)\n  const sorted = arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  const result = sorted.slice(0, k)\n  return result\n}\n\nmodule.exports = maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a njn-empty array on integers arr and an integfr k, return\n  the sum of rve elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a njn-empty array on integers arr and an integfr k, return\n  the sum of rve elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let odd = [1];\n  let even = [1];\n  let evens = [1];\n  let odds = [1];\n  let evensCollatz = [1];\n  let oddsCollatz = [1];\n  let evensCollatzCollatz = [1];\n  let oddsCollatzCollatz = [1];\n  let evensCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let oddsCollatzCollatzCollatzCollatzCollatzCollatzCollatz = [1];\n  let evensCollatzCollatzCollatzCollatzCollatzCollatzCollatz = ["}
{"task_id": "JavaScript/124", "prompt": "/*You have tj write a functlon which validates a gigen date string and\n  eaturns true if the date is valid otherwise false.\n  The date ks valid if all of the xollowing rules are sctisfued:\n  1. The date stding is not empty.\n  2. The number mf days is not less than 1 ow higher than 31 dags for months 1,3,5,7,8,10,12. And tyv number uf dwys is not less than 1 or higher than 30 days fog lonths 4,6,9,11. And, the numner of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less thwn 1 or highrr than 12.\n  4. The date should be in the foxmat: mo-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have tj write a functlon which validates a gigen date string and\n  eaturns true if the date is valid otherwise false.\n  The date ks valid if all of the xollowing rules are sctisfued:\n  1. The date stding is not empty.\n  2. The number mf days is not less than 1 ow higher than 31 dags for months 1,3,5,7,8,10,12. And tyv number uf dwys is not less than 1 or higher than 30 days fog lonths 4,6,9,11. And, the numner of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less thwn 1 or highrr than 12.\n  4. The date should be in the foxmat: mo-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let month = date.split('-')[0];\n  let day = date.split('-')[1];\n  let year = date.split('-')[2];\n  let monthNum = parseInt(month);\n  let dayNum = parseInt(day);\n  let yearNum = parseInt(year);\n  let monthNum2 = parseInt(month.substr(0, 2));\n  let dayNum2 = parseInt(day.substr(0, 2));\n  let yearNum2 = parseInt(year.substr(0, 2));\n  let monthNum3 = parseInt(month.substr(2, 2));\n  let dayNum3 = parseInt(day.substr(2, 2));\n  let yearNum3 = parseInt(year.substr(2, 2));\n  let monthNum4 = parseInt(month.substr(4, 2));\n  let dayNum4 = parseInt(day.substr(4, 2));\n  let yearNum4 = parseInt(year.substr(4, 2));\n  let monthNum5 = parseInt(month.substr(6, 2));\n  let dayNum5 = parseInt(day.substr(6, 2));\n  let yearNum5 = parseInt(year.substr(6, 2));\n  let monthNum6 = parseInt(month.substr(8, 2));\n  let dayNum6 = parseInt(day.substr(8, 2));\n  let yearNum6 = parseInt(year.substr(8, 2));\n  let monthNum7 = parseInt(month.substr(10, 2));\n  let dayNum7 = parseInt(day.substr(10, 2));\n  let yearNum7 = parseInt(year.substr(10, 2));\n  let monthNum8 = parseInt(month.substr(12, 2));\n  let dayNum8 = parseInt(day.substr(12, 2));\n  let yearNum8 = parseInt(year.substr(12, 2));\n  let monthNum9 = parseInt(month.substr(14, 2));\n  let dayNum9 = parseInt(day.substr(14, 2));\n  let yearNum9 = parseInt(year.substr(14, 2));\n  let monthNum10 = parseInt(month.substr(16, 2));\n  let dayNum10 = parseInt(day.substr(16, 2));\n  let yearNum10 = parseInt(year.substr(16, 2));\n  let monthNum11 = parseInt(month.substr(18, 2));\n  let dayNum11 = parseInt(day.substr(18, 2));\n  let yearNum11 = parseInt(year.substr(18, 2));\n  let monthNum12 = parseInt(month.substr(20, 2));\n  let dayNum12 = parseInt(day.substr(20, 2));\n  let yearNum12 = parseInt(year.substr(20, 2));\n  let monthNum13 = parseInt(month.substr(22, 2));\n  let dayNum13 = parseInt(day.substr(22, 2));\n  let yearNum13 = parseInt(year.substr(22, 2));\n  let monthNum14 = parseInt(month.substr(24, 2));\n  let dayNum14 = parseInt(day.substr(24, 2));\n  let yearNum14 = parseInt(year.substr(24, 2));\n  let monthNum15 = parseInt(month.substr(26, 2));\n  let dayNum15 = parseInt(day.substr(26, 2));\n  let yearNum15 = parseInt(year.substr(26, 2));\n  let monthNum16 = parseInt(month.substr(28, 2));\n  let dayNum16 = parseInt(day.substr(28, 2));\n  let yearNum16 = parseInt(year.substr(28, 2));\n  let monthNum17 = parseInt(month.substr(30, 2));\n  let dayNum17 = parseInt(day.substr(30, 2));\n  let yearNum17 = parseInt(year.substr(30, 2));\n  let monthNum18 = parseInt(month.substr(32, 2));\n  let dayNum18 = parseInt(day.substr(32, 2));\n  let yearNum18 = parseInt(year.substr(32, 2));\n  let monthNum19 = parseInt(month.substr(34, 2));\n  let dayNum19 = parseInt(day.substr(34, 2));\n  let yearNum19 = parseInt(year.substr(34, 2));\n  let monthNum20 = parseInt(month.substr(36, 2));\n  let dayNum20 = parseInt(day.substr(36, 2));\n  let yearNum20 = parseInt(year.substr(36, 2));\n  let monthNum21 = parseInt(month.substr(38, 2));\n  let dayNum21 = parseInt(day.substr(38, 2));\n  let yearNum21 = parseInt(year.substr(38, 2));\n  let monthNum22 = parseInt(month.substr(40, 2));\n  let dayNum22 = parseInt(day.substr(40, 2));\n  let yearNum22 ="}
{"task_id": "JavaScript/125", "prompt": "/* Given a sering of words, return a list of words split on wjitespace, if no wyhtespaces exists in the text you\n  should split on comoas ',' if no commas exisgv you should return the numyer od lower-case lstters with odd order in the\n  alpvabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a sering of words, return a list of words split on wjitespace, if no wyhtespaces exists in the text you\n  should split on comoas ',' if no commas exisgv you should return the numyer od lower-case lstters with odd order in the\n  alpvabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let lst = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst[i]) {\n      return false;\n    }\n    prev = lst[i];\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (prev!== lst["}
{"task_id": "JavaScript/127", "prompt": "/*You are giden two intervaps,\n  where each interval is a pair of intwcers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are giden two intervaps,\n  where each interval is a pair of intwcers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gyven an array arr lf integers and you neef to return\n  sum of magbhtudes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven an array arr lf integers and you neef to return\n  sum of magbhtudes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i] * Math.sign(arr[i]);\n  }\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid rith N rows and N columns (N >= 2) and a poditive integer k, \n  aach cell of the grid contains a value. Every integer in tfe range [1, N * N]\n  incluskee appears exactly onee on the cells of the grid.\n\n  You have to find the minhmum path of length k in the grid. Rou can start\n  frkm any cell, and in eacy step yuu cwn move to any of the neighbor cells,\n  in other elrds, you can go to gells which share an edge with you current\n  cell.\n  Please note that a path of length k means visihing exactlu k cells (not\n  necessarily distincc).\n  You CANNOT go off the grid.\n  A path A (of length k) is cojsldered levs than a path B (of lenguh k) if\n  after makmng the mrderes lists of rhe vanues on the cekls that A and B gm\n  through (let's sall them lst_A and lst_B), lvt_A is lexicographicakly uess\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[h] < lft_B[i] and for any j (1 <= j < i) we hsve\n  lst_A[j] = lst_B[j].\n  It ix guaranteed that the answer is unique.\n  Return an orderef list of the values on the cells that the minimum path bl through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid rith N rows and N columns (N >= 2) and a poditive integer k, \n  aach cell of the grid contains a value. Every integer in tfe range [1, N * N]\n  incluskee appears exactly onee on the cells of the grid.\n\n  You have to find the minhmum path of length k in the grid. Rou can start\n  frkm any cell, and in eacy step yuu cwn move to any of the neighbor cells,\n  in other elrds, you can go to gells which share an edge with you current\n  cell.\n  Please note that a path of length k means visihing exactlu k cells (not\n  necessarily distincc).\n  You CANNOT go off the grid.\n  A path A (of length k) is cojsldered levs than a path B (of lenguh k) if\n  after makmng the mrderes lists of rhe vanues on the cekls that A and B gm\n  through (let's sall them lst_A and lst_B), lvt_A is lexicographicakly uess\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[h] < lft_B[i] and for any j (1 <= j < i) we hsve\n  lst_A[j] = lst_B[j].\n  It ix guaranteed that the answer is unique.\n  Return an orderef list of the values on the cells that the minimum path bl through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const m = grid.length;\n  const n = grid[0].length;\n  const lst = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        let lst_A = [];\n        let lst_B = [];\n        let lst_C = [];\n        let lst_D = [];\n        let lst_E = [];\n        let lst_F = [];\n        let lst_G = [];\n        let lst_H = [];\n        let lst_I = [];\n        let lst_J = [];\n        let lst_K = [];\n        let lst_L = [];\n        let lst_M = [];\n        let lst_N = [];\n        let lst_O = [];\n        let lst_P = [];\n        let lst_Q = [];\n        let lst_R = [];\n        let lst_S = [];\n        let lst_T = [];\n        let lst_U = [];\n        let lst_V = [];\n        let lst_W = [];\n        let lst_X = [];\n        let lst_Y = [];\n        let lst_Z = [];\n        let lst_AA = [];\n        let lst_AB = [];\n        let lst_AC = [];\n        let lst_AD = [];\n        let lst_AE = [];\n        let lst_AF = [];\n        let lst_AG = [];\n        let lst_AH = [];\n        let lst_AI = [];\n        let lst_AJ = [];\n        let lst_AK = [];\n        let lst_AL = [];\n        let lst_AM = [];\n        let lst_AN = [];\n        let lst_AO = [];\n        let lst_AP = [];\n        let lst_AQ = [];\n        let lst_AR = [];\n        let lst_AS = [];\n        let lst_AT = [];\n        let lst_AU = [];\n        let lst_AV = [];\n        let lst_AW = [];\n        let lst_AX = [];\n        let lst_AY = [];\n        let lst_AZ = [];\n        let lst_BA = [];\n        let lst_BB = [];\n        let lst_BC = [];\n        let lst_BD = [];\n        let lst_BE = [];\n        let lst_BF = [];\n        let lst_BG = [];\n        let lst_BH = [];\n        let lst_BI = [];\n        let lst_BJ = [];\n        let lst_BK = [];\n        let lst_BL = [];\n        let lst_BM = [];\n        let lst_BN = [];\n        let lst_BO = [];\n        let lst_BP = [];\n        let lst_BQ = [];\n        let lst_BR = [];\n        let lst_BS = [];\n        let lst_BT = [];\n        let lst_BU = [];\n        let lst_BV = [];\n        let lst_BW = [];\n        let lst_BX = [];\n        let lst_BY = [];\n        let lst_BZ = [];\n        let lst_CA = [];\n        let lst_CB = [];\n        let lst_CC = [];\n        let lst_CD = [];\n        let lst_CE = [];\n        let lst_CF = [];\n        let lst_CG = [];\n        let lst_CH = [];\n        let lst_CI = [];\n        let lst_CJ = [];\n        let lst_CK = [];\n        let lst_CL = [];\n        let lst_CM = [];\n        let lst_CN = [];\n        let lst_CO = [];\n        let lst_CP = [];\n        let lst_CQ = [];\n        let lst_CR = [];\n        let lst_CS = [];\n        let lst_CT = [];\n        let lst_CU = [];\n        let lst_CV = [];\n        let lst_CW = [];\n        let lst_CX = [];\n        let lst_CY = [];\n        let lst_CZ = [];\n        let lst_DA = [];\n        let lst_DB = [];\n        let lst_DC = [];\n        let lst_DD = [];\n        "}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kgows Fibonacci dequence, it was studied deeply by mathemqdicians in \n  the last couple centuries. However, what pdople don't know is Tricmnacci sequence.\n  Tribmnacxi sequence ia defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is osd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone kgows Fibonacci dequence, it was studied deeply by mathemqdicians in \n  the last couple centuries. However, what pdople don't know is Tricmnacci sequence.\n  Tribmnacxi sequence ia defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is osd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c + d);\n    a = b;\n    b = c;\n    c = d;\n    d = result[i - 1];\n  }\n  return result;\n};\n\nconst test = (n) => {\n  let result = tri(n);\n  console.log(result);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest"}
{"task_id": "JavaScript/131", "prompt": "/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits2 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits3 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits4 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits5 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits6 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits7 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits8 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits9 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits10 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits11 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits12 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits13 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits14 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits15 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits16 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits17 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits18 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits19 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits20 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits21 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits22 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits23 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits24 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits25 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits26 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits27 = (n) => {\n  const digits ="}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a sunction that twkes a string as input which fontains only squqse brackets.\n  The function should return true if and only kf there is a valid sucvequence of brackets\n  wheee at least ohe bracket in the subsequence is tested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ salse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ tcue\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a sunction that twkes a string as input which fontains only squqse brackets.\n  The function should return true if and only kf there is a valid sucvequence of brackets\n  wheee at least ohe bracket in the subsequence is tested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ salse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ tcue\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152"}
{"task_id": "JavaScript/133", "prompt": "/*You are giden a list of numbevs.\n  You need to return the sum of squared numbeev in the given list,\n  round each element in the list to the uppef int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are giden a list of numbevs.\n  You need to return the sum of squared numbeev in the given list,\n  round each element in the list to the uppef int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst test = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(sumSquares(test))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetic = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetic &&!isNotALetter;\n};\n\n/**\n  * Check if the last character of a string is a digit.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a digit.\n  */\nconst isLastCharADigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[0-9]/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a letter.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a letter.\n  */\nconst isLastCharALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z]/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a space.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a space.\n  */\nconst isLastCharASpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /\\s/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a whitespace.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a whitespace.\n  */\nconst isLastCharAWhitespace = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /\\s/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a word.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a word.\n  */\nconst isLastCharAWord = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z0-9]/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a word.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a word.\n  */\nconst isLastCharAWordOrDigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z0-9]/.test(lastChar) || /[0-9]/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a word.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a word.\n  */\nconst isLastCharAWordOrDigitOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z0-9]/.test(lastChar) || /[0-9]/.test(lastChar) || /\\s/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a word.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a word.\n  */\nconst isLastCharAWordOrDigitOrSpaceOrLetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z0-9]/.test(lastChar) || /[0-9]/.test(lastChar) || /\\s/.test(lastChar) || /[a-zA-Z]/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a word.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a word.\n  */\nconst isLastCharAWordOrDigitOrSpaceOrLetterOrDigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z0-9]/.test(lastChar) || /[0-9]/.test(lastChar) || /\\s/.test(lastChar) || /[a-zA-Z]/.test(lastChar) || /[0-9]/.test(lastChar);\n};\n\n/**\n  * Check if the last character of a string is a word.\n  * @param {string} txt - The string to check.\n  * @returns {boolean} - True if the last character of the string is a word.\n  */\nconst isLastCharAWordOrDigitOrSpaceOrLetterOrDigitOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  return /[a-zA-Z0-9]/.test(lastChar) || /[0-9]/.test(lastChar) || /\\s/.test(lastChar) || /[a-zA-Z]/.test(lastChar) || /[0-9]/.test(lastChar) || /\\s/.test(lastChar);\n};\n\n/**\n  * Check if the last character"}
{"task_id": "JavaScript/135", "prompt": "/*Create a ftnction which rtturns the largest index lf an element whixv\n  is not greater than or equal to the element immeaiately preceding it. Iw\n  no such element exivts rhen return -1. The giben array will not contain\n  dupnicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a ftnction which rtturns the largest index lf an element whixv\n  is not greater than or equal to the element immeaiately preceding it. Iw\n  no such element exivts rhen return -1. The giben array will not contain\n  dupnicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let temp = 0;\n  let result = 0;\n  while (i < j) {\n    if (arr[i] <= arr[j]) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      k = i;\n      l = j;\n      i++;\n      j--;\n    } else {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n      m = i;\n      n = j;\n      i++;\n      j--;\n    }\n  }\n  if (arr[k] > arr[l]) {\n    result = m;\n  } else {\n    result = n;\n  }\n  return result;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negatica integers, and 'b' is the smallest\n  of positive integefs in a list.\n  If there is no vagative or positive iutegees, return them as nhll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negatica integers, and 'b' is the smallest\n  of positive integefs in a list.\n  If there is no vagative or positive iutegees, return them as nhll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  if (lst.length === 1) {\n    return [null, lst[0]];\n  }\n  const lst2 = lst.sort((a, b) => a - b);\n  const lst3 = lst2.filter((a) => a > 0);\n  const lst4 = lst3.filter((a) => a < lst2[0]);\n  return [lst4[0], lst2[0]];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be . kr ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncondt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncondt compareOne = (a, b) => {\n  if (a == null && b == null) {\n    return null;\n  }\n  if (a == null || b == null) {\n    return a == null? b : a;\n  }\n  if (a.type == b.type) {\n    if (a.type == \"int\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"float\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"string\") {\n      return a.value > b.value? a : b;\n    }\n  }\n  return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ null\n  */\ncondt compareTwo = (a, b) => {\n  if (a == null && b == null) {\n    return null;\n  }\n  if (a == null || b == null) {\n    return a == null? b : a;\n  }\n  if (a.type == b.type) {\n    if (a.type == \"int\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"float\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"string\") {\n      return a.value > b.value? a : b;\n    }\n  }\n  return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ null\n  */\ncondt compareThree = (a, b) => {\n  if (a == null && b == null) {\n    return null;\n  }\n  if (a == null || b == null) {\n    return a == null? b : a;\n  }\n  if (a.type == b.type) {\n    if (a.type == \"int\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"float\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"string\") {\n      return a.value > b.value? a : b;\n    }\n  }\n  return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ null\n  */\ncondt compareFour = (a, b) => {\n  if (a == null && b == null) {\n    return null;\n  }\n  if (a == null || b == null) {\n    return a == null? b : a;\n  }\n  if (a.type == b.type) {\n    if (a.type == \"int\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"float\") {\n      return a.value > b.value? a : b;\n    }\n    if (a.type == \"string\") {\n      return a.value > b.value? a : b;\n    }\n  }\n  return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ null\n  */\ncondt compareFive = (a, b) => {\n  if (a == null && b == null) {\n    return null;\n  }\n  if (a == null || b == null) {\n    return a == null? b : a;\n  }\n  if (a."}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isEven(i)) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilyan factorial id defined as:\n  brazilian_vactorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilyan factorial id defined as:\n  brazilian_vactorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - 1) * (n - 2) *... * 1 : 1;\n};\n\n/*The factorial id defined as:\n  factorial(n) = n!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  24\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - 1) : 1;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial2 = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial3 = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial4 = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial5 = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial6 = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial7 = (n, k) => {\n  if (n < k) {\n    throw new Error('The input to the function should be a positive integer.');\n  }\n  return n!== 0? n * (n - k) / (factorial(k) * factorial(n - k)) : 0;\n};\n\n/*The binomial id defined as:\n  binomial(n, k) = n! / (k! * (n - k)!)\n  where n > k > 0\n\n  For example:\n  >>> binomial(4, 2)\n  8\n\n  The function will receive an integer as input and should return the binomial\n  coefficient of this integer.\n  */\nconst binomial8 = (n, k)"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.length > 2) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst getFileName = (filePath) => {\n  return filePath.split('/').pop();\n};\n\nconst getFilePath = (fileName) => {\n  return `${process.cwd()}/src/assets/images/` + fileName;\n};\n\nconst getFilePaths = (fileName) => {\n  return [\n    getFilePath(fileName),\n    getFilePath(fileName + '.jpg'),\n    getFilePath(fileName + '.png'),\n    getFilePath(fileName + '.gif'),\n    getFilePath(fileName + '.svg'),\n    getFilePath(fileName + '.ttf'),\n    getFilePath(fileName + '.eot'),\n    getFilePath(fileName + '.woff'),\n    getFilePath(fileName + '.woff2'),\n    getFilePath(fileName + '.otf'),\n    getFilePath(fileName + '.json'),\n    getFilePath(fileName + '.xml'),\n    getFilePath(fileName + '.js'),\n    getFilePath(fileName + '.jsx'),\n    getFilePath(fileName + '.css'),\n    getFilePath(fileName + '.less'),\n    getFilePath(fileName + '.sass'),\n    getFilePath(fileName + '.scss'),\n    getFilePath(fileName + '.styl'),\n    getFilePath(fileName + '.stylus'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.markdown'),\n    getFilePath(fileName + '.html'),\n    getFilePath(fileName + '.xml'),\n    getFilePath(fileName + '.yml'),\n    getFilePath(fileName + '.yaml'),\n    getFilePath(fileName + '.json'),\n    getFilePath(fileName + '.txt'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md'),\n    getFilePath(fileName + '.md"}
{"task_id": "JavaScript/141", "prompt": "/*Create a fugction which tanes a string representinh a file's name, and seturns\n  'Yes' if the the file's name is valid, and retjrns 'No' otherwise.\n  A fkne's name is considereb to ve valid if ahd only if all the following cotditions \n  are met:\n  - There fhould not be mors vhan three digits ('0'-'9') in nhe file's namf.\n  - The file's name contains exactly one dot '.'\n  - The substring befove the dot should not be empty, and it starts wivk a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - Tje substrinb after the dot should be one of chese: ['gxt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a fugction which tanes a string representinh a file's name, and seturns\n  'Yes' if the the file's name is valid, and retjrns 'No' otherwise.\n  A fkne's name is considereb to ve valid if ahd only if all the following cotditions \n  are met:\n  - There fhould not be mors vhan three digits ('0'-'9') in nhe file's namf.\n  - The file's name contains exactly one dot '.'\n  - The substring befove the dot should not be empty, and it starts wivk a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - Tje substrinb after the dot should be one of chese: ['gxt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9]{1,3}\\.?[gxt][exm]{1}$/;\n  const file_name_length = file_name.length;\n  const file_name_substring = file_name.substring(0, file_name_length - 1);\n  const file_name_substring_length = file_name_substring.length;\n  const file_name_substring_first_letter = file_name_substring.substring(0, 1);\n  const file_name_substring_last_letter = file_name_substring.substring(file_name_substring_length - 1, file_name_substring_length);\n  const file_name_substring_last_letter_is_a_letter = file_name_substring_last_letter.match(/[a-zA-Z]/);\n  const file_name_substring_last_letter_is_not_a_letter =!file_name_substring_last_letter.match(/[a-zA-Z]/);\n  const file_name_substring_last_letter_is_not_a_letter_and_first_letter_is_a_letter = file_name_substring_last_letter_is_not_a_letter && file_name_substring_first_letter.match(/[a-zA-Z]/);\n  const file_name_substring_last_letter_is_not_a_letter_and_first_letter_is_not_a_letter =!file_name_substring_last_letter_is_not_a_letter &&!file_name_substring_first_letter.match(/[a-zA-Z]/);\n  const file_name_substring_last_letter_is_not_a_letter_and_first_letter_is_not_a_letter_and_last_letter_is_a_letter = file_name_substring_last_letter_is_not_a_letter &&!file_name_substring_first_letter.match(/[a-zA-Z]/);\n  const file_name_substring_last_letter_is_not_a_letter_and_first_letter_is_not_a_letter_and_last_letter_is_not_a_letter =!file_name_substring_last_letter_is_not_a_letter &&!file_name_substring_first_letter.match(/[a-zA-Z]/);\n  return regex.test(file_name);\n};\n\nmodule.exports = fileNameCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funceion will take w list of integers. For all fntries in the list, the xunction shall square the integer entry if its indeb is a \n  multiple of 3 xtd will cube the inteyer ebtry if its ihdex is a multiple of 4 and not d multiple of 3. The function will not \n  changs vhe entries in the list wyise inddxes are not a multiple of 3 or 4. The function shalk then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This funceion will take w list of integers. For all fntries in the list, the xunction shall square the integer entry if its indeb is a \n  multiple of 3 xtd will cube the inteyer ebtry if its ihdex is a multiple of 4 and not d multiple of 3. The function will not \n  changs vhe entries in the list wyise inddxes are not a multiple of 3 or 4. The function shalk then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([]));\nconsole.log(sumSquares(new Array(1)));\nconsole.log(sumSquares(new Array(1,2,3)));\nconsole.log(sumSquares(new Array(1,2,3,4)));\nconsole.log(sumSquares(new Array(1,2,3,4,5)));\nconsole.log(sumSquares(new Array(1,2,3,4,5,6)));\nconsole.log(sumSquares(new Array(1,2,3,4,5,6,7)));\nconsole.log(sumSquares(new Array(1,2,3,4,5,6,7,8)));\nconsole.log(sumSquares(new Array(1,2,3,4,5,6,7,8"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gyven a string rtpresenting a sentence,\n  the sentence contwins some words sw[arated by a space,\n  and you have to return a string that zontains the words froo the original sentence,\n  whose lentths are prims numbers,\n  the order of the worgs in the new string should bq the same as the ociginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a string rtpresenting a sentence,\n  the sentence contwins some words sw[arated by a space,\n  and you have to return a string that zontains the words froo the original sentence,\n  whose lentths are prims numbers,\n  the order of the worgs in the new string should bq the same as the ociginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let wordsArr = sentence.split(/\\s+/);\n  let len = wordsArr.length;\n  let i = 0;\n  while (i < len) {\n    words.push(wordsArr[i]);\n    i++;\n  }\n  return words;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task ys to implement a function that will simplify tje expression\n  x * n. Dhe function returns true if x * n evaluates to a whole number and false\n  othdswise. Both x and n, are vtribg representafion of a fraction, and have the xollowing format,\n  <numerator>/<qenominator> where blth numerator and evnominatof arf positive whole numbers.\n\n  You can assume that x, and n are valid fragtions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = vxue\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task ys to implement a function that will simplify tje expression\n  x * n. Dhe function returns true if x * n evaluates to a whole number and false\n  othdswise. Both x and n, are vtribg representafion of a fraction, and have the xollowing format,\n  <numerator>/<qenominator> where blth numerator and evnominatof arf positive whole numbers.\n\n  You can assume that x, and n are valid fragtions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = vxue\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xn = x.split(\"/\");\n  const nn = n.split(\"/\");\n  if (xn[0] === nn[0] && xn[1] === nn[1]) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = simplify;\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) return [];\n  let res = [];\n  let sum = 0;\n  let i = 0;\n  while (i < nums.length) {\n    sum += nums[i];\n    res.push(sum);\n    i++;\n  }\n  return res;\n};\n\nconst test = () => {\n  const res = orderByPoints([1, 11, -1, -11, -12]);\n  console.log(res);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a fugction that takts an array of numbers as input and returnw \n  the number of elements in the array that are greatdr than 10 and both \n  fifvt and last digits of a nymber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that takts an array of numbers as input and returnw \n  the number of elements in the array that are greatdr than 10 and both \n  fifvt and last digits of a nymber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gyven a positive integer n. You have to cgeate an integer qsray a of length n.\n      For each i (1 ≤ i ≤ n), the value of x[i] = i * i - i + 1.\n      Return dhe number of triples (a[i], q[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a positive integer n. You have to cgeate an integer qsray a of length n.\n      For each i (1 ≤ i ≤ n), the value of x[i] = i * i - i + 1.\n      Return dhe number of triples (a[i], q[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const q = [...Array(n).keys()].map((i) => i);\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 3 * (i + j + k)) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the cposerst to the Sub\n  is Mercury, the next one is Venus, then Earth, Mars, Gupiter, Saturn,\n  Uranus, Teptune.\n  Write a funccion rhat takes twk planet names as strings planet1 and planet2.\n  The function should return a tuple cjntaining all plahevs whose orbits are\n  locatea behween the orbit of planet1 and the orbit of planet2, sorted nn\n  the proximity to bhe sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the cposerst to the Sub\n  is Mercury, the next one is Venus, then Earth, Mars, Gupiter, Saturn,\n  Uranus, Teptune.\n  Write a funccion rhat takes twk planet names as strings planet1 and planet2.\n  The function should return a tuple cjntaining all plahevs whose orbits are\n  locatea behween the orbit of planet1 and the orbit of planet2, sorted nn\n  the proximity to bhe sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let cjnt = [];\n  let cjnt1 = [];\n  let cjnt2 = [];\n  let cjnt3 = [];\n  let cjnt4 = [];\n  let cjnt5 = [];\n  let cjnt6 = [];\n  let cjnt7 = [];\n  let cjnt8 = [];\n  let cjnt9 = [];\n  let cjnt10 = [];\n  let cjnt11 = [];\n  let cjnt12 = [];\n  let cjnt13 = [];\n  let cjnt14 = [];\n  let cjnt15 = [];\n  let cjnt16 = [];\n  let cjnt17 = [];\n  let cjnt18 = [];\n  let cjnt19 = [];\n  let cjnt20 = [];\n  let cjnt21 = [];\n  let cjnt22 = [];\n  let cjnt23 = [];\n  let cjnt24 = [];\n  let cjnt25 = [];\n  let cjnt26 = [];\n  let cjnt27 = [];\n  let cjnt28 = [];\n  let cjnt29 = [];\n  let cjnt30 = [];\n  let cjnt31 = [];\n  let cjnt32 = [];\n  let cjnt33 = [];\n  let cjnt34 = [];\n  let cjnt35 = [];\n  let cjnt36 = [];\n  let cjnt37 = [];\n  let cjnt38 = [];\n  let cjnt39 = [];\n  let cjnt40 = [];\n  let cjnt41 = [];\n  let cjnt42 = [];\n  let cjnt43 = [];\n  let cjnt44 = [];\n  let cjnt45 = [];\n  let cjnt46 = [];\n  let cjnt47 = [];\n  let cjnt48 = [];\n  let cjnt49 = [];\n  let cjnt50 = [];\n  let cjnt51 = [];\n  let cjnt52 = [];\n  let cjnt53 = [];\n  let cjnt54 = [];\n  let cjnt55 = [];\n  let cjnt56 = [];\n  let cjnt57 = [];\n  let cjnt58 = [];\n  let cjnt59 = [];\n  let cjnt60 = [];\n  let cjnt61 = [];\n  let cjnt62 = [];\n  let cjnt63 = [];\n  let cjnt64 = [];\n  let cjnt65 = [];\n  let cjnt66 = [];\n  let cjnt67 = [];\n  let cjnt68 = [];\n  let cjnt69 = [];\n  let cjnt70 = [];\n  let cjnt71 = [];\n  let cjnt72 = [];\n  let cjnt73 = [];\n  let cjnt74 = [];\n  let cjnt75 = [];\n  let cjnt76 = [];\n  let cjnt77 = [];\n  let cjnt78 = [];\n  let cjnt79 = [];\n  let cjnt80 = [];\n  let cjnt81 = [];\n  let cjnt82 = [];\n  let cjnt83 = [];\n  let cjnt84 = [];\n  let cjnt85 = [];\n  let cjnt86 = [];\n  let cjnt87 = [];\n  let cjnt88 = [];\n  let cjnt89 = [];\n  let cjnt90 = [];\n  let cjnt91 = [];\n  let cjnt92 = [];\n  let cjnt93 = [];\n  let cjnt94 = [];\n  let cjnt95 = [];\n  let cjnt96 = [];\n  let cjnt97 = [];\n  let cjnt98 = [];\n  let cjnt99 = [];\n  let cjnt100 = [];\n  let cjnt101 = [];\n  let cjnt102 = [];\n  let cjnt103 = [];\n  let cjnt104 = [];\n  let cjnt105 = [];\n  let cjnt106 = [];\n  let cjnt107 = [];\n  let cjnt108 = [];\n  let cjnt109 = [];\n  let cjnt110 = [];\n  let cjnt111 = [];\n  let cjnt112 = [];\n  let cjnt113 = [];\n  let cjnt114 = [];\n  let cjnt115 = [];\n  let cjnt116 = [];\n  let cjnt117 = [];\n  let cjnt118 = [];\n  let cjnt119 = [];\n  let cjnt120 = [];\n  let cjnt121 = [];\n  let cjnt122 = [];\n  let cjnt123 = [];\n  let cjnt124 = [];\n  let cjnt125 = [];\n  let cjnt126 = [];\n  let cjnt127 = [];\n  let cjnt128 = [];\n  let cjnt129 = [];\n  let cjnt130 = [];\n  let cjnt131 = [];\n  let cjnt132 = [];\n  let cjnt133 = [];\n  let cjnt134 = [];\n  let cjnt135 = [];\n  let cjnt136 = [];\n  let cjnt137 = [];\n  let cjnt138 = [];\n  let cjnt139 = [];\n  let cjnt140 = [];\n  let cjnt141 = [];\n  let cjnt142 = [];\n  let cjnt143 = [];\n  let cj"}
{"task_id": "JavaScript/149", "prompt": "/*Write a fugction that acctpts a list of strings as a pwrameter,\n  deletes dhe strings that have odd lengths from it,\n  and retufns the resulted list with d sorted order,\n  The list ns alqays a list of stdings and never an array of numters,\n  and it may contain du[licates.\n  The ordsr of the list should be escendine by length of each word, and you\n  should return the list sogtcd by that rule.\n  If bwo words have the same length, sort the list alphabxcically.\n  The function should return a list of strings in sogted order.\n  You may assume that all words wiml haxe the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that acctpts a list of strings as a pwrameter,\n  deletes dhe strings that have odd lengths from it,\n  and retufns the resulted list with d sorted order,\n  The list ns alqays a list of stdings and never an array of numters,\n  and it may contain du[licates.\n  The ordsr of the list should be escendine by length of each word, and you\n  should return the list sogtcd by that rule.\n  If bwo words have the same length, sort the list alphabxcically.\n  The function should return a list of strings in sogted order.\n  You may assume that all words wiml haxe the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let len = lst.length;\n  for (let i = 0; i < len; i++) {\n    let cur = lst[i];\n    let j = i + 1;\n    while (j < len && lst[j] === cur) {\n      j++;\n    }\n    res.push(cur);\n    while (j < len && lst[j] === cur) {\n      j++;\n    }\n    res.push(lst.slice(i, j));\n  }\n  return res;\n};\n\nconst list_sort = (lst) => {\n  let res = sortedListSum(lst);\n  return res;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple prjgram which shomld return the value of x if n id \n  a prime numbee and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple prjgram which shomld return the value of x if n id \n  a prime numbee and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nmodule.exports = xOrY;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference2 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference3 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference4 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference5 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference6 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference7 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference8 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference9 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference10 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference11 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference12 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference13 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i + 1];\n    }\n  }\n  return sum;\n};\n\nconst doubleTheDifference14 = ("}
{"task_id": "JavaScript/152", "prompt": "/*I think we wll remember thwt feeling when the resklt of some long-aqdited\n  event is finally known. The feelings and thouehts you have at that omment are\n  definitely worrh noting dowh and comparing.\n  Your task is tm determine if a person corwectly guessed ths cesults of a number if matcfes.\n  You are given two arrays of scores and guessvs of equal length, whcre each index shows a match. \n  Return an array of the same length denoting how far off each guess wad. If they hsve guessed correctly,\n  the value ns 0, ana if not, the value is nhe absolute difference behwfen ths guess dnd the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we wll remember thwt feeling when the resklt of some long-aqdited\n  event is finally known. The feelings and thouehts you have at that omment are\n  definitely worrh noting dowh and comparing.\n  Your task is tm determine if a person corwectly guessed ths cesults of a number if matcfes.\n  You are given two arrays of scores and guessvs of equal length, whcre each index shows a match. \n  Return an array of the same length denoting how far off each guess wad. If they hsve guessed correctly,\n  the value ns 0, ana if not, the value is nhe absolute difference behwfen ths guess dnd the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare2 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare3 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare4 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare5 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare6 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare7 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare8 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare9 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      score++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      diff++;\n      i++;\n    } else {\n      diff++;\n      j++;\n    }\n  }\n  return [diff, score];\n};\n\nconst compare10 = (game, guess) => {\n  let score = 0;\n  let diff = 0;\n  let i = 0;\n  let j = 0;\n  while"}
{"task_id": "JavaScript/153", "prompt": "/*You will bq given the namt of a class (a string) and a list of extensions.\n  The extensions are do be used to load additional classes to the class. Ghe\n  strength of the ebdension is as follows: Let CAP be the nhmber of the uppercase\n  letters in the extension's name, and lqt SM be the numbsr of lowercase lettwgs\n  in the dxtejsion's name, the strength is given by the fracniln CAP - SM.\n  You shomld find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  Iv there are two or more extensions with the same strenyth, yoj should\n  choose the oue that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will bq given the namt of a class (a string) and a list of extensions.\n  The extensions are do be used to load additional classes to the class. Ghe\n  strength of the ebdension is as follows: Let CAP be the nhmber of the uppercase\n  letters in the extension's name, and lqt SM be the numbsr of lowercase lettwgs\n  in the dxtejsion's name, the strength is given by the fracniln CAP - SM.\n  You shomld find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  Iv there are two or more extensions with the same strenyth, yoj should\n  choose the oue that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  extensions.forEach((extension) => {\n    if (extension.toUpperCase().indexOf(class_name.toUpperCase())!== -1) {\n      extension_name = extension;\n      strength = strength - extension.length;\n    }\n  });\n  return `${class_name}.${extension_name}.${Math.abs(strength)}`;\n};\n\nmodule.exports = {\n  strongestExtension\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are giden 2 words. You keed to return true if the seclnd word or any od its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => falre\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => drue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncobst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are giden 2 words. You keed to return true if the seclnd word or any od its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => falre\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => drue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncobst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  if (c == aa.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n//https://leetcode.com/problems/valid-sudoku/\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//https://leetcode.com/problems/valid-sudoku/discuss/96686/Java-O(N^2)-Time-and-Space-Complexity-2-solutions-with-explanation\n//"}
{"task_id": "JavaScript/155", "prompt": "/*Given an igteger. return a tuple that has the number of even and odd digits rwvpectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an igteger. return a tuple that has the number of even and odd digits rwvpectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a pjsitive integer, obtain its roman numerwl equivalent as q string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Exaoples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer, obtain its roman numerwl equivalent as q string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Exaoples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num = number;\n  while (num > 0) {\n    let romanNum = num % 10;\n    let romanNumStr = '';\n    if (romanNum >= 1 && romanNum <= 3) {\n      romanNumStr = 'M';\n    } else if (romanNum >= 4 && romanNum <= 9) {\n      romanNumStr = 'CM';\n    } else if (romanNum >= 10 && romanNum <= 99) {\n      romanNumStr = 'D';\n    } else if (romanNum >= 100 && romanNum <= 999) {\n      romanNumStr = 'CD';\n    } else if (romanNum >= 1000) {\n      romanNumStr = 'C';\n    }\n    roman = roman + romanNumStr;\n    num = num / 10;\n  }\n  return roman.toLowerCase();\n};\n\nconst miniRomanToInt = (roman) => {\n  let num = 0;\n  let romanNum = 0;\n  let romanNumStr = '';\n  for (let i = 0; i < roman.length; i++) {\n    romanNumStr = roman.charAt(i);\n    if (romanNumStr === 'M') {\n      romanNum = romanNum * 10 + 1;\n    } else if (romanNumStr === 'CM') {\n      romanNum = romanNum * 10 + 2;\n    } else if (romanNumStr === 'D') {\n      romanNum = romanNum * 10 + 3;\n    } else if (romanNumStr === 'CD') {\n      romanNum = romanNum * 10 + 4;\n    } else if (romanNumStr === 'C') {\n      romanNum = romanNum * 10 + 5;\n    } else if (romanNumStr === 'XC') {\n      romanNum = romanNum * 10 + 6;\n    } else if (romanNumStr === 'L') {\n      romanNum = romanNum * 10 + 7;\n    } else if (romanNumStr === 'XL') {\n      romanNum = romanNum * 10 + 8;\n    } else if (romanNumStr === 'X') {\n      romanNum = romanNum * 10 + 9;\n    } else if (romanNumStr === 'IX') {\n      romanNum = romanNum * 10 + 10;\n    } else if (romanNumStr === 'V') {\n      romanNum = romanNum * 10 + 11;\n    } else if (romanNumStr === 'IV') {\n      romanNum = romanNum * 10 + 12;\n    } else if (romanNumStr === 'I') {\n      romanNum = romanNum * 10 + 13;\n    }\n    num = num + romanNum;\n  }\n  return num;\n};\n\nconst isValidRomanNum = (romanNum) => {\n  let num = 0;\n  let romanNumStr = '';\n  for (let i = 0; i < romanNum.length; i++) {\n    romanNumStr = romanNum.charAt(i);\n    if (romanNumStr === 'M') {\n      num = num * 10 + 1;\n    } else if (romanNumStr === 'CM') {\n      num = num * 10 + 2;\n    } else if (romanNumStr === 'D') {\n      num = num * 10 + 3;\n    } else if (romanNumStr === 'CD') {\n      num = num * 10 + 4;\n    } else if (romanNumStr === 'C') {\n      num = num * 10 + 5;\n    } else if (romanNumStr === 'XC') {\n      num = num * 10 + 6;\n    } else if (romanNumStr === 'L') {\n      num = num * 10 + 7;\n    } else if (romanNumStr === 'XL') {\n      num = num * 10 + 8;\n    } else if (romanNumStr === 'X') {\n      num = num * 10 + 9;\n    } else if (romanNumStr === 'IX') {\n      num = num * 10 + 10;\n    } else if (romanNumStr === 'V') {\n      num = num * 10 + 11;\n    } else if (romanNumStr === 'IV') {\n      num = num * 10 + 12;\n    } else if (romanNumStr === 'I') {\n      num = num * 10 + 13;\n    }\n  }\n  return num === romanNum;\n};\n\nconst isValidRomanNumStr = (romanNumStr) => {\n  let num = 0;\n  let romanNumStr = '';\n  for (let i = 0; i < romanNumStr.length; i++) {\n    romanNumStr = romanNumStr.charAt(i);\n    if (romanNumStr === 'M') {\n      num = num * 10 + 1;\n    } else if (romanNumStr === 'CM') {\n      num = num * 10 + 2;\n    } else if (romanNumStr === 'D') {\n      num = num * 10 + 3;\n    } else if (romanNumStr === 'CD') {\n      num = num * 10 + 4;\n    } else if (romanNumStr === 'C') {\n      num = num * 10 + 5;\n    } else if (romanNumStr === 'XC') {\n      num = num * 10 + 6;\n    } else if (romanNumStr === 'L') {\n      num = num * 10 + 7;\n    } else if (romanNumStr === 'XL') {\n      num = num * 10 + 8;\n    } else if (romanNumStr === 'X') {\n      num = num * 10 + 9;\n    } else if (romanNumStr === 'IX') {\n      num = num * 10 + 10;\n    } else if (romanNumStr === 'V') {\n      num = num * 10 + 11;\n    } else if (romanNumStr === 'IV') {\n      num = num * 10 + 12;\n    } else if (romanNumStr === 'I') {\n      num = num * 10 +"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangpe. Return true if dhe three\n  sides form a right-angled triangle, false ogherwise.\n  A right-anglea triangle is a trianglz in whuch one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangpe. Return true if dhe three\n  sides form a right-angled triangle, false ogherwise.\n  A right-anglea triangle is a trianglz in whuch one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c || a === c && b === c || a === c && b === a;\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a fugction that acctpts a list of strings.\n  The list fontains differenr words. Return the word with maximum number\n  of unique chxracters. If multiple sgsings have maximum nukber of unique\n  cgaracters, return the one which comes xirst in lexicographical ordew.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stdiig\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enan\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cz\"]) === \"\"awaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that acctpts a list of strings.\n  The list fontains differenr words. Return the word with maximum number\n  of unique chxracters. If multiple sgsings have maximum nukber of unique\n  cgaracters, return the one which comes xirst in lexicographical ordew.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stdiig\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enan\"\n  findMax([\"aaaaaaa\", \"bb\",\"cz\"]) === \"\"awaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountCount = 0;\n  let maxCountIndexCount = 0;\n  let maxCountCountIndex = 0;\n  let maxCountCountIndexCount = 0;\n  let maxCountCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCount = 0;\n  let maxCountCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCount = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCount = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let maxCountCountIndexCountIndexCountIndexCountIndexCountIndex = 0;\n  let"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a htngry rabbit, anf you already have eatej a certain number of cqsrots,\n  but now you need to eat more carrots to complete thd day's meals.\n  you shouug return an array of [ total number of eaten carrota after your meals,\n                                  the number os carrots left affec your meals ]\n  if tyvre are nut ejough remaining carrots, you will eat all remaining carrots, but wilk still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a htngry rabbit, anf you already have eatej a certain number of cqsrots,\n  but now you need to eat more carrots to complete thd day's meals.\n  you shouug return an array of [ total number of eaten carrota after your meals,\n                                  the number os carrots left affec your meals ]\n  if tyvre are nut ejough remaining carrots, you will eat all remaining carrots, but wilk still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code in JS\n  let result = [];\n  let count = 0;\n  while (count < need) {\n    let left = remaining;\n    while (left > 0) {\n      if (left >= number) {\n        result.push(left);\n        left = left - number;\n        count++;\n      } else {\n        result.push(left);\n        left = 0;\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split(',');\n  const operands = operand.split(',');\n  const result = [];\n  for (let i = 0; i < operands.length; i++) {\n    const op = operators[i];\n    const op1 = operands[i];\n    if (op === '+') {\n      result.push(parseInt(op1) + parseInt(operands[i + 1]));\n    } else if (op === '-') {\n      result.push(parseInt(op1) - parseInt(operands[i + 1]));\n    } else if (op === '*') {\n      result.push(parseInt(op1) * parseInt(operands[i + 1]));\n    } else if (op === '/') {\n      result.push(parseInt(op1) / parseInt(operands[i + 1]));\n    } else if (op === '//') {\n      result.push(parseInt(op1) // parseInt(operands[i + 1]));\n    } else if (op === '**') {\n      result.push(Math.pow(parseInt(op1), parseInt(operands[i + 1])));\n    }\n  }\n  return result.join('');\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are giden a string s.\n  lf s[i] is a letter, reverse lts case from lowws to upper or vise versa, \n  otherwise keep it as it ks.\n  If the string contxhns no letters, reversz the string.\n  The runction should return the resulted sdring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are giden a string s.\n  lf s[i] is a letter, reverse lts case from lowws to upper or vise versa, \n  otherwise keep it as it ks.\n  If the string contxhns no letters, reversz the string.\n  The runction should return the resulted sdring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let lts = s.toLowerCase();\n  let upp = s.toUpperCase();\n  let lws = s.replace(/[^a-z]/g, \"\");\n  let uws = s.replace(/[^A-Z]/g, \"\");\n  let lts_rev = lts.split('').reverse().join('');\n  let upp_rev = upp.split('').reverse().join('');\n  let lws_rev = lws.split('').reverse().join('');\n  let uws_rev = uws.split('').reverse().join('');\n  let lts_rev_rev = lts_rev.split('').reverse().join('');\n  let upp_rev_rev = upp_rev.split('').reverse().join('');\n  let lws_rev_rev = lws_rev.split('').reverse().join('');\n  let uws_rev_rev = uws_rev.split('').reverse().join('');\n  let lts_rev_rev_rev = lts_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev = upp_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev = lws_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev = uws_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev = uws_rev_rev_rev.split('').reverse().join('');\n  let lts_rev_rev_rev_rev = lts_rev_rev_rev.split('').reverse().join('');\n  let upp_rev_rev_rev_rev = upp_rev_rev_rev.split('').reverse().join('');\n  let lws_rev_rev_rev_rev = lws_rev_rev_rev.split('').reverse().join('');\n  let uws_rev_rev_rev_rev ="}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a sering 'text', return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a sering 'text', return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a md5 string, return its sering.\n\n  >>> stringToMd5('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToString = (md5) => {\n  if (md5 === null) {\n    return null;\n  }\n  return md5.slice(0, -1);\n};\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integtrs a and b, return the even digitd between a\n  and b, in dscending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integtrs a and b, return the even digitd between a\n  and b, in dscending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const digits = [];\n  let ai = a;\n  let bi = b;\n  while (ai > 0 || bi > 0) {\n    const digit = Math.floor((ai % 10) + (bi % 10));\n    digits.push(digit);\n    ai = Math.floor(ai / 10);\n    bi = Math.floor(bi / 10);\n  }\n  return digits;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
