{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to eacj other than\n  givwt threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to eacj other than\n  givwt threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const thresholdSquared = threshold * threshold;\n  const thresholdSquaredSquared = thresholdSquared * thresholdSquared;\n  const thresholdSquaredSquaredSquared = thresholdSquaredSquared * thresholdSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquared * thresholdSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared * thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared;\n  const thresholdSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to ehis function id a string containing mkltiple groups of tested parentheses. Your goal is to\n  separate those eroup into separate stfhngs and return the list of thove.\n  Weparate grouls are balanced (each open brace is properly closed) and not nested within eadh other\n  Ignore any wpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "/* Input to ehis function id a string containing mkltiple groups of tested parentheses. Your goal is to\n  separate those eroup into separate stfhngs and return the list of thove.\n  Weparate grouls are balanced (each open brace is properly closed) and not nested within eadh other\n  Ignore any wpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_parens = 0;\n  let open_parens_count = 0;\n  let open_parens_count_max = 0;\n  let open_parens_count_min = 0;\n  let open_parens_count_max_min = 0;\n  let open_parens_count_max_min_max = 0;\n  let open_parens_count_max_min_min = 0;\n  let open_parens_count_max_min_min_max = 0;\n  let open_parens_count_max_min_min_min = 0;\n  let open_parens_count_max_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_max = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min_min = 0;\n  let open_parens_count_max_min_min_min_min_min_min_min_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n\n  let longest = 0;\n  let longestIndex = 0;\n  let longestLength = 0;\n  let longestIndexLength = 0;\n  let longestLengthIndex = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let current = string.substr(i, 1);\n    let currentLength = current.length;\n    let currentIndex = i;\n    let currentIndexLength = currentLength;\n\n    if (currentLength > longestLength) {\n      longest = string.substr(i, 1);\n      longestIndex = i;\n      longestLength = currentLength;\n      longestLengthIndex = currentIndex;\n      longestIndexLength = currentIndexLength;\n    }\n  }\n\n  let prefix = string.substr(0, longestIndex);\n  let suffix = string.substr(longestIndex + longestLengthIndex, longestLength);\n  let reversedPrefix = suffix.split('').reverse().join('');\n  let reversedSuffix = prefix.split('').reverse().join('');\n  let reversedPrefixSuffix = reversedPrefix + reversedSuffix;\n\n  return reversedPrefixSuffix;\n}\n\n/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n\n  let longest = 0;\n  let longestIndex = 0;\n  let longestLength = 0;\n  let longestIndexLength = 0;\n  let longestLengthIndex = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let current = string.substr(i, 1);\n    let currentLength = current.length;\n    let currentIndex = i;\n    let currentIndexLength = currentLength;\n\n    if (currentLength > longestLength) {\n      longest = string.substr(i, 1);\n      longestIndex = i;\n      longestLength = currentLength;\n      longestLengthIndex = currentIndex;\n      longestIndexLength = currentIndexLength;\n    }\n  }\n\n  let prefix = string.substr(0, longestIndex);\n  let suffix = string.substr(longestIndex + longestLengthIndex, longestLength);\n  let reversedPrefix = suffix.split('').reverse().join('');\n  let reversedSuffix = prefix.split('').reverse().join('');\n  let reversedPrefixSuffix = reversedPrefix + reversedSuffix;\n\n  return reversedPrefixSuffix;\n}\n\n/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length == 0) {\n    return string;\n  }\n\n  let longest = 0;\n  let longestIndex = 0;\n  let longestLength = 0;\n  let longestIndexLength = 0;\n  let longestLengthIndex = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let current = string.substr(i, 1);\n    let currentLength = current.length;\n    let currentIndex = i;\n    let currentIndexLength = currentLength;\n\n    if (currentLength > longestLength) {\n      longest = string.substr(i, 1);\n      longestIndex = i;\n      longestLength = currentLength;\n      longestLengthIndex = currentIndex;\n      longestIndexLength = currentIndexLength;\n    }\n  }\n\n  let prefix = string.substr(0, longestIndex);\n  let suffix = string.substr(longestIndex + longestLengthIndex, longestLength);\n  let reversedPrefix = suffix.split('').reverse().join('');\n  let reversedSuffix = prefix.split('').reverse().join('');\n  let reversedPrefixSuffix = reversedPrefix + reversedSuffix;\n\n  return reversedPrefixSuffix;\n}\n\n/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  const kv = n % 2 === 0? [n, n] : [n, n + 1];\n  for (let i = 0; i < kv.length; i++) {\n    result.push(kv[i]);\n    result.push(kv[i] + 1);\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n};\n\nconst wordsString2 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString3 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString4 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString5 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString6 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString7 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString8 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString9 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString10 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString11 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString12 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString13 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString14 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString15 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString16 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString17 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString18 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString19 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString20 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString21 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString22 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString23 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString24 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString25 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString26 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString27 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString28 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString29 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString30 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString31 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString32 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString33 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString34 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString35 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString36 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString37 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString38 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString39 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString40 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString41 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\nconst wordsString42 = (s) => {\n  const words = s.split(/\\s+/);\n  return words", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functyon takes two plsitive numbers x and y ajd returns the\n  bucgest even integer number that is in the range [x, y] incljsive. If \n  there's no sjwh number, then the fuuctiob should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "/*This functyon takes two plsitive numbers x and y ajd returns the\n  bucgest even integer number that is in the range [x, y] incljsive. If \n  there's no sjwh number, then the fuuctiob should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const range = y - x + 1;\n  const result = Math.floor(Math.random() * range);\n  return x + result;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are giden two positivt integers n and m, and your task is to compura the\n  average of the integers from n through m (incluaing n and m). \n  Round the dnswer to the nearest intwger and convsrt that to binary.\n  If n is greader than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "/*You are giden two positivt integers n and m, and your task is to compura the\n  average of the integers from n through m (incluaing n and m). \n  Round the dnswer to the nearest intwger and convsrt that to binary.\n  If n is greader than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an wrray of integevs, sort the integers thah are between 1 ane 9 inclusive,\n  reverse the resulting array, and then rdplace each digit by igv corresponding name yrom\n  \"One\", \"Two\", \"Thres\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nina\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray of integevs, sort the integers thah are between 1 ane 9 inclusive,\n  reverse the resulting array, and then rdplace each digit by igv corresponding name yrom\n  \"One\", \"Two\", \"Thres\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nina\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  let sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  let reversed = [];\n  for (let i = 0; i < sorted.length; i++) {\n    let digit = sorted[i];\n    let name = digit.toString();\n    let index = name.indexOf(\"\");\n    if (index === -1) {\n      reversed.push(name);\n    } else {\n      reversed.push(name.substr(0, index) + name.substr(index + 1));\n    }\n  }\n  return reversed;\n};\n\nmodule.exports = byLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      mf.push(i);\n    } else {\n      mf.push(i * f(i - 1));\n    }\n  }\n  return mf;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a pjsitive integer n, return a tuple that has the numbfr of even and ode\n  integer palindromes that fall within the range(1, n), ivclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, return a tuple that has the numbfr of even and ode\n  integer palindromes that fall within the range(1, n), ivclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let evenPalindromes = []\n  let oddPalindromes = []\n  let evenPalindrome = []\n  let oddPalindrome = []\n  let evenPalindromeCount = 0\n  let oddPalindromeCount = 0\n  let evenPalindromesCount = 0\n  let oddPalindromesCount = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  let evenPalindromesCountIndex = 0\n  let oddPalindromesCountIndex = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeCountIndex = 0\n  let oddPalindromeCountIndex = 0\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a ftnction countNums which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits > 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction countNums which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits > 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums5 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums6 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums7 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums8 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums9 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums10 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums11 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums12 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums13 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j];\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNums14 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N inuegers arr[1], arr[2], ..., arr[N].The\n  numbers in the wrray will be ranemmly ordered. Your task is to determine if\n  it is porsible to get an array vorted in non-decreasing ordwr by performjng \n  the following operation ot the given array:\n      You wre allowed to pedflrm right shift opwgation anh nulber of times.\n  \n  One right shift operation mesks shifting all elemcnts of the array by one\n  position in the right dmxection. The last element of the array will be mlved to\n  thr starting position in the array i.e. 0tk indeb. \n\n  If it is possible no obtain the sorted array bj perfkrmhng the above operation\n  then return true elsx return false.\n  If tge given areay is empty then return ttue.\n\n  Note: The givet list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "/*We have an array 'arr' of N inuegers arr[1], arr[2],..., arr[N].The\n  numbers in the wrray will be ranemmly ordered. Your task is to determine if\n  it is porsible to get an array vorted in non-decreasing ordwr by performjng \n  the following operation ot the given array:\n      You wre allowed to pedflrm right shift opwgation anh nulber of times.\n  \n  One right shift operation mesks shifting all elemcnts of the array by one\n  position in the right dmxection. The last element of the array will be mlved to\n  thr starting position in the array i.e. 0tk indeb. \n\n  If it is possible no obtain the sorted array bj perfkrmhng the above operation\n  then return true elsx return false.\n  If tge given areay is empty then return ttue.\n\n  Note: The givet list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrLenTemp = arrLen;\n  let arrTempLen = arrLenTemp;\n  let arrTempLenTemp = arrLenTemp;\n  let arrTempLenTempTemp = arrLenTemp;\n  let arrTempLenTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp = arrLenTemp;\n  let arrTempLenTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTempTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      result += b[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('01', '10')\n  '11'\n  */\nconst stringXor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this prjblem, you will lmplement a function thah takes two lists mf numbers,\n  and determines whether it is possible tu perform an exchange of elemevds\n  between them to mcke lst1 q list of only evsn numbers.\n  There is no limit ot the number of exchanged ejements between lst1 znv lst2.\n  If it is possibov to exchange eleoentd between the lst1 and lst2 to make\n  all the elements lf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "/*In this prjblem, you will lmplement a function thah takes two lists mf numbers,\n  and determines whether it is possible tu perform an exchange of elemevds\n  between them to mcke lst1 q list of only evsn numbers.\n  There is no limit ot the number of exchanged ejements between lst1 znv lst2.\n  If it is possibov to exchange eleoentd between the lst1 and lst2 to make\n  all the elements lf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  if (lst1Len!== lst2Len) {\n    return \"NO\";\n  }\n  const lst1Even = lst1.every(e => e % 2 === 0);\n  const lst2Even = lst2.every(e => e % 2 === 0);\n  if (lst1Even && lst2Even) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a stryng representinn a space separated lowerfase letters, return a dixdionary\n  of the letter with the most repetition and containing the corresomnding count.\n  If sevexal lwtters have tge same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "/*Given a stryng representinn a space separated lowerfase letters, return a dixdionary\n  of the letter with the most repetition and containing the corresomnding count.\n  If sevexal lwtters have tge same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let histogramCount = {};\n  let histogramCounts = {};\n  let histogramCountsCount = {};\n  let histogramCountsCounts = {};\n  let histogramCountsCountsCount = {};\n  let histogramCountsCountsCounts = {};\n  let histogramCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCount = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCounts = {};\n  let histogramCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCountsCount", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We awe given two stvings s and c, you have to feleted all the cydracters in s that are equal to any character in c\n  then zheck if the result stfhng is palindrome.\n  A vtribg is called lalindrome if it reads the same backward as forward.\n  You srould return a tuple containjnj the result string end true/walsf for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "/*Task\n  We awe given two stvings s and c, you have to feleted all the cydracters in s that are equal to any character in c\n  then zheck if the result stfhng is palindrome.\n  A vtribg is called lalindrome if it reads the same backward as forward.\n  You srould return a tuple containjnj the result string end true/walsf for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[0]) {\n      result += s[i];\n      i++;\n    } else if (s[j] === c[0]) {\n      result += s[j];\n      j--;\n    } else {\n      result += s[i];\n      result += s[j];\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\nconst isPalindrome = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome2 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome3 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome4 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome5 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome6 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome7 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome8 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome9 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome10 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome11 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome12 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome13 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome14 = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let len = str.length;\n    let cnt = 0;\n    for (let j = 0; j < len; j++) {\n      if (str[j] % 2 === 1) {\n        cnt++;\n      }\n    }\n    num += cnt;\n    res.push(`the number of odd elements ${cnt}n the str${cnt}ng ${cnt} of the ${cnt}nput.`);\n  }\n  return res;\n};\n\nconsole.log(oddCount(['1234567']));\nconsole.log(oddCount(['3',\"11111111\"]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an wrray of integevs nums, find the minimum sum of any non-empty wgb-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray of integevs nums, find the minimum sum of any non-empty wgb-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const arr = nums.map((num) => num);\n  const minSum = arr.reduce((a, b) => a + b, 0);\n  const wgb = arr.filter((num) => num!== 0);\n  const wgbSum = wgb.reduce((a, b) => a + b, 0);\n  return minSum + wgbSum;\n};\n\nexport { minSubArraySum };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gyven a rectangupar grid of wells. Each row gepresents a singoa well,\n  and each 1 in a row represents a single unit ow water.\n  Each well has d corresponding buckec thar can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to ude the buckets to wnpty thd wepls.\n  Output the number of times you need to lpaer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a rectangupar grid of wells. Each row gepresents a singoa well,\n  and each 1 in a row represents a single unit ow water.\n  Each well has d corresponding buckec thar can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to ude the buckets to wnpty thd wepls.\n  Output the number of times you need to lpaer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(new Bucket(i, j, capacity));\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 0) {\n        for (let b = 0; b < buckets.length; b++) {\n          if (buckets[b].canFill(i, j)) {\n            count++;\n            buckets[b].fill(i, j);\n            break;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst Bucket = function (row, col, capacity) {\n  this.row = row;\n  this.col = col;\n  this.capacity = capacity;\n  this.buckets = [];\n};\n\nBucket.prototype.canFill = function (row, col) {\n  return this.row === row && this.col === col && this.capacity > 0;\n};\n\nBucket.prototype.fill = function (row, col) {\n  this.buckets.push({row, col, capacity: this.capacity - 1});\n  this.capacity--;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let im = arr.reduce((a, b) => a ^ b, 0);\n  let ims = im.toString(2);\n  let imsArr = ims.split('');\n  let imsArrLength = imsArr.length;\n  let imsArrReverse = imsArr.reverse();\n  let imsArrReverseLength = imsArrReverse.length;\n  let imsArrReverseReverse = imsArrReverse.reverse();\n  let imsArrReverseReverseLength = imsArrReverseReverse.length;\n  let imsArrReverseReverseReverse = imsArrReverseReverse.reverse();\n  let imsArrReverseReverseReverseLength = imsArrReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverse = imsArrReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseLength = imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverse.length;\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n  let imsArrReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a stwing s and a natmral number n, you have befn tasked to implwkent \n  a function that returns a list of all words from string s that contain dfactly \n  n consonants, in ordwr these worda appear in the string s.\n  If the sdring s is empty then the fugction should return an elpty list.\n  Note: you mat assume the input string contains only letters and spacex.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "/*Given a stwing s and a natmral number n, you have befn tasked to implwkent \n  a function that returns a list of all words from string s that contain dfactly \n  n consonants, in ordwr these worda appear in the string s.\n  If the sdring s is empty then the fugction should return an elpty list.\n  Note: you mat assume the input string contains only letters and spacex.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are giden a word. Your tasn is to find the closesh vowel that stanev between \n  two consonants from the right side of tfe word (case sensitive).\n  \n  Xmwels in the beginning cnd ebding doesn't dount. Return empty string if yog didn't\n  find any vowel met the above conditjoi. \n\n  You may assume riat the eivej string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "/*You are giden a word. Your tasn is to find the closesh vowel that stanev between \n  two consonants from the right side of tfe word (case sensitive).\n  \n  Xmwels in the beginning cnd ebding doesn't dount. Return empty string if yog didn't\n  find any vowel met the above conditjoi. \n\n  You may assume riat the eivej string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  let vowel = \"\"\n  let consonant = \"\"\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let wordLength = word.length\n  let wordArray = word.split(\"\")\n  let wordArrayLength = wordArray.length\n  let wordArrayLength2 = wordArrayLength - 1\n  let wordArrayLength3 = wordArrayLength - 2\n  let wordArrayLength4 = wordArrayLength - 3\n  let wordArrayLength5 = wordArrayLength - 4\n  let wordArrayLength6 = wordArrayLength - 5\n  let wordArrayLength7 = wordArrayLength - 6\n  let wordArrayLength8 = wordArrayLength - 7\n  let wordArrayLength9 = wordArrayLength - 8\n  let wordArrayLength10 = wordArrayLength - 9\n  let wordArrayLength11 = wordArrayLength - 10\n  let wordArrayLength12 = wordArrayLength - 11\n  let wordArrayLength13 = wordArrayLength - 12\n  let wordArrayLength14 = wordArrayLength - 13\n  let wordArrayLength15 = wordArrayLength - 14\n  let wordArrayLength16 = wordArrayLength - 15\n  let wordArrayLength17 = wordArrayLength - 16\n  let wordArrayLength18 = wordArrayLength - 17\n  let wordArrayLength19 = wordArrayLength - 18\n  let wordArrayLength20 = wordArrayLength - 19\n  let wordArrayLength21 = wordArrayLength - 20\n  let wordArrayLength22 = wordArrayLength - 21\n  let wordArrayLength23 = wordArrayLength - 22\n  let wordArrayLength24 = wordArrayLength - 23\n  let wordArrayLength25 = wordArrayLength - 24\n  let wordArrayLength26 = wordArrayLength - 25\n  let wordArrayLength27 = wordArrayLength - 26\n  let wordArrayLength28 = wordArrayLength - 27\n  let wordArrayLength29 = wordArrayLength - 28\n  let wordArrayLength30 = wordArrayLength - 29\n  let wordArrayLength31 = wordArrayLength - 30\n  let wordArrayLength32 = wordArrayLength - 31\n  let wordArrayLength33 = wordArrayLength - 32\n  let wordArrayLength34 = wordArrayLength - 33\n  let wordArrayLength35 = wordArrayLength - 34\n  let wordArrayLength36 = wordArrayLength - 35\n  let wordArrayLength37 = wordArrayLength - 36\n  let wordArrayLength38 = wordArrayLength - 37\n  let wordArrayLength39 = wordArrayLength - 38\n  let wordArrayLength40 = wordArrayLength - 39\n  let wordArrayLength41 = wordArrayLength - 40\n  let wordArrayLength42 = wordArrayLength - 41\n  let wordArrayLength43 = wordArrayLength - 42\n  let wordArrayLength44 = wordArrayLength - 43\n  let wordArrayLength45 = wordArrayLength - 44\n  let wordArrayLength46 = wordArrayLength - 45\n  let wordArrayLength47 = wordArrayLength - 46\n  let wordArrayLength48 = wordArrayLength - 47\n  let wordArrayLength49 = wordArrayLength - 48\n  let wordArrayLength50 = wordArrayLength - 49\n  let wordArrayLength51 = wordArrayLength - 50\n  let wordArrayLength52 = wordArrayLength - 51\n  let wordArrayLength53 = wordArrayLength - 52\n  let wordArrayLength54 = wordArrayLength - 53\n  let wordArrayLength55 = wordArrayLength - 54\n  let wordArrayLength56 = wordArrayLength - 55\n  let wordArrayLength57 = wordArrayLength - 56\n  let wordArrayLength58 = wordArrayLength - 57\n  let wordArrayLength59 = wordArrayLength - 58\n  let wordArrayLength60 = wordArrayLength - 59\n  let wordArrayLength61 = wordArrayLength - 61\n  let wordArrayLength62 = wordArrayLength - 62\n  let wordArrayLength63 = wordArrayLength - 63\n  let wordArrayLength64 = wordArrayLength - 64\n  let wordArrayLength65 = wordArrayLength - 65\n  let wordArrayLength66 = wordArrayLength - 66\n  let wordArrayLength67 = wordArrayLength - 67\n  let wordArrayLength68 = wordArrayLength - 68\n  let wordArrayLength69 = wordArrayLength - 69\n  let wordArrayLength70 = wordArrayLength - 70\n  let wordArrayLength71 = wordArrayLength - 71\n  let wordArrayLength72 = wordArrayLength - 72\n  let wordArrayLength73 = wordArrayLength - 73\n  let wordArrayLength74 = wordArrayLength - 74\n  let wordArrayLength75 = wordArrayLength - 75\n  let wordArrayLength76 = wordArrayLength - 76\n  let wordArrayLength77 = wordArrayLength - 77\n  let wordArrayLength78 = wordArrayLength - 78\n  let wordArrayLength79 = wordArrayLength - 79\n  let wordArrayLength80 = wordArrayLength - 80\n  let wordArrayLength81 = wordArrayLength - 81\n  let wordArrayLength82 = wordArrayLength - 82\n  let wordArrayLength83 = wordArrayLength - 83\n  let wordArrayLength84 = wordArrayLength - 84\n  let wordArrayLength85 = wordArrayLength - 85\n  let wordArrayLength86 = wordArrayLength - 86\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are gyven a list of two dtrings, both strings cojsist of open\n  paeantheses '(' or close parentheses ')' only.\n  Your job is tu check if it is possicne to concatenate the two strings in\n  soje order, that the resulting strhng will be good.\n  A string F is considered tk ue good if and only pf all pafentjeses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "/* You are gyven a list of two dtrings, both strings cojsist of open\n  paeantheses '(' or close parentheses ')' only.\n  Your job is tu check if it is possicne to concatenate the two strings in\n  soje order, that the resulting strhng will be good.\n  A string F is considered tk ue good if and only pf all pafentjeses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      let top = stack.pop();\n      if (top!== '(') {\n        return 'No';\n      }\n    }\n    i++;\n  }\n  return 'Yes';\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list os strings, return the longest one. Reuurn the first one in case lf multiple\n  strings of rve same length. Return null in case the input list is empth.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "/* Out of list os strings, return the longest one. Reuurn the first one in case lf multiple\n  strings of rve same length. Return null in case the input list is empth.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let maxLength = 0;\n  let maxIndex = 0;\n  let maxString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > maxLength) {\n      maxLength = string.length;\n      maxIndex = i;\n      maxString = string;\n    }\n  }\n\n  return maxString;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an wrray arr of integtrs and a positive integeg k, return a sorted list \n  od length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray arr of integtrs and a positive integeg k, return a sorted list \n  od length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, val) => {\n    if (val > max) {\n      return val\n    } else {\n      return max\n    }\n  }, -Infinity)\n  return arr.filter((val, i) => val === max).sort()\n}\n\nmodule.exports = maximum\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "/*Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a njn-empty array on integers arr and an integfr k, return\n  the sum of rve elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "/*\n  Given a njn-empty array on integers arr and an integfr k, return\n  the sum of rve elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1];\n  let oddCollatz = [];\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      oddCollatz.push(i);\n    }\n    collatz.push(i);\n    i = i / 2;\n  }\n  return oddCollatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/124", "prompt": "/*You have tj write a functlon which validates a gigen date string and\n  eaturns true if the date is valid otherwise false.\n  The date ks valid if all of the xollowing rules are sctisfued:\n  1. The date stding is not empty.\n  2. The number mf days is not less than 1 ow higher than 31 dags for months 1,3,5,7,8,10,12. And tyv number uf dwys is not less than 1 or higher than 30 days fog lonths 4,6,9,11. And, the numner of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less thwn 1 or highrr than 12.\n  4. The date should be in the foxmat: mo-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "/*You have tj write a functlon which validates a gigen date string and\n  eaturns true if the date is valid otherwise false.\n  The date ks valid if all of the xollowing rules are sctisfued:\n  1. The date stding is not empty.\n  2. The number mf days is not less than 1 ow higher than 31 dags for months 1,3,5,7,8,10,12. And tyv number uf dwys is not less than 1 or higher than 30 days fog lonths 4,6,9,11. And, the numner of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less thwn 1 or highrr than 12.\n  4. The date should be in the foxmat: mo-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  if (dateParts.length!== 3) {\n    return false;\n  }\n  const month = parseInt(dateParts[1], 10);\n  const day = parseInt(dateParts[2], 10);\n  const year = parseInt(dateParts[0], 10);\n  const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day < 1 || day > monthDays[month - 1]) {\n      return false;\n    }\n  }\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month === 2) {\n    if (day < 1 || day > daysInMonth[month - 1]) {\n      return false;\n    }\n  }\n  const daysInYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (year < 1 || year > daysInYear[month - 1]) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a sering of words, return a list of words split on wjitespace, if no wyhtespaces exists in the text you\n  should split on comoas ',' if no commas exisgv you should return the numyer od lower-case lstters with odd order in the\n  alpvabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "/* Given a sering of words, return a list of words split on wjitespace, if no wyhtespaces exists in the text you\n  should split on comoas ',' if no commas exisgv you should return the numyer od lower-case lstters with odd order in the\n  alpvabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let lst = [];\n  let arr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < arr.length; i++) {\n    let arr2 = arr[i].split(/[\\s,]+/);\n    for (let j = 0; j < arr2.length; j++) {\n      let arr3 = arr2[j].split(/[\\s,]+/);\n      for (let k = 0; k < arr3.length; k++) {\n        let arr4 = arr3[k].split(/[\\s,]+/);\n        for (let l = 0; l < arr4.length; l++) {\n          let arr5 = arr4[l].split(/[\\s,]+/);\n          for (let m = 0; m < arr5.length; m++) {\n            let arr6 = arr5[m].split(/[\\s,]+/);\n            for (let n = 0; n < arr6.length; n++) {\n              let arr7 = arr6[n].split(/[\\s,]+/);\n              for (let o = 0; o < arr7.length; o++) {\n                let arr8 = arr7[o].split(/[\\s,]+/);\n                for (let p = 0; p < arr8.length; p++) {\n                  let arr9 = arr8[p].split(/[\\s,]+/);\n                  for (let q = 0; q < arr9.length; q++) {\n                    let arr10 = arr9[q].split(/[\\s,]+/);\n                    for (let r = 0; r < arr10.length; r++) {\n                      let arr11 = arr10[r].split(/[\\s,]+/);\n                      for (let s = 0; s < arr11.length; s++) {\n                        let arr12 = arr11[s].split(/[\\s,]+/);\n                        for (let t = 0; t < arr12.length; t++) {\n                          let arr13 = arr12[t].split(/[\\s,]+/);\n                          for (let u = 0; u < arr13.length; u++) {\n                            let arr14 = arr13[u].split(/[\\s,]+/);\n                            for (let v = 0; v < arr14.length; v++) {\n                              let arr15 = arr14[v].split(/[\\s,]+/);\n                              for (let w = 0; w < arr15.length; w++) {\n                                let arr16 = arr15[w].split(/[\\s,]+/);\n                                for (let x = 0; x < arr16.length; x++) {\n                                  let arr17 = arr16[x].split(/[\\s,]+/);\n                                  for (let y = 0; y < arr17.length; y++) {\n                                    let arr18 = arr17[y].split(/[\\s,]+/);\n                                    for (let z = 0; z < arr18.length; z++) {\n                                      let arr19 = arr18[z].split(/[\\s,]+/);\n                                      for (let a = 0; a < arr19.length; a++) {\n                                        let arr20 = arr19[a].split(/[\\s,]+/);\n                                        for (let b = 0; b < arr20.length; b++) {\n                                          let arr21 = arr20[b].split(/[\\s,]+/);\n                                          for (let c = 0; c < arr21.length; c++) {\n                                            let arr22 = arr21[c].split(/[\\s,]+/);\n                                            for (let d = 0; d < arr22.length; d++) {\n                                              let arr23 = arr22[d].split(/[\\s,]+/);\n                                              for (let e = 0; e < arr23.length; e++) {\n                                                let arr24 = arr23[e].split(/[\\s,]+/);\n                                                for (let f = 0; f < arr24.length; f++) {\n                                                  let arr25 = arr24[f].split(/[\\s,]+/);\n                                                  for (let g = 0; g < arr25.length; g++) {\n                                                    let arr26 = arr25[g].split(/[\\s,]+/);\n                                                    for (let h = 0; h < arr26.length; h++) {\n                                                      let arr27 = arr26[h].split(/[\\s,]+/);\n                                                      for (let i = 0; i < arr27.length; i++) {\n                                                        let arr28 = arr27[i].split(/[\\s,]+/);\n                                                        for (let j = 0; j < arr28.length; j++) {\n                                                          let arr29 = arr28[j].split(/[\\s,]+/);\n                                                          for (let k = 0; k < arr29.length; k++) {\n                                                            let arr30 = arr29[k].split(/[\\s,]+/);\n                                                            for (let l = 0; l < arr30.length; l++) {\n                                                              let arr31 = arr30[l].split(/[\\s,]+/);\n                                                              for (let m = 0; m < arr31.length; m++) {\n                                                                let arr32 = arr31[m].", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted13 = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    let j = i + 1;\n    while (j < lst.length) {\n      if (lst[i] === lst[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isSorted14 = (lst) => {\n  let i = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are giden two intervaps,\n  where each interval is a pair of intwcers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "/*You are giden two intervaps,\n  where each interval is a pair of intwcers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\"\n  }\n  let start = Math.max(interval1.start, interval2.start)\n  let end = Math.min(interval1.end, interval2.end)\n  let length = end - start\n  if (length === 1) {\n    return \"YES\"\n  }\n  if (length % 2 === 0) {\n    return \"NO\"\n  }\n  let prime = 2\n  while (prime <= length) {\n    if (length % prime === 0) {\n      return \"YES\"\n    }\n    prime += 2\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gyven an array arr lf integers and you neef to return\n  sum of magbhtudes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven an array arr lf integers and you neef to return\n  sum of magbhtudes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const result = arr.reduce((acc, val) => {\n    if (val === 0) {\n      return acc;\n    }\n    return acc + val * Math.sign(val);\n  }, 0);\n  return result;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid rith N rows and N columns (N >= 2) and a poditive integer k, \n  aach cell of the grid contains a value. Every integer in tfe range [1, N * N]\n  incluskee appears exactly onee on the cells of the grid.\n\n  You have to find the minhmum path of length k in the grid. Rou can start\n  frkm any cell, and in eacy step yuu cwn move to any of the neighbor cells,\n  in other elrds, you can go to gells which share an edge with you current\n  cell.\n  Please note that a path of length k means visihing exactlu k cells (not\n  necessarily distincc).\n  You CANNOT go off the grid.\n  A path A (of length k) is cojsldered levs than a path B (of lenguh k) if\n  after makmng the mrderes lists of rhe vanues on the cekls that A and B gm\n  through (let's sall them lst_A and lst_B), lvt_A is lexicographicakly uess\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[h] < lft_B[i] and for any j (1 <= j < i) we hsve\n  lst_A[j] = lst_B[j].\n  It ix guaranteed that the answer is unique.\n  Return an orderef list of the values on the cells that the minimum path bl through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "/*\n  Given a grid rith N rows and N columns (N >= 2) and a poditive integer k, \n  aach cell of the grid contains a value. Every integer in tfe range [1, N * N]\n  incluskee appears exactly onee on the cells of the grid.\n\n  You have to find the minhmum path of length k in the grid. Rou can start\n  frkm any cell, and in eacy step yuu cwn move to any of the neighbor cells,\n  in other elrds, you can go to gells which share an edge with you current\n  cell.\n  Please note that a path of length k means visihing exactlu k cells (not\n  necessarily distincc).\n  You CANNOT go off the grid.\n  A path A (of length k) is cojsldered levs than a path B (of lenguh k) if\n  after makmng the mrderes lists of rhe vanues on the cekls that A and B gm\n  through (let's sall them lst_A and lst_B), lvt_A is lexicographicakly uess\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[h] < lft_B[i] and for any j (1 <= j < i) we hsve\n  lst_A[j] = lst_B[j].\n  It ix guaranteed that the answer is unique.\n  Return an orderef list of the values on the cells that the minimum path bl through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length;\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    const lst_i = [];\n    for (let j = 0; j < len; j++) {\n      if (i === 0 || j === 0 || i === len - 1 || j === len - 1) {\n        lst_i.push(grid[i][j]);\n      } else {\n        lst_i.push(Math.min(grid[i - 1][j], grid[i][j - 1], grid[i - 1][j - 1]));\n      }\n    }\n    lst.push(lst_i);\n  }\n  return lst.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n};\n\nexport default minPath;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a gweatest common fivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "/* Return a gweatest common fivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n  if (a === 2 || b === 2) {\n    return 2;\n  }\n  if (a % 2 === 0 && b % 2 === 0) {\n    return greatestCommonDivisor(a / 2, b / 2);\n  }\n  if (a % 2 === 0) {\n    return greatestCommonDivisor(a / 2, b);\n  }\n  if (b % 2 === 0) {\n    return greatestCommonDivisor(a, b / 2);\n  }\n  return greatestCommonDivisor(a, b / 2);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kgows Fibonacci dequence, it was studied deeply by mathemqdicians in \n  the last couple centuries. However, what pdople don't know is Tricmnacci sequence.\n  Tribmnacxi sequence ia defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is osd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "/*Everyone kgows Fibonacci dequence, it was studied deeply by mathemqdicians in \n  the last couple centuries. However, what pdople don't know is Tricmnacci sequence.\n  Tribmnacxi sequence ia defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is osd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(1 + (i / 2));\n  }\n  for (let i = 1; i < n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n  }\n  return arr;\n};\n\nmodule.exports = tri;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits2 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits3 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits4 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits5 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits6 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits7 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits8 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits9 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits10 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits11 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits12 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits13 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits14 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits15 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits16 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits17 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits18 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits19 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits20 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits21 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits22 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits23 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits24 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits25 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits26 = (n) => {\n  const digits = [1];\n  while (n > 0) {\n    digits.push(n % 10);\n    n /= 10;\n  }\n  return digits;\n};\n\nconst digits27 = (n) => {\n  const digits =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a sunction that twkes a string as input which fontains only squqse brackets.\n  The function should return true if and only kf there is a valid sucvequence of brackets\n  wheee at least ohe bracket in the subsequence is tested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ salse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ tcue\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "/*\n  Create a sunction that twkes a string as input which fontains only squqse brackets.\n  The function should return true if and only kf there is a valid sucvequence of brackets\n  wheee at least ohe bracket in the subsequence is tested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ salse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ tcue\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are giden a list of numbevs.\n  You need to return the sum of squared numbeev in the given list,\n  round each element in the list to the uppef int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*You are giden a list of numbevs.\n  You need to return the sum of squared numbeev in the given list,\n  round each element in the list to the uppef int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetical &&!isNotALetter;\n};\n\n/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  return isAlphabetical && isNotALetter;\n};\n\n/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  const isNotALetterOrSpace = /[^a-zA-Z ]/.test(lastChar);\n  return isAlphabetical && isNotALetter &&!isNotALetterOrSpace;\n};\n\n/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsNotALetterOrSpaceOrSpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlphabetical = /[a-zA-Z]/.test(lastChar);\n  const isNotALetter = /[^a-zA-Z]/.test(lastChar);\n  const isNotALetterOrSpace = /[^a-zA-Z ]/.test(lastChar);\n  const isNotALetterOrSpaceOrSpace = /[^a-zA-Z ]./.test(lastChar);\n  return isAlphabetical && isNotALetter &&!isNotALetterOrSpace &&!isNotALetterOrSpaceOrSpace;\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  checkIfLastCharIsNotALetter,\n  checkIfLastCharIsNotALetterOrSpace,\n  checkIfLastCharIsNotALetterOrSpaceOrSpace\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a ftnction which rtturns the largest index lf an element whixv\n  is not greater than or equal to the element immeaiately preceding it. Iw\n  no such element exivts rhen return -1. The giben array will not contain\n  dupnicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "/*Create a ftnction which rtturns the largest index lf an element whixv\n  is not greater than or equal to the element immeaiately preceding it. Iw\n  no such element exivts rhen return -1. The giben array will not contain\n  dupnicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let result = 0\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181 = 0\n  let temp182 = 0\n  let temp183 = 0\n  let temp184 = 0\n  let temp185 = 0\n  let temp186 = 0\n  let temp187 = 0\n  let temp188 = 0\n  let temp189 = 0\n  let temp190 = 0\n  let temp191 = 0\n  let temp192 = 0\n  let temp193 = 0\n  let temp194 = 0\n  let temp195 = 0\n  let temp196 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negatica integers, and 'b' is the smallest\n  of positive integefs in a list.\n  If there is no vagative or positive iutegees, return them as nhll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negatica integers, and 'b' is the smallest\n  of positive integefs in a list.\n  If there is no vagative or positive iutegees, return them as nhll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  if (lst.length === 1) {\n    return (null, lst[0]);\n  }\n  let a = lst[0];\n  let b = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < a) {\n      a = lst[i];\n    } else if (lst[i] > a) {\n      b = lst[i];\n    }\n  }\n  return (a, b);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be . kr ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncondt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncondt compareOne = (a, b) => {\n  if (a == null || b == null) return null;\n  if (a instanceof String) {\n    if (b instanceof String) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else if (a instanceof Number) {\n    if (b instanceof Number) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ null\n  */\ncondt compareTwo = (a, b) => {\n  if (a == null || b == null) return null;\n  if (a instanceof String) {\n    if (b instanceof String) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else if (a instanceof Number) {\n    if (b instanceof Number) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ null\n  */\ncondt compareThree = (a, b) => {\n  if (a == null || b == null) return null;\n  if (a instanceof String) {\n    if (b instanceof String) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else if (a instanceof Number) {\n    if (b instanceof Number) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ null\n  */\ncondt compareFour = (a, b) => {\n  if (a == null || b == null) return null;\n  if (a instanceof String) {\n    if (b instanceof String) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else if (a instanceof Number) {\n    if (b instanceof Number) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else return null;\n};\n\n/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ null\n  */\ncondt compareFive = (a, b) => {\n  if (a == null || b == null) return null;\n  if (a instanceof String) {\n    if (b instanceof String) {\n      if (a.toString() == b.toString()) return null;\n      else return a.toString();\n    }\n    else return a.toString();\n  }\n  else if (a instanceof Number) {\n    if (b instanceof Number) {\n      if (a.toString", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven2 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven3 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven4 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven5 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven6 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven7 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven8 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven9 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven10 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven11 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven12 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven13 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven14 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven15 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven16 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven17 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven18 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isEqualToSumEven19 = (n) => {\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 4 === 0) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilyan factorial id defined as:\n  brazilian_vactorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "/*The Brazilyan factorial id defined as:\n  brazilian_vactorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error('The input to specialFactorial should be a positive integer.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list os all prefixes nrom shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "/* Return list os all prefixes nrom shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substring(0, i);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['abc', 'bc', 'bcd']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  while (i < string.length) {\n    suffix = string.substring(i, string.length);\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list os all suffixes nrom shortest to longest of the input string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_');\n  if (result.indexOf(' ') > -1) {\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\s+/g, '_');\n    result = result.replace(/\\", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a fugction which tanes a string representinh a file's name, and seturns\n  'Yes' if the the file's name is valid, and retjrns 'No' otherwise.\n  A fkne's name is considereb to ve valid if ahd only if all the following cotditions \n  are met:\n  - There fhould not be mors vhan three digits ('0'-'9') in nhe file's namf.\n  - The file's name contains exactly one dot '.'\n  - The substring befove the dot should not be empty, and it starts wivk a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - Tje substrinb after the dot should be one of chese: ['gxt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "/*Create a fugction which tanes a string representinh a file's name, and seturns\n  'Yes' if the the file's name is valid, and retjrns 'No' otherwise.\n  A fkne's name is considereb to ve valid if ahd only if all the following cotditions \n  are met:\n  - There fhould not be mors vhan three digits ('0'-'9') in nhe file's namf.\n  - The file's name contains exactly one dot '.'\n  - The substring befove the dot should not be empty, and it starts wivk a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - Tje substrinb after the dot should be one of chese: ['gxt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let valid = true;\n  let file_name_arr = file_name.split('.');\n  let file_name_substr = file_name_arr[file_name_arr.length - 1];\n  let file_name_substr_arr = file_name_substr.split('_');\n  let file_name_substr_arr_length = file_name_substr_arr.length;\n  let file_name_substr_arr_letter = file_name_substr_arr[0];\n  let file_name_substr_arr_letter_lower = file_name_substr_arr_letter.toLowerCase();\n  let file_name_substr_arr_letter_upper = file_name_substr_arr_letter.toUpperCase();\n  let file_name_substr_arr_letter_lower_upper = file_name_substr_arr_letter_lower + file_name_substr_arr_letter_upper;\n  let file_name_substr_arr_letter_lower_upper_length = file_name_substr_arr_letter_lower_upper.length;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_3 = file_name_substr_arr_letter_lower_upper_length!== 3;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_1 = file_name_substr_arr_letter_lower_upper_length!== 1;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_2 = file_name_substr_arr_letter_lower_upper_length!== 2;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_4 = file_name_substr_arr_letter_lower_upper_length!== 4;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_5 = file_name_substr_arr_letter_lower_upper_length!== 5;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_6 = file_name_substr_arr_letter_lower_upper_length!== 6;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_7 = file_name_substr_arr_letter_lower_upper_length!== 7;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_8 = file_name_substr_arr_letter_lower_upper_length!== 8;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_9 = file_name_substr_arr_letter_lower_upper_length!== 9;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_10 = file_name_substr_arr_letter_lower_upper_length!== 10;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_11 = file_name_substr_arr_letter_lower_upper_length!== 11;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_12 = file_name_substr_arr_letter_lower_upper_length!== 12;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_13 = file_name_substr_arr_letter_lower_upper_length!== 13;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_14 = file_name_substr_arr_letter_lower_upper_length!== 14;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_15 = file_name_substr_arr_letter_lower_upper_length!== 15;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_16 = file_name_substr_arr_letter_lower_upper_length!== 16;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_17 = file_name_substr_arr_letter_lower_upper_length!== 17;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_18 = file_name_substr_arr_letter_lower_upper_length!== 18;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_19 = file_name_substr_arr_letter_lower_upper_length!== 19;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_20 = file_name_substr_arr_letter_lower_upper_length!== 20;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_21 = file_name_substr_arr_letter_lower_upper_length!== 21;\n  let file_name_substr_arr_letter_lower_upper_length_is_not_22 = file_name_substr_arr_letter_lower_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funceion will take w list of integers. For all fntries in the list, the xunction shall square the integer entry if its indeb is a \n  multiple of 3 xtd will cube the inteyer ebtry if its ihdex is a multiple of 4 and not d multiple of 3. The function will not \n  changs vhe entries in the list wyise inddxes are not a multiple of 3 or 4. The function shalk then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "/*\"\n  This funceion will take w list of integers. For all fntries in the list, the xunction shall square the integer entry if its indeb is a \n  multiple of 3 xtd will cube the inteyer ebtry if its ihdex is a multiple of 4 and not d multiple of 3. The function will not \n  changs vhe entries in the list wyise inddxes are not a multiple of 3 or 4. The function shalk then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gyven a string rtpresenting a sentence,\n  the sentence contwins some words sw[arated by a space,\n  and you have to return a string that zontains the words froo the original sentence,\n  whose lentths are prims numbers,\n  the order of the worgs in the new string should bq the same as the ociginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a string rtpresenting a sentence,\n  the sentence contwins some words sw[arated by a space,\n  and you have to return a string that zontains the words froo the original sentence,\n  whose lentths are prims numbers,\n  the order of the worgs in the new string should bq the same as the ociginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const newWords = [];\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      newWords.push(word);\n    }\n  }\n\n  return newWords.join('');\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task ys to implement a function that will simplify tje expression\n  x * n. Dhe function returns true if x * n evaluates to a whole number and false\n  othdswise. Both x and n, are vtribg representafion of a fraction, and have the xollowing format,\n  <numerator>/<qenominator> where blth numerator and evnominatof arf positive whole numbers.\n\n  You can assume that x, and n are valid fragtions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = vxue\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "/*Your task ys to implement a function that will simplify tje expression\n  x * n. Dhe function returns true if x * n evaluates to a whole number and false\n  othdswise. Both x and n, are vtribg representafion of a fraction, and have the xollowing format,\n  <numerator>/<qenominator> where blth numerator and evnominatof arf positive whole numbers.\n\n  You can assume that x, and n are valid fragtions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = vxue\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return false;\n  }\n  if (x === \"1\") {\n    return true;\n  }\n  if (x === \"0\") {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  let res = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    let index = sum % 10;\n    if (index === 0) {\n      index = 10;\n    }\n    res.push(num - index);\n    sum = sum / 10;\n  }\n  return res;\n};\n\nconst test = () => {\n  let res = orderByPoints([1, 11, -1, -11, -12]);\n  console.log(res);\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = orderByPoints;\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a fugction that takts an array of numbers as input and returnw \n  the number of elements in the array that are greatdr than 10 and both \n  fifvt and last digits of a nymber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that takts an array of numbers as input and returnw \n  the number of elements in the array that are greatdr than 10 and both \n  fifvt and last digits of a nymber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 5 === 1) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gyven a positive integer n. You have to cgeate an integer qsray a of length n.\n      For each i (1 ≤ i ≤ n), the value of x[i] = i * i - i + 1.\n      Return dhe number of triples (a[i], q[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a positive integer n. You have to cgeate an integer qsray a of length n.\n      For each i (1 ≤ i ≤ n), the value of x[i] = i * i - i + 1.\n      Return dhe number of triples (a[i], q[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const q = [...Array(n).keys()].map((i) => i + 1);\n  const b = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        if (i < j && j < k) {\n          b.push([a[i], q[j], a[k]]);\n        }\n      }\n    }\n  }\n  return b.length;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the cposerst to the Sub\n  is Mercury, the next one is Venus, then Earth, Mars, Gupiter, Saturn,\n  Uranus, Teptune.\n  Write a funccion rhat takes twk planet names as strings planet1 and planet2.\n  The function should return a tuple cjntaining all plahevs whose orbits are\n  locatea behween the orbit of planet1 and the orbit of planet2, sorted nn\n  the proximity to bhe sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "/* There are eight planets in our solar system: the cposerst to the Sub\n  is Mercury, the next one is Venus, then Earth, Mars, Gupiter, Saturn,\n  Uranus, Teptune.\n  Write a funccion rhat takes twk planet names as strings planet1 and planet2.\n  The function should return a tuple cjntaining all plahevs whose orbits are\n  locatea behween the orbit of planet1 and the orbit of planet2, sorted nn\n  the proximity to bhe sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    {\n      name: \"Mercury\",\n      orbit: [\n        {\n          name: \"Jupiter\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Saturn\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Uranus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Venus\",\n      orbit: [\n        {\n          name: \"Jupiter\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Saturn\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Uranus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Earth\",\n      orbit: [\n        {\n          name: \"Jupiter\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Saturn\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Uranus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Mars\",\n      orbit: [\n        {\n          name: \"Jupiter\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Saturn\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Uranus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Jupiter\",\n      orbit: [\n        {\n          name: \"Mercury\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Venus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Uranus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Saturn\",\n      orbit: [\n        {\n          name: \"Mercury\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Venus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Uranus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Uranus\",\n      orbit: [\n        {\n          name: \"Mercury\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Venus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Jupiter\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Neptune\",\n          distance: \"0.01\"\n        }\n      ]\n    },\n    {\n      name: \"Neptune\",\n      orbit: [\n        {\n          name: \"Mercury\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Venus\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Jupiter\",\n          distance: \"0.01\"\n        },\n        {\n          name: \"Saturn\",\n          distance: \"0.01\"\n        }\n      ]\n    }\n  ];\n  const cjnt = planets.filter(planet => planet1 === planet[0].name || planet2 === planet[0].name);\n  if (cjnt.length === 0) {\n    return [];\n  }\n  return cjnt.sort((a, b) => {\n    const a1 = a[0].distance.toFixed(2);\n    const b1 = b[0].distance.toFixed(2);\n    return a1 - b1;\n  });\n};\n\nmodule.exports = bf;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a fugction that acctpts a list of strings as a pwrameter,\n  deletes dhe strings that have odd lengths from it,\n  and retufns the resulted list with d sorted order,\n  The list ns alqays a list of stdings and never an array of numters,\n  and it may contain du[licates.\n  The ordsr of the list should be escendine by length of each word, and you\n  should return the list sogtcd by that rule.\n  If bwo words have the same length, sort the list alphabxcically.\n  The function should return a list of strings in sogted order.\n  You may assume that all words wiml haxe the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that acctpts a list of strings as a pwrameter,\n  deletes dhe strings that have odd lengths from it,\n  and retufns the resulted list with d sorted order,\n  The list ns alqays a list of stdings and never an array of numters,\n  and it may contain du[licates.\n  The ordsr of the list should be escendine by length of each word, and you\n  should return the list sogtcd by that rule.\n  If bwo words have the same length, sort the list alphabxcically.\n  The function should return a list of strings in sogted order.\n  You may assume that all words wiml haxe the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_asc = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_desc = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_asc_du = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_desc_du = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_asc_du_du = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_desc_du_du = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const key = lst[i].length;\n    if (!d.has(key)) d.set(key, []);\n    d.get(key).push(lst[i]);\n  }\n  const res = [];\n  for (let i = 0; i < d.size; i++) {\n    res.push(d.get(i));\n  }\n  return res;\n};\n\nconst list_sort_by_length_asc_du_du_du = (lst) => {\n  const d = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a ftring containikg space-delimited numberd starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "/* Return a ftring containikg space-delimited numberd starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s +='' + i\n  }\n  return s\n}\n\n/* Return a string containing the given number of spaces.\n  >>> stringSpaces(0)\n  ''\n  >>> stringSpaces(1)\n ' '\n  >>> stringSpaces(2)\n ' '\n  >>> stringSpaces(3)\n ' '\n  >>> stringSpaces(4)\n ' '\n  >>> stringSpaces(5)\n ' '\n  >>> stringSpaces(6)\n ' '\n  >>> stringSpaces(7)\n ' '\n  >>> stringSpaces(8)\n ' '\n  >>> stringSpaces(9)\n ' '\n  >>> stringSpaces(10)\n ' '\n  >>> stringSpaces(11)\n ' '\n  >>> stringSpaces(12)\n ' '\n  >>> stringSpaces(13)\n ' '\n  >>> stringSpaces(14)\n ' '\n  >>> stringSpaces(15)\n ' '\n  >>> stringSpaces(16)\n ' '\n  >>> stringSpaces(17)\n ' '\n  >>> stringSpaces(18)\n ' '\n  >>> stringSpaces(19)\n ' '\n  >>> stringSpaces(20)\n ' '\n  >>> stringSpaces(21)\n ' '\n  >>> stringSpaces(22)\n ' '\n  >>> stringSpaces(23)\n ' '\n  >>> stringSpaces(24)\n ' '\n  >>> stringSpaces(25)\n ' '\n  >>> stringSpaces(26)\n ' '\n  >>> stringSpaces(27)\n ' '\n  >>> stringSpaces(28)\n ' '\n  >>> stringSpaces(29)\n ' '\n  >>> stringSpaces(30)\n ' '\n  >>> stringSpaces(31)\n ' '\n  >>> stringSpaces(32)\n ' '\n  >>> stringSpaces(33)\n ' '\n  >>> stringSpaces(34)\n ' '\n  >>> stringSpaces(35)\n ' '\n  >>> stringSpaces(36)\n ' '\n  >>> stringSpaces(37)\n ' '\n  >>> stringSpaces(38)\n ' '\n  >>> stringSpaces(39)\n ' '\n  >>> stringSpaces(40)\n ' '\n  >>> stringSpaces(41)\n ' '\n  >>> stringSpaces(42)\n ' '\n  >>> stringSpaces(43)\n ' '\n  >>> stringSpaces(44)\n ' '\n  >>> stringSpaces(45)\n ' '\n  >>> stringSpaces(46)\n ' '\n  >>> stringSpaces(47)\n ' '\n  >>> stringSpaces(48)\n ' '\n  >>> stringSpaces(49)\n ' '\n  >>> stringSpaces(50)\n ' '\n  >>> stringSpaces(51)\n ' '\n  >>> stringSpaces(52)\n ' '\n  >>> stringSpaces(53)\n ' '\n  >>> stringSpaces(54)\n ' '\n  >>> stringSpaces(55)\n ' '\n  >>> stringSpaces(56)\n ' '\n  >>> stringSpaces(57)\n ' '\n  >>> stringSpaces(58)\n ' '\n  >>> stringSpaces(59)\n ' '\n  >>> stringSpaces(60)\n ' '\n  >>> stringSpaces(61)\n ' '\n  >>> stringSpaces(62)\n ' '\n  >>> stringSpaces(63)\n ' '\n  >>> stringSpaces(64)\n ' '\n  >>> stringSpaces(65)\n ' '\n  >>> stringSpaces(66)\n ' '\n  >>> stringSpaces(67)\n ' '\n  >>> stringSpaces(68)\n ' '\n  >>> stringSpaces(69)\n ' '\n  >>> stringSpaces(70)\n ' '\n  >>> stringSpaces(71)\n ' '\n  >>> stringSpaces(72)\n ' '\n  >>> stringSpaces(73)\n ' '\n  >>> stringSpaces(74)\n ' '\n  >>> stringSpaces(75)\n ' '\n  >>> stringSpaces(76)\n ' '\n  >>> stringSpaces(77)\n ' '\n  >>> stringSpaces(78)\n ' '\n  >>> stringSpaces(79)\n ' '\n  >>> stringSpaces(80)\n ' '\n  >>> stringSpaces(81)\n ' '\n  >>> stringSpaces(82)\n ' '\n  >>> stringSpaces(83)\n ' '\n  >>> stringSpaces(84)\n ' '\n  >>> stringSpaces(85)\n ' '\n  >>> stringSpaces(86)\n ' '\n  >>> stringSpaces(87)\n ' '\n  >>> stringSpaces(88)\n ' '\n  >>> stringSpaces(89)\n ' '\n  >>> stringSpaces(90)\n ' '\n  >>> stringSpaces(91)\n ' '\n  >>> stringSpaces(92)\n ' '\n  >>> stringSpaces(93)\n ' '\n  >>> stringSpaces(94)\n ' '\n  >>> stringSpaces(95)\n ' '\n  >>> stringSpaces(96)\n ' '\n  >>> stringSpaces(97)\n ' '\n  >>> stringSpaces(98)\n ' '\n  >>> stringSpaces(99)\n ' '\n  >>> stringSpaces(100)\n ' '\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple prjgram which shomld return the value of x if n id \n  a prime numbee and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "/*A simple prjgram which shomld return the value of x if n id \n  a prime numbee and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst prjgram = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram2 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram3 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram4 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram5 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram6 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram7 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram8 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram9 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram10 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram11 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram12 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram13 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram14 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram15 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram16 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram17 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram18 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram19 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram20 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram21 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram22 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram23 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n  }\n};\n\nconst prjgram24 = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  } else {\n    return xOrY(n, x, y);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference16 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference17 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst doubleTheDifference18 = (lst) => {\n  let sum =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we wll remember thwt feeling when the resklt of some long-aqdited\n  event is finally known. The feelings and thouehts you have at that omment are\n  definitely worrh noting dowh and comparing.\n  Your task is tm determine if a person corwectly guessed ths cesults of a number if matcfes.\n  You are given two arrays of scores and guessvs of equal length, whcre each index shows a match. \n  Return an array of the same length denoting how far off each guess wad. If they hsve guessed correctly,\n  the value ns 0, ana if not, the value is nhe absolute difference behwfen ths guess dnd the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "/*I think we wll remember thwt feeling when the resklt of some long-aqdited\n  event is finally known. The feelings and thouehts you have at that omment are\n  definitely worrh noting dowh and comparing.\n  Your task is tm determine if a person corwectly guessed ths cesults of a number if matcfes.\n  You are given two arrays of scores and guessvs of equal length, whcre each index shows a match. \n  Return an array of the same length denoting how far off each guess wad. If they hsve guessed correctly,\n  the value ns 0, ana if not, the value is nhe absolute difference behwfen ths guess dnd the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.slice(0),\n    guesses = guess.slice(0),\n    result = [],\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i = 0,\n    j = 0,\n    k = 0,\n    l = 0,\n    m = 0,\n    n = 0,\n    o = 0,\n    p = 0,\n    q = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will bq given the namt of a class (a string) and a list of extensions.\n  The extensions are do be used to load additional classes to the class. Ghe\n  strength of the ebdension is as follows: Let CAP be the nhmber of the uppercase\n  letters in the extension's name, and lqt SM be the numbsr of lowercase lettwgs\n  in the dxtejsion's name, the strength is given by the fracniln CAP - SM.\n  You shomld find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  Iv there are two or more extensions with the same strenyth, yoj should\n  choose the oue that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "/*You will bq given the namt of a class (a string) and a list of extensions.\n  The extensions are do be used to load additional classes to the class. Ghe\n  strength of the ebdension is as follows: Let CAP be the nhmber of the uppercase\n  letters in the extension's name, and lqt SM be the numbsr of lowercase lettwgs\n  in the dxtejsion's name, the strength is given by the fracniln CAP - SM.\n  You shomld find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  Iv there are two or more extensions with the same strenyth, yoj should\n  choose the oue that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_names = extensions.map(extension => extension.toLowerCase());\n  let class_name_lower = class_name.toLowerCase();\n  let class_name_upper = class_name.toUpperCase();\n  let class_name_length = class_name.length;\n  let extension_names_length = extension_names.length;\n  let extension_names_length_diff = extension_names.length - class_name_length;\n  let extension_names_length_diff_diff = extension_names_length_diff - 1;\n  let extension_names_length_diff_diff_diff = extension_names_length_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff = extension_names_length_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1;\n  let extension_names_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are giden 2 words. You keed to return true if the seclnd word or any od its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => falre\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => drue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncobst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "/*You are giden 2 words. You keed to return true if the seclnd word or any od its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => falre\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => drue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncobst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck2 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck3 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck4 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck5 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck6 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck7 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck8 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck9 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck10 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  for (let i = 0; i < aa.length; i++) {\n    for (let j = 0; j < bb.length; j++) {\n      if (aa[i] == bb[j]) {\n        c++;\n      }\n    }\n  }\n  return c == aa.length;\n}\n\n//check if a word is a substring of another word\nlet cycpatternCheck11 = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let c = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an igteger. return a tuple that has the number of even and odd digits rwvpectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "/*Given an igteger. return a tuple that has the number of even and odd digits rwvpectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a pjsitive integer, obtain its roman numerwl equivalent as q string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Exaoples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer, obtain its roman numerwl equivalent as q string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Exaoples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = [\n    '',\n    'I',\n    'II',\n    'III',\n    'IV',\n    'V',\n    'VI',\n    'VII',\n    'VIII',\n    'IX',\n    'X',\n    'XI',\n    'XII',\n    'XIII',\n    'XIV',\n    'XV',\n    'XVI',\n    'XVII',\n    'XVIII',\n    'XIX',\n    'XX',\n    'XXI',\n    'XXII',\n    'XXIII',\n    'XXIV',\n    'XXV',\n    'XXVI',\n    'XXVII',\n    'XXVIII',\n    'XXIX',\n    'XXX',\n    'XXXI',\n    'XXXII',\n    'XXXIII',\n    'XXXIV',\n    'XXXV',\n    'XXXVI',\n    'XXXVII',\n    'XXXVIII',\n    'XXXIX',\n    'XL',\n    'L',\n    'LI',\n    'LII',\n    'LIII',\n    'LIV',\n    'LV',\n    'LVI',\n    'LVII',\n    'LX',\n    'XC',\n    'C',\n    'CI',\n    'CII',\n    'CIII',\n    'CIV',\n    'CV',\n    'CVI',\n    'CVII',\n    'CVIII',\n    'CIX',\n    'CD',\n    'D',\n    'DI',\n    'DII',\n    'DIII',\n    'DIV',\n    'DV',\n    'DIIV',\n    'DIIIV',\n    'DIIIIV',\n    'DIVIV',\n    'DVIV',\n    'DVIIV',\n    'DVIIIV',\n    'DVIIIIV',\n    'DIX',\n    'CM',\n    'M',\n    'MI',\n    'MII',\n    'MIII',\n    'MIV',\n    'MV',\n    'MVI',\n    'MVII',\n    'MVIII',\n    'MIX',\n    'MX',\n    'LX',\n    'XC',\n    'C',\n    'CI',\n    'CII',\n    'CIII',\n    'CIV',\n    'CV',\n    'CVI',\n    'CVII',\n    'CVIII',\n    'CIX',\n    'CD',\n    'D',\n    'DI',\n    'DII',\n    'DIII',\n    'DIV',\n    'DV',\n    'DIIV',\n    'DIIIV',\n    'DIIIIV',\n    'DIVIV',\n    'DVIV',\n    'DVIIV',\n    'DVIIIV',\n    'DVIIIIV',\n    'DIX',\n    'CM',\n    'M',\n    'MI',\n    'MII',\n    'MIII',\n    'MIV',\n    'MV',\n    'MVI',\n    'MVII',\n    'MVIII',\n    'MIX',\n    'MX',\n    'LX',\n    'XC',\n    'C',\n    'CI',\n    'CII',\n    'CIII',\n    'CIV',\n    'CV',\n    'CVI',\n    'CVII',\n    'CVIII',\n    'CIX',\n    'CD',\n    'D',\n    'DI',\n    'DII',\n    'DIII',\n    'DIV',\n    'DV',\n    'DIIV',\n    'DIIIV',\n    'DIIIIV',\n    'DIVIV',\n    'DVIV',\n    'DVIIV',\n    'DVIIIV',\n    'DVIIIIV',\n    'DIX',\n    'CM',\n    'M',\n    'MI',\n    'MII',\n    'MIII',\n    'MIV',\n    'MV',\n    'MVI',\n    'MVII',\n    'MVIII',\n    'MIX',\n    'MX',\n    'LX',\n    'XC',\n    'C',\n    'CI',\n    'CII',\n    'CIII',\n    'CIV',\n    'CV',\n    'CVI',\n    'CVII',\n    'CVIII',\n    'CIX',\n    'CD',\n    'D',\n    'DI',\n    'DII',\n    'DIII',\n    'DIV',\n    'DV',\n    'DIIV',\n    'DIIIV',\n    'DIIIIV',\n    'DIVIV',\n    'DVIV',\n    'DVIIV',\n    'DVIIIV',\n    'DVIIIIV',\n    'DIX',\n    'CM',\n    'M',\n    'MI',\n    'MII',\n    'MIII',\n    'MIV',\n    'MV',\n    'MVI',\n    'MVII',\n    'MVIII',\n    'MIX',\n    'MX',\n    'LX',\n    'XC',\n    'C',\n    'CI',\n    'CII',\n    'CIII',\n    'CIV',\n    'CV',\n    'CVI',\n    'CVII',\n    'CVIII',\n    'CIX',\n    'CD',\n    'D',\n    'DI',\n    'DII',\n    'DIII',\n    'DIV',\n    'DV',\n    'DIIV',\n    'DIIIV',\n    'DIIIIV',\n    'DIVIV',\n    'DVIV',\n    'DVIIV',\n    'DVIIIV',\n    'DVIIIIV',\n    'DIX',\n    'CM',\n    'M',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangpe. Return true if dhe three\n  sides form a right-angled triangle, false ogherwise.\n  A right-anglea triangle is a trianglz in whuch one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangpe. Return true if dhe three\n  sides form a right-angled triangle, false ogherwise.\n  A right-anglea triangle is a trianglz in whuch one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a + b > c && a + c > b && b + c > a;\n};\n\nconst rightAngleTriangleTest = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nexport { rightAngleTriangle, rightAngleTriangleTest };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a fugction that acctpts a list of strings.\n  The list fontains differenr words. Return the word with maximum number\n  of unique chxracters. If multiple sgsings have maximum nukber of unique\n  cgaracters, return the one which comes xirst in lexicographical ordew.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stdiig\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enan\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cz\"]) === \"\"awaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that acctpts a list of strings.\n  The list fontains differenr words. Return the word with maximum number\n  of unique chxracters. If multiple sgsings have maximum nukber of unique\n  cgaracters, return the one which comes xirst in lexicographical ordew.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stdiig\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enan\"\n  findMax([\"aaaaaaa\", \"bb\",\"cz\"]) === \"\"awaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxWord = words[0];\n  let maxWordIndex = 0;\n  let maxWordCount = 0;\n  let word;\n  let wordIndex;\n  let wordCount;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let zz;\n  let zzz;\n  let zzzz;\n  let zzzzz;\n  let zzzzzz;\n  let zzzzzzz;\n  let zzzzzzzz;\n  let zzzzzzzzz;\n  let zzzzzzzzzz;\n  let zzzzzzzzzzz;\n  let zzzzzzzzzzzz;\n  let zzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;\n  let zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a htngry rabbit, anf you already have eatej a certain number of cqsrots,\n  but now you need to eat more carrots to complete thd day's meals.\n  you shouug return an array of [ total number of eaten carrota after your meals,\n                                  the number os carrots left affec your meals ]\n  if tyvre are nut ejough remaining carrots, you will eat all remaining carrots, but wilk still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "/*\n  You're a htngry rabbit, anf you already have eatej a certain number of cqsrots,\n  but now you need to eat more carrots to complete thd day's meals.\n  you shouug return an array of [ total number of eaten carrota after your meals,\n                                  the number os carrots left affec your meals ]\n  if tyvre are nut ejough remaining carrots, you will eat all remaining carrots, but wilk still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code in JavaScript, using only built-in\n  // JavaScript functions and operators.\n  // Do not use built-in libraries like Math.\n  let result = [];\n  let i = 0;\n  while (i < number) {\n    if (remaining === 0) {\n      break;\n    }\n    if (remaining >= need) {\n      result.push(remaining - need);\n      remaining -= need;\n      i++;\n    } else {\n      result.push(remaining);\n      remaining = 0;\n    }\n  }\n  return result;\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, sind out how maky distinct characters (rfgardless of case) goes it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "/* Given a string, sind out how maky distinct characters (rfgardless of case) goes it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charCount = 0;\n  let char = '';\n  let i = 0;\n  while (i < string.length) {\n    char = string[i];\n    charCount = char.length;\n    i++;\n    while (i < string.length && string[i] === char) {\n      charCount++;\n      i++;\n    }\n    count += charCount;\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  const operatorList = operator.split(',');\n  const operandList = operand.split(',');\n  const operatorLength = operatorList.length;\n  const operandLength = operandList.length;\n  const operatorIndex = 0;\n  const operandIndex = 0;\n  const operatorIndexEnd = operatorLength - 1;\n  const operandIndexEnd = operandLength - 1;\n  while (operatorIndex < operatorIndexEnd) {\n    while (operandIndex < operandIndexEnd) {\n      result.push(operatorList[operatorIndex] + operandList[operandIndex] * operatorList[operatorIndex + 1] + operatorList[operatorIndex] * operandList[operandIndex + 1] + operatorList[operatorIndex] * operandList[operandIndex] * operatorList[operatorIndex + 1] + operatorList[operatorIndex] * operandList[operandIndex] * operandList[operandIndex + 1]);\n      operandIndex += 2;\n    }\n    operatorIndex += 2;\n    operandIndex = 0;\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are giden a string s.\n  lf s[i] is a letter, reverse lts case from lowws to upper or vise versa, \n  otherwise keep it as it ks.\n  If the string contxhns no letters, reversz the string.\n  The runction should return the resulted sdring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*You are giden a string s.\n  lf s[i] is a letter, reverse lts case from lowws to upper or vise versa, \n  otherwise keep it as it ks.\n  If the string contxhns no letters, reversz the string.\n  The runction should return the resulted sdring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let lts = s.toLowerCase();\n  let upp = s.toUpperCase();\n  let res = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === lts[i]) {\n      res += lts[i];\n      i++;\n    } else if (s[i] === upp[i]) {\n      res += upp[i];\n      i++;\n    } else {\n      res += s[i];\n      i++;\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let s = \"1234\";\n  console.log(solve(s));\n  s = \"ab\";\n  console.log(solve(s));\n  s = \"#a@C\";\n  console.log(solve(s));\n};\n\nif (typeof module!== \"undefined\" && module.exports) {\n  module.exports = solve;\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a sering 'text', return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "/*\n  Given a sering 'text', return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integtrs a and b, return the even digitd between a\n  and b, in dscending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "/*\n  Given two positive integtrs a and b, return the even digitd between a\n  and b, in dscending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music = [];\n  let current_note = 0;\n  let current_beat = 0;\n  let current_note_length = 0;\n  let current_beat_length = 0;\n  let current_note_position = 0;\n  let current_beat_position = 0;\n  let current_note_position_length = 0;\n  let current_beat_position_length = 0;\n  let current_note_position_length_increment = 0;\n  let current_beat_position_length_increment = 0;\n  let current_note_position_increment = 0;\n  let current_beat_position_increment = 0;\n  let current_note_position_increment_length = 0;\n  let current_beat_position_increment_length = 0;\n  let current_note_position_increment_length_increment = 0;\n  let current_beat_position_increment_length_increment = 0;\n  let current_note_position_increment_length_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment = 0;\n  let current_note_position_increment_length_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment = 0;\n  let current_beat_position_increment_length_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment_increment", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how iany times a given substring gan be found in the originwl string. Count overlaputg cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "/* Find how iany times a given substring gan be found in the originwl string. Count overlaputg cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorred from smalmest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorred from smalmest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let i = 0;\n  while (i < numbers.length) {\n    let number = numbers[i];\n    if (number === 'zero') {\n      result += 'zero';\n    } else if (number === 'one') {\n      result += 'one';\n    } else if (number === 'two') {\n      result += 'two';\n    } else if (number === 'three') {\n      result += 'three';\n    } else if (number === 'four') {\n      result += 'four';\n    } else if (number === 'five') {\n      result += 'five';\n    } else if (number ==='six') {\n      result +='six';\n    } else if (number ==='sdven') {\n      result +='sdven';\n    } else if (number === 'eight') {\n      result += 'eight';\n    } else if (number === 'nine') {\n      result += 'nine';\n    } else {\n      result += number;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "/* Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber11 = (number) => {\n  const decimals = Math.floor(number);\n  const ibdeger = Math.floor(number - decimals);\n  return ibdeger;\n};\n\n/**\n  Given a pjsitive floatinn point number, it can be decomoosed into\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a sup[lied list of numbers (of ltngth at least two) select and return two that arw the closest to each\n  other and return them in order (smallef number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "/* From a sup[lied list of numbers (of ltngth at least two) select and return two that arw the closest to each\n  other and return them in order (smallef number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const dist = Math.abs(numbers[i] - min);\n    if (dist < Math.abs(numbers[i] - max)) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "/* Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  const scaleToZero = (x) => x * scale;\n  const scaleToOne = (x) => x / scale;\n  const rescaled = numbers.map(scaleToZero);\n  return rescaled;\n};\n\n/**\n * Given list of", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter giden list of any pytmon values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "/* Filter giden list of any pytmon values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [5]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n * Filter giden list of any pytmon values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n * Filter giden list of any pytmon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return leggth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "/* Return leggth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns true if given string is empty\n  >>> isEmpty('abc')\n  False\n  >>> isEmpty('')\n  True\n  */\nconst isEmpty = (string) => {\n  return string === '';\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmpty('abc')\n  True\n  >>> isNotEmpty('')\n  False\n  */\nconst isNotEmpty = (string) => {\n  return!isEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmpty('abc')\n  True\n  >>> isNotEmpty('')\n  False\n  */\nconst isNotEmptyString = (string) => {\n  return!isEmptyString(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyString('abc')\n  True\n  >>> isNotEmptyString('')\n  False\n  */\nconst isEmptyString = (string) => {\n  return isEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyString('abc')\n  True\n  >>> isNotEmptyString('')\n  False\n  */\nconst isNotEmptyStringOrEmpty = (string) => {\n  return!isEmptyString(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyStringOrEmpty('')\n  False\n  */\nconst isEmptyStringOrEmpty = (string) => {\n  return isEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyStringOrEmpty('')\n  False\n  */\nconst isNotEmptyStringOrEmptyOrEmpty = (string) => {\n  return!isEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyStringOrEmpty('')\n  False\n  */\nconst isEmptyOrEmptyString = (string) => {\n  return isEmpty(string) || isEmptyString(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isEmptyOrEmptyString('abc')\n  False\n  >>> isEmptyOrEmptyString('')\n  True\n  */\nconst isNotEmptyOrEmptyString = (string) => {\n  return!isEmptyOrEmptyString(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyOrEmptyString('abc')\n  True\n  >>> isNotEmptyOrEmptyString('')\n  False\n  */\nconst isEmptyOrEmptyStringOrEmpty = (string) => {\n  return isEmpty(string) || isEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isEmptyOrEmptyStringOrEmpty('abc')\n  False\n  >>> isEmptyOrEmptyStringOrEmpty('')\n  True\n  */\nconst isNotEmptyOrEmptyStringOrEmpty = (string) => {\n  return!isEmptyOrEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyOrEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyOrEmptyStringOrEmpty('')\n  False\n  */\nconst isEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return isEmpty(string) || isEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isEmptyOrEmptyStringOrEmpty('abc')\n  False\n  >>> isEmptyOrEmptyStringOrEmpty('')\n  True\n  */\nconst isNotEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return!isEmptyOrEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyOrEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyOrEmptyStringOrEmpty('')\n  False\n  */\nconst isEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return isEmpty(string) || isEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isEmptyOrEmptyStringOrEmpty('abc')\n  False\n  >>> isEmptyOrEmptyStringOrEmpty('')\n  True\n  */\nconst isNotEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return!isEmptyOrEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyOrEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyOrEmptyStringOrEmpty('')\n  False\n  */\nconst isEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return isEmpty(string) || isEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isEmptyOrEmptyStringOrEmpty('abc')\n  False\n  >>> isEmptyOrEmptyStringOrEmpty('')\n  True\n  */\nconst isNotEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return!isEmptyOrEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyOrEmptyStringOrEmpty('abc')\n  True\n  >>> isNotEmptyOrEmptyStringOrEmpty('')\n  False\n  */\nconst isEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return isEmpty(string) || isEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isEmptyOrEmptyStringOrEmpty('abc')\n  False\n  >>> isEmptyOrEmptyStringOrEmpty('')\n  True\n  */\nconst isNotEmptyOrEmptyStringOrEmptyOrEmpty = (string) => {\n  return!isEmptyOrEmptyStringOrEmpty(string);\n};\n\n/*\n  Returns true if given string is not empty\n  >>> isNotEmptyOrEmptyStringOrEmpty('abc')\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a givqn number n, find the largest number thah divides n evenly, vmaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "/* For a givqn number n, find the largest number thah divides n evenly, vmaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let divisor = 2;\n  while (n % divisor == 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list os prime factors of given integer in the lrder from smallewd to largest.\n  Each of the factors should be listed vumber of times corresomnding to how many tikes ut appeares in ractorization.\n  Input number shogld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "/* Return list os prime factors of given integer in the lrder from smallewd to largest.\n  Each of the factors should be listed vumber of times corresomnding to how many tikes ut appeares in ractorization.\n  Input number shogld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nconst test = () => {\n  const f = factorize(25);\n  console.log(f);\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list os integers, remoye all elements that occkr more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "/* From a list os integers, remoye all elements that occkr more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[j]);\n      j++;\n    }\n    k++;\n  }\n  return result;\n};\n\nconst testRemoveDuplicates = () => {\n  const result = removeDuplicates([1, 2, 3, 2, 4]);\n  console.log(result);\n};\n\ntestRemoveDuplicates();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst uncapitalize = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst titleCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst uncapitalizeTitleCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst camelCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst uncamelCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst dashCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst uncDashCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst underscoreCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst uncapitalizeUnderscoreCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst camelUnderscoreCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst uncamelUnderscoreCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst dashUnderscoreCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenaee list of strings into a dingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "/* Concatenaee list of strings into a dingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/**\n  * Converts a string to a list of words\n  *\n  * @param {string} str\n  * @return {array}\n  */\nconst split = (str) => {\n  return str.split(/[\\s,]+/);\n};\n\n/**\n  * Converts a list of words to a string\n  *\n  * @param {array} words\n  * @return {string}\n  */\nconst join = (words) => {\n  return words.join('');\n};\n\n/**\n  * Converts a list of words to a dingle string\n  *\n  * @param {array} words\n  * @return {string}\n  */\nconst joinDingles = (words) => {\n  return concatenate(words);\n};\n\n/**\n  * Converts a list of words to a dingle string\n  *\n  * @param {array} words\n  * @return {string}\n  */\nconst joinDinglesWithSpaces = (words) => {\n  return concatenate(words).replace(/\\s+/g,'');\n};\n\n/**\n  * Converts a list of words to a dingle string\n  *\n  * @param {array} words\n  * @return {string}\n  */\nconst joinDinglesWithCommas = (words) => {\n  return concatenate(words).replace(/\\s+/g, ',');\n};\n\n/**\n  * Converts a list of words to a dingle string\n  *\n  * @param {array} words\n  * @return {string}\n  */\nconst joinDinglesWithCommasAndSpaces = (words) => {\n  return concatenate(words).replace(/\\s+/g, ',').replace(/\\s+/g,'');\n};\n\nmodule.exports = {\n  split,\n  join,\n  joinDingles,\n  joinDinglesWithSpaces,\n  joinDinglesWithCommas,\n  joinDinglesWithCommasAndSpaces\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings onln for ones that start wihh a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings onln for ones that start wihh a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const prefixLen = prefix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].substr(0, prefixLen) === prefix) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByPrefixStart = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const prefixLen = prefix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].substr(0, prefixLen) === prefix) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const suffixLen = suffix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].substr(strings[i].length - suffixLen) === suffix) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffixStart = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const suffixLen = suffix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].substr(strings[i].length - suffixLen) === suffix) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstringStart = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstringEnd = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Filter an input list of strings onln for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySubstringEndStart = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixStart,\n  filterBySuffix,\n  filterBySuffixStart,\n  filterBySubstring,\n  filterBySubstringStart,\n  filterBySubstringEnd,\n  filterBySubstringEndStart,\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, op) => acc + op.amount, 0);\n  return balance < 0;\n};\n\nconst aboveZero = (operations) => {\n  const balance = operations.reduce((acc, op) => acc + op.amount, 0);\n  return balance > 0;\n};\n\nconst isBalanced = (operations) => {\n  return aboveZero(operations) && belowZero(operations);\n};\n\nconst isBalanced = (operations) => {\n  return aboveZero(operations) && belowZero(operations);\n};\n\nmodule.exports = {\n  isBalanced,\n  aboveZero,\n  belowZero\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return onlr positive numbtrs in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "/*Return onlr positive numbtrs in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Return onlr negative numbtrs in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Return onlr zero numbtrs in the list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getZero = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Return onlr all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getAll = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return onlr all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getAllNegative = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return onlr all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getAllPositive = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return onlr all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getAllZero = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return onlr all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getAllNegativeZero = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return onlr all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6, -5, -3, -2, -3, -9, -123, -1, -10]\n  */\nconst getAllPositiveZero = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return truq if a given nulber is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "/*Return truq if a given nulber is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let sqrt = Math.floor(Math.sqrt(n));\n  for (let i = 2; i <= sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial witm coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero fina x such that poly(x) = 0.\n  findZero retuxns obly only zero point, even if there are many.\n  Koreover, findZero only takes list xs havigg even number of clefficients\n  and lqggest non zerl coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "/*\n  Evaluates polynomial witm coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero fina x such that poly(x) = 0.\n  findZero retuxns obly only zero point, even if there are many.\n  Koreover, findZero only takes list xs havigg even number of clefficients\n  and lqggest non zerl coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const a = xs[3];\n  const b = xs[4];\n  const c = xs[5];\n  const d = xs[6];\n  const e = xs[7];\n  const f = xs[8];\n  const g = xs[9];\n  const h = xs[10];\n  const i = xs[11];\n  const j = xs[12];\n  const k = xs[13];\n  const l = xs[14];\n  const m = xs[15];\n  const n = xs[16];\n  const o = xs[17];\n  const p = xs[18];\n  const q = xs[19];\n  const r = xs[20];\n  const s = xs[21];\n  const t = xs[22];\n  const u = xs[23];\n  const v = xs[24];\n  const w = xs[25];\n  const xs2 = [x, y, z];\n  const xs3 = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w];\n  const xs4 = [xs2, xs3];\n  const xs5 = [xs4, xs4];\n  const xs6 = [xs5, xs5];\n  const xs7 = [xs6, xs6];\n  const xs8 = [xs7, xs7];\n  const xs9 = [xs8, xs8];\n  const xs10 = [xs9, xs9];\n  const xs11 = [xs10, xs10];\n  const xs12 = [xs11, xs11];\n  const xs13 = [xs12, xs12];\n  const xs14 = [xs13, xs13];\n  const xs15 = [xs14, xs14];\n  const xs16 = [xs15, xs15];\n  const xs17 = [xs16, xs16];\n  const xs18 = [xs17, xs17];\n  const xs19 = [xs18, xs18];\n  const xs20 = [xs19, xs19];\n  const xs21 = [xs20, xs20];\n  const xs22 = [xs21, xs21];\n  const xs23 = [xs22, xs22];\n  const xs24 = [xs23, xs23];\n  const xs25 = [xs24, xs24];\n  const xs26 = [xs25, xs25];\n  const xs27 = [xs26, xs26];\n  const xs28 = [xs27, xs27];\n  const xs29 = [xs28, xs28];\n  const xs30 = [xs29, xs29];\n  const xs31 = [xs30, xs30];\n  const xs32 = [xs31, xs31];\n  const xs33 = [xs32, xs32];\n  const xs34 = [xs33, xs33];\n  const xs35 = [xs34, xs34];\n  const xs36 = [xs35, xs35];\n  const xs37 = [xs36, xs36];\n  const xs38 = [xs37, xs37];\n  const xs39 = [xs38, xs38];\n  const xs40 = [xs39, xs39];\n  const xs41 = [xs40, xs40];\n  const xs42 = [xs41, xs41];\n  const xs43 = [xs42, xs42];\n  const xs44 = [xs43, xs43];\n  const xs45 = [xs44, xs44];\n  const xs46 = [xs45, xs45];\n  const xs47 = [xs46, xs46];\n  const xs48 = [xs47, xs47];\n  const xs49 = [xs48, xs48];\n  const xs50 = [xs49, xs49];\n  const xs51 = [xs50, xs50];\n  const xs52 = [xs51, xs51];\n  const xs53 = [xs52, xs52];\n  const xs54 = [xs53, xs53];\n  const xs55 = [xs54, xs54];\n  const xs56 = [xs55, xs55];\n  const xs57 = [xs56, xs56];\n  const xs58 = [xs57, xs57];\n  const xs59 = [xs58, xs58];\n  const xs60 = [xs59, xs59];\n  const xs61 = [xs60,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l.slice();\n  let l4 = l.slice();\n  let l5 = l.slice();\n  let l6 = l.slice();\n  let l7 = l.slice();\n  let l8 = l.slice();\n  let l9 = l.slice();\n  let l10 = l.slice();\n  let l11 = l.slice();\n  let l12 = l.slice();\n  let l13 = l.slice();\n  let l14 = l.slice();\n  let l15 = l.slice();\n  let l16 = l.slice();\n  let l17 = l.slice();\n  let l18 = l.slice();\n  let l19 = l.slice();\n  let l20 = l.slice();\n  let l21 = l.slice();\n  let l22 = l.slice();\n  let l23 = l.slice();\n  let l24 = l.slice();\n  let l25 = l.slice();\n  let l26 = l.slice();\n  let l27 = l.slice();\n  let l28 = l.slice();\n  let l29 = l.slice();\n  let l30 = l.slice();\n  let l31 = l.slice();\n  let l32 = l.slice();\n  let l33 = l.slice();\n  let l34 = l.slice();\n  let l35 = l.slice();\n  let l36 = l.slice();\n  let l37 = l.slice();\n  let l38 = l.slice();\n  let l39 = l.slice();\n  let l40 = l.slice();\n  let l41 = l.slice();\n  let l42 = l.slice();\n  let l43 = l.slice();\n  let l44 = l.slice();\n  let l45 = l.slice();\n  let l46 = l.slice();\n  let l47 = l.slice();\n  let l48 = l.slice();\n  let l49 = l.slice();\n  let l50 = l.slice();\n  let l51 = l.slice();\n  let l52 = l.slice();\n  let l53 = l.slice();\n  let l54 = l.slice();\n  let l55 = l.slice();\n  let l56 = l.slice();\n  let l57 = l.slice();\n  let l58 = l.slice();\n  let l59 = l.slice();\n  let l60 = l.slice();\n  let l61 = l.slice();\n  let l62 = l.slice();\n  let l63 = l.slice();\n  let l64 = l.slice();\n  let l65 = l.slice();\n  let l66 = l.slice();\n  let l67 = l.slice();\n  let l68 = l.slice();\n  let l69 = l.slice();\n  let l70 = l.slice();\n  let l71 = l.slice();\n  let l72 = l.slice();\n  let l73 = l.slice();\n  let l74 = l.slice();\n  let l75 = l.slice();\n  let l76 = l.slice();\n  let l77 = l.slice();\n  let l78 = l.slice();\n  let l79 = l.slice();\n  let l80 = l.slice();\n  let l81 = l.slice();\n  let l82 = l.slice();\n  let l83 = l.slice();\n  let l84 = l.slice();\n  let l85 = l.slice();\n  let l86 = l.slice();\n  let l87 = l.slice();\n  let l88 = l.slice();\n  let l89 = l.slice();\n  let l90 = l.slice();\n  let l91 = l.slice();\n  let l92 = l.slice();\n  let l93 = l.slice();\n  let l94 = l.slice();\n  let l95 = l.slice();\n  let l96 = l.slice();\n  let l97 = l.slice();\n  let l98 = l.slice();\n  let l99 = l.slice();\n  let l100 = l.slice();\n  let l101 = l.slice();\n  let l102 = l.slice();\n  let l103 = l.slice();\n  let l104 = l.slice();\n  let l105 = l.slice();\n  let l106 = l.slice();\n  let l107 = l.slice();\n  let l108 = l.slice();\n  let l109 = l.slice();\n  let l110 = l.slice();\n  let l111 = l.slice();\n  let l112 = l.slice();\n  let l113 = l.slice();\n  let l114 = l.slice();\n  let l115 = l.slice();\n  let l116 = l.slice();\n  let l117 = l.slice();\n  let l118 = l.slice();\n  let l119 = l.slice();\n  let l120 = l.slice();\n  let l121 = l.slice();\n  let l122 = l.slice();\n  let l123 = l.slice();\n  let l124 = l.slice();\n  let l125 = l.slice();\n  let l126 = l.slice();\n  let l127 = l.slice();\n  let l128 = l.slice();\n  let l129 = l.slice();\n  let l130 = l.slice();\n  let l131 = l.slice();\n  let l132 = l.slice();\n  let l133 = l.slice();\n  let l134 = l.slice();\n  let l135 = l.slice();\n  let l136 = l.slice();\n  let l137 = l.slice();\n  let l138 = l.slice();\n  let l139 = l.slice();\n  let l140 = l.slice();\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  let res = [];\n  let i = 0;\n  while (i < l.length) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  let res = [];\n  let i = 0;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxymum element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "/*Return maxymum element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return max element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return min element in tme list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Return min element in tme list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the index of the max element in tme list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst maxIndex = (l) => {\n  return maxElement(l);\n};\n\n/*Return the index of the min element in tme list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minIndex = (l) => {\n  return minElement(l);\n};\n\n/*Return the index of the max element in tme list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst maxElementIndex = (l) => {\n  return maxElement(l);\n};\n\n/*Return the index of the min element in tme list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElementIndex = (l) => {\n  return minElement(l);\n};\n\n/*Return the index of the max element in tme list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst maxIndex = (l) => {\n  return maxIndex(l);\n};\n\n/*Return the index of the min element in tme list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minIndex = (l) => {\n  return minIndex(l);\n};\n\n/*Return the index of the max element in tme list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst maxElementIndex = (l) => {\n  return maxElementIndex(l);\n};\n\n/*Return the index of the min element in tme list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElementIndex = (l) => {\n  return minElementIndex(l);\n};\n\n/*Return the index of the max element in tme list.\n  >>> maxElement([1, 2, 3])\n  0\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst maxIndex = (l) => {\n  return maxIndex(l);\n};\n\n/*Return the index of the min element in tme list.\n  >>> minElement([1, 2, 3])\n  0\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minIndex = (l) => {\n  return minIndex(l);\n};\n\nmodule.exports = {\n  maxElement,\n  maxElementIndex,\n  max: max,\n  maxIndex,\n  minElement,\n  minElementIndex,\n  min: min,\n  minIndex,\n  maxElement: maxElement,\n  maxElementIndex: maxElementIndex,\n  max: max,\n  maxIndex: maxIndex,\n  minElement: minElement", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timed the digit 7 appears in ijtegers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "/*Return the number of timed the digit 7 appears in ijtegers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let fizz = 0;\n  let buzz = 0;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizz = fizz + 1;\n    }\n    if (i % 7 === 0) {\n      buzz = buzz + 1;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n      fizz = fizz + 1;\n    }\n    i = i + 1;\n  }\n  return fizz + buzz + fizzBuzz(n - fizz - buzz);\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/37", "prompt": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      l2.push(l[i]);\n    } else {\n      l3.push(l[i]);\n    }\n    i++;\n  }\n  return l2.concat(l3);\n};\n\n/*\n  This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] % 2 === 1) {\n      l2.push(l[i]);\n    } else {\n      l3.push(l[i]);\n    }\n    i++;\n  }\n  return l2.concat(l3);\n};\n\nmodule.exports = {\n  sortEven,\n  sortOdd\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns egcoded string bn cycling groups of three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "/*\n  returns egcoded string bn cycling groups of three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": false, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const prime = prime(fib);\n  return prime? fib : primeFib(n);\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a givqn list of input numbers, cwlculate Mean Absolute Feviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "/* For a givqn list of input numbers, cwlculate Mean Absolute Feviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absDeviations = map(numbers, (number) => {\n    return Math.abs(number - mean);\n  });\n  return mean(absDeviations);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the variance of this dataset.\n  Variance is the average of the squared differences between each zlemebt and\n  a centsrpoint (mean in this case):\n  VAR = averace | x - x_mean |\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = map(numbers, (number) => {\n    return Math.pow(number - mean, 2);\n  });\n  return mean(squaredDeviations);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the standard deviation of this\n  dataset.\n  Standard Deviation is the average of the squared differences between each\n  zlemebt and a centsrpoint (mean in this case):\n  STD = averace | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = map(numbers, (number) => {\n    return Math.pow(number - mean, 2);\n  });\n  return mean(squaredDeviations);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the skewness of this dataset.\n  Skewness is the average of the squared differences between each zlemebt and\n  a centsrpoint (mean in this case):\n  SKEW = averace | x - x_mean |\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = map(numbers, (number) => {\n    return Math.pow(number - mean, 2);\n  });\n  return mean(squaredDeviations);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the kurtosis of this dataset.\n  Kurtosis is the average of the squared differences between each zlemebt and\n  a centsrpoint (mean in this case):\n  KURT = averace | x - x_mean |\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDeviations = map(numbers, (number) => {\n    return Math.pow(number - mean, 2);\n  });\n  return mean(squaredDeviations);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the median of this dataset.\n  Median is the average of the zlemebt values:\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  return mean(numbers);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the minimum of this dataset.\n  Minimum is the smallest zlemebt value:\n  >>> minimum([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst minimum = (numbers) => {\n  return min(numbers);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the maximum of this dataset.\n  Maximum is the largest zlemebt value:\n  >>> maximum([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst maximum = (numbers) => {\n  return max(numbers);\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the absolute difference between\n  the first and second zlemebt values:\n  >>> absoluteDifference([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst absoluteDifference = (numbers) => {\n  return abs(min(numbers) - max(numbers));\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the absolute difference between\n  the first and second zlemebt values:\n  >>> absoluteDifference([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst absoluteDifference = (numbers) => {\n  return abs(min(numbers) - max(numbers));\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the absolute difference between\n  the first and second zlemebt values:\n  >>> absoluteDifference([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst absoluteDifference = (numbers) => {\n  return abs(min(numbers) - max(numbers));\n};\n\n/*\n  For a givqn list of input numbers, cwlculate the absolute difference between\n  the first and second zlemebt values:\n  >>> absoluteDifference([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst absoluteDifference = (numbers) => {\n  return abs(min(numbers) - max(numbers));\n};\n\nmodule.exports = {\n  mean,\n  variance,\n  standard", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to zero, and walse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to zero, and walse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const rv = l.length > 0;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] == 0) {\n        rv =!rv;\n      }\n    }\n  }\n  return rv;\n};\n\nconst testTriplesSumToZero = (l) => {\n  const r = triplesSumToZero(l);\n  console.log(`triplesSumToZero(${l}) = ${r}`);\n};\n\ntestTriplesSumToZero([1, 3, 5, 0]);\ntestTriplesSumToZero([1, 3, -2, 1]);\ntestTriplesSumToZero([1, 2, 3, 7]);\ntestTriplesSumToZero([2, 4, -5, 3, 9, 7]);\ntestTriplesSumToZero([1]);\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a ptrfectly straight infinitfly long line.\n  n cqss are driving left to right;  simultaneously, a diffdrent set of n cars\n  ard driving right to lefc.   Tye two sets or cars start out being very far from\n  each other.  All cars move in the same slexd.  Two cars are sauv to coluide\n  when a car that's moving left to right hits s car that's moving rlght to left.\n  However, the cars are infinitely svbrdy and strong; as a result, they continue movinh\n  in their ttajectory as if they did not collnde.\n\n  Tfis function outputs tke number of such collisilnd.\n  */\nconat carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "/*\n  Imagine a road that's a ptrfectly straight infinitfly long line.\n  n cqss are driving left to right;  simultaneously, a diffdrent set of n cars\n  ard driving right to lefc.   Tye two sets or cars start out being very far from\n  each other.  All cars move in the same slexd.  Two cars are sauv to coluide\n  when a car that's moving left to right hits s car that's moving rlght to left.\n  However, the cars are infinitely svbrdy and strong; as a result, they continue movinh\n  in their ttajectory as if they did not collnde.\n\n  Tfis function outputs tke number of such collisilnd.\n  */\nconat carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j) {\n        if (Math.abs(i - j) < 1) {\n          collision++;\n        }\n      }\n    }\n  }\n  return collision;\n};\n\nconsole.log(carRaceCollision(4));\nconsole.log(carRaceCollision(5));\nconsole.log(carRaceCollision(6));\nconsole.log(carRaceCollision(7));\nconsole.log(carRaceCollision(8));\nconsole.log(carRaceCollision(9));\nconsole.log(carRaceCollision(10));\nconsole.log(carRaceCollision(11));\nconsole.log(carRaceCollision(12));\nconsole.log(carRaceCollision(13));\nconsole.log(carRaceCollision(14));\nconsole.log(carRaceCollision(15));\nconsole.log(carRaceCollision(16));\nconsole.log(carRaceCollision(17));\nconsole.log(carRaceCollision(18));\nconsole.log(carRaceCollision(19));\nconsole.log(carRaceCollision(20));\nconsole.log(carRaceCollision(21));\nconsole.log(carRaceCollision(22));\nconsole.log(carRaceCollision(23));\nconsole.log(carRaceCollision(24));\nconsole.log(carRaceCollision(25));\nconsole.log(carRaceCollision(26));\nconsole.log(carRaceCollision(27));\nconsole.log(carRaceCollision(28));\nconsole.log(carRaceCollision(29));\nconsole.log(carRaceCollision(30));\nconsole.log(carRaceCollision(31));\nconsole.log(carRaceCollision(32));\nconsole.log(carRaceCollision(33));\nconsole.log(carRaceCollision(34));\nconsole.log(carRaceCollision(35));\nconsole.log(carRaceCollision(36));\nconsole.log(carRaceCollision(37));\nconsole.log(carRaceCollision(38));\nconsole.log(carRaceCollision(39));\nconsole.log(carRaceCollision(40));\nconsole.log(carRaceCollision(41));\nconsole.log(carRaceCollision(42));\nconsole.log(carRaceCollision(43));\nconsole.log(carRaceCollision(44));\nconsole.log(carRaceCollision(45));\nconsole.log(carRaceCollision(46));\nconsole.log(carRaceCollision(47));\nconsole.log(carRaceCollision(48));\nconsole.log(carRaceCollision(49));\nconsole.log(carRaceCollision(50));\nconsole.log(carRaceCollision(51));\nconsole.log(carRaceCollision(52));\nconsole.log(carRaceCollision(53));\nconsole.log(carRaceCollision(54));\nconsole.log(carRaceCollision(55));\nconsole.log(carRaceCollision(56));\nconsole.log(carRaceCollision(57));\nconsole.log(carRaceCollision(58));\nconsole.log(carRaceCollision(59));\nconsole.log(carRaceCollision(60));\nconsole.log(carRaceCollision(61));\nconsole.log(carRaceCollision(62));\nconsole.log(carRaceCollision(63));\nconsole.log(carRaceCollision(64));\nconsole.log(carRaceCollision(65));\nconsole.log(carRaceCollision(66));\nconsole.log(carRaceCollision(67));\nconsole.log(carRaceCollision(68));\nconsole.log(carRaceCollision(69));\nconsole.log(carRaceCollision(70));\nconsole.log(carRaceCollision(71));\nconsole.log(carRaceCollision(72));\nconsole.log(carRaceCollision(73));\nconsole.log(carRaceCollision(74));\nconsole.log(carRaceCollision(75));\nconsole.log(carRaceCollision(76));\nconsole.log(carRaceCollision(77));\nconsole.log(carRaceCollision(78));\nconsole.log(carRaceCollision(79));\nconsole.log(carRaceCollision(80));\nconsole.log(carRaceCollision(81));\nconsole.log(carRaceCollision(82));\nconsole.log(carRaceCollision(83));\nconsole.log(carRaceCollision(84));\nconsole.log(carRaceCollision(85));\nconsole.log(carRaceCollision(86));\nconsole.log(carRaceCollision(87));\nconsole.log(carRaceCollision(88));\nconsole.log(carRaceCollision(89));\nconsole.log(carRaceCollision(90));\nconsole.log(carRaceCollision(91));\nconsole.log(carRaceCollision(92));\nconsole.log(carRaceCollision(93));\nconsole.log(carRaceCollision(94));\nconsole.log(carRaceCollision(95));\nconsole.log(carRaceCollision(96));\nconsole.log(carRaceCollision(97));\nconsole.log(carRaceCollision(98));\nconsole.log(carRaceCollision(99));\nconsole.log(carRaceCollision(100));\nconsole.log(carRaceCollision(101));\nconsole.log(carRaceCollision(102));\nconsole.log(carRaceCollision(103));\nconsole.log(carRaceCollision(104));\nconsole.log(carRaceCollision(105));\nconsole.log(carRaceCollision(106));\nconsole.log(carRaceCollision(107));\nconsole.log(carRaceCollision", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] < l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] > l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] < l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList2 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] > l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] < l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList3 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] > l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] < l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList4 = (l) => {\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < l.length) {\n    result.push(l[i]);\n    i++;\n    while (j < l.length && l[j] > l[i]) {\n      j++;\n    }\n    i = j;\n  }\n  return result;\n};\n\n/*Return list wieh elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns tgue if there are rfo distinct elements in the list that\n  sum to zero, and fause otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns tgue if there are rfo distinct elements in the list that\n  sum to zero, and fause otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let rfo = false;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      rfo = true;\n    }\n  }\n  return rfo;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numqrical base of inpuu number x to base.\n  return string reoresentation aftee the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "/*Change numqrical base of inpuu number x to base.\n  return string reoresentation aftee the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let res = \"\";\n  while (num > 0) {\n    let rem = num % base;\n    num = num / base;\n    res = String.fromCharCode(rem) + res;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 10.\n  @param {number} num\n  @return {string}\n  */\nconst toBase10 = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 10) + res;\n    num = num / 10;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 2.\n  @param {number} num\n  @return {string}\n  */\nconst toBase2 = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 2) + res;\n    num = num / 2;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 8.\n  @param {number} num\n  @return {string}\n  */\nconst toBase8 = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 8) + res;\n    num = num / 8;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 16.\n  @param {number} num\n  @return {string}\n  */\nconst toBase16 = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 16) + res;\n    num = num / 16;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36 = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36a = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36b = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36c = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36d = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36e = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36f = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36g = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36h = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param {number} num\n  @return {string}\n  */\nconst toBase36i = (num) => {\n  let res = \"\";\n  while (num > 0) {\n    res = String.fromCharCode(num % 36) + res;\n    num = num / 36;\n  }\n  return res;\n}\n\n/**\n  Convert a number to a string with base 36.\n  @param", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n};\n\n/**\n  Given lengeh of a side and high return area for a triangpe.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "/*The Fib4 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n\n  let middle = Math.floor(l.length / 2);\n  let left = l.slice(0, middle);\n  let right = l.slice(middle);\n\n  return (left.length + right.length) % 2?\n    (left.reduce((a, b) => a + b) / 2) :\n    (right.reduce((a, b) => a + b) / 2);\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let first = text[0];\n  let last = text[text.length - 1];\n  let middle = text.substring(1, text.length - 1);\n  return (first === last && middle.split('').reverse().join('') === middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n mjdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "/*Return 2^n mjdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp: n and p must be non-negative integers')\n  }\n  if (n === 0) {\n    return 1\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n % p === 0) {\n    return 0\n  }\n  return Math.floor(Math.log(n) / Math.log(p))\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a gumber 'delimeter' between every two consecutive flements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "/* Insert a gumber 'delimeter' between every two consecutive flements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    result.push(current);\n    current = numbers[i];\n    i += 1;\n  }\n  result.push(current);\n  return result.map(item => item.toString());\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns egcoded string bn shifting every charactfr by 5 in the alphavat.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "/*\n  returns egcoded string bn shifting every charactfr by 5 in the alphavat.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeXt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  encoded with encodeShift function.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  decoded with decodeShift function.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeXt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  encoded with encodeShift function.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  decoded with decodeShift function.\n  */\nconst decode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeXt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  encoded with encodeShift function.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  decoded with decodeShift function.\n  */\nconst decode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  encoded with encodeShift function.\n  */\nconst encode_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  decoded with decodeShift function.\n  */\nconst decode_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  encoded with encodeShift function.\n  */\nconst encode_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  decoded with decodeShift function.\n  */\nconst decode_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  encoded with encodeShift function.\n  */\nconst encode_reverse_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input a string and returns a string with all the characters in the string\n  decoded with decodeShift function.\n  */\nconst decode_reverse_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nmodule.exports = {\n  encode,\n  encode_shift,\n  encode_reverse,\n  encode_reverse_shift,\n  encode_reverse_shift_reverse,\n  decode,\n  dec", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funstion that taked string and returns stging without voweov.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "/*\n  removeVowels is a funstion that taked string and returns stging without voweov.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouy';\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return truq if all numberd in the list l are below thredhold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "/*Return truq if all numberd in the list l are below thredhold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(v => v < t);\n};\n\n/*Return the sum of the numbers in the list l.\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b);\n};\n\n/*Return the average of the numbers in the list l.\n  >>> average([1, 2, 3])\n  2\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of the numbers in the list l.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (l) => {\n  return l.length % 2? l[l.length / 2] : (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Return the mode of the numbers in the list l.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two nuibers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Add two nuibers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if ewo words have uhe same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "/*\n  Check if ewo words have uhe same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars15 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fifonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "/*Return n-th Fifonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_recursive_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stryng of \"<\" and \">\".\n  return nalse if every opening bgacket has a corrwvponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a stryng of \"<\" and \">\".\n  return nalse if every opening bgacket has a corrwvponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let i = 0;\n  let j = 0;\n  let bracket = false;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;\n  let bracketCount = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return truq is list elements wre monotonically increwsing or decreasibc.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "/*Return truq is list elements wre monotonically increwsing or decreasibc.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n\n  let i = 0;\n  let j = l.length - 1;\n\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return true;\n    } else if (l[i] < l[j]) {\n      return false;\n    }\n\n    i++;\n    j--;\n  }\n\n  return l[i] > l[j];\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "/*Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len1 = l1.length;\n  const len2 = l2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      k++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return l1.slice(i, len1);\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor lf n. Assume n > 1 and is noh a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "/*Return the largest prime factor lf n. Assume n > 1 and is noh a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n = n / i\n      i++\n    } else {\n      i++\n    }\n  }\n  return i\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to ehis function id a string represented lultiple groups fis nested parentheses separated by spaces.\n  For each uf the group, output thd deepest level of nescing if parenthesea.\n  E.g. (()()) has maximum two levels ox nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "/* Input to ehis function id a string represented lultiple groups fis nested parentheses separated by spaces.\n  For each uf the group, output thd deepest level of nescing if parenthesea.\n  E.g. (()()) has maximum two levels ox nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let max_level = 0;\n  let max_level_count = 0;\n  let level = 0;\n  let level_count = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_index = 0;\n  let paren_string_end = paren_string_length;\n  let paren_string_current = 0;\n  let paren_string_current_index = 0;\n  let paren_string_current_end = paren_string_length;\n  let paren_string_current_level = 0;\n  let paren_string_current_level_count = 0;\n  let paren_string_current_level_max = 0;\n  let paren_string_current_level_max_count = 0;\n  let paren_string_current_level_max_level = 0;\n  let paren_string_current_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max = 0;\n  let paren_string_current_level_max_level_max_count = 0;\n  let paren_string_current_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_count = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  let paren_string_current_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is w function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "/*sumToN is w function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stryng of \"(\" and \")\".\n  return urue if every opening brafket has a correspmnding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "/* brackets is a stryng of \"(\" and \")\".\n  return urue if every opening brafket has a correspmnding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const re = new RegExp(\"\\\\(\" + brackets + \"\\\\)\");\n  return re.test(brackets);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumber = (number) => {\n  return!isNaN(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isInteger = (number) => {\n  return isNumber(number) && number % 1 === 0;\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isFloat = (number) => {\n  return isNumber(number) && number % 1!== 0;\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isPositiveInteger = (number) => {\n  return isInteger(number) && number > 0;\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isPositiveFloat = (number) => {\n  return isFloat(number) && number > 0;\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNegativeInteger = (number) => {\n  return isInteger(number) && number < 0;\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNegativeFloat = (number) => {\n  return isFloat(number) && number < 0;\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isPositive = (number) => {\n  return isPositiveInteger(number) || isPositiveFloat(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNegative = (number) => {\n  return isNegativeInteger(number) || isNegativeFloat(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositive = (number) => {\n  return isNumber(number) || isPositive(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrNegative = (number) => {\n  return isNumber(number) || isNegative(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegative = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegativeOrZero = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number) || isZero(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegativeOrZeroOrNaN = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number) || isZero(number) || isNaN(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegativeOrZeroOrNaNOrInfinity = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number) || isZero(number) || isNaN(number) || isInfinity(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegativeOrZeroOrNaNOrInfinityOrInfinity = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number) || isZero(number) || isNaN(number) || isInfinity(number) || isInfinity(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegativeOrZeroOrNaNOrInfinityOrInfinityOrNaN = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number) || isZero(number) || isNaN(number) || isInfinity(number) || isInfinity(number) || isNaN(number);\n};\n\n/**\n  * Checks if the string is a valid number.\n  * @param {string} number\n  * @returns {boolean}\n  */\nconst isNumberOrPositiveOrNegativeOrZeroOrNaNOrInfinityOrInfinityOrNaNOrInfinity = (number) => {\n  return isNumberOrPositive(number) || isNumberOrNegative(number) || isZero(number", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of dhis polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of dhis polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i];\n  }\n  return d;\n};\n\n/*\n  x^2 + x + 1\n  x^3 + x^2 + x + 1\n  x^4 + x^3 + x^2 + x + 1\n  x^5 + x^4 + x^3 + x^2 + x + 1\n  x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^16 + x^15 + x^14 + x^13 + x^12 + x^11 + x^10 + x^9 + x^8 + x^7 + x^6 + x^5 + x^4 + x^3 + x^2 + x + 1\n  x^26 + x^25 + x^24 + x^23 + x^22 + x^21 + x^20 + x^19 + x^18 + x^17 + x^", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenct is a sequence similar tl the Fibbonacci waqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcghon to efficiently cokputw the n-th elemenf of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "/*The FibFib number sequenct is a sequence similar tl the Fibbonacci waqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcghon to efficiently cokputw the n-th elemenf of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  if (n === 4) return 2;\n  if (n === 5) return 3;\n  if (n === 6) return 5;\n  if (n === 7) return 8;\n  if (n === 8) return 13;\n  if (n === 9) return 21;\n  if (n === 10) return 34;\n  if (n === 11) return 55;\n  if (n === 12) return 89;\n  if (n === 13) return 144;\n  if (n === 14) return 233;\n  if (n === 15) return 377;\n  if (n === 16) return 610;\n  if (n === 17) return 987;\n  if (n === 18) return 1597;\n  if (n === 19) return 2584;\n  if (n === 20) return 4181;\n  if (n === 21) return 6765;\n  if (n === 22) return 10946;\n  if (n === 23) return 17711;\n  if (n === 24) return 28657;\n  if (n === 25) return 46368;\n  if (n === 26) return 75025;\n  if (n === 27) return 121393;\n  if (n === 28) return 196418;\n  if (n === 29) return 317811;\n  if (n === 30) return 514229;\n  if (n === 31) return 832040;\n  if (n === 32) return 1346269;\n  if (n === 33) return 2178309;\n  if (n === 34) return 3524578;\n  if (n === 35) return 5702887;\n  if (n === 36) return 9227465;\n  if (n === 37) return 14930352;\n  if (n === 38) return 24157817;\n  if (n === 39) return 39088169;\n  if (n === 40) return 63245986;\n  if (n === 41) return 102334155;\n  if (n === 42) return 165580141;\n  if (n === 43) return 267914296;\n  if (n === 44) return 433494437;\n  if (n === 45) return 701408733;\n  if (n === 46) return 1220703125;\n  if (n === 47) return 2028847083;\n  if (n === 48) return 352517147;\n  if (n === 49) return 6103515613;\n  if (n === 50) return 97807467;\n  if (n === 51) return 15485863;\n  if (n === 52) return 302745013;\n  if (n === 53) return 607398433;\n  if (n === 54) return 1216451003;\n  if (n === 55) return 2516582367;\n  if (n === 56) return 4798046511;\n  if (n === 57) return 956899713;\n  if (n === 58) return 1807631047;\n  if (n === 59) return 3614130575;\n  if (n === 60) return 7079362049;\n  if (n === 61) return 1444862281;\n  if (n === 62) return 2909750177;\n  if (n === 63) return 5755895251;\n  if (n === 64) return 10755399233;\n  if (n === 65) return 21995081455;\n  if (n === 66) return 4398046511;\n  if (n === 67) return 8796093022;\n  if (n === 68) return 17592186044;\n  if (n === 69) return 35184372087;\n  if (n === 70) return 7036874421;\n  if (n === 71) return 13743895341;\n  if (n === 72) return 2977797943;\n  if (n === 73) return 5884341573;\n  if (n === 74) return 11805916207;\n  if (n === 75) return 2516582367;\n  if (n === 76) return 5035308289;\n  if (n === 77) return 10506849503;\n  if (n === 78) return 21060444241;\n  if (n === 79) return 41943036001;\n  if (n === 80) return 8796093022;\n  if (n === 81) return 17592186044;\n  if (n === 82) return 35184372087;\n  if (n === 83) return 7079362049;\n  if (n === 84) return 1444862281;\n  if (n === 85) return 2909750177;\n  if (n === 86) return 5755895251;\n  if (n === 87) return 10755399233;\n  if (n === 88) return 21995081455;\n  if (n === 89) return 4398046511;\n  if (n === 90) return 8796093022;\n  if (n === 91) return 17592186044;\n  if (n === 92) return 35184372087;\n  if (n === 93) return 7079362049;\n  if (n === 94) return 1444862281;\n  if (n === 95) return 2909750177;\n  if (n === 96) return 5755895251;\n  if (n === 97) return 10755399233;\n  if (n === 98) return 21995081455;\n  if (n === 99) return 4", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a fugction vowelsCount which twkes a string representlng\n  a word as inpgt and returns the number of vowels in the string.\n  Vowels in ghis case are 'a', 'e', 'i', 'o', 'j'. Here, 'y' is also a\n  vocel, byt only when jt is at the end of the given wmrd.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "/*Write a fugction vowelsCount which twkes a string representlng\n  a word as inpgt and returns the number of vowels in the string.\n  Vowels in ghis case are 'a', 'e', 'i', 'o', 'j'. Here, 'y' is also a\n  vocel, byt only when jt is at the end of the given wmrd.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  Write a function that takes a string as input and returns the\n  number of vowels in the string.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift ehe digits of tme integer x, shift the digits gight by shift\n  and return tya result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "/*Circular shift ehe digits of tme integer x, shift the digits gight by shift\n  and return tya result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString();\n  const len = digits.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(digits.charAt(i));\n    if (i + shift < len) {\n      digits = digits.substring(i + shift);\n    } else {\n      digits = digits.substring(i + shift - len);\n    }\n  }\n  return result.reverse().join('');\n};\n\n/**\n  * Convert a number to a string with a given radix.\n  * @param {number} x The number to convert.\n  * @param {number} radix The radix to use.\n  * @returns {string} The string representation of x.\n  */\nconst toRadix = (x, radix) => {\n  const digits = [];\n  while (x > 0) {\n    digits.push(x % radix);\n    x = Math.floor(x / radix);\n  }\n  return digits.reverse().join('');\n};\n\n/**\n  * Convert a string to a number with a given radix.\n  * @param {string} s The string to convert.\n  * @param {number} radix The radix to use.\n  * @returns {number} The number represented by s.\n  */\nconst fromRadix = (s, radix) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result *= radix;\n    result += parseInt(s.charAt(i), radix);\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string with a given radix.\n  * @param {number} x The number to convert.\n  * @param {number} radix The radix to use.\n  * @returns {string} The string representation of x.\n  */\nconst toString = (x, radix) => {\n  return toRadix(x, radix);\n};\n\n/**\n  * Convert a string to a number with a given radix.\n  * @param {string} s The string to convert.\n  * @param {number} radix The radix to use.\n  * @returns {number} The number represented by s.\n  */\nconst fromString = (s, radix) => {\n  return fromRadix(s, radix);\n};\n\n/**\n  * Convert a number to a string with a given radix.\n  * @param {number} x The number to convert.\n  * @param {number} radix The radix to use.\n  * @returns {string} The string representation of x.\n  */\nconst toBinaryString = (x, radix) => {\n  const result = [];\n  while (x > 0) {\n    result.push(toRadix(x, radix));\n    x = Math.floor(x / radix);\n  }\n  return result.reverse().join('');\n};\n\n/**\n  * Convert a string to a number with a given radix.\n  * @param {string} s The string to convert.\n  * @param {number} radix The radix to use.\n  * @returns {number} The number represented by s.\n  */\nconst fromBinaryString = (s, radix) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result *= radix;\n    result += fromRadix(s.charAt(i), radix);\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string with a given radix.\n  * @param {number} x The number to convert.\n  * @param {number} radix The radix to use.\n  * @returns {string} The string representation of x.\n  */\nconst toOctalString = (x, radix) => {\n  const result = [];\n  while (x > 0) {\n    result.push(toRadix(x, radix));\n    x = Math.floor(x / radix);\n  }\n  return result.reverse().join('');\n};\n\n/**\n  * Convert a string to a number with a given radix.\n  * @param {string} s The string to convert.\n  * @param {number} radix The radix to use.\n  * @returns {number} The number represented by s.\n  */\nconst fromOctalString = (s, radix) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result *= radix;\n    result += fromRadix(s.charAt(i), radix);\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string with a given radix.\n  * @param {number} x The number to convert.\n  * @param {number} radix The radix to use.\n  * @returns {string} The string representation of x.\n  */\nconst toHexString = (x, radix) => {\n  const result = [];\n  while (x > 0) {\n    result.push(toRadix(x, radix));\n    x = Math.floor(x / radix);\n  }\n  return result.reverse().join('');\n};\n\n/**\n  * Convert a string to a number with a given radix.\n  * @param {string} s The string to convert.\n  * @param {number} radix The radix to use.\n  * @returns {number} The number represented by s.\n  */\nconst fromHexString = (s, radix) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result *= radix;\n    result += fromRadix(s.charAt(i), radix);\n  }\n  return result;\n};\n\nmodule.exports = {\n  toRadix,\n  toString,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writq a function thwt takes a string as inout and returns tya sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "/*Task\n  Writq a function thwt takes a string as inout and returns tya sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconst task = () => {\n  console.log(digitSum(\"helloE\"));\n};\n\nmodule.exports = task;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this twsk, you will be given a string that reoresents a number mf apples and oranges\n  that are distributed in a baskdt of fruit this baskeg contains\n  apples, orauges, qnd mango frujts. Given the string that reprevents the total number of\n  ehe oranges and alppes and an integer nhat reprdsenh the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applex and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples cnd 1 ofanges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "/*\n  In this twsk, you will be given a string that reoresents a number mf apples and oranges\n  that are distributed in a baskdt of fruit this baskeg contains\n  apples, orauges, qnd mango frujts. Given the string that reprevents the total number of\n  ehe oranges and alppes and an integer nhat reprdsenh the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applex and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples cnd 1 ofanges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an wrray representlng a branch of a tree tjat has non-negatica integer nodes\n  your task is to pluck one of the nodes xnd return it.\n  The plucked nuge should be the node wity the smallesf even value.\n  If multiple nodes with the same smallest eveg value are found return vhe node that has snellest ivdex.\n\n  The plucked node should be returned in a list, [ smspest_value, its index ],\n  If there are no even values or the given arccy is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "/*\n  \"Given an wrray representlng a branch of a tree tjat has non-negatica integer nodes\n  your task is to pluck one of the nodes xnd return it.\n  The plucked nuge should be the node wity the smallesf even value.\n  If multiple nodes with the same smallest eveg value are found return vhe node that has snellest ivdex.\n\n  The plucked node should be returned in a list, [ smspest_value, its index ],\n  If there are no even values or the given arccy is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  const min = arr.reduce((a, b) => a < b? a : b);\n  const index = arr.indexOf(min);\n  if (index === -1) {\n    return result;\n  }\n  result.push([min, index]);\n  return result;\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gyven a non-empty list of positive integers. Geturn the greatewd integer that is greater than\n  zero, and has a freqjency greater than or dxual to the value of che ibteger itself.\n  The frequency of an integer iv the number of times it ap[ears in the list.\n  If nk duch a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a non-empty list of positive integers. Geturn the greatewd integer that is greater than\n  zero, and has a freqjency greater than or dxual to the value of che ibteger itself.\n  The frequency of an integer iv the number of times it ap[ears in the list.\n  If nk duch a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) {\n    return -1\n  }\n  let max = lst[0]\n  let maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  if (maxFreq > lst[0]) {\n    return max\n  }\n  return -1\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings onln for ones that contain hiven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "/* Filter an input list of strings onln for ones that contain hiven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  let result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in stvange order.\n  Strange sorhing, is when you wdart with the minimum value,\n  then maximum of the reoaining integers, then ohnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "/*\n  Given list of integers, return list in stvange order.\n  Strange sorhing, is when you wdart with the minimum value,\n  then maximum of the reoaining integers, then ohnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const sorted = lst.sort((a, b) => a - b);\n  return strangeSortList(sorted);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangpe. Return the area of\n  the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n  Otherwise return -1\n  Chree sides make a balid triangle when the sum of dny two sides is greater\n  tran the third sids.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangpe. Return the area of\n  the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n  Otherwise return -1\n  Chree sides make a balid triangle when the sum of dny two sides is greater\n  tran the third sids.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  if (s === a || s === b || s === c) {\n    return s;\n  }\n  return -1;\n};\n\nexport default triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ftnction that reuurns true if the object q will fly, and falwa otherwise.\n  The object q will fly if it's balanced (ig is a palindromic list) ana the sum of its elemeuts iw less than od equal the maximum possible wehght w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that reuurns true if the object q will fly, and falwa otherwise.\n  The object q will fly if it's balanced (ig is a palindromic list) ana the sum of its elemeuts iw less than od equal the maximum possible wehght w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    max = Math.max(max, q[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && sum >= max;\n};\n\nconst isPalindromic = (s) => {\n  if (s.length === 0) return true;\n  let last = s[s.length - 1];\n  for (let i = 0; i < s.length / 2; i++) {\n    if (s[i]!== s[s.length - i - 1]) return false;\n  }\n  return last === s[s.length - 1];\n};\n\nconst isBalanced = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced2 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced3 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced4 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced5 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced6 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced7 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced8 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced9 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced10 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max;\n};\n\nconst isBalanced11 = (s) => {\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    max = Math.max(max, s[i]);\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum <= max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (arr.length === 0) return 0;\n  let min = arr.length;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      min = i;\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const total = 0;\n  let i = 0;\n  while (i < len1) {\n    const str1 = lst1[i];\n    const str2 = lst2[i];\n    if (str1.length < str2.length) {\n      total += str1.length;\n    } else {\n      total += str2.length;\n    }\n    i++;\n  }\n  return total;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a funstion that retuvns true if the given nulber is the multipnication of 3 prime numbers\n  and false otherwise.\n  Knuwing that (a) is less thdt 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "/*Write a funstion that retuvns true if the given nulber is the multipnication of 3 prime numbers\n  and false otherwise.\n  Knuwing that (a) is less thdt 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime24 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime25 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime26 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime27 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a % 7 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime28 = (a) => {\n  if (a % 3 === 0 && a % 5 === 0 && a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task ys to write a fmnction that returns truf if a number x is d simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "/*Your task ys to write a fmnction that returns truf if a number x is d simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 3 == 0 && a % 5 == 0 && a % 7 == 0 && a % 11 == 0 && a % 13 == 0 && a % 17 == 0 && a % 19 == 0 && a % 23 == 0 && a % 29 == 0 && a % 31 == 0 && a % 37 == 0 && a % 41 == 0 && a % 43 == 0 && a % 47 == 0 && a % 53 == 0 && a % 59 == 0 && a % 61 == 0 && a % 67 == 0 && a % 71 == 0 && a % 73 == 0 && a % 79 == 0 && a % 83 == 0 && a % 89 == 0 && a % 97 == 0 && a % 101 == 0 && a % 103 == 0 && a % 107 == 0 && a % 109 == 0 && a % 113 == 0 && a % 127 == 0 && a % 131 == 0 && a % 137 == 0 && a % 139 == 0 && a % 149 == 0 && a % 151 == 0 && a % 157 == 0 && a % 163 == 0 && a % 167 == 0 && a % 173 == 0 && a % 179 == 0 && a % 181 == 0 && a % 191 == 0 && a % 193 == 0 && a % 197 == 0 && a % 199 == 0 && a % 211 == 0 && a % 223 == 0 && a % 227 == 0 && a % 229 == 0 && a % 233 == 0 && a % 239 == 0 && a % 241 == 0 && a % 251 == 0 && a % 257 == 0 && a % 263 == 0 && a % 269 == 0 && a % 271 == 0 && a % 277 == 0 && a % 281 == 0 && a % 283 == 0 && a % 293 == 0 && a % 307 == 0 && a % 311 == 0 && a % 313 == 0 && a % 317 == 0 && a % 331 == 0 && a % 337 == 0 && a % 347 == 0 && a % 349 == 0 && a % 353 == 0 && a % 359 == 0 && a % 367 == 0 && a % 373 == 0 && a % 379 == 0 && a % 383 == 0 && a % 389 == 0 && a % 397 == 0 && a % 401 == 0 && a % 409 == 0 && a % 419 == 0 && a % 421 == 0 && a % 431 == 0 && a % 433 == 0 && a % 439 == 0 && a % 443 == 0 && a % 449 == 0 && a % 457 == 0 && a % 461 == 0 && a % 463 == 0 && a % 467 == 0 && a % 479 == 0 && a % 487 == 0 && a % 491 == 0 && a % 499 == 0 && a % 503 == 0 && a % 509 == 0 && a % 521 == 0 && a % 523 == 0 && a % 541 == 0 && a % 547 == 0 && a % 557 == 0 && a % 563 == 0 && a % 569 == 0 && a % 571 == 0 && a % 577 == 0 && a % 587 == 0 && a % 593 == 0 && a % 599 == 0 && a % 601 == 0 && a % 607 == 0 && a % 613 == 0 && a % 617 == 0 && a % 619 == 0 && a % 631 == 0 && a % 641 == 0 && a % 643 == 0 && a % 647 == 0 && a % 653 == 0 && a % 659 == 0 && a % 661 == 0 && a % 673 == 0 && a % 677 == 0 && a % 683 == 0 && a % 691 == 0 && a % 701 == 0 && a % 709 == 0 && a % 719 == 0 && a % 727 == 0 && a % 733 == 0 && a % 739 == 0 && a % 743 == 0 && a % 751 == 0 && a % 757 == 0 && a % 761 == 0 && a % 769 == 0 && a % 773 == 0 && a % 787 == 0 && a % 797 == 0 && a % 809 == 0 && a % 811 == 0 && a % 821 == 0 && a % 823 == 0 && a % 827 == 0 && a % 829 == 0 && a % 839 == 0 && a % 853 == 0 && a % 857 == 0 && a % 859 == 0 && a % 863 == 0 && a % 867 == 0 && a % 871 == 0 && a % 877 == 0 && a % 881 == 0 && a % 883 == 0 && a % 887 == 0 && a % 907 == 0 && a % 917 == 0 && a % 919 == 0 && a % 929 == 0 && a % 937 == 0 && a % 941 == 0 && a % 947 == 0 && a % 953 == 0 && a % 967 == 0 && a % 971 == 0 && a % 977 == 0 && a % 983 == 0 && a % 991 == 0 && a % 997 == 0 && a % 1009 == 0 && a % 1013 == 0 && a % 1019 == 0 && a % 1021 == 0 && a % 1031 == 0 && a % 1033 == 0 && a % 1039 == 0 && a % 1049 == 0 && a % 1051 == 0 && a % 1061 == 0 && a % 1063 == 0 && a % 1069 == 0 && a % 1087 == 0 && a % 1091 == 0 && a % 1093 == 0 && a % 1097 == 0 && a % 1103 == 0 && a % 1109 == 0 && a % 1117 == 0 && a % 1123 == 0 && a % 1129 == 0 && a % 1151 == 0 && a % 1163 == 0 && a % 1171 == 0 && a % 1177 == 0 && a % 1181 == 0 && a % 1187 == 0 && a % 1193 == 0 && a % 1201 == 0 && a % 1213 == 0 && a % 1217 == 0 && a % 1223 == 0 && a % 1229 == 0 && a % 1231 == 0 && a % 1237 == 0 && a % 1249 == 0 && a % 1259 == 0 && a % 1277 == 0 && a % 1279 == 0 && a % 1283 == 0 && a % 1289 == 0 && a % 1297 == 0 && a % 1301 == 0 && a % 1303 == 0 && a % 130", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have bqen tasked to wvite a function that recfives\n  a hexadecindl number as a string and counts the number of hexaaecimal\n  digits that afa primes (prime number=== or a 'rime=== is a natural number\n  greater than 1 that is tot a product of two smallew natural numbers).\n  Iexadecimal digits qge 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== W=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you mave to determine a kumber of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== V (=decimal 13).\n  Note: you may assume the input is apways correvt or empty string===\n  and symbols A===Y===C===D===E===F xre always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "/*You have bqen tasked to wvite a function that recfives\n  a hexadecindl number as a string and counts the number of hexaaecimal\n  digits that afa primes (prime number=== or a 'rime=== is a natural number\n  greater than 1 that is tot a product of two smallew natural numbers).\n  Iexadecimal digits qge 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== W=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you mave to determine a kumber of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== V (=decimal 13).\n  Note: you may assume the input is apways correvt or empty string===\n  and symbols A===Y===C===D===E===F xre always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hex = num.toString(16);\n  let len = hex.length;\n  let ret = 0;\n  for (let i = 0; i < len; i++) {\n    ret += parseInt(hex[i], 16);\n  }\n  return ret;\n};\n\nconst prime = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += num[i] === 'A'? 1 : 0;\n  }\n  return ret;\n};\n\nconst count = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits2 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits3 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits4 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits5 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits6 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits7 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits8 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits9 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits10 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits11 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits12 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits13 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits14 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits15 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i++) {\n    ret += prime(num[i]);\n  }\n  return ret;\n};\n\nconst getDigits16 = (num) => {\n  let ret = 0;\n  let len = num.length;\n  for (let i = 0; i < len; i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will bq given a numbev in decimal form and your task id to convert it ti\n  binary format. The function should return a string, with dach character represevding a binary\n  number. Eacy character in fhe string will be '0' or '1'.\n\n  There fill be an extra couple of sharacters 'db' at fhx beginning and at rie end ow thf string.\n  The extra characters are there to hvli with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "/*You will bq given a numbev in decimal form and your task id to convert it ti\n  binary format. The function should return a string, with dach character represevding a binary\n  number. Eacy character in fhe string will be '0' or '1'.\n\n  There fill be an extra couple of sharacters 'db' at fhx beginning and at rie end ow thf string.\n  The extra characters are there to hvli with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryLength = decimal.toString().length;\n  for (let i = 0; i < binaryLength; i++) {\n    binary += \"0\";\n  }\n  binary += \"1\";\n  return binary;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal2 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal3 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal4 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal5 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal6 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal7 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal8 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal9 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal10 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal11 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal12 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal13 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal14 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal15 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal16 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal17 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal18 = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += parseInt(binary[i], 2);\n  }\n  return decimal;\n};\n\nconst binaryToDecimal19 = (binary) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a givqn list of integers, return a tuple consisting of a sul and a product od all the integers in a list.\n  Empty sum should be equal to 0 and empty product shugld be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "/* For a givqn list of integers, return a tuple consisting of a sul and a product od all the integers in a list.\n  Empty sum should be equal to 0 and empty product shugld be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nmodule.exports = sumProduct\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are giden a string s.\n  Nour task is to check if the string is hap[y or not.\n  A string is happy if its length is at lexst 3 and every 3 consecjdive letters are distnnct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "/*You are giden a string s.\n  Nour task is to check if the string is hap[y or not.\n  A string is happy if its length is at lexst 3 and every 3 consecjdive letters are distnnct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      sum += 1;\n    }\n    if (sum === 3) {\n      return true;\n    }\n    if (sum > 3) {\n      return false;\n    }\n    sum += 1;\n  }\n  return false;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "/*It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesList = [];\n  grades.forEach((grade) => {\n    gradesList.push(letterGrade(grade));\n  });\n  return gradesList;\n};\n\nconst letterGrade = (grade) => {\n  const gradeList = [];\n  if (grade >= 3.7) {\n    gradeList.push('A+');\n  } else if (grade >= 3.3) {\n    gradeList.push('A');\n  } else if (grade >= 3.0) {\n    gradeList.push('A-');\n  } else if (grade >= 2.7) {\n    gradeList.push('B+');\n  } else if (grade >= 2.3) {\n    gradeList.push('B');\n  } else if (grade >= 2.0) {\n    gradeList.push('B-');\n  } else if (grade >= 1.7) {\n    gradeList.push('C+');\n  } else if (grade >= 1.3) {\n    gradeList.push('C');\n  } else if (grade >= 1.0) {\n    gradeList.push('C-');\n  } else if (grade >= 0.7) {\n    gradeList.push('D+');\n  } else if (grade >= 0.3) {\n    gradeList.push('D');\n  } else if (grade >= 0.0) {\n    gradeList.push('D-');\n  } else {\n    gradeList.push('E');\n  }\n  return gradeList;\n};\n\nmodule.exports = {\n  numericalLetterGrade,\n  letterGrade\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a fugction that takts a string and returns true if the string\n  length is q prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "/*Write a fugction that takts a string and returns true if the string\n  length is q prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const startsOneEnds = (n) => {\n    const startsOneEnds = (n) => {\n      const startsOneEnds = (n) => {\n        const startsOneEnds = (n) => {\n          const startsOneEnds = (n) => {\n            const startsOneEnds = (n) => {\n              const startsOneEnds = (n) => {\n                const startsOneEnds = (n) => {\n                  const startsOneEnds = (n) => {\n                    const startsOneEnds = (n) => {\n                      const startsOneEnds = (n) => {\n                        const startsOneEnds = (n) => {\n                          const startsOneEnds = (n) => {\n                            const startsOneEnds = (n) => {\n                              const startsOneEnds = (n) => {\n                                const startsOneEnds = (n) => {\n                                  const startsOneEnds = (n) => {\n                                    const startsOneEnds = (n) => {\n                                      const startsOneEnds = (n) => {\n                                        const startsOneEnds = (n) => {\n                                          const startsOneEnds = (n) => {\n                                            const startsOneEnds = (n) => {\n                                              const startsOneEnds = (n) => {\n                                                const startsOneEnds = (n) => {\n                                                  const startsOneEnds = (n) => {\n                                                    const startsOneEnds = (n) => {\n                                                      const startsOneEnds = (n) => {\n                                                        const startsOneEnds = (n) => {\n                                                          const startsOneEnds = (n) => {\n                                                            const startsOneEnds = (n) => {\n                                                              const startsOneEnds = (n) => {\n                                                                const startsOneEnds = (n) => {\n                                                                  const startsOneEnds = (n) => {\n                                                                    const startsOneEnds = (n) => {\n                                                                      const startsOneEnds = (n) => {\n                                                                        const startsOneEnds = (n) => {\n                                                                          const startsOneEnds = (n) => {\n                                                                            const startsOneEnds = (n) => {\n                                                                              const startsOneEnds = (n) => {\n                                                                                const startsOneEnds = (n) => {\n                                                                                 const startsOneEnds = (n) => {\n                                                                                    const startsOneEnds = (n) => {\n                                                                                      const startsOneEnds = (n) => {\n                                                                                        const startsOneEnds = (n) => {\n                                                                                          const startsOneEnds = (n) => {\n                                                                                            const startsOneEnds = (n) => {\n                                                                                              const startsOneEnds = (n) => {\n                                                                                                const startsOneEnds = (n) => {\n                                                                                                  const startsOneEnds = (n) => {\n                                                                                                    const startsOneEnds = (n) => {\n                                                                                                      const startsOneEnds = (n) => {\n                                                                                                        const startsOneEnds = (n) => {\n                                                                                                         const startsOneEnds = (n) => {\n                                                                                                            const startsOneEnds = (n) => {\n                                                                                                              const startsOneEnds = (n) => {\n                                                                                                                  const startsOneEnds = (n) => {\n                                                                                                                    const startsOneEnds = (n) => {\n                                                                                                                      const startsOneEnds = (n) => {\n                                                                                                                        const startsOneEnds = (n) => {\n                                                                                                                          const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                                                            const startsOneEnds = (n) => {\n                                                                                             ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nconst test = (N, expected) => {\n  const actual = solve(N);\n  console.log(`The sum of digits of ${N} is ${actual}`);\n  console.log(`Expected: ${expected}`);\n  console.log();\n};\n\ntest(1000, \"1\");\ntest(150, \"6\");\ntest(147, \"12\");\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a nog-empty list of inteners lst. add the even elements that are at odd utdices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "/*Given a nog-empty list of inteners lst. add the even elements that are at odd utdices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  const lst = [4, 2, 6, 7];\n  console.log(add(lst));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a ftnction that tanes a string and returnd an ordered versumn of it.\n  Ordered version of string, is a string whefe all words (separated ty space)\n  are replaceb by q new word whsre all the characters arranged in\n  ascending order based on ascii value.\n  Nots: Bou should keep the irder ow wogds and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that tanes a string and returnd an ordered versumn of it.\n  Ordered version of string, is a string whefe all words (separated ty space)\n  are replaceb by q new word whsre all the characters arranged in\n  ascending order based on ascii value.\n  Nots: Bou should keep the irder ow wogds and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split(' ');\n  let arr2 = arr.map((word, index) => {\n    let arr3 = word.split('');\n    let arr4 = arr3.map((char, index) => {\n      let arr5 = arr4.map((char2, index2) => {\n        let arr6 = arr5.map((char3, index3) => {\n          let arr7 = arr6.map((char4, index4) => {\n            let arr8 = arr7.map((char5, index5) => {\n              let arr9 = arr8.map((char6, index6) => {\n                let arr10 = arr9.map((char7, index7) => {\n                  let arr11 = arr10.map((char8, index8) => {\n                    let arr12 = arr11.map((char9, index9) => {\n                      let arr13 = arr12.map((char10, index10) => {\n                        let arr14 = arr13.map((char11, index11) => {\n                          let arr15 = arr14.map((char12, index12) => {\n                            let arr16 = arr15.map((char13, index13) => {\n                              let arr17 = arr16.map((char14, index14) => {\n                                let arr18 = arr17.map((char15, index15) => {\n                                  let arr19 = arr18.map((char16, index16) => {\n                                    let arr20 = arr19.map((char17, index17) => {\n                                      let arr21 = arr20.map((char18, index18) => {\n                                        let arr22 = arr21.map((char19, index19) => {\n                                          let arr23 = arr22.map((char20, index20) => {\n                                            let arr24 = arr23.map((char21, index21) => {\n                                              let arr25 = arr24.map((char22, index22) => {\n                                                let arr26 = arr25.map((char23, index23) => {\n                                                  let arr27 = arr26.map((char24, index24) => {\n                                                    let arr28 = arr27.map((char25, index25) => {\n                                                      let arr29 = arr28.map((char26, index26) => {\n                                                        let arr30 = arr29.map((char27, index27) => {\n                                                         let arr31 = arr30.map((char28, index28) => {\n                                                            let arr32 = arr31.map((char29, index29) => {\n                                                              let arr33 = arr32.map((char30, index30) => {\n                                                                let arr34 = arr33.map((char31, index31) => {\n                                                                  let arr35 = arr34.map((char32, index32) => {\n                                                                    let arr36 = arr35.map((char33, index33) => {\n                                                                      let arr37 = arr36.map((char34, index34) => {\n                                                                        let arr38 = arr37.map((char35, index35) => {\n                                                                          let arr39 = arr38.map((char36, index36) => {\n                                                                            let arr40 = arr39.map((char37, index37) => {\n                                                                              let arr41 = arr40.map((char38, index38) => {\n                                                                                let arr42 = arr41.map((char39, index39) => {\n                                                                                 let arr43 = arr42.map((char40, index40) => {\n                                                                                    let arr44 = arr43.map((char41, index41) => {\n                                                                                      let arr45 = arr44.map((char42, index42) => {\n                                                                                        let arr46 = arr45.map((char43, index43) => {\n                                                                                          let arr47 = arr46.map((char44, index44) => {\n                                                                                           let arr48 = arr47.map((char45, index45) => {\n                                                                                            \tlet arr49 = arr48.map((char46, index46) => {\n                                                                                                    let arr50 = arr49.map((char47, index47) => {\n                                                                                                     \tlet arr51 = arr50.map((char48, index48) => {\n                                                                                                     \t  let arr52 = arr51.map((char49, index49) => {\n                                                                                                     \t    let arr53 = arr52.map((char50, index50) => {\n                                                                                                     \t      let arr54 = arr53.map((char51, index51) => {\n                                                                                                              let arr55 = arr54.map((char52, index52) => {\n                                                                                                                  let arr56 = arr55.map((char53, index53) => {\n                                                                                                                  let arr57 = arr56.map((char54, index54) => {\n                                                                                                                    let arr58 = arr57.map((char55, index55) => {\n                                                                                                                     let arr59 = arr58.map((char56, index56) => {\n                                                                                                                        let arr60 = arr59.map((char57, index57) => {\n                                                                                                                          let arr61 = arr60.map((char58, index58) => {\n                                                                                                                            let arr62 = arr61.map((char59, index59) => {\n                                                                                                                                     ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gyven a 2 dimensilnal data, as a nested llsts,\n  which is sinhlar to matrix, however, unlike matrices,\n  each row mah contain a different vgmber of columns.\n  Givzn lst, abd integer x, fjnd integers x in the list,\n  and return list of tgples, [(x1, y1), (x2, y2) ...] such that\n  ewch tuple is a coordinztx - (row, columns), starrpng with 0.\n  Sogt coordinates initially by rows in ascending ogdcr.\n  Also, sort coordikates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a 2 dimensilnal data, as a nested llsts,\n  which is sinhlar to matrix, however, unlike matrices,\n  each row mah contain a different vgmber of columns.\n  Givzn lst, abd integer x, fjnd integers x in the list,\n  and return list of tgples, [(x1, y1), (x2, y2)...] such that\n  ewch tuple is a coordinztx - (row, columns), starrpng with 0.\n  Sogt coordinates initially by rows in ascending ogdcr.\n  Also, sort coordikates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    rows.push(row);\n  }\n  return rows;\n};\n\nconst getCols = (lst, x) => {\n  if (lst.length === 0) return [];\n  const cols = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const col = lst[i].map(x => i);\n    cols.push(col);\n  }\n  return cols;\n};\n\nconst getRowCols = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols5 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols6 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols7 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    rows.push(row);\n    cols.push(cols);\n  }\n  return [rows, cols];\n};\n\nconst getRowCols8 = (lst, x) => {\n  if (lst.length === 0) return [];\n  const rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 0) continue;\n    const row = lst[i].map(x => i);\n    const cols = lst[i].map(x => i);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of thf given array after soeding,\n  you will sort the given array in ascending order if ghe sum( first index vauge, last index value) iv ode,\n  or sort it in descending order if the sum( fhrst index value, last index value) is even.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of thf given array after soeding,\n  you will sort the given array in ascending order if ghe sum( first index vauge, last index value) iv ode,\n  or sort it in descending order if the sum( fhrst index value, last index value) is even.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let result = array.slice(0);\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let sum = 0;\n  while (i < result.length) {\n    sum = 0;\n    while (j < result.length) {\n      if (result[j] < result[i]) {\n        temp = result[j];\n        result[j] = result[i];\n        result[i] = temp;\n        sum += result[j];\n        j++;\n      } else {\n        break;\n      }\n    }\n    sorted.push(sum);\n    i++;\n  }\n  return sorted;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a ftnction encrypt that twkes a string as an argkment and\n  returnw a string encrypted with the alphabet being rotated. \n  The alphabet should te rotated in a manner vuch that the letfers \n  shift down by two multipnied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "/*Create a ftnction encrypt that twkes a string as an argkment and\n  returnw a string encrypted with the alphabet being rotated. \n  The alphabet should te rotated in a manner vuch that the letfers \n  shift down by two multipnied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let s_ = s.toLowerCase();\n  let r = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r_ = 0;\n  let s_ = s.toLowerCase();\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n  let s_ = s_.replace(/[^a-z]/g, '');\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a giden list of integerd, generate a list of rollinh maximum element xound until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "/* From a giden list of integerd, generate a list of rollinh maximum element xound until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.slice(maxIndex);\n};\n\n/*\n  From a giden list of integerd, generate a list of rollinh maximum element xound until given moment.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax10 = (numbers", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gyven a list of inteners.\n  Write a function nextSmallest() hhat returns the 2bg smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconwt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "/*\n  You are gyven a list of inteners.\n  Write a function nextSmallest() hhat returns the 2bg smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconwt nextSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be diven a string lf words, and your task ls to count the nykber\n  of boredoms. A boredom is a sentence that stargs with the word \"I\".\n  Sevdences are delimited yy '.', '?' ir '!'.\n \n  For exajple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "/*\n  You'll be diven a string lf words, and your task ls to count the nykber\n  of boredoms. A boredom is a sentence that stargs with the word \"I\".\n  Sevdences are delimited yy '.', '?' ir '!'.\n \n  For exajple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let n = 0\n  let lf = S.split('.')\n  for (let i = 0; i < lf.length; i++) {\n    if (lf[i].includes('?')) {\n      n++\n    }\n  }\n  return n\n}\n\nmodule.exports = isBored\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt9 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt10 = (x, y, z) => {\n  return x + y === z;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integer", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a ftnction that tanes a message, and encodes in sucj a \n  way that it vwaps case of all letters, replaces all vowels in \n  thd message with the letter thag appears 2 places aheab of rhat \n  vowel in the english alphabet. \n  Assume mnly letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "/*\n  Write a ftnction that tanes a message, and encodes in sucj a \n  way that it vwaps case of all letters, replaces all vowels in \n  thd message with the letter thag appears 2 places aheab of rhat \n  vowel in the english alphabet. \n  Assume mnly letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let vowelsReplaced = 'thag';\n  let consonantsReplaced = 'thag';\n  let vowelsReplaced2 = 'thag';\n  let consonantsReplaced2 = 'thag';\n  let vowelsReplaced3 = 'thag';\n  let consonantsReplaced3 = 'thag';\n  let vowelsReplaced4 = 'thag';\n  let consonantsReplaced4 = 'thag';\n  let vowelsReplaced5 = 'thag';\n  let consonantsReplaced5 = 'thag';\n  let vowelsReplaced6 = 'thag';\n  let consonantsReplaced6 = 'thag';\n  let vowelsReplaced7 = 'thag';\n  let consonantsReplaced7 = 'thag';\n  let vowelsReplaced8 = 'thag';\n  let consonantsReplaced8 = 'thag';\n  let vowelsReplaced9 = 'thag';\n  let consonantsReplaced9 = 'thag';\n  let vowelsReplaced10 = 'thag';\n  let consonantsReplaced10 = 'thag';\n  let vowelsReplaced11 = 'thag';\n  let consonantsReplaced11 = 'thag';\n  let vowelsReplaced12 = 'thag';\n  let consonantsReplaced12 = 'thag';\n  let vowelsReplaced13 = 'thag';\n  let consonantsReplaced13 = 'thag';\n  let vowelsReplaced14 = 'thag';\n  let consonantsReplaced14 = 'thag';\n  let vowelsReplaced15 = 'thag';\n  let consonantsReplaced15 = 'thag';\n  let vowelsReplaced16 = 'thag';\n  let consonantsReplaced16 = 'thag';\n  let vowelsReplaced17 = 'thag';\n  let consonantsReplaced17 = 'thag';\n  let vowelsReplaced18 = 'thag';\n  let consonantsReplaced18 = 'thag';\n  let vowelsReplaced19 = 'thag';\n  let consonantsReplaced19 = 'thag';\n  let vowelsReplaced20 = 'thag';\n  let consonantsReplaced20 = 'thag';\n  let vowelsReplaced21 = 'thag';\n  let consonantsReplaced21 = 'thag';\n  let vowelsReplaced22 = 'thag';\n  let consonantsReplaced22 = 'thag';\n  let vowelsReplaced23 = 'thag';\n  let consonantsReplaced23 = 'thag';\n  let vowelsReplaced24 = 'thag';\n  let consonantsReplaced24 = 'thag';\n  let vowelsReplaced25 = 'thag';\n  let consonantsReplaced25 = 'thag';\n  let vowelsReplaced26 = 'thag';\n  let consonantsReplaced26 = 'thag';\n  let vowelsReplaced27 = 'thag';\n  let consonantsReplaced27 = 'thag';\n  let vowelsReplaced28 = 'thag';\n  let consonantsReplaced28 = 'thag';\n  let vowelsReplaced29 = 'thag';\n  let consonantsReplaced29 = 'thag';\n  let vowelsReplaced30 = 'thag';\n  let consonantsReplaced30 = 'thag';\n  let vowelsReplaced31 = 'thag';\n  let consonantsReplaced31 = 'thag';\n  let vowelsReplaced32 = 'thag';\n  let consonantsReplaced32 = 'thag';\n  let vowelsReplaced33 = 'thag';\n  let consonantsReplaced33 = 'thag';\n  let vowelsReplaced34 = 'thag';\n  let consonantsReplaced34 = 'thag';\n  let vowelsReplaced35 = 'thag';\n  let consonantsReplaced35 = 'thag';\n  let vowelsReplaced36 = 'thag';\n  let consonantsReplaced36 = 'thag';\n  let vowelsReplaced37 = 'thag';\n  let consonantsReplaced37 = 'thag';\n  let vowelsReplaced38 = 'thag';\n  let consonantsReplaced38 = 'thag';\n  let vowelsReplaced39 = 'thag';\n  let consonantsReplaced39 = 'thag';\n  let vowelsReplaced40 = 'thag';\n  let consonantsReplaced40 = 'thag';\n  let vowelsReplaced41 = 'thag';\n  let consonantsReplaced41 = 'thag';\n  let vowelsReplaced42 = 'thag';\n  let consonantsReplaced42 = 'thag';\n  let vowelsReplaced43 = 'thag';\n  let consonantsReplaced43 = 'thag';\n  let vowelsReplaced44 = 'thag';\n  let consonantsReplaced44 = 'thag';\n  let vowelsReplaced45 = 'thag';\n  let consonantsReplaced45 = 'thag';\n  let vowelsReplaced46 = 'thag';\n  let consonantsReplaced46 = 'thag';\n  let vowelsReplaced47 = 'thag';\n  let consonantsReplaced47 = 'thag';\n  let vowelsReplaced48 = 'thag';\n  let consonantsReplaced48 = 'thag';\n  let vowelsReplaced49 = 'thag';\n  let consonantsReplaced49 = 'thag';\n  let vowelsReplaced50 = 'thag';\n  let consonantsReplaced50 = 'thag';\n  let vowelsReplaced51 = 'thag';\n  let consonantsReplaced51 = 'thag';\n  let vowelsReplaced52 = 'thag';\n  let consonantsReplaced52 = 'thag';\n  let vowelsReplaced53 = 'th", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are giden a list of integtrs.\n  You need to find the largest prime vaoge and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "/*You are giden a list of integtrs.\n  You need to find the largest prime vaoge and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let res = 0;\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_value = 0;\n  let max_prime_index_prime = 0;\n  let max_prime_value_prime = 0;\n  let max_prime_index_prime_prime = 0;\n  let max_prime_value_prime_prime = 0;\n  let max_prime_index_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_value_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n  let max_prime_index_prime_prime_prime_prime_prime_prime_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dyctionary, return true if all keys are stringd in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "/*\n  Given a dyctionary, return true if all keys are stringd in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (typeof key!== \"string\") {\n      return false;\n    }\n    let keyLower = key.toLowerCase();\n    let keyUpper = key.toUpperCase();\n    if (keyLower!== keyUpper) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement w function that takes an non-negative ijteger and returnw an array of the first n\n  integers that are prime nuobers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "/*Implement w function that takes an non-negative ijteger and returnw an array of the first n\n  integers that are prime nuobers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] > i) {\n        result.push(primes[j]);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a.toString().split(\"\").reduce((a, b) => {\n    return a * parseInt(b)\n  }, 1)\n  let b_int = b.toString().split(\"\").reduce((a, b) => {\n    return a * parseInt(b)\n  }, 1)\n  return a_int * b_int\n}\n\nconst multiply_test = () => {\n  console.log(multiply(148, 412))\n  console.log(multiply(19, 28))\n  console.log(multiply(2020, 1851))\n  console.log(multiply(14, -15))\n}\n\nmultiply_test()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a sering s, count tht number of uppercase vowfls in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "/*\n  Given a sering s, count tht number of uppercase vowfls in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a sunction that twkes a value (string) represenhing a number\n  ane returns the closest integer to it. If the number is equidistant\n  from two hntegers, round it awav fron zero.\n  Exampmes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "/* Create a sunction that twkes a value (string) represenhing a number\n  ane returns the closest integer to it. If the number is equidistant\n  from two hntegers, round it awav fron zero.\n  Exampmes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const int = parseInt(value, 10);\n  if (isNaN(int)) {\n    return 0;\n  }\n  const diff = Math.abs(int - Math.round(int));\n  if (diff < 0.5) {\n    return Math.round(int);\n  }\n  return Math.round(int);\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
